'use strict';

var obsidian = require('obsidian');
var path$1 = require('path');
var os = require('os');
var electron = require('electron');
var util = require('util');
var fs = require('fs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path$1);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var bail_1 = bail;

function bail(err) {
  if (err) {
    throw err
  }
}

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

var isBuffer = function isBuffer (obj) {
  return obj != null && obj.constructor != null &&
    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
};

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var defineProperty = Object.defineProperty;
var gOPD = Object.getOwnPropertyDescriptor;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) { /**/ }

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
var setProperty = function setProperty(target, options) {
	if (defineProperty && options.name === '__proto__') {
		defineProperty(target, options.name, {
			enumerable: true,
			configurable: true,
			value: options.newValue,
			writable: true
		});
	} else {
		target[options.name] = options.newValue;
	}
};

// Return undefined instead of __proto__ if '__proto__' is not an own property
var getProperty = function getProperty(obj, name) {
	if (name === '__proto__') {
		if (!hasOwn.call(obj, name)) {
			return void 0;
		} else if (gOPD) {
			// In early versions of node, obj['__proto__'] is buggy when obj has
			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
			return gOPD(obj, name).value;
		}
	}

	return obj[name];
};

var extend = function extend() {
	var options, name, src, copy, copyIsArray, clone;
	var target = arguments[0];
	var i = 1;
	var length = arguments.length;
	var deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}
	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = getProperty(target, name);
				copy = getProperty(options, name);

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						setProperty(target, { name: name, newValue: copy });
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};

var isPlainObj = value => {
	if (Object.prototype.toString.call(value) !== '[object Object]') {
		return false;
	}

	const prototype = Object.getPrototypeOf(value);
	return prototype === null || prototype === Object.prototype;
};

var slice = [].slice;

var wrap_1 = wrap;

// Wrap `fn`.
// Can be sync or async; return a promise, receive a completion handler, return
// new values and errors.
function wrap(fn, callback) {
  var invoked;

  return wrapped

  function wrapped() {
    var params = slice.call(arguments, 0);
    var callback = fn.length > params.length;
    var result;

    if (callback) {
      params.push(done);
    }

    try {
      result = fn.apply(null, params);
    } catch (error) {
      // Well, this is quite the pickle.
      // `fn` received a callback and invoked it (thus continuing the pipeline),
      // but later also threw an error.
      // We’re not about to restart the pipeline again, so the only thing left
      // to do is to throw the thing instead.
      if (callback && invoked) {
        throw error
      }

      return done(error)
    }

    if (!callback) {
      if (result && typeof result.then === 'function') {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }

  // Invoke `next`, only once.
  function done() {
    if (!invoked) {
      invoked = true;

      callback.apply(null, arguments);
    }
  }

  // Invoke `done` with one value.
  // Tracks if an error is passed, too.
  function then(value) {
    done(null, value);
  }
}

var trough_1 = trough;

trough.wrap = wrap_1;

var slice$1 = [].slice;

// Create new middleware.
function trough() {
  var fns = [];
  var middleware = {};

  middleware.run = run;
  middleware.use = use;

  return middleware

  // Run `fns`.  Last argument must be a completion handler.
  function run() {
    var index = -1;
    var input = slice$1.call(arguments, 0, -1);
    var done = arguments[arguments.length - 1];

    if (typeof done !== 'function') {
      throw new Error('Expected function as last argument, not ' + done)
    }

    next.apply(null, [null].concat(input));

    // Run the next `fn`, if any.
    function next(err) {
      var fn = fns[++index];
      var params = slice$1.call(arguments, 0);
      var values = params.slice(1);
      var length = input.length;
      var pos = -1;

      if (err) {
        done(err);
        return
      }

      // Copy non-nully input into values.
      while (++pos < length) {
        if (values[pos] === null || values[pos] === undefined) {
          values[pos] = input[pos];
        }
      }

      input = values;

      // Next or done.
      if (fn) {
        wrap_1(fn, next).apply(null, input);
      } else {
        done.apply(null, [null].concat(input));
      }
    }
  }

  // Add `fn` to the list.
  function use(fn) {
    if (typeof fn !== 'function') {
      throw new Error('Expected `fn` to be a function, not ' + fn)
    }

    fns.push(fn);

    return middleware
  }
}

var own = {}.hasOwnProperty;

var unistUtilStringifyPosition = stringify;

function stringify(value) {
  // Nothing.
  if (!value || typeof value !== 'object') {
    return ''
  }

  // Node.
  if (own.call(value, 'position') || own.call(value, 'type')) {
    return position(value.position)
  }

  // Position.
  if (own.call(value, 'start') || own.call(value, 'end')) {
    return position(value)
  }

  // Point.
  if (own.call(value, 'line') || own.call(value, 'column')) {
    return point(value)
  }

  // ?
  return ''
}

function point(point) {
  if (!point || typeof point !== 'object') {
    point = {};
  }

  return index(point.line) + ':' + index(point.column)
}

function position(pos) {
  if (!pos || typeof pos !== 'object') {
    pos = {};
  }

  return point(pos.start) + '-' + point(pos.end)
}

function index(value) {
  return value && typeof value === 'number' ? value : 1
}

var vfileMessage = VMessage;

// Inherit from `Error#`.
function VMessagePrototype() {}
VMessagePrototype.prototype = Error.prototype;
VMessage.prototype = new VMessagePrototype();

// Message properties.
var proto = VMessage.prototype;

proto.file = '';
proto.name = '';
proto.reason = '';
proto.message = '';
proto.stack = '';
proto.fatal = null;
proto.column = null;
proto.line = null;

// Construct a new VMessage.
//
// Note: We cannot invoke `Error` on the created context, as that adds readonly
// `line` and `column` attributes on Safari 9, thus throwing and failing the
// data.
function VMessage(reason, position, origin) {
  var parts;
  var range;
  var location;

  if (typeof position === 'string') {
    origin = position;
    position = null;
  }

  parts = parseOrigin(origin);
  range = unistUtilStringifyPosition(position) || '1:1';

  location = {
    start: {line: null, column: null},
    end: {line: null, column: null}
  };

  // Node.
  if (position && position.position) {
    position = position.position;
  }

  if (position) {
    // Position.
    if (position.start) {
      location = position;
      position = position.start;
    } else {
      // Point.
      location.start = position;
    }
  }

  if (reason.stack) {
    this.stack = reason.stack;
    reason = reason.message;
  }

  this.message = reason;
  this.name = range;
  this.reason = reason;
  this.line = position ? position.line : null;
  this.column = position ? position.column : null;
  this.location = location;
  this.source = parts[0];
  this.ruleId = parts[1];
}

function parseOrigin(origin) {
  var result = [null, null];
  var index;

  if (typeof origin === 'string') {
    index = origin.indexOf(':');

    if (index === -1) {
      result[1] = origin;
    } else {
      result[0] = origin.slice(0, index);
      result[1] = origin.slice(index + 1);
    }
  }

  return result
}

var minpath = path__default['default'];

var minproc = process;

var core = VFile;

var own$1 = {}.hasOwnProperty;

// Order of setting (least specific to most), we need this because otherwise
// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
// stem can be set.
var order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

VFile.prototype.toString = toString;

// Access full path (`~/index.min.js`).
Object.defineProperty(VFile.prototype, 'path', {get: getPath, set: setPath});

// Access parent path (`~`).
Object.defineProperty(VFile.prototype, 'dirname', {
  get: getDirname,
  set: setDirname
});

// Access basename (`index.min.js`).
Object.defineProperty(VFile.prototype, 'basename', {
  get: getBasename,
  set: setBasename
});

// Access extname (`.js`).
Object.defineProperty(VFile.prototype, 'extname', {
  get: getExtname,
  set: setExtname
});

// Access stem (`index.min`).
Object.defineProperty(VFile.prototype, 'stem', {get: getStem, set: setStem});

// Construct a new file.
function VFile(options) {
  var prop;
  var index;

  if (!options) {
    options = {};
  } else if (typeof options === 'string' || isBuffer(options)) {
    options = {contents: options};
  } else if ('message' in options && 'messages' in options) {
    return options
  }

  if (!(this instanceof VFile)) {
    return new VFile(options)
  }

  this.data = {};
  this.messages = [];
  this.history = [];
  this.cwd = minproc.cwd();

  // Set path related properties in the correct order.
  index = -1;

  while (++index < order.length) {
    prop = order[index];

    if (own$1.call(options, prop)) {
      this[prop] = options[prop];
    }
  }

  // Set non-path related properties.
  for (prop in options) {
    if (order.indexOf(prop) < 0) {
      this[prop] = options[prop];
    }
  }
}

function getPath() {
  return this.history[this.history.length - 1]
}

function setPath(path) {
  assertNonEmpty(path, 'path');

  if (this.path !== path) {
    this.history.push(path);
  }
}

function getDirname() {
  return typeof this.path === 'string' ? minpath.dirname(this.path) : undefined
}

function setDirname(dirname) {
  assertPath(this.path, 'dirname');
  this.path = minpath.join(dirname || '', this.basename);
}

function getBasename() {
  return typeof this.path === 'string' ? minpath.basename(this.path) : undefined
}

function setBasename(basename) {
  assertNonEmpty(basename, 'basename');
  assertPart(basename, 'basename');
  this.path = minpath.join(this.dirname || '', basename);
}

function getExtname() {
  return typeof this.path === 'string' ? minpath.extname(this.path) : undefined
}

function setExtname(extname) {
  assertPart(extname, 'extname');
  assertPath(this.path, 'extname');

  if (extname) {
    if (extname.charCodeAt(0) !== 46 /* `.` */) {
      throw new Error('`extname` must start with `.`')
    }

    if (extname.indexOf('.', 1) > -1) {
      throw new Error('`extname` cannot contain multiple dots')
    }
  }

  this.path = minpath.join(this.dirname, this.stem + (extname || ''));
}

function getStem() {
  return typeof this.path === 'string'
    ? minpath.basename(this.path, this.extname)
    : undefined
}

function setStem(stem) {
  assertNonEmpty(stem, 'stem');
  assertPart(stem, 'stem');
  this.path = minpath.join(this.dirname || '', stem + (this.extname || ''));
}

// Get the value of the file.
function toString(encoding) {
  return (this.contents || '').toString(encoding)
}

// Assert that `part` is not a path (i.e., does not contain `p.sep`).
function assertPart(part, name) {
  if (part && part.indexOf(minpath.sep) > -1) {
    throw new Error(
      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'
    )
  }
}

// Assert that `part` is not empty.
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty')
  }
}

// Assert `path` exists.
function assertPath(path, name) {
  if (!path) {
    throw new Error('Setting `' + name + '` requires `path` to be set too')
  }
}

var lib = core;

core.prototype.message = message;
core.prototype.info = info;
core.prototype.fail = fail;

// Create a message with `reason` at `position`.
// When an error is passed in as `reason`, copies the stack.
function message(reason, position, origin) {
  var message = new vfileMessage(reason, position, origin);

  if (this.path) {
    message.name = this.path + ':' + message.name;
    message.file = this.path;
  }

  message.fatal = false;

  this.messages.push(message);

  return message
}

// Fail: creates a vmessage, associates it with the file, and throws it.
function fail() {
  var message = this.message.apply(this, arguments);

  message.fatal = true;

  throw message
}

// Info: creates a vmessage, associates it with the file, and marks the fatality
// as null.
function info() {
  var message = this.message.apply(this, arguments);

  message.fatal = null;

  return message
}

var vfile = lib;

// Expose a frozen processor.
var unified_1 = unified().freeze();

var slice$2 = [].slice;
var own$2 = {}.hasOwnProperty;

// Process pipeline.
var pipeline = trough_1()
  .use(pipelineParse)
  .use(pipelineRun)
  .use(pipelineStringify);

function pipelineParse(p, ctx) {
  ctx.tree = p.parse(ctx.file);
}

function pipelineRun(p, ctx, next) {
  p.run(ctx.tree, ctx.file, done);

  function done(err, tree, file) {
    if (err) {
      next(err);
    } else {
      ctx.tree = tree;
      ctx.file = file;
      next();
    }
  }
}

function pipelineStringify(p, ctx) {
  var result = p.stringify(ctx.tree, ctx.file);
  var file = ctx.file;

  if (result === undefined || result === null) ; else if (typeof result === 'string' || isBuffer(result)) {
    file.contents = result;
  } else {
    file.result = result;
  }
}

// Function to create the first processor.
function unified() {
  var attachers = [];
  var transformers = trough_1();
  var namespace = {};
  var frozen = false;
  var freezeIndex = -1;

  // Data management.
  processor.data = data;

  // Lock.
  processor.freeze = freeze;

  // Plugins.
  processor.attachers = attachers;
  processor.use = use;

  // API.
  processor.parse = parse;
  processor.stringify = stringify;
  processor.run = run;
  processor.runSync = runSync;
  processor.process = process;
  processor.processSync = processSync;

  // Expose.
  return processor

  // Create a new processor based on the processor in the current scope.
  function processor() {
    var destination = unified();
    var length = attachers.length;
    var index = -1;

    while (++index < length) {
      destination.use.apply(null, attachers[index]);
    }

    destination.data(extend(true, {}, namespace));

    return destination
  }

  // Freeze: used to signal a processor that has finished configuration.
  //
  // For example, take unified itself: it’s frozen.
  // Plugins should not be added to it.
  // Rather, it should be extended, by invoking it, before modifying it.
  //
  // In essence, always invoke this when exporting a processor.
  function freeze() {
    var values;
    var plugin;
    var options;
    var transformer;

    if (frozen) {
      return processor
    }

    while (++freezeIndex < attachers.length) {
      values = attachers[freezeIndex];
      plugin = values[0];
      options = values[1];
      transformer = null;

      if (options === false) {
        continue
      }

      if (options === true) {
        values[1] = undefined;
      }

      transformer = plugin.apply(processor, values.slice(1));

      if (typeof transformer === 'function') {
        transformers.use(transformer);
      }
    }

    frozen = true;
    freezeIndex = Infinity;

    return processor
  }

  // Data management.
  // Getter / setter for processor-specific informtion.
  function data(key, value) {
    if (typeof key === 'string') {
      // Set `key`.
      if (arguments.length === 2) {
        assertUnfrozen('data', frozen);

        namespace[key] = value;

        return processor
      }

      // Get `key`.
      return (own$2.call(namespace, key) && namespace[key]) || null
    }

    // Set space.
    if (key) {
      assertUnfrozen('data', frozen);
      namespace = key;
      return processor
    }

    // Get space.
    return namespace
  }

  // Plugin management.
  //
  // Pass it:
  // *   an attacher and options,
  // *   a preset,
  // *   a list of presets, attachers, and arguments (list of attachers and
  //     options).
  function use(value) {
    var settings;

    assertUnfrozen('use', frozen);

    if (value === null || value === undefined) ; else if (typeof value === 'function') {
      addPlugin.apply(null, arguments);
    } else if (typeof value === 'object') {
      if ('length' in value) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new Error('Expected usable value, not `' + value + '`')
    }

    if (settings) {
      namespace.settings = extend(namespace.settings || {}, settings);
    }

    return processor

    function addPreset(result) {
      addList(result.plugins);

      if (result.settings) {
        settings = extend(settings || {}, result.settings);
      }
    }

    function add(value) {
      if (typeof value === 'function') {
        addPlugin(value);
      } else if (typeof value === 'object') {
        if ('length' in value) {
          addPlugin.apply(null, value);
        } else {
          addPreset(value);
        }
      } else {
        throw new Error('Expected usable value, not `' + value + '`')
      }
    }

    function addList(plugins) {
      var length;
      var index;

      if (plugins === null || plugins === undefined) ; else if (typeof plugins === 'object' && 'length' in plugins) {
        length = plugins.length;
        index = -1;

        while (++index < length) {
          add(plugins[index]);
        }
      } else {
        throw new Error('Expected a list of plugins, not `' + plugins + '`')
      }
    }

    function addPlugin(plugin, value) {
      var entry = find(plugin);

      if (entry) {
        if (isPlainObj(entry[1]) && isPlainObj(value)) {
          value = extend(entry[1], value);
        }

        entry[1] = value;
      } else {
        attachers.push(slice$2.call(arguments));
      }
    }
  }

  function find(plugin) {
    var length = attachers.length;
    var index = -1;
    var entry;

    while (++index < length) {
      entry = attachers[index];

      if (entry[0] === plugin) {
        return entry
      }
    }
  }

  // Parse a file (in string or vfile representation) into a unist node using
  // the `Parser` on the processor.
  function parse(doc) {
    var file = vfile(doc);
    var Parser;

    freeze();
    Parser = processor.Parser;
    assertParser('parse', Parser);

    if (newable(Parser, 'parse')) {
      return new Parser(String(file), file).parse()
    }

    return Parser(String(file), file) // eslint-disable-line new-cap
  }

  // Run transforms on a unist node representation of a file (in string or
  // vfile representation), async.
  function run(node, file, cb) {
    assertNode(node);
    freeze();

    if (!cb && typeof file === 'function') {
      cb = file;
      file = null;
    }

    if (!cb) {
      return new Promise(executor)
    }

    executor(null, cb);

    function executor(resolve, reject) {
      transformers.run(node, vfile(file), done);

      function done(err, tree, file) {
        tree = tree || node;
        if (err) {
          reject(err);
        } else if (resolve) {
          resolve(tree);
        } else {
          cb(null, tree, file);
        }
      }
    }
  }

  // Run transforms on a unist node representation of a file (in string or
  // vfile representation), sync.
  function runSync(node, file) {
    var complete = false;
    var result;

    run(node, file, done);

    assertDone('runSync', 'run', complete);

    return result

    function done(err, tree) {
      complete = true;
      bail_1(err);
      result = tree;
    }
  }

  // Stringify a unist node representation of a file (in string or vfile
  // representation) into a string using the `Compiler` on the processor.
  function stringify(node, doc) {
    var file = vfile(doc);
    var Compiler;

    freeze();
    Compiler = processor.Compiler;
    assertCompiler('stringify', Compiler);
    assertNode(node);

    if (newable(Compiler, 'compile')) {
      return new Compiler(node, file).compile()
    }

    return Compiler(node, file) // eslint-disable-line new-cap
  }

  // Parse a file (in string or vfile representation) into a unist node using
  // the `Parser` on the processor, then run transforms on that node, and
  // compile the resulting node using the `Compiler` on the processor, and
  // store that result on the vfile.
  function process(doc, cb) {
    freeze();
    assertParser('process', processor.Parser);
    assertCompiler('process', processor.Compiler);

    if (!cb) {
      return new Promise(executor)
    }

    executor(null, cb);

    function executor(resolve, reject) {
      var file = vfile(doc);

      pipeline.run(processor, {file: file}, done);

      function done(err) {
        if (err) {
          reject(err);
        } else if (resolve) {
          resolve(file);
        } else {
          cb(null, file);
        }
      }
    }
  }

  // Process the given document (in string or vfile representation), sync.
  function processSync(doc) {
    var complete = false;
    var file;

    freeze();
    assertParser('processSync', processor.Parser);
    assertCompiler('processSync', processor.Compiler);
    file = vfile(doc);

    process(file, done);

    assertDone('processSync', 'process', complete);

    return file

    function done(err) {
      complete = true;
      bail_1(err);
    }
  }
}

// Check if `value` is a constructor.
function newable(value, name) {
  return (
    typeof value === 'function' &&
    value.prototype &&
    // A function with keys in its prototype is probably a constructor.
    // Classes’ prototype methods are not enumerable, so we check if some value
    // exists in the prototype.
    (keys(value.prototype) || name in value.prototype)
  )
}

// Check if `value` is an object with keys.
function keys(value) {
  var key;
  for (key in value) {
    return true
  }

  return false
}

// Assert a parser is available.
function assertParser(name, Parser) {
  if (typeof Parser !== 'function') {
    throw new Error('Cannot `' + name + '` without `Parser`')
  }
}

// Assert a compiler is available.
function assertCompiler(name, Compiler) {
  if (typeof Compiler !== 'function') {
    throw new Error('Cannot `' + name + '` without `Compiler`')
  }
}

// Assert the processor is not frozen.
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      'Cannot invoke `' +
        name +
        '` on a frozen processor.\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.'
    )
  }
}

// Assert `node` is a unist node.
function assertNode(node) {
  if (!node || typeof node.type !== 'string') {
    throw new Error('Expected node, got `' + node + '`')
  }
}

// Assert that `complete` is `true`.
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      '`' + name + '` finished async. Use `' + asyncName + '` instead'
    )
  }
}

var mdastUtilToString = toString$1;

// Get the text content of a node.
// Prefer the node’s plain-text fields, otherwise serialize its children,
// and if the given value is an array, serialize the nodes in it.
function toString$1(node) {
  return (
    (node &&
      (node.value ||
        node.alt ||
        node.title ||
        ('children' in node && all(node.children)) ||
        ('length' in node && all(node)))) ||
    ''
  )
}

function all(values) {
  var result = [];
  var index = -1;

  while (++index < values.length) {
    result[index] = toString$1(values[index]);
  }

  return result.join('')
}

var assign = Object.assign;

var hasOwnProperty_1 = {}.hasOwnProperty;

var normalizeIdentifier_1 = normalizeIdentifier;

function normalizeIdentifier(value) {
  return (
    value
      // Collapse Markdown whitespace.
      .replace(/[\t\n\r ]+/g, ' ')
      // Trim.
      .replace(/^ | $/g, '')
      // Some characters are considered “uppercase”, but if their lowercase
      // counterpart is uppercased will result in a different uppercase
      // character.
      // Hence, to get that form, we perform both lower- and uppercase.
      // Upper case makes sure keys will not interact with default prototypal
      // methods: no object method is uppercase.
      .toLowerCase()
      .toUpperCase()
  )
}

var fromCharCode = String.fromCharCode;

var safeFromInt_1 = safeFromInt;



function safeFromInt(value, base) {
  var code = parseInt(value, base);

  if (
    // C0 except for HT, LF, FF, CR, space
    code < 9 ||
    code === 11 ||
    (code > 13 && code < 32) ||
    // Control character (DEL) of the basic block and C1 controls.
    (code > 126 && code < 160) ||
    // Lone high surrogates and low surrogates.
    (code > 55295 && code < 57344) ||
    // Noncharacters.
    (code > 64975 && code < 65008) ||
    (code & 65535) === 65535 ||
    (code & 65535) === 65534 ||
    // Out of range
    code > 1114111
  ) {
    return '\uFFFD'
  }

  return fromCharCode(code)
}

var markdownLineEnding_1 = markdownLineEnding;

function markdownLineEnding(code) {
  return code < -2
}

var markdownSpace_1 = markdownSpace;

function markdownSpace(code) {
  return code === -2 || code === -1 || code === 32
}

var factorySpace = createSpace;



function createSpace(effects, ok, type, max) {
  var limit = max ? max - 1 : Infinity;
  var size;

  return start

  function start(code) {
    if (markdownSpace_1(code)) {
      effects.enter(type);
      size = 0;
      return prefix(code)
    }

    return ok(code)
  }

  function prefix(code) {
    if (markdownSpace_1(code) && size++ < limit) {
      effects.consume(code);
      return prefix
    }

    effects.exit(type);
    return ok(code)
  }
}

var tokenize = initializeContent;





function initializeContent(effects) {
  var contentStart = effects.attempt(
    this.parser.constructs.contentInitial,
    afterContentStartConstruct,
    paragraphInitial
  );

  var previous;

  return contentStart

  function afterContentStartConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return
    }

    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, contentStart, 'linePrefix')
  }

  function paragraphInitial(code) {
    effects.enter('paragraph');
    return lineStart(code)
  }

  function lineStart(code) {
    var token = effects.enter('chunkText', {
      contentType: 'text',
      previous: previous
    });

    if (previous) {
      previous.next = token;
    }

    previous = token;

    return data(code)
  }

  function data(code) {
    if (code === null) {
      effects.exit('chunkText');
      effects.exit('paragraph');
      effects.consume(code);
      return
    }

    if (markdownLineEnding_1(code)) {
      effects.consume(code);
      effects.exit('chunkText');
      return lineStart
    }

    // Data.
    effects.consume(code);
    return data
  }
}

var content = {
	tokenize: tokenize
};

var tokenize$1 = tokenizeBlankLine;
var partial = true;





function tokenizeBlankLine(effects, ok, nok) {
  return factorySpace(effects, afterWhitespace, 'linePrefix')

  function afterWhitespace(code) {
    return code === null || markdownLineEnding_1(code) ? ok(code) : nok(code)
  }
}

var partialBlankLine = {
	tokenize: tokenize$1,
	partial: partial
};

var tokenize$2 = initializeDocument;






var container = {tokenize: tokenizeContainer};
var lazyFlow = {tokenize: tokenizeLazyFlow};

function initializeDocument(effects) {
  var self = this;
  var stack = [];
  var continued = 0;
  var inspectResult;
  var childFlow;
  var childToken;

  return start

  function start(code) {
    if (continued < stack.length) {
      self.containerState = stack[continued][1];
      return effects.attempt(
        stack[continued][0].continuation,
        documentContinue,
        documentContinued
      )(code)
    }

    return documentContinued(code)
  }

  function documentContinue(code) {
    continued++;
    return start(code)
  }

  function documentContinued(code) {
    // If we’re in a concrete construct (such as when expecting another line of
    // HTML, or we resulted in lazy content), we can immediately start flow.
    if (inspectResult && inspectResult.flowContinue) {
      return flowStart(code)
    }

    self.interrupt =
      childFlow &&
      childFlow.currentConstruct &&
      childFlow.currentConstruct.interruptible;
    self.containerState = {};
    return effects.attempt(container, containerContinue, flowStart)(code)
  }

  function containerContinue(code) {
    stack.push([self.currentConstruct, self.containerState]);
    self.containerState = undefined;
    return documentContinued(code)
  }

  function flowStart(code) {
    if (code === null) {
      exitContainers(0, true);
      effects.consume(code);
      return
    }

    childFlow = childFlow || self.parser.flow(self.now());

    effects.enter('chunkFlow', {
      contentType: 'flow',
      previous: childToken,
      _tokenizer: childFlow
    });

    return flowContinue(code)
  }

  function flowContinue(code) {
    if (code === null) {
      continueFlow(effects.exit('chunkFlow'));
      return flowStart(code)
    }

    if (markdownLineEnding_1(code)) {
      effects.consume(code);
      continueFlow(effects.exit('chunkFlow'));
      return effects.check(
        {tokenize: tokenizeInspect, partial: true},
        documentAfterPeek
      )
    }

    effects.consume(code);
    return flowContinue
  }

  function documentAfterPeek(code) {
    exitContainers(
      inspectResult.continued,
      inspectResult && inspectResult.flowEnd
    );

    continued = 0;
    return start(code)
  }

  function continueFlow(token) {
    if (childToken) childToken.next = token;
    childToken = token;
    childFlow.lazy = inspectResult && inspectResult.lazy;
    childFlow.defineSkip(token.start);
    childFlow.write(self.sliceStream(token));
  }

  function exitContainers(size, end) {
    var index = stack.length;

    // Close the flow.
    if (childFlow && end) {
      childFlow.write([null]);
      childToken = childFlow = undefined;
    }

    // Exit open containers.
    while (index-- > size) {
      self.containerState = stack[index][1];
      stack[index][0].exit.call(self, effects);
    }

    stack.length = size;
  }

  function tokenizeInspect(effects, ok) {
    var subcontinued = 0;

    inspectResult = {};

    return inspectStart

    function inspectStart(code) {
      if (subcontinued < stack.length) {
        self.containerState = stack[subcontinued][1];
        return effects.attempt(
          stack[subcontinued][0].continuation,
          inspectContinue,
          inspectLess
        )(code)
      }

      // If we’re continued but in a concrete flow, we can’t have more
      // containers.
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        inspectResult.flowContinue = true;
        return inspectDone(code)
      }

      self.interrupt =
        childFlow.currentConstruct && childFlow.currentConstruct.interruptible;
      self.containerState = {};
      return effects.attempt(container, inspectFlowEnd, inspectDone)(code)
    }

    function inspectContinue(code) {
      subcontinued++;
      return self.containerState._closeFlow
        ? inspectFlowEnd(code)
        : inspectStart(code)
    }

    function inspectLess(code) {
      if (childFlow.currentConstruct && childFlow.currentConstruct.lazy) {
        // Maybe another container?
        self.containerState = {};
        return effects.attempt(
          container,
          inspectFlowEnd,
          // Maybe flow, or a blank line?
          effects.attempt(
            lazyFlow,
            inspectFlowEnd,
            effects.check(partialBlankLine, inspectFlowEnd, inspectLazy)
          )
        )(code)
      }

      // Otherwise we’re interrupting.
      return inspectFlowEnd(code)
    }

    function inspectLazy(code) {
      // Act as if all containers are continued.
      subcontinued = stack.length;
      inspectResult.lazy = true;
      inspectResult.flowContinue = true;
      return inspectDone(code)
    }

    // We’re done with flow if we have more containers, or an interruption.
    function inspectFlowEnd(code) {
      inspectResult.flowEnd = true;
      return inspectDone(code)
    }

    function inspectDone(code) {
      inspectResult.continued = subcontinued;
      self.interrupt = self.containerState = undefined;
      return ok(code)
    }
  }
}

function tokenizeContainer(effects, ok, nok) {
  return factorySpace(
    effects,
    effects.attempt(this.parser.constructs.document, ok, nok),
    'linePrefix',
    4
  )
}

function tokenizeLazyFlow(effects, ok, nok) {
  return factorySpace(
    effects,
    effects.lazy(this.parser.constructs.flow, ok, nok),
    'linePrefix',
    4
  )
}

var document = {
	tokenize: tokenize$2
};

var chunkedSplice_1 = chunkedSplice;

var v8MaxSafeChunkSize = 10000;

// `Array#splice` takes all items to be inserted as individual argument which
// causes a stack overflow in V8 when trying to insert 100k items for instance.
function chunkedSplice(list, start, remove, items) {
  var end = list.length;
  var chunkStart = 0;
  var result;
  var parameters;

  // Make start between zero and `end` (included).
  if (start < 0) {
    start = -start > end ? 0 : end + start;
  } else {
    start = start > end ? end : start;
  }

  remove = remove > 0 ? remove : 0;

  // No need to chunk the items if there’s only a couple (10k) items.
  if (items.length < v8MaxSafeChunkSize) {
    parameters = Array.from(items);
    parameters.unshift(start, remove);
    return [].splice.apply(list, parameters)
  }

  // Delete `remove` items starting from `start`
  result = [].splice.apply(list, [start, remove]);

  // Insert the items in chunks to not cause stack overflows.
  while (chunkStart < items.length) {
    parameters = items.slice(chunkStart, chunkStart + v8MaxSafeChunkSize);
    parameters.unshift(start, 0)
    ;[].splice.apply(list, parameters);

    chunkStart += v8MaxSafeChunkSize;
    start += v8MaxSafeChunkSize;
  }

  return result
}

var shallow_1 = shallow;



function shallow(object) {
  return assign({}, object)
}

var subtokenize_1 = subtokenize;






function subtokenize(events) {
  var jumps = {};
  var index = -1;
  var event;
  var lineIndex;
  var otherIndex;
  var otherEvent;
  var parameters;
  var subevents;
  var more;

  while (++index < events.length) {
    while (index in jumps) {
      index = jumps[index];
    }

    event = events[index];

    // Add a hook for the GFM tasklist extension, which needs to know if text
    // is in the first content of a list item.
    if (
      index &&
      event[1].type === 'chunkFlow' &&
      events[index - 1][1].type === 'listItemPrefix'
    ) {
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;

      if (
        otherIndex < subevents.length &&
        subevents[otherIndex][1].type === 'lineEndingBlank'
      ) {
        otherIndex += 2;
      }

      if (
        otherIndex < subevents.length &&
        subevents[otherIndex][1].type === 'content'
      ) {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === 'content') {
            break
          }

          if (subevents[otherIndex][1].type === 'chunkText') {
            subevents[otherIndex][1].isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }

    // Enter.
    if (event[0] === 'enter') {
      if (event[1].contentType) {
        assign(jumps, subcontent(events, index));
        index = jumps[index];
        more = true;
      }
    }
    // Exit.
    else if (event[1]._container || event[1]._movePreviousLineEndings) {
      otherIndex = index;
      lineIndex = undefined;

      while (otherIndex--) {
        otherEvent = events[otherIndex];

        if (
          otherEvent[1].type === 'lineEnding' ||
          otherEvent[1].type === 'lineEndingBlank'
        ) {
          if (otherEvent[0] === 'enter') {
            if (lineIndex) {
              events[lineIndex][1].type = 'lineEndingBlank';
            }

            otherEvent[1].type = 'lineEnding';
            lineIndex = otherIndex;
          }
        } else {
          break
        }
      }

      if (lineIndex) {
        // Fix position.
        event[1].end = shallow_1(events[lineIndex][1].start);

        // Switch container exit w/ line endings.
        parameters = events.slice(lineIndex, index);
        parameters.unshift(event);
        chunkedSplice_1(events, lineIndex, index - lineIndex + 1, parameters);
      }
    }
  }

  return !more
}

function subcontent(events, eventIndex) {
  var token = events[eventIndex][1];
  var context = events[eventIndex][2];
  var startPosition = eventIndex - 1;
  var startPositions = [];
  var tokenizer =
    token._tokenizer || context.parser[token.contentType](token.start);
  var childEvents = tokenizer.events;
  var jumps = [];
  var gaps = {};
  var stream;
  var previous;
  var index;
  var entered;
  var end;
  var adjust;

  // Loop forward through the linked tokens to pass them in order to the
  // subtokenizer.
  while (token) {
    // Find the position of the event for this token.
    while (events[++startPosition][1] !== token) {
      // Empty.
    }

    startPositions.push(startPosition);

    if (!token._tokenizer) {
      stream = context.sliceStream(token);

      if (!token.next) {
        stream.push(null);
      }

      if (previous) {
        tokenizer.defineSkip(token.start);
      }

      if (token.isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }

      tokenizer.write(stream);

      if (token.isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = undefined;
      }
    }

    // Unravel the next token.
    previous = token;
    token = token.next;
  }

  // Now, loop back through all events (and linked tokens), to figure out which
  // parts belong where.
  token = previous;
  index = childEvents.length;

  while (index--) {
    // Make sure we’ve at least seen something (final eol is part of the last
    // token).
    if (childEvents[index][0] === 'enter') {
      entered = true;
    } else if (
      // Find a void token that includes a break.
      entered &&
      childEvents[index][1].type === childEvents[index - 1][1].type &&
      childEvents[index][1].start.line !== childEvents[index][1].end.line
    ) {
      add(childEvents.slice(index + 1, end));

      // Help GC.
      token._tokenizer = token.next = undefined;
      token = token.previous;
      end = index + 1;
    }
  }

  // Help GC.
  tokenizer.events = token._tokenizer = token.next = undefined;

  // Do head:
  add(childEvents.slice(0, end));

  index = -1;
  adjust = 0;

  while (++index < jumps.length) {
    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
    adjust += jumps[index][1] - jumps[index][0] - 1;
  }

  return gaps

  function add(slice) {
    var start = startPositions.pop();
    jumps.unshift([start, start + slice.length - 1]);
    chunkedSplice_1(events, start, 2, slice);
  }
}

var sizeChunks_1 = sizeChunks;

// Measure the number of character codes in chunks.
// Counts tabs based on their expanded size, and CR+LF as one character.
function sizeChunks(chunks) {
  var index = -1;
  var size = 0;

  while (++index < chunks.length) {
    size += typeof chunks[index] === 'string' ? chunks[index].length : 1;
  }

  return size
}

var prefixSize_1 = prefixSize;



function prefixSize(events, type) {
  var tail = events[events.length - 1];
  if (!tail || tail[1].type !== type) return 0
  return sizeChunks_1(tail[2].sliceStream(tail[1]))
}

var tokenize$3 = tokenizeContent;
var resolve = resolveContent;
var interruptible = true;
var lazy = true;







var lookaheadConstruct = {tokenize: tokenizeLookaheadConstruct, partial: true};

// Content is transparent: it’s parsed right now. That way, definitions are also
// parsed right now: before text in paragraphs (specifically, media) are parsed.
function resolveContent(events) {
  subtokenize_1(events);
  return events
}

function tokenizeContent(effects, ok) {
  var previous;

  return start

  function start(code) {
    effects.enter('content');
    previous = effects.enter('chunkContent', {
      contentType: 'content'
    });

    return data(code)
  }

  function data(code) {
    if (code === null) {
      return contentEnd(code)
    }

    if (markdownLineEnding_1(code)) {
      return effects.check(
        lookaheadConstruct,
        contentContinue,
        contentEnd
      )(code)
    }

    // Data.
    effects.consume(code);
    return data
  }

  function contentEnd(code) {
    effects.exit('chunkContent');
    effects.exit('content');
    return ok(code)
  }

  function contentContinue(code) {
    effects.consume(code);
    effects.exit('chunkContent');
    previous = previous.next = effects.enter('chunkContent', {
      contentType: 'content',
      previous: previous
    });

    return data
  }
}

function tokenizeLookaheadConstruct(effects, ok, nok) {
  var self = this;

  return startLookahead

  function startLookahead(code) {
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, prefixed, 'linePrefix')
  }

  function prefixed(code) {
    if (code === null || markdownLineEnding_1(code)) {
      return nok(code)
    }

    if (prefixSize_1(self.events, 'linePrefix') < 4) {
      return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
    }

    return ok(code)
  }
}

var content$1 = {
	tokenize: tokenize$3,
	resolve: resolve,
	interruptible: interruptible,
	lazy: lazy
};

var tokenize$4 = initializeFlow;







function initializeFlow(effects) {
  var self = this;
  var initial = effects.attempt(
    // Try to parse a blank line.
    partialBlankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(
      this.parser.constructs.flowInitial,
      afterConstruct,
      factorySpace(
        effects,
        effects.attempt(
          this.parser.constructs.flow,
          afterConstruct,
          effects.attempt(content$1, afterConstruct)
        ),
        'linePrefix'
      )
    )
  );

  return initial

  function atBlankEnding(code) {
    if (code === null) {
      effects.consume(code);
      return
    }

    effects.enter('lineEndingBlank');
    effects.consume(code);
    effects.exit('lineEndingBlank');
    self.currentConstruct = undefined;
    return initial
  }

  function afterConstruct(code) {
    if (code === null) {
      effects.consume(code);
      return
    }

    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    self.currentConstruct = undefined;
    return initial
  }
}

var flow = {
	tokenize: tokenize$4
};

var text_1 = initializeFactory('text');
var string = initializeFactory('string');
var resolver_1 = {resolveAll: resolver()};





function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: resolver(field === 'text' ? resolveAllLineSuffixes : undefined)
  }

  function initializeText(effects) {
    var self = this;
    var constructs = this.parser.constructs[field];
    var text = effects.attempt(constructs, start, notText);

    return start

    function start(code) {
      return atBreak(code) ? text(code) : notText(code)
    }

    function notText(code) {
      if (code === null) {
        effects.consume(code);
        return
      }

      effects.enter('data');
      effects.consume(code);
      return data
    }

    function data(code) {
      if (atBreak(code)) {
        effects.exit('data');
        return text(code)
      }

      // Data.
      effects.consume(code);
      return data
    }

    function atBreak(code) {
      var list = constructs[code];
      var index = -1;

      if (code === null) {
        return true
      }

      if (list) {
        while (++index < list.length) {
          if (
            !list[index].previous ||
            list[index].previous.call(self, self.previous)
          ) {
            return true
          }
        }
      }
    }
  }
}

function resolver(extraResolver) {
  return resolveAllText

  function resolveAllText(events, context) {
    var index = -1;
    var enter;

    // A rather boring computation (to merge adjacent `data` events) which
    // improves mm performance by 29%.
    while (++index <= events.length) {
      if (enter === undefined) {
        if (events[index] && events[index][1].type === 'data') {
          enter = index;
          index++;
        }
      } else if (!events[index] || events[index][1].type !== 'data') {
        // Don’t do anything if there is one data token.
        if (index !== enter + 2) {
          events[enter][1].end = events[index - 1][1].end;
          events.splice(enter + 2, index - enter - 2);
          index = enter + 2;
        }

        enter = undefined;
      }
    }

    return extraResolver ? extraResolver(events, context) : events
  }
}

// A rather ugly set of instructions which again looks at chunks in the input
// stream.
// The reason to do this here is that it is *much* faster to parse in reverse.
// And that we can’t hook into `null` to split the line suffix before an EOF.
// To do: figure out if we can make this into a clean utility, or even in core.
// As it will be useful for GFMs literal autolink extension (and maybe even
// tables?)
function resolveAllLineSuffixes(events, context) {
  var eventIndex = -1;
  var chunks;
  var data;
  var chunk;
  var index;
  var bufferIndex;
  var size;
  var tabs;
  var token;

  while (++eventIndex <= events.length) {
    if (
      (eventIndex === events.length ||
        events[eventIndex][1].type === 'lineEnding') &&
      events[eventIndex - 1][1].type === 'data'
    ) {
      data = events[eventIndex - 1][1];
      chunks = context.sliceStream(data);
      index = chunks.length;
      bufferIndex = -1;
      size = 0;
      tabs = undefined;

      while (index--) {
        chunk = chunks[index];

        if (typeof chunk === 'string') {
          bufferIndex = chunk.length;

          while (chunk.charCodeAt(bufferIndex - 1) === 32) {
            size++;
            bufferIndex--;
          }

          if (bufferIndex) break
          bufferIndex = -1;
        }
        // Number
        else if (chunk === -2) {
          tabs = true;
          size++;
        } else if (chunk === -1) ; else {
          // Replacement character, exit.
          index++;
          break
        }
      }

      if (size) {
        token = {
          type:
            eventIndex === events.length || tabs || size < 2
              ? 'lineSuffix'
              : 'hardBreakTrailing',

          start: {
            line: data.end.line,
            column: data.end.column - size,
            offset: data.end.offset - size,
            _index: data.start._index + index,
            _bufferIndex: index
              ? bufferIndex
              : data.start._bufferIndex + bufferIndex
          },

          end: shallow_1(data.end)
        };

        data.end = shallow_1(token.start);

        if (data.start.offset === data.end.offset) {
          assign(data, token);
        } else {
          events.splice(
            eventIndex,
            0,
            ['enter', token, context],
            ['exit', token, context]
          );

          eventIndex += 2;
        }
      }

      eventIndex++;
    }
  }

  return events
}

var text = {
	text: text_1,
	string: string,
	resolver: resolver_1
};

var markdownLineEndingOrSpace_1 = markdownLineEndingOrSpace;

function markdownLineEndingOrSpace(code) {
  return code < 0 || code === 32
}

// This module is generated by `script/`.
//
// CommonMark handles attention (emphasis, strong) markers based on what comes
// before or after them.
// One such difference is if those characters are Unicode punctuation.
// This script is generated from the Unicode data.
var unicodePunctuationRegex = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

var regexCheck_1 = regexCheck;



function regexCheck(regex) {
  return check
  function check(code) {
    return regex.test(fromCharCode(code))
  }
}

// Size note: removing ASCII from the regex and using `ascii-punctuation` here
// In fact adds to the bundle size.
var unicodePunctuation_1 = regexCheck_1(unicodePunctuationRegex);

var unicodeWhitespace = regexCheck_1(/\s/);

var classifyCharacter_1 = classifyCharacter;





// Classify whether a character is unicode whitespace, unicode punctuation, or
// anything else.
// Used for attention (emphasis, strong), whose sequences can open or close
// based on the class of surrounding characters.
function classifyCharacter(code) {
  if (
    code === null ||
    markdownLineEndingOrSpace_1(code) ||
    unicodeWhitespace(code)
  ) {
    return 1
  }

  if (unicodePunctuation_1(code)) {
    return 2
  }
}

var movePoint_1 = movePoint;

// Note! `move` only works inside lines! It’s not possible to move past other
// chunks (replacement characters, tabs, or line endings).
function movePoint(point, offset) {
  point.column += offset;
  point.offset += offset;
  point._bufferIndex += offset;
  return point
}

var resolveAll_1 = resolveAll;

function resolveAll(constructs, events, context) {
  var called = [];
  var index = -1;
  var resolve;

  while (++index < constructs.length) {
    resolve = constructs[index].resolveAll;

    if (resolve && called.indexOf(resolve) < 0) {
      events = resolve(events, context);
      called.push(resolve);
    }
  }

  return events
}

var tokenize$5 = tokenizeAttention;
var resolveAll_1$1 = resolveAllAttention;







// Take all events and resolve attention to emphasis or strong.
function resolveAllAttention(events, context) {
  var index = -1;
  var open;
  var group;
  var text;
  var openingSequence;
  var closingSequence;
  var use;
  var nextEvents;
  var offset;

  // Walk through all events.
  //
  // Note: performance of this is fine on an mb of normal markdown, but it’s
  // a bottleneck for malicious stuff.
  while (++index < events.length) {
    // Find a token that can close.
    if (
      events[index][0] === 'enter' &&
      events[index][1].type === 'attentionSequence' &&
      events[index][1]._close
    ) {
      open = index;

      // Now walk back to find an opener.
      while (open--) {
        // Find a token that can open the closer.
        if (
          events[open][0] === 'exit' &&
          events[open][1].type === 'attentionSequence' &&
          events[open][1]._open &&
          // If the markers are the same:
          context.sliceSerialize(events[open][1]).charCodeAt(0) ===
            context.sliceSerialize(events[index][1]).charCodeAt(0)
        ) {
          // If the opening can close or the closing can open,
          // and the close size *is not* a multiple of three,
          // but the sum of the opening and closing size *is* multiple of three,
          // then don’t match.
          if (
            (events[open][1]._close || events[index][1]._open) &&
            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
            !(
              (events[open][1].end.offset -
                events[open][1].start.offset +
                events[index][1].end.offset -
                events[index][1].start.offset) %
              3
            )
          ) {
            continue
          }

          // Number of markers to use from the sequence.
          use =
            events[open][1].end.offset - events[open][1].start.offset > 1 &&
            events[index][1].end.offset - events[index][1].start.offset > 1
              ? 2
              : 1;

          openingSequence = {
            type: use > 1 ? 'strongSequence' : 'emphasisSequence',
            start: movePoint_1(shallow_1(events[open][1].end), -use),
            end: shallow_1(events[open][1].end)
          };

          closingSequence = {
            type: use > 1 ? 'strongSequence' : 'emphasisSequence',
            start: shallow_1(events[index][1].start),
            end: movePoint_1(shallow_1(events[index][1].start), use)
          };

          text = {
            type: use > 1 ? 'strongText' : 'emphasisText',
            start: shallow_1(events[open][1].end),
            end: shallow_1(events[index][1].start)
          };

          group = {
            type: use > 1 ? 'strong' : 'emphasis',
            start: shallow_1(openingSequence.start),
            end: shallow_1(closingSequence.end)
          };

          events[open][1].end = shallow_1(openingSequence.start);
          events[index][1].start = shallow_1(closingSequence.end);

          nextEvents = [];

          // If there are more markers in the opening, add them before.
          if (events[open][1].end.offset - events[open][1].start.offset) {
            chunkedSplice_1(nextEvents, nextEvents.length, 0, [
              ['enter', events[open][1], context],
              ['exit', events[open][1], context]
            ]);
          }

          // Opening.
          chunkedSplice_1(nextEvents, nextEvents.length, 0, [
            ['enter', group, context],
            ['enter', openingSequence, context],
            ['exit', openingSequence, context],
            ['enter', text, context]
          ]);

          // Between.
          chunkedSplice_1(
            nextEvents,
            nextEvents.length,
            0,
            resolveAll_1(
              context.parser.constructs.insideSpan.null,
              events.slice(open + 1, index),
              context
            )
          );

          // Closing.
          chunkedSplice_1(nextEvents, nextEvents.length, 0, [
            ['exit', text, context],
            ['enter', closingSequence, context],
            ['exit', closingSequence, context],
            ['exit', group, context]
          ]);

          // If there are more markers in the closing, add them after.
          if (events[index][1].end.offset - events[index][1].start.offset) {
            offset = 2;
            chunkedSplice_1(nextEvents, nextEvents.length, 0, [
              ['enter', events[index][1], context],
              ['exit', events[index][1], context]
            ]);
          } else {
            offset = 0;
          }

          chunkedSplice_1(events, open - 1, index - open + 3, nextEvents);

          index = open + nextEvents.length - offset - 2;
          break
        }
      }
    }
  }

  // Remove remaining sequences.
  index = -1;

  while (++index < events.length) {
    if (events[index][1].type === 'attentionSequence') {
      events[index][1].type = 'data';
    }
  }

  return events
}

function tokenizeAttention(effects, ok) {
  var before = classifyCharacter_1(this.previous);
  var marker;

  return start

  function start(code) {
    effects.enter('attentionSequence');
    marker = code;
    return sequence(code)
  }

  function sequence(code) {
    var token;
    var after;
    var open;
    var close;

    if (code === marker) {
      effects.consume(code);
      return sequence
    }

    token = effects.exit('attentionSequence');
    after = classifyCharacter_1(code);
    open = !after || (after === 2 && before);
    close = !before || (before === 2 && after);
    token._open = marker === 42 ? open : open && (before || !close);
    token._close = marker === 42 ? close : close && (after || !open);
    return ok(code)
  }
}

var attention = {
	tokenize: tokenize$5,
	resolveAll: resolveAll_1$1
};

var tokenize$6 = tokenizeAtxHeading;
var resolve$1 = resolveAtxHeading;








function resolveAtxHeading(events, context) {
  var contentEnd = events.length - 2;
  var contentStart = 3;
  var content;
  var text;

  // Prefix whitespace, part of the opening.
  if (events[contentStart][1].type === 'whitespace') {
    contentStart += 2;
  }

  // Suffix whitespace, part of the closing.
  if (
    contentEnd - 2 > contentStart &&
    events[contentEnd][1].type === 'whitespace'
  ) {
    contentEnd -= 2;
  }

  if (
    events[contentEnd][1].type === 'atxHeadingSequence' &&
    (contentStart === contentEnd - 1 ||
      (contentEnd - 4 > contentStart &&
        events[contentEnd - 2][1].type === 'whitespace'))
  ) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }

  if (contentEnd > contentStart) {
    content = {
      type: 'atxHeadingText',
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };

    text = {
      type: 'chunkText',
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      contentType: 'text'
    };

    chunkedSplice_1(events, contentStart, contentEnd - contentStart + 1, [
      ['enter', content, context],
      ['enter', text, context],
      ['exit', text, context],
      ['exit', content, context]
    ]);
  }

  return events
}

function tokenizeAtxHeading(effects, ok, nok) {
  var self = this;
  var size = 0;

  return start

  function start(code) {
    effects.enter('atxHeading');
    effects.enter('atxHeadingSequence');
    return fenceOpenInside(code)
  }

  function fenceOpenInside(code) {
    if (code === 35 && size++ < 6) {
      effects.consume(code);
      return fenceOpenInside
    }

    if (code === null || markdownLineEndingOrSpace_1(code)) {
      effects.exit('atxHeadingSequence');
      return self.interrupt ? ok(code) : headingBreak(code)
    }

    return nok(code)
  }

  function headingBreak(code) {
    if (code === 35) {
      effects.enter('atxHeadingSequence');
      return sequence(code)
    }

    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('atxHeading');
      return ok(code)
    }

    if (markdownSpace_1(code)) {
      return factorySpace(effects, headingBreak, 'whitespace')(code)
    }

    effects.enter('atxHeadingText');
    return data(code)
  }

  function sequence(code) {
    if (code === 35) {
      effects.consume(code);
      return sequence
    }

    effects.exit('atxHeadingSequence');
    return headingBreak(code)
  }

  function data(code) {
    if (code === null || code === 35 || markdownLineEndingOrSpace_1(code)) {
      effects.exit('atxHeadingText');
      return headingBreak(code)
    }

    effects.consume(code);
    return data
  }
}

var headingAtx = {
	tokenize: tokenize$6,
	resolve: resolve$1
};

var asciiAlpha = regexCheck_1(/[A-Za-z]/);

var asciiAlphanumeric = regexCheck_1(/[\dA-Za-z]/);

var asciiAtext = regexCheck_1(/[#-'*+\--9=?A-Z^-~]/);

var asciiControl_1 = asciiControl;

// Note: EOF is seen as ASCII control here, because `null < 32 == true`.
function asciiControl(code) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code < 32 || code === 127
  )
}

var tokenize$7 = tokenizeAutolink;






function tokenizeAutolink(effects, ok, nok) {
  var size;

  return start

  function start(code) {
    effects.enter('autolink');
    effects.enter('autolinkMarker');
    effects.consume(code);
    effects.exit('autolinkMarker');
    effects.enter('autolinkProtocol');
    return open
  }

  function open(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      size = 1;
      return schemeOrEmailAtext
    }

    return asciiAtext(code) ? emailAtext(code) : nok(code)
  }

  function schemeOrEmailAtext(code) {
    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)
      ? schemeInsideOrEmailAtext(code)
      : emailAtext(code)
  }

  function schemeInsideOrEmailAtext(code) {
    if (code === 58) {
      effects.consume(code);
      return urlInside
    }

    if (
      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&
      size++ < 32
    ) {
      effects.consume(code);
      return schemeInsideOrEmailAtext
    }

    return emailAtext(code)
  }

  function urlInside(code) {
    if (code === 62) {
      effects.exit('autolinkProtocol');
      return end(code)
    }

    if (code === 32 || code === 60 || asciiControl_1(code)) {
      return nok(code)
    }

    effects.consume(code);
    return urlInside
  }

  function emailAtext(code) {
    if (code === 64) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot
    }

    if (asciiAtext(code)) {
      effects.consume(code);
      return emailAtext
    }

    return nok(code)
  }

  function emailAtSignOrDot(code) {
    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)
  }

  function emailLabel(code) {
    if (code === 46) {
      effects.consume(code);
      size = 0;
      return emailAtSignOrDot
    }

    if (code === 62) {
      // Exit, then change the type.
      effects.exit('autolinkProtocol').type = 'autolinkEmail';
      return end(code)
    }

    return emailValue(code)
  }

  function emailValue(code) {
    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
      effects.consume(code);
      return code === 45 ? emailValue : emailLabel
    }

    return nok(code)
  }

  function end(code) {
    effects.enter('autolinkMarker');
    effects.consume(code);
    effects.exit('autolinkMarker');
    effects.exit('autolink');
    return ok
  }
}

var autolink = {
	tokenize: tokenize$7
};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var asciiDigit = regexCheck_1(/\d/);

var tokenize$8 = tokenizeThematicBreak;






function tokenizeThematicBreak(effects, ok, nok) {
  var size = 0;
  var marker;

  return start

  function start(code) {
    effects.enter('thematicBreak');
    marker = code;
    return atBreak(code)
  }

  function atBreak(code) {
    if (code === marker) {
      effects.enter('thematicBreakSequence');
      return sequence(code)
    }

    if (markdownSpace_1(code)) {
      return factorySpace(effects, atBreak, 'whitespace')(code)
    }

    if (size < 3 || (code !== null && !markdownLineEnding_1(code))) {
      return nok(code)
    }

    effects.exit('thematicBreak');
    return ok(code)
  }

  function sequence(code) {
    if (code === marker) {
      effects.consume(code);
      size++;
      return sequence
    }

    effects.exit('thematicBreakSequence');
    return atBreak(code)
  }
}

var thematicBreak = {
	tokenize: tokenize$8
};

var list = createCommonjsModule(function (module, exports) {
exports.tokenize = tokenizeListStart;
exports.continuation = {tokenize: tokenizeListContinuation};
exports.exit = tokenizeListEnd;










function tokenizeListStart(effects, ok, nok) {
  var self = this;
  var initialSize = prefixSize_1(self.events, 'linePrefix');
  var valueSize;

  return start

  function start(code) {
    if (
      (code === 42 || code === 43 || code === 45) &&
      (!self.containerState.marker || code === self.containerState.marker)
    ) {
      return code === 42 || code === 45
        ? effects.check(thematicBreak, nok, unordered)(code)
        : unordered(code)
    }

    if (
      asciiDigit(code) &&
      (!self.containerState.type || self.containerState.type === 'listOrdered')
    ) {
      return ordered(code)
    }

    return nok(code)
  }

  function unordered(code) {
    if (!self.containerState.type) {
      self.containerState.type = 'listUnordered';
      effects.enter(self.containerState.type, {_container: true});
    }

    effects.enter('listItemPrefix');
    return atMarker(code)
  }

  function ordered(code) {
    if (self.containerState.type || !self.interrupt || code === 49) {
      if (!self.containerState.type) {
        self.containerState.type = 'listOrdered';
        effects.enter(self.containerState.type, {_container: true});
      }

      effects.enter('listItemPrefix');
      effects.enter('listItemValue');
      effects.consume(code);
      valueSize = 1;
      return self.interrupt ? afterValue : inside
    }

    return nok(code)
  }

  function inside(code) {
    if (asciiDigit(code) && ++valueSize < 10) {
      effects.consume(code);
      return inside
    }

    return afterValue(code)
  }

  function afterValue(code) {
    effects.exit('listItemValue');

    return code === 41 || code === 46 ? atMarker(code) : nok(code)
  }

  function atMarker(code) {
    self.containerState.marker = self.containerState.marker || code;

    if (code === self.containerState.marker) {
      effects.enter('listItemMarker');
      effects.consume(code);
      effects.exit('listItemMarker');
      return effects.check(
        partialBlankLine,
        // Can’t be empty when interrupting.
        self.interrupt ? nok : onBlank,
        effects.attempt(
          {tokenize: tokenizeListItemPrefixWhitespace, partial: true},
          endOfPrefix,
          otherPrefix
        )
      )
    }

    return nok(code)
  }

  function onBlank(code) {
    self.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code)
  }

  function otherPrefix(code) {
    if (markdownSpace_1(code)) {
      effects.enter('listItemPrefixWhitespace');
      effects.consume(code);
      effects.exit('listItemPrefixWhitespace');
      return endOfPrefix
    }

    return nok(code)
  }

  function endOfPrefix(code) {
    self.containerState.size =
      initialSize + sizeChunks_1(self.sliceStream(effects.exit('listItemPrefix')));
    return ok(code)
  }
}

function tokenizeListContinuation(effects, ok, nok) {
  var self = this;

  self.containerState._closeFlow = undefined;

  return effects.check(partialBlankLine, onBlank, notBlank)

  function onBlank(code) {
    self.containerState.furtherBlankLines =
      self.containerState.furtherBlankLines ||
      self.containerState.initialBlankLine;
    return ok(code)
  }

  function notBlank(code) {
    if (self.containerState.furtherBlankLines || !markdownSpace_1(code)) {
      self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;
      return notInCurrentItem(code)
    }

    self.containerState.furtherBlankLines = self.containerState.initialBlankLine = undefined;
    return effects.attempt(
      {tokenize: tokenizeIndent, partial: true},
      ok,
      notInCurrentItem
    )(code)
  }

  function notInCurrentItem(code) {
    // While we do continue, we signal that the flow should be closed.
    self.containerState._closeFlow = true;
    // As we’re closing flow, we’re no longer interrupting
    self.interrupt = undefined;
    return factorySpace(
      effects,
      effects.attempt(exports, ok, nok),
      'linePrefix',
      4
    )(code)
  }
}

function tokenizeIndent(effects, ok, nok) {
  var self = this;

  return factorySpace(
    effects,
    afterPrefix,
    'listItemIndent',

    self.containerState.size + 1
  )

  function afterPrefix(code) {
    return prefixSize_1(self.events, 'listItemIndent') ===
      self.containerState.size
      ? ok(code)
      : nok(code)
  }
}

function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}

function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
  var self = this;

  return factorySpace(
    effects,
    afterPrefix,
    'listItemPrefixWhitespace',

    4 + 1
  )

  function afterPrefix(code) {
    return markdownSpace_1(code) ||
      !prefixSize_1(self.events, 'listItemPrefixWhitespace')
      ? nok(code)
      : ok(code)
  }
}
});

var blockQuote = createCommonjsModule(function (module, exports) {
exports.tokenize = tokenizeBlockQuoteStart;
exports.continuation = {tokenize: tokenizeBlockQuoteContinuation};
exports.exit = exit;





function tokenizeBlockQuoteStart(effects, ok, nok) {
  var self = this;

  return start

  function start(code) {
    if (code === 62) {
      if (!self.containerState.open) {
        effects.enter('blockQuote', {_container: true});
        self.containerState.open = true;
      }

      effects.enter('blockQuotePrefix');
      effects.enter('blockQuoteMarker');
      effects.consume(code);
      effects.exit('blockQuoteMarker');
      return after
    }

    return nok(code)
  }

  function after(code) {
    if (markdownSpace_1(code)) {
      effects.enter('blockQuotePrefixWhitespace');
      effects.consume(code);
      effects.exit('blockQuotePrefixWhitespace');
      effects.exit('blockQuotePrefix');
      return ok
    }

    effects.exit('blockQuotePrefix');
    return ok(code)
  }
}

function tokenizeBlockQuoteContinuation(effects, ok, nok) {
  return factorySpace(
    effects,
    effects.attempt(exports, ok, nok),
    'linePrefix',
    4
  )
}

function exit(effects) {
  effects.exit('blockQuote');
}
});

var asciiPunctuation = regexCheck_1(/[!-/:-@[-`{-~]/);

var tokenize$9 = tokenizeCharacterEscape;



function tokenizeCharacterEscape(effects, ok, nok) {
  return start

  function start(code) {
    effects.enter('characterEscape');
    effects.enter('escapeMarker');
    effects.consume(code);
    effects.exit('escapeMarker');
    return open
  }

  function open(code) {
    if (asciiPunctuation(code)) {
      effects.enter('characterEscapeValue');
      effects.consume(code);
      effects.exit('characterEscapeValue');
      effects.exit('characterEscape');
      return ok
    }

    return nok(code)
  }
}

var characterEscape = {
	tokenize: tokenize$9
};

var AEli = "Æ";
var AElig = "Æ";
var AM = "&";
var AMP = "&";
var Aacut = "Á";
var Aacute = "Á";
var Abreve = "Ă";
var Acir = "Â";
var Acirc = "Â";
var Acy = "А";
var Afr = "𝔄";
var Agrav = "À";
var Agrave = "À";
var Alpha = "Α";
var Amacr = "Ā";
var And = "⩓";
var Aogon = "Ą";
var Aopf = "𝔸";
var ApplyFunction = "⁡";
var Arin = "Å";
var Aring = "Å";
var Ascr = "𝒜";
var Assign = "≔";
var Atild = "Ã";
var Atilde = "Ã";
var Aum = "Ä";
var Auml = "Ä";
var Backslash = "∖";
var Barv = "⫧";
var Barwed = "⌆";
var Bcy = "Б";
var Because = "∵";
var Bernoullis = "ℬ";
var Beta = "Β";
var Bfr = "𝔅";
var Bopf = "𝔹";
var Breve = "˘";
var Bscr = "ℬ";
var Bumpeq = "≎";
var CHcy = "Ч";
var COP = "©";
var COPY = "©";
var Cacute = "Ć";
var Cap = "⋒";
var CapitalDifferentialD = "ⅅ";
var Cayleys = "ℭ";
var Ccaron = "Č";
var Ccedi = "Ç";
var Ccedil = "Ç";
var Ccirc = "Ĉ";
var Cconint = "∰";
var Cdot = "Ċ";
var Cedilla = "¸";
var CenterDot = "·";
var Cfr = "ℭ";
var Chi = "Χ";
var CircleDot = "⊙";
var CircleMinus = "⊖";
var CirclePlus = "⊕";
var CircleTimes = "⊗";
var ClockwiseContourIntegral = "∲";
var CloseCurlyDoubleQuote = "”";
var CloseCurlyQuote = "’";
var Colon = "∷";
var Colone = "⩴";
var Congruent = "≡";
var Conint = "∯";
var ContourIntegral = "∮";
var Copf = "ℂ";
var Coproduct = "∐";
var CounterClockwiseContourIntegral = "∳";
var Cross = "⨯";
var Cscr = "𝒞";
var Cup = "⋓";
var CupCap = "≍";
var DD = "ⅅ";
var DDotrahd = "⤑";
var DJcy = "Ђ";
var DScy = "Ѕ";
var DZcy = "Џ";
var Dagger = "‡";
var Darr = "↡";
var Dashv = "⫤";
var Dcaron = "Ď";
var Dcy = "Д";
var Del = "∇";
var Delta = "Δ";
var Dfr = "𝔇";
var DiacriticalAcute = "´";
var DiacriticalDot = "˙";
var DiacriticalDoubleAcute = "˝";
var DiacriticalGrave = "`";
var DiacriticalTilde = "˜";
var Diamond = "⋄";
var DifferentialD = "ⅆ";
var Dopf = "𝔻";
var Dot = "¨";
var DotDot = "⃜";
var DotEqual = "≐";
var DoubleContourIntegral = "∯";
var DoubleDot = "¨";
var DoubleDownArrow = "⇓";
var DoubleLeftArrow = "⇐";
var DoubleLeftRightArrow = "⇔";
var DoubleLeftTee = "⫤";
var DoubleLongLeftArrow = "⟸";
var DoubleLongLeftRightArrow = "⟺";
var DoubleLongRightArrow = "⟹";
var DoubleRightArrow = "⇒";
var DoubleRightTee = "⊨";
var DoubleUpArrow = "⇑";
var DoubleUpDownArrow = "⇕";
var DoubleVerticalBar = "∥";
var DownArrow = "↓";
var DownArrowBar = "⤓";
var DownArrowUpArrow = "⇵";
var DownBreve = "̑";
var DownLeftRightVector = "⥐";
var DownLeftTeeVector = "⥞";
var DownLeftVector = "↽";
var DownLeftVectorBar = "⥖";
var DownRightTeeVector = "⥟";
var DownRightVector = "⇁";
var DownRightVectorBar = "⥗";
var DownTee = "⊤";
var DownTeeArrow = "↧";
var Downarrow = "⇓";
var Dscr = "𝒟";
var Dstrok = "Đ";
var ENG = "Ŋ";
var ET = "Ð";
var ETH = "Ð";
var Eacut = "É";
var Eacute = "É";
var Ecaron = "Ě";
var Ecir = "Ê";
var Ecirc = "Ê";
var Ecy = "Э";
var Edot = "Ė";
var Efr = "𝔈";
var Egrav = "È";
var Egrave = "È";
var Element = "∈";
var Emacr = "Ē";
var EmptySmallSquare = "◻";
var EmptyVerySmallSquare = "▫";
var Eogon = "Ę";
var Eopf = "𝔼";
var Epsilon = "Ε";
var Equal = "⩵";
var EqualTilde = "≂";
var Equilibrium = "⇌";
var Escr = "ℰ";
var Esim = "⩳";
var Eta = "Η";
var Eum = "Ë";
var Euml = "Ë";
var Exists = "∃";
var ExponentialE = "ⅇ";
var Fcy = "Ф";
var Ffr = "𝔉";
var FilledSmallSquare = "◼";
var FilledVerySmallSquare = "▪";
var Fopf = "𝔽";
var ForAll = "∀";
var Fouriertrf = "ℱ";
var Fscr = "ℱ";
var GJcy = "Ѓ";
var G = ">";
var GT = ">";
var Gamma = "Γ";
var Gammad = "Ϝ";
var Gbreve = "Ğ";
var Gcedil = "Ģ";
var Gcirc = "Ĝ";
var Gcy = "Г";
var Gdot = "Ġ";
var Gfr = "𝔊";
var Gg = "⋙";
var Gopf = "𝔾";
var GreaterEqual = "≥";
var GreaterEqualLess = "⋛";
var GreaterFullEqual = "≧";
var GreaterGreater = "⪢";
var GreaterLess = "≷";
var GreaterSlantEqual = "⩾";
var GreaterTilde = "≳";
var Gscr = "𝒢";
var Gt = "≫";
var HARDcy = "Ъ";
var Hacek = "ˇ";
var Hat = "^";
var Hcirc = "Ĥ";
var Hfr = "ℌ";
var HilbertSpace = "ℋ";
var Hopf = "ℍ";
var HorizontalLine = "─";
var Hscr = "ℋ";
var Hstrok = "Ħ";
var HumpDownHump = "≎";
var HumpEqual = "≏";
var IEcy = "Е";
var IJlig = "Ĳ";
var IOcy = "Ё";
var Iacut = "Í";
var Iacute = "Í";
var Icir = "Î";
var Icirc = "Î";
var Icy = "И";
var Idot = "İ";
var Ifr = "ℑ";
var Igrav = "Ì";
var Igrave = "Ì";
var Im = "ℑ";
var Imacr = "Ī";
var ImaginaryI = "ⅈ";
var Implies = "⇒";
var Int = "∬";
var Integral = "∫";
var Intersection = "⋂";
var InvisibleComma = "⁣";
var InvisibleTimes = "⁢";
var Iogon = "Į";
var Iopf = "𝕀";
var Iota = "Ι";
var Iscr = "ℐ";
var Itilde = "Ĩ";
var Iukcy = "І";
var Ium = "Ï";
var Iuml = "Ï";
var Jcirc = "Ĵ";
var Jcy = "Й";
var Jfr = "𝔍";
var Jopf = "𝕁";
var Jscr = "𝒥";
var Jsercy = "Ј";
var Jukcy = "Є";
var KHcy = "Х";
var KJcy = "Ќ";
var Kappa = "Κ";
var Kcedil = "Ķ";
var Kcy = "К";
var Kfr = "𝔎";
var Kopf = "𝕂";
var Kscr = "𝒦";
var LJcy = "Љ";
var L = "<";
var LT = "<";
var Lacute = "Ĺ";
var Lambda = "Λ";
var Lang = "⟪";
var Laplacetrf = "ℒ";
var Larr = "↞";
var Lcaron = "Ľ";
var Lcedil = "Ļ";
var Lcy = "Л";
var LeftAngleBracket = "⟨";
var LeftArrow = "←";
var LeftArrowBar = "⇤";
var LeftArrowRightArrow = "⇆";
var LeftCeiling = "⌈";
var LeftDoubleBracket = "⟦";
var LeftDownTeeVector = "⥡";
var LeftDownVector = "⇃";
var LeftDownVectorBar = "⥙";
var LeftFloor = "⌊";
var LeftRightArrow = "↔";
var LeftRightVector = "⥎";
var LeftTee = "⊣";
var LeftTeeArrow = "↤";
var LeftTeeVector = "⥚";
var LeftTriangle = "⊲";
var LeftTriangleBar = "⧏";
var LeftTriangleEqual = "⊴";
var LeftUpDownVector = "⥑";
var LeftUpTeeVector = "⥠";
var LeftUpVector = "↿";
var LeftUpVectorBar = "⥘";
var LeftVector = "↼";
var LeftVectorBar = "⥒";
var Leftarrow = "⇐";
var Leftrightarrow = "⇔";
var LessEqualGreater = "⋚";
var LessFullEqual = "≦";
var LessGreater = "≶";
var LessLess = "⪡";
var LessSlantEqual = "⩽";
var LessTilde = "≲";
var Lfr = "𝔏";
var Ll = "⋘";
var Lleftarrow = "⇚";
var Lmidot = "Ŀ";
var LongLeftArrow = "⟵";
var LongLeftRightArrow = "⟷";
var LongRightArrow = "⟶";
var Longleftarrow = "⟸";
var Longleftrightarrow = "⟺";
var Longrightarrow = "⟹";
var Lopf = "𝕃";
var LowerLeftArrow = "↙";
var LowerRightArrow = "↘";
var Lscr = "ℒ";
var Lsh = "↰";
var Lstrok = "Ł";
var Lt = "≪";
var Mcy = "М";
var MediumSpace = " ";
var Mellintrf = "ℳ";
var Mfr = "𝔐";
var MinusPlus = "∓";
var Mopf = "𝕄";
var Mscr = "ℳ";
var Mu = "Μ";
var NJcy = "Њ";
var Nacute = "Ń";
var Ncaron = "Ň";
var Ncedil = "Ņ";
var Ncy = "Н";
var NegativeMediumSpace = "​";
var NegativeThickSpace = "​";
var NegativeThinSpace = "​";
var NegativeVeryThinSpace = "​";
var NestedGreaterGreater = "≫";
var NestedLessLess = "≪";
var NewLine = "\n";
var Nfr = "𝔑";
var NoBreak = "⁠";
var NonBreakingSpace = " ";
var Nopf = "ℕ";
var Not = "⫬";
var NotCongruent = "≢";
var NotCupCap = "≭";
var NotDoubleVerticalBar = "∦";
var NotElement = "∉";
var NotEqual = "≠";
var NotEqualTilde = "≂̸";
var NotExists = "∄";
var NotGreater = "≯";
var NotGreaterEqual = "≱";
var NotGreaterFullEqual = "≧̸";
var NotGreaterGreater = "≫̸";
var NotGreaterLess = "≹";
var NotGreaterSlantEqual = "⩾̸";
var NotGreaterTilde = "≵";
var NotHumpDownHump = "≎̸";
var NotHumpEqual = "≏̸";
var NotLeftTriangle = "⋪";
var NotLeftTriangleBar = "⧏̸";
var NotLeftTriangleEqual = "⋬";
var NotLess = "≮";
var NotLessEqual = "≰";
var NotLessGreater = "≸";
var NotLessLess = "≪̸";
var NotLessSlantEqual = "⩽̸";
var NotLessTilde = "≴";
var NotNestedGreaterGreater = "⪢̸";
var NotNestedLessLess = "⪡̸";
var NotPrecedes = "⊀";
var NotPrecedesEqual = "⪯̸";
var NotPrecedesSlantEqual = "⋠";
var NotReverseElement = "∌";
var NotRightTriangle = "⋫";
var NotRightTriangleBar = "⧐̸";
var NotRightTriangleEqual = "⋭";
var NotSquareSubset = "⊏̸";
var NotSquareSubsetEqual = "⋢";
var NotSquareSuperset = "⊐̸";
var NotSquareSupersetEqual = "⋣";
var NotSubset = "⊂⃒";
var NotSubsetEqual = "⊈";
var NotSucceeds = "⊁";
var NotSucceedsEqual = "⪰̸";
var NotSucceedsSlantEqual = "⋡";
var NotSucceedsTilde = "≿̸";
var NotSuperset = "⊃⃒";
var NotSupersetEqual = "⊉";
var NotTilde = "≁";
var NotTildeEqual = "≄";
var NotTildeFullEqual = "≇";
var NotTildeTilde = "≉";
var NotVerticalBar = "∤";
var Nscr = "𝒩";
var Ntild = "Ñ";
var Ntilde = "Ñ";
var Nu = "Ν";
var OElig = "Œ";
var Oacut = "Ó";
var Oacute = "Ó";
var Ocir = "Ô";
var Ocirc = "Ô";
var Ocy = "О";
var Odblac = "Ő";
var Ofr = "𝔒";
var Ograv = "Ò";
var Ograve = "Ò";
var Omacr = "Ō";
var Omega = "Ω";
var Omicron = "Ο";
var Oopf = "𝕆";
var OpenCurlyDoubleQuote = "“";
var OpenCurlyQuote = "‘";
var Or = "⩔";
var Oscr = "𝒪";
var Oslas = "Ø";
var Oslash = "Ø";
var Otild = "Õ";
var Otilde = "Õ";
var Otimes = "⨷";
var Oum = "Ö";
var Ouml = "Ö";
var OverBar = "‾";
var OverBrace = "⏞";
var OverBracket = "⎴";
var OverParenthesis = "⏜";
var PartialD = "∂";
var Pcy = "П";
var Pfr = "𝔓";
var Phi = "Φ";
var Pi = "Π";
var PlusMinus = "±";
var Poincareplane = "ℌ";
var Popf = "ℙ";
var Pr = "⪻";
var Precedes = "≺";
var PrecedesEqual = "⪯";
var PrecedesSlantEqual = "≼";
var PrecedesTilde = "≾";
var Prime = "″";
var Product = "∏";
var Proportion = "∷";
var Proportional = "∝";
var Pscr = "𝒫";
var Psi = "Ψ";
var QUO = "\"";
var QUOT = "\"";
var Qfr = "𝔔";
var Qopf = "ℚ";
var Qscr = "𝒬";
var RBarr = "⤐";
var RE = "®";
var REG = "®";
var Racute = "Ŕ";
var Rang = "⟫";
var Rarr = "↠";
var Rarrtl = "⤖";
var Rcaron = "Ř";
var Rcedil = "Ŗ";
var Rcy = "Р";
var Re = "ℜ";
var ReverseElement = "∋";
var ReverseEquilibrium = "⇋";
var ReverseUpEquilibrium = "⥯";
var Rfr = "ℜ";
var Rho = "Ρ";
var RightAngleBracket = "⟩";
var RightArrow = "→";
var RightArrowBar = "⇥";
var RightArrowLeftArrow = "⇄";
var RightCeiling = "⌉";
var RightDoubleBracket = "⟧";
var RightDownTeeVector = "⥝";
var RightDownVector = "⇂";
var RightDownVectorBar = "⥕";
var RightFloor = "⌋";
var RightTee = "⊢";
var RightTeeArrow = "↦";
var RightTeeVector = "⥛";
var RightTriangle = "⊳";
var RightTriangleBar = "⧐";
var RightTriangleEqual = "⊵";
var RightUpDownVector = "⥏";
var RightUpTeeVector = "⥜";
var RightUpVector = "↾";
var RightUpVectorBar = "⥔";
var RightVector = "⇀";
var RightVectorBar = "⥓";
var Rightarrow = "⇒";
var Ropf = "ℝ";
var RoundImplies = "⥰";
var Rrightarrow = "⇛";
var Rscr = "ℛ";
var Rsh = "↱";
var RuleDelayed = "⧴";
var SHCHcy = "Щ";
var SHcy = "Ш";
var SOFTcy = "Ь";
var Sacute = "Ś";
var Sc = "⪼";
var Scaron = "Š";
var Scedil = "Ş";
var Scirc = "Ŝ";
var Scy = "С";
var Sfr = "𝔖";
var ShortDownArrow = "↓";
var ShortLeftArrow = "←";
var ShortRightArrow = "→";
var ShortUpArrow = "↑";
var Sigma = "Σ";
var SmallCircle = "∘";
var Sopf = "𝕊";
var Sqrt = "√";
var Square = "□";
var SquareIntersection = "⊓";
var SquareSubset = "⊏";
var SquareSubsetEqual = "⊑";
var SquareSuperset = "⊐";
var SquareSupersetEqual = "⊒";
var SquareUnion = "⊔";
var Sscr = "𝒮";
var Star = "⋆";
var Sub = "⋐";
var Subset = "⋐";
var SubsetEqual = "⊆";
var Succeeds = "≻";
var SucceedsEqual = "⪰";
var SucceedsSlantEqual = "≽";
var SucceedsTilde = "≿";
var SuchThat = "∋";
var Sum = "∑";
var Sup = "⋑";
var Superset = "⊃";
var SupersetEqual = "⊇";
var Supset = "⋑";
var THOR = "Þ";
var THORN = "Þ";
var TRADE = "™";
var TSHcy = "Ћ";
var TScy = "Ц";
var Tab = "\t";
var Tau = "Τ";
var Tcaron = "Ť";
var Tcedil = "Ţ";
var Tcy = "Т";
var Tfr = "𝔗";
var Therefore = "∴";
var Theta = "Θ";
var ThickSpace = "  ";
var ThinSpace = " ";
var Tilde = "∼";
var TildeEqual = "≃";
var TildeFullEqual = "≅";
var TildeTilde = "≈";
var Topf = "𝕋";
var TripleDot = "⃛";
var Tscr = "𝒯";
var Tstrok = "Ŧ";
var Uacut = "Ú";
var Uacute = "Ú";
var Uarr = "↟";
var Uarrocir = "⥉";
var Ubrcy = "Ў";
var Ubreve = "Ŭ";
var Ucir = "Û";
var Ucirc = "Û";
var Ucy = "У";
var Udblac = "Ű";
var Ufr = "𝔘";
var Ugrav = "Ù";
var Ugrave = "Ù";
var Umacr = "Ū";
var UnderBar = "_";
var UnderBrace = "⏟";
var UnderBracket = "⎵";
var UnderParenthesis = "⏝";
var Union = "⋃";
var UnionPlus = "⊎";
var Uogon = "Ų";
var Uopf = "𝕌";
var UpArrow = "↑";
var UpArrowBar = "⤒";
var UpArrowDownArrow = "⇅";
var UpDownArrow = "↕";
var UpEquilibrium = "⥮";
var UpTee = "⊥";
var UpTeeArrow = "↥";
var Uparrow = "⇑";
var Updownarrow = "⇕";
var UpperLeftArrow = "↖";
var UpperRightArrow = "↗";
var Upsi = "ϒ";
var Upsilon = "Υ";
var Uring = "Ů";
var Uscr = "𝒰";
var Utilde = "Ũ";
var Uum = "Ü";
var Uuml = "Ü";
var VDash = "⊫";
var Vbar = "⫫";
var Vcy = "В";
var Vdash = "⊩";
var Vdashl = "⫦";
var Vee = "⋁";
var Verbar = "‖";
var Vert = "‖";
var VerticalBar = "∣";
var VerticalLine = "|";
var VerticalSeparator = "❘";
var VerticalTilde = "≀";
var VeryThinSpace = " ";
var Vfr = "𝔙";
var Vopf = "𝕍";
var Vscr = "𝒱";
var Vvdash = "⊪";
var Wcirc = "Ŵ";
var Wedge = "⋀";
var Wfr = "𝔚";
var Wopf = "𝕎";
var Wscr = "𝒲";
var Xfr = "𝔛";
var Xi = "Ξ";
var Xopf = "𝕏";
var Xscr = "𝒳";
var YAcy = "Я";
var YIcy = "Ї";
var YUcy = "Ю";
var Yacut = "Ý";
var Yacute = "Ý";
var Ycirc = "Ŷ";
var Ycy = "Ы";
var Yfr = "𝔜";
var Yopf = "𝕐";
var Yscr = "𝒴";
var Yuml = "Ÿ";
var ZHcy = "Ж";
var Zacute = "Ź";
var Zcaron = "Ž";
var Zcy = "З";
var Zdot = "Ż";
var ZeroWidthSpace = "​";
var Zeta = "Ζ";
var Zfr = "ℨ";
var Zopf = "ℤ";
var Zscr = "𝒵";
var aacut = "á";
var aacute = "á";
var abreve = "ă";
var ac = "∾";
var acE = "∾̳";
var acd = "∿";
var acir = "â";
var acirc = "â";
var acut = "´";
var acute = "´";
var acy = "а";
var aeli = "æ";
var aelig = "æ";
var af = "⁡";
var afr = "𝔞";
var agrav = "à";
var agrave = "à";
var alefsym = "ℵ";
var aleph = "ℵ";
var alpha = "α";
var amacr = "ā";
var amalg = "⨿";
var am = "&";
var amp = "&";
var and = "∧";
var andand = "⩕";
var andd = "⩜";
var andslope = "⩘";
var andv = "⩚";
var ang = "∠";
var ange = "⦤";
var angle = "∠";
var angmsd = "∡";
var angmsdaa = "⦨";
var angmsdab = "⦩";
var angmsdac = "⦪";
var angmsdad = "⦫";
var angmsdae = "⦬";
var angmsdaf = "⦭";
var angmsdag = "⦮";
var angmsdah = "⦯";
var angrt = "∟";
var angrtvb = "⊾";
var angrtvbd = "⦝";
var angsph = "∢";
var angst = "Å";
var angzarr = "⍼";
var aogon = "ą";
var aopf = "𝕒";
var ap = "≈";
var apE = "⩰";
var apacir = "⩯";
var ape = "≊";
var apid = "≋";
var apos = "'";
var approx = "≈";
var approxeq = "≊";
var arin = "å";
var aring = "å";
var ascr = "𝒶";
var ast = "*";
var asymp = "≈";
var asympeq = "≍";
var atild = "ã";
var atilde = "ã";
var aum = "ä";
var auml = "ä";
var awconint = "∳";
var awint = "⨑";
var bNot = "⫭";
var backcong = "≌";
var backepsilon = "϶";
var backprime = "‵";
var backsim = "∽";
var backsimeq = "⋍";
var barvee = "⊽";
var barwed = "⌅";
var barwedge = "⌅";
var bbrk = "⎵";
var bbrktbrk = "⎶";
var bcong = "≌";
var bcy = "б";
var bdquo = "„";
var becaus = "∵";
var because = "∵";
var bemptyv = "⦰";
var bepsi = "϶";
var bernou = "ℬ";
var beta = "β";
var beth = "ℶ";
var between = "≬";
var bfr = "𝔟";
var bigcap = "⋂";
var bigcirc = "◯";
var bigcup = "⋃";
var bigodot = "⨀";
var bigoplus = "⨁";
var bigotimes = "⨂";
var bigsqcup = "⨆";
var bigstar = "★";
var bigtriangledown = "▽";
var bigtriangleup = "△";
var biguplus = "⨄";
var bigvee = "⋁";
var bigwedge = "⋀";
var bkarow = "⤍";
var blacklozenge = "⧫";
var blacksquare = "▪";
var blacktriangle = "▴";
var blacktriangledown = "▾";
var blacktriangleleft = "◂";
var blacktriangleright = "▸";
var blank = "␣";
var blk12 = "▒";
var blk14 = "░";
var blk34 = "▓";
var block = "█";
var bne = "=⃥";
var bnequiv = "≡⃥";
var bnot = "⌐";
var bopf = "𝕓";
var bot = "⊥";
var bottom = "⊥";
var bowtie = "⋈";
var boxDL = "╗";
var boxDR = "╔";
var boxDl = "╖";
var boxDr = "╓";
var boxH = "═";
var boxHD = "╦";
var boxHU = "╩";
var boxHd = "╤";
var boxHu = "╧";
var boxUL = "╝";
var boxUR = "╚";
var boxUl = "╜";
var boxUr = "╙";
var boxV = "║";
var boxVH = "╬";
var boxVL = "╣";
var boxVR = "╠";
var boxVh = "╫";
var boxVl = "╢";
var boxVr = "╟";
var boxbox = "⧉";
var boxdL = "╕";
var boxdR = "╒";
var boxdl = "┐";
var boxdr = "┌";
var boxh = "─";
var boxhD = "╥";
var boxhU = "╨";
var boxhd = "┬";
var boxhu = "┴";
var boxminus = "⊟";
var boxplus = "⊞";
var boxtimes = "⊠";
var boxuL = "╛";
var boxuR = "╘";
var boxul = "┘";
var boxur = "└";
var boxv = "│";
var boxvH = "╪";
var boxvL = "╡";
var boxvR = "╞";
var boxvh = "┼";
var boxvl = "┤";
var boxvr = "├";
var bprime = "‵";
var breve = "˘";
var brvba = "¦";
var brvbar = "¦";
var bscr = "𝒷";
var bsemi = "⁏";
var bsim = "∽";
var bsime = "⋍";
var bsol = "\\";
var bsolb = "⧅";
var bsolhsub = "⟈";
var bull = "•";
var bullet = "•";
var bump = "≎";
var bumpE = "⪮";
var bumpe = "≏";
var bumpeq = "≏";
var cacute = "ć";
var cap = "∩";
var capand = "⩄";
var capbrcup = "⩉";
var capcap = "⩋";
var capcup = "⩇";
var capdot = "⩀";
var caps = "∩︀";
var caret = "⁁";
var caron = "ˇ";
var ccaps = "⩍";
var ccaron = "č";
var ccedi = "ç";
var ccedil = "ç";
var ccirc = "ĉ";
var ccups = "⩌";
var ccupssm = "⩐";
var cdot = "ċ";
var cedi = "¸";
var cedil = "¸";
var cemptyv = "⦲";
var cen = "¢";
var cent = "¢";
var centerdot = "·";
var cfr = "𝔠";
var chcy = "ч";
var check = "✓";
var checkmark = "✓";
var chi = "χ";
var cir = "○";
var cirE = "⧃";
var circ = "ˆ";
var circeq = "≗";
var circlearrowleft = "↺";
var circlearrowright = "↻";
var circledR = "®";
var circledS = "Ⓢ";
var circledast = "⊛";
var circledcirc = "⊚";
var circleddash = "⊝";
var cire = "≗";
var cirfnint = "⨐";
var cirmid = "⫯";
var cirscir = "⧂";
var clubs = "♣";
var clubsuit = "♣";
var colon = ":";
var colone = "≔";
var coloneq = "≔";
var comma = ",";
var commat = "@";
var comp = "∁";
var compfn = "∘";
var complement = "∁";
var complexes = "ℂ";
var cong = "≅";
var congdot = "⩭";
var conint = "∮";
var copf = "𝕔";
var coprod = "∐";
var cop = "©";
var copy = "©";
var copysr = "℗";
var crarr = "↵";
var cross = "✗";
var cscr = "𝒸";
var csub = "⫏";
var csube = "⫑";
var csup = "⫐";
var csupe = "⫒";
var ctdot = "⋯";
var cudarrl = "⤸";
var cudarrr = "⤵";
var cuepr = "⋞";
var cuesc = "⋟";
var cularr = "↶";
var cularrp = "⤽";
var cup = "∪";
var cupbrcap = "⩈";
var cupcap = "⩆";
var cupcup = "⩊";
var cupdot = "⊍";
var cupor = "⩅";
var cups = "∪︀";
var curarr = "↷";
var curarrm = "⤼";
var curlyeqprec = "⋞";
var curlyeqsucc = "⋟";
var curlyvee = "⋎";
var curlywedge = "⋏";
var curre = "¤";
var curren = "¤";
var curvearrowleft = "↶";
var curvearrowright = "↷";
var cuvee = "⋎";
var cuwed = "⋏";
var cwconint = "∲";
var cwint = "∱";
var cylcty = "⌭";
var dArr = "⇓";
var dHar = "⥥";
var dagger = "†";
var daleth = "ℸ";
var darr = "↓";
var dash = "‐";
var dashv = "⊣";
var dbkarow = "⤏";
var dblac = "˝";
var dcaron = "ď";
var dcy = "д";
var dd = "ⅆ";
var ddagger = "‡";
var ddarr = "⇊";
var ddotseq = "⩷";
var de = "°";
var deg = "°";
var delta = "δ";
var demptyv = "⦱";
var dfisht = "⥿";
var dfr = "𝔡";
var dharl = "⇃";
var dharr = "⇂";
var diam = "⋄";
var diamond = "⋄";
var diamondsuit = "♦";
var diams = "♦";
var die = "¨";
var digamma = "ϝ";
var disin = "⋲";
var div = "÷";
var divid = "÷";
var divide = "÷";
var divideontimes = "⋇";
var divonx = "⋇";
var djcy = "ђ";
var dlcorn = "⌞";
var dlcrop = "⌍";
var dollar = "$";
var dopf = "𝕕";
var dot = "˙";
var doteq = "≐";
var doteqdot = "≑";
var dotminus = "∸";
var dotplus = "∔";
var dotsquare = "⊡";
var doublebarwedge = "⌆";
var downarrow = "↓";
var downdownarrows = "⇊";
var downharpoonleft = "⇃";
var downharpoonright = "⇂";
var drbkarow = "⤐";
var drcorn = "⌟";
var drcrop = "⌌";
var dscr = "𝒹";
var dscy = "ѕ";
var dsol = "⧶";
var dstrok = "đ";
var dtdot = "⋱";
var dtri = "▿";
var dtrif = "▾";
var duarr = "⇵";
var duhar = "⥯";
var dwangle = "⦦";
var dzcy = "џ";
var dzigrarr = "⟿";
var eDDot = "⩷";
var eDot = "≑";
var eacut = "é";
var eacute = "é";
var easter = "⩮";
var ecaron = "ě";
var ecir = "ê";
var ecirc = "ê";
var ecolon = "≕";
var ecy = "э";
var edot = "ė";
var ee = "ⅇ";
var efDot = "≒";
var efr = "𝔢";
var eg = "⪚";
var egrav = "è";
var egrave = "è";
var egs = "⪖";
var egsdot = "⪘";
var el = "⪙";
var elinters = "⏧";
var ell = "ℓ";
var els = "⪕";
var elsdot = "⪗";
var emacr = "ē";
var empty = "∅";
var emptyset = "∅";
var emptyv = "∅";
var emsp13 = " ";
var emsp14 = " ";
var emsp = " ";
var eng = "ŋ";
var ensp = " ";
var eogon = "ę";
var eopf = "𝕖";
var epar = "⋕";
var eparsl = "⧣";
var eplus = "⩱";
var epsi = "ε";
var epsilon = "ε";
var epsiv = "ϵ";
var eqcirc = "≖";
var eqcolon = "≕";
var eqsim = "≂";
var eqslantgtr = "⪖";
var eqslantless = "⪕";
var equals = "=";
var equest = "≟";
var equiv = "≡";
var equivDD = "⩸";
var eqvparsl = "⧥";
var erDot = "≓";
var erarr = "⥱";
var escr = "ℯ";
var esdot = "≐";
var esim = "≂";
var eta = "η";
var et = "ð";
var eth = "ð";
var eum = "ë";
var euml = "ë";
var euro = "€";
var excl = "!";
var exist = "∃";
var expectation = "ℰ";
var exponentiale = "ⅇ";
var fallingdotseq = "≒";
var fcy = "ф";
var female = "♀";
var ffilig = "ﬃ";
var fflig = "ﬀ";
var ffllig = "ﬄ";
var ffr = "𝔣";
var filig = "ﬁ";
var fjlig = "fj";
var flat = "♭";
var fllig = "ﬂ";
var fltns = "▱";
var fnof = "ƒ";
var fopf = "𝕗";
var forall = "∀";
var fork = "⋔";
var forkv = "⫙";
var fpartint = "⨍";
var frac1 = "¼";
var frac12 = "½";
var frac13 = "⅓";
var frac14 = "¼";
var frac15 = "⅕";
var frac16 = "⅙";
var frac18 = "⅛";
var frac23 = "⅔";
var frac25 = "⅖";
var frac3 = "¾";
var frac34 = "¾";
var frac35 = "⅗";
var frac38 = "⅜";
var frac45 = "⅘";
var frac56 = "⅚";
var frac58 = "⅝";
var frac78 = "⅞";
var frasl = "⁄";
var frown = "⌢";
var fscr = "𝒻";
var gE = "≧";
var gEl = "⪌";
var gacute = "ǵ";
var gamma = "γ";
var gammad = "ϝ";
var gap = "⪆";
var gbreve = "ğ";
var gcirc = "ĝ";
var gcy = "г";
var gdot = "ġ";
var ge = "≥";
var gel = "⋛";
var geq = "≥";
var geqq = "≧";
var geqslant = "⩾";
var ges = "⩾";
var gescc = "⪩";
var gesdot = "⪀";
var gesdoto = "⪂";
var gesdotol = "⪄";
var gesl = "⋛︀";
var gesles = "⪔";
var gfr = "𝔤";
var gg = "≫";
var ggg = "⋙";
var gimel = "ℷ";
var gjcy = "ѓ";
var gl = "≷";
var glE = "⪒";
var gla = "⪥";
var glj = "⪤";
var gnE = "≩";
var gnap = "⪊";
var gnapprox = "⪊";
var gne = "⪈";
var gneq = "⪈";
var gneqq = "≩";
var gnsim = "⋧";
var gopf = "𝕘";
var grave = "`";
var gscr = "ℊ";
var gsim = "≳";
var gsime = "⪎";
var gsiml = "⪐";
var g = ">";
var gt = ">";
var gtcc = "⪧";
var gtcir = "⩺";
var gtdot = "⋗";
var gtlPar = "⦕";
var gtquest = "⩼";
var gtrapprox = "⪆";
var gtrarr = "⥸";
var gtrdot = "⋗";
var gtreqless = "⋛";
var gtreqqless = "⪌";
var gtrless = "≷";
var gtrsim = "≳";
var gvertneqq = "≩︀";
var gvnE = "≩︀";
var hArr = "⇔";
var hairsp = " ";
var half = "½";
var hamilt = "ℋ";
var hardcy = "ъ";
var harr = "↔";
var harrcir = "⥈";
var harrw = "↭";
var hbar = "ℏ";
var hcirc = "ĥ";
var hearts = "♥";
var heartsuit = "♥";
var hellip = "…";
var hercon = "⊹";
var hfr = "𝔥";
var hksearow = "⤥";
var hkswarow = "⤦";
var hoarr = "⇿";
var homtht = "∻";
var hookleftarrow = "↩";
var hookrightarrow = "↪";
var hopf = "𝕙";
var horbar = "―";
var hscr = "𝒽";
var hslash = "ℏ";
var hstrok = "ħ";
var hybull = "⁃";
var hyphen = "‐";
var iacut = "í";
var iacute = "í";
var ic = "⁣";
var icir = "î";
var icirc = "î";
var icy = "и";
var iecy = "е";
var iexc = "¡";
var iexcl = "¡";
var iff = "⇔";
var ifr = "𝔦";
var igrav = "ì";
var igrave = "ì";
var ii = "ⅈ";
var iiiint = "⨌";
var iiint = "∭";
var iinfin = "⧜";
var iiota = "℩";
var ijlig = "ĳ";
var imacr = "ī";
var image = "ℑ";
var imagline = "ℐ";
var imagpart = "ℑ";
var imath = "ı";
var imof = "⊷";
var imped = "Ƶ";
var incare = "℅";
var infin = "∞";
var infintie = "⧝";
var inodot = "ı";
var int = "∫";
var intcal = "⊺";
var integers = "ℤ";
var intercal = "⊺";
var intlarhk = "⨗";
var intprod = "⨼";
var iocy = "ё";
var iogon = "į";
var iopf = "𝕚";
var iota = "ι";
var iprod = "⨼";
var iques = "¿";
var iquest = "¿";
var iscr = "𝒾";
var isin = "∈";
var isinE = "⋹";
var isindot = "⋵";
var isins = "⋴";
var isinsv = "⋳";
var isinv = "∈";
var it = "⁢";
var itilde = "ĩ";
var iukcy = "і";
var ium = "ï";
var iuml = "ï";
var jcirc = "ĵ";
var jcy = "й";
var jfr = "𝔧";
var jmath = "ȷ";
var jopf = "𝕛";
var jscr = "𝒿";
var jsercy = "ј";
var jukcy = "є";
var kappa = "κ";
var kappav = "ϰ";
var kcedil = "ķ";
var kcy = "к";
var kfr = "𝔨";
var kgreen = "ĸ";
var khcy = "х";
var kjcy = "ќ";
var kopf = "𝕜";
var kscr = "𝓀";
var lAarr = "⇚";
var lArr = "⇐";
var lAtail = "⤛";
var lBarr = "⤎";
var lE = "≦";
var lEg = "⪋";
var lHar = "⥢";
var lacute = "ĺ";
var laemptyv = "⦴";
var lagran = "ℒ";
var lambda = "λ";
var lang = "⟨";
var langd = "⦑";
var langle = "⟨";
var lap = "⪅";
var laqu = "«";
var laquo = "«";
var larr = "←";
var larrb = "⇤";
var larrbfs = "⤟";
var larrfs = "⤝";
var larrhk = "↩";
var larrlp = "↫";
var larrpl = "⤹";
var larrsim = "⥳";
var larrtl = "↢";
var lat = "⪫";
var latail = "⤙";
var late = "⪭";
var lates = "⪭︀";
var lbarr = "⤌";
var lbbrk = "❲";
var lbrace = "{";
var lbrack = "[";
var lbrke = "⦋";
var lbrksld = "⦏";
var lbrkslu = "⦍";
var lcaron = "ľ";
var lcedil = "ļ";
var lceil = "⌈";
var lcub = "{";
var lcy = "л";
var ldca = "⤶";
var ldquo = "“";
var ldquor = "„";
var ldrdhar = "⥧";
var ldrushar = "⥋";
var ldsh = "↲";
var le = "≤";
var leftarrow = "←";
var leftarrowtail = "↢";
var leftharpoondown = "↽";
var leftharpoonup = "↼";
var leftleftarrows = "⇇";
var leftrightarrow = "↔";
var leftrightarrows = "⇆";
var leftrightharpoons = "⇋";
var leftrightsquigarrow = "↭";
var leftthreetimes = "⋋";
var leg = "⋚";
var leq = "≤";
var leqq = "≦";
var leqslant = "⩽";
var les = "⩽";
var lescc = "⪨";
var lesdot = "⩿";
var lesdoto = "⪁";
var lesdotor = "⪃";
var lesg = "⋚︀";
var lesges = "⪓";
var lessapprox = "⪅";
var lessdot = "⋖";
var lesseqgtr = "⋚";
var lesseqqgtr = "⪋";
var lessgtr = "≶";
var lesssim = "≲";
var lfisht = "⥼";
var lfloor = "⌊";
var lfr = "𝔩";
var lg = "≶";
var lgE = "⪑";
var lhard = "↽";
var lharu = "↼";
var lharul = "⥪";
var lhblk = "▄";
var ljcy = "љ";
var ll = "≪";
var llarr = "⇇";
var llcorner = "⌞";
var llhard = "⥫";
var lltri = "◺";
var lmidot = "ŀ";
var lmoust = "⎰";
var lmoustache = "⎰";
var lnE = "≨";
var lnap = "⪉";
var lnapprox = "⪉";
var lne = "⪇";
var lneq = "⪇";
var lneqq = "≨";
var lnsim = "⋦";
var loang = "⟬";
var loarr = "⇽";
var lobrk = "⟦";
var longleftarrow = "⟵";
var longleftrightarrow = "⟷";
var longmapsto = "⟼";
var longrightarrow = "⟶";
var looparrowleft = "↫";
var looparrowright = "↬";
var lopar = "⦅";
var lopf = "𝕝";
var loplus = "⨭";
var lotimes = "⨴";
var lowast = "∗";
var lowbar = "_";
var loz = "◊";
var lozenge = "◊";
var lozf = "⧫";
var lpar = "(";
var lparlt = "⦓";
var lrarr = "⇆";
var lrcorner = "⌟";
var lrhar = "⇋";
var lrhard = "⥭";
var lrm = "‎";
var lrtri = "⊿";
var lsaquo = "‹";
var lscr = "𝓁";
var lsh = "↰";
var lsim = "≲";
var lsime = "⪍";
var lsimg = "⪏";
var lsqb = "[";
var lsquo = "‘";
var lsquor = "‚";
var lstrok = "ł";
var l = "<";
var lt = "<";
var ltcc = "⪦";
var ltcir = "⩹";
var ltdot = "⋖";
var lthree = "⋋";
var ltimes = "⋉";
var ltlarr = "⥶";
var ltquest = "⩻";
var ltrPar = "⦖";
var ltri = "◃";
var ltrie = "⊴";
var ltrif = "◂";
var lurdshar = "⥊";
var luruhar = "⥦";
var lvertneqq = "≨︀";
var lvnE = "≨︀";
var mDDot = "∺";
var mac = "¯";
var macr = "¯";
var male = "♂";
var malt = "✠";
var maltese = "✠";
var map = "↦";
var mapsto = "↦";
var mapstodown = "↧";
var mapstoleft = "↤";
var mapstoup = "↥";
var marker = "▮";
var mcomma = "⨩";
var mcy = "м";
var mdash = "—";
var measuredangle = "∡";
var mfr = "𝔪";
var mho = "℧";
var micr = "µ";
var micro = "µ";
var mid = "∣";
var midast = "*";
var midcir = "⫰";
var middo = "·";
var middot = "·";
var minus = "−";
var minusb = "⊟";
var minusd = "∸";
var minusdu = "⨪";
var mlcp = "⫛";
var mldr = "…";
var mnplus = "∓";
var models = "⊧";
var mopf = "𝕞";
var mp = "∓";
var mscr = "𝓂";
var mstpos = "∾";
var mu = "μ";
var multimap = "⊸";
var mumap = "⊸";
var nGg = "⋙̸";
var nGt = "≫⃒";
var nGtv = "≫̸";
var nLeftarrow = "⇍";
var nLeftrightarrow = "⇎";
var nLl = "⋘̸";
var nLt = "≪⃒";
var nLtv = "≪̸";
var nRightarrow = "⇏";
var nVDash = "⊯";
var nVdash = "⊮";
var nabla = "∇";
var nacute = "ń";
var nang = "∠⃒";
var nap = "≉";
var napE = "⩰̸";
var napid = "≋̸";
var napos = "ŉ";
var napprox = "≉";
var natur = "♮";
var natural = "♮";
var naturals = "ℕ";
var nbs = " ";
var nbsp = " ";
var nbump = "≎̸";
var nbumpe = "≏̸";
var ncap = "⩃";
var ncaron = "ň";
var ncedil = "ņ";
var ncong = "≇";
var ncongdot = "⩭̸";
var ncup = "⩂";
var ncy = "н";
var ndash = "–";
var ne = "≠";
var neArr = "⇗";
var nearhk = "⤤";
var nearr = "↗";
var nearrow = "↗";
var nedot = "≐̸";
var nequiv = "≢";
var nesear = "⤨";
var nesim = "≂̸";
var nexist = "∄";
var nexists = "∄";
var nfr = "𝔫";
var ngE = "≧̸";
var nge = "≱";
var ngeq = "≱";
var ngeqq = "≧̸";
var ngeqslant = "⩾̸";
var nges = "⩾̸";
var ngsim = "≵";
var ngt = "≯";
var ngtr = "≯";
var nhArr = "⇎";
var nharr = "↮";
var nhpar = "⫲";
var ni = "∋";
var nis = "⋼";
var nisd = "⋺";
var niv = "∋";
var njcy = "њ";
var nlArr = "⇍";
var nlE = "≦̸";
var nlarr = "↚";
var nldr = "‥";
var nle = "≰";
var nleftarrow = "↚";
var nleftrightarrow = "↮";
var nleq = "≰";
var nleqq = "≦̸";
var nleqslant = "⩽̸";
var nles = "⩽̸";
var nless = "≮";
var nlsim = "≴";
var nlt = "≮";
var nltri = "⋪";
var nltrie = "⋬";
var nmid = "∤";
var nopf = "𝕟";
var no = "¬";
var not = "¬";
var notin = "∉";
var notinE = "⋹̸";
var notindot = "⋵̸";
var notinva = "∉";
var notinvb = "⋷";
var notinvc = "⋶";
var notni = "∌";
var notniva = "∌";
var notnivb = "⋾";
var notnivc = "⋽";
var npar = "∦";
var nparallel = "∦";
var nparsl = "⫽⃥";
var npart = "∂̸";
var npolint = "⨔";
var npr = "⊀";
var nprcue = "⋠";
var npre = "⪯̸";
var nprec = "⊀";
var npreceq = "⪯̸";
var nrArr = "⇏";
var nrarr = "↛";
var nrarrc = "⤳̸";
var nrarrw = "↝̸";
var nrightarrow = "↛";
var nrtri = "⋫";
var nrtrie = "⋭";
var nsc = "⊁";
var nsccue = "⋡";
var nsce = "⪰̸";
var nscr = "𝓃";
var nshortmid = "∤";
var nshortparallel = "∦";
var nsim = "≁";
var nsime = "≄";
var nsimeq = "≄";
var nsmid = "∤";
var nspar = "∦";
var nsqsube = "⋢";
var nsqsupe = "⋣";
var nsub = "⊄";
var nsubE = "⫅̸";
var nsube = "⊈";
var nsubset = "⊂⃒";
var nsubseteq = "⊈";
var nsubseteqq = "⫅̸";
var nsucc = "⊁";
var nsucceq = "⪰̸";
var nsup = "⊅";
var nsupE = "⫆̸";
var nsupe = "⊉";
var nsupset = "⊃⃒";
var nsupseteq = "⊉";
var nsupseteqq = "⫆̸";
var ntgl = "≹";
var ntild = "ñ";
var ntilde = "ñ";
var ntlg = "≸";
var ntriangleleft = "⋪";
var ntrianglelefteq = "⋬";
var ntriangleright = "⋫";
var ntrianglerighteq = "⋭";
var nu = "ν";
var num = "#";
var numero = "№";
var numsp = " ";
var nvDash = "⊭";
var nvHarr = "⤄";
var nvap = "≍⃒";
var nvdash = "⊬";
var nvge = "≥⃒";
var nvgt = ">⃒";
var nvinfin = "⧞";
var nvlArr = "⤂";
var nvle = "≤⃒";
var nvlt = "<⃒";
var nvltrie = "⊴⃒";
var nvrArr = "⤃";
var nvrtrie = "⊵⃒";
var nvsim = "∼⃒";
var nwArr = "⇖";
var nwarhk = "⤣";
var nwarr = "↖";
var nwarrow = "↖";
var nwnear = "⤧";
var oS = "Ⓢ";
var oacut = "ó";
var oacute = "ó";
var oast = "⊛";
var ocir = "ô";
var ocirc = "ô";
var ocy = "о";
var odash = "⊝";
var odblac = "ő";
var odiv = "⨸";
var odot = "⊙";
var odsold = "⦼";
var oelig = "œ";
var ofcir = "⦿";
var ofr = "𝔬";
var ogon = "˛";
var ograv = "ò";
var ograve = "ò";
var ogt = "⧁";
var ohbar = "⦵";
var ohm = "Ω";
var oint = "∮";
var olarr = "↺";
var olcir = "⦾";
var olcross = "⦻";
var oline = "‾";
var olt = "⧀";
var omacr = "ō";
var omega = "ω";
var omicron = "ο";
var omid = "⦶";
var ominus = "⊖";
var oopf = "𝕠";
var opar = "⦷";
var operp = "⦹";
var oplus = "⊕";
var or = "∨";
var orarr = "↻";
var ord = "º";
var order$1 = "ℴ";
var orderof = "ℴ";
var ordf = "ª";
var ordm = "º";
var origof = "⊶";
var oror = "⩖";
var orslope = "⩗";
var orv = "⩛";
var oscr = "ℴ";
var oslas = "ø";
var oslash = "ø";
var osol = "⊘";
var otild = "õ";
var otilde = "õ";
var otimes = "⊗";
var otimesas = "⨶";
var oum = "ö";
var ouml = "ö";
var ovbar = "⌽";
var par = "¶";
var para = "¶";
var parallel = "∥";
var parsim = "⫳";
var parsl = "⫽";
var part = "∂";
var pcy = "п";
var percnt = "%";
var period = ".";
var permil = "‰";
var perp = "⊥";
var pertenk = "‱";
var pfr = "𝔭";
var phi = "φ";
var phiv = "ϕ";
var phmmat = "ℳ";
var phone = "☎";
var pi = "π";
var pitchfork = "⋔";
var piv = "ϖ";
var planck = "ℏ";
var planckh = "ℎ";
var plankv = "ℏ";
var plus = "+";
var plusacir = "⨣";
var plusb = "⊞";
var pluscir = "⨢";
var plusdo = "∔";
var plusdu = "⨥";
var pluse = "⩲";
var plusm = "±";
var plusmn = "±";
var plussim = "⨦";
var plustwo = "⨧";
var pm = "±";
var pointint = "⨕";
var popf = "𝕡";
var poun = "£";
var pound = "£";
var pr = "≺";
var prE = "⪳";
var prap = "⪷";
var prcue = "≼";
var pre = "⪯";
var prec = "≺";
var precapprox = "⪷";
var preccurlyeq = "≼";
var preceq = "⪯";
var precnapprox = "⪹";
var precneqq = "⪵";
var precnsim = "⋨";
var precsim = "≾";
var prime = "′";
var primes = "ℙ";
var prnE = "⪵";
var prnap = "⪹";
var prnsim = "⋨";
var prod = "∏";
var profalar = "⌮";
var profline = "⌒";
var profsurf = "⌓";
var prop = "∝";
var propto = "∝";
var prsim = "≾";
var prurel = "⊰";
var pscr = "𝓅";
var psi = "ψ";
var puncsp = " ";
var qfr = "𝔮";
var qint = "⨌";
var qopf = "𝕢";
var qprime = "⁗";
var qscr = "𝓆";
var quaternions = "ℍ";
var quatint = "⨖";
var quest = "?";
var questeq = "≟";
var quo = "\"";
var quot = "\"";
var rAarr = "⇛";
var rArr = "⇒";
var rAtail = "⤜";
var rBarr = "⤏";
var rHar = "⥤";
var race = "∽̱";
var racute = "ŕ";
var radic = "√";
var raemptyv = "⦳";
var rang = "⟩";
var rangd = "⦒";
var range = "⦥";
var rangle = "⟩";
var raqu = "»";
var raquo = "»";
var rarr = "→";
var rarrap = "⥵";
var rarrb = "⇥";
var rarrbfs = "⤠";
var rarrc = "⤳";
var rarrfs = "⤞";
var rarrhk = "↪";
var rarrlp = "↬";
var rarrpl = "⥅";
var rarrsim = "⥴";
var rarrtl = "↣";
var rarrw = "↝";
var ratail = "⤚";
var ratio = "∶";
var rationals = "ℚ";
var rbarr = "⤍";
var rbbrk = "❳";
var rbrace = "}";
var rbrack = "]";
var rbrke = "⦌";
var rbrksld = "⦎";
var rbrkslu = "⦐";
var rcaron = "ř";
var rcedil = "ŗ";
var rceil = "⌉";
var rcub = "}";
var rcy = "р";
var rdca = "⤷";
var rdldhar = "⥩";
var rdquo = "”";
var rdquor = "”";
var rdsh = "↳";
var real = "ℜ";
var realine = "ℛ";
var realpart = "ℜ";
var reals = "ℝ";
var rect = "▭";
var re = "®";
var reg = "®";
var rfisht = "⥽";
var rfloor = "⌋";
var rfr = "𝔯";
var rhard = "⇁";
var rharu = "⇀";
var rharul = "⥬";
var rho = "ρ";
var rhov = "ϱ";
var rightarrow = "→";
var rightarrowtail = "↣";
var rightharpoondown = "⇁";
var rightharpoonup = "⇀";
var rightleftarrows = "⇄";
var rightleftharpoons = "⇌";
var rightrightarrows = "⇉";
var rightsquigarrow = "↝";
var rightthreetimes = "⋌";
var ring = "˚";
var risingdotseq = "≓";
var rlarr = "⇄";
var rlhar = "⇌";
var rlm = "‏";
var rmoust = "⎱";
var rmoustache = "⎱";
var rnmid = "⫮";
var roang = "⟭";
var roarr = "⇾";
var robrk = "⟧";
var ropar = "⦆";
var ropf = "𝕣";
var roplus = "⨮";
var rotimes = "⨵";
var rpar = ")";
var rpargt = "⦔";
var rppolint = "⨒";
var rrarr = "⇉";
var rsaquo = "›";
var rscr = "𝓇";
var rsh = "↱";
var rsqb = "]";
var rsquo = "’";
var rsquor = "’";
var rthree = "⋌";
var rtimes = "⋊";
var rtri = "▹";
var rtrie = "⊵";
var rtrif = "▸";
var rtriltri = "⧎";
var ruluhar = "⥨";
var rx = "℞";
var sacute = "ś";
var sbquo = "‚";
var sc = "≻";
var scE = "⪴";
var scap = "⪸";
var scaron = "š";
var sccue = "≽";
var sce = "⪰";
var scedil = "ş";
var scirc = "ŝ";
var scnE = "⪶";
var scnap = "⪺";
var scnsim = "⋩";
var scpolint = "⨓";
var scsim = "≿";
var scy = "с";
var sdot = "⋅";
var sdotb = "⊡";
var sdote = "⩦";
var seArr = "⇘";
var searhk = "⤥";
var searr = "↘";
var searrow = "↘";
var sec = "§";
var sect = "§";
var semi = ";";
var seswar = "⤩";
var setminus = "∖";
var setmn = "∖";
var sext = "✶";
var sfr = "𝔰";
var sfrown = "⌢";
var sharp = "♯";
var shchcy = "щ";
var shcy = "ш";
var shortmid = "∣";
var shortparallel = "∥";
var sh = "­";
var shy = "­";
var sigma = "σ";
var sigmaf = "ς";
var sigmav = "ς";
var sim = "∼";
var simdot = "⩪";
var sime = "≃";
var simeq = "≃";
var simg = "⪞";
var simgE = "⪠";
var siml = "⪝";
var simlE = "⪟";
var simne = "≆";
var simplus = "⨤";
var simrarr = "⥲";
var slarr = "←";
var smallsetminus = "∖";
var smashp = "⨳";
var smeparsl = "⧤";
var smid = "∣";
var smile = "⌣";
var smt = "⪪";
var smte = "⪬";
var smtes = "⪬︀";
var softcy = "ь";
var sol = "/";
var solb = "⧄";
var solbar = "⌿";
var sopf = "𝕤";
var spades = "♠";
var spadesuit = "♠";
var spar = "∥";
var sqcap = "⊓";
var sqcaps = "⊓︀";
var sqcup = "⊔";
var sqcups = "⊔︀";
var sqsub = "⊏";
var sqsube = "⊑";
var sqsubset = "⊏";
var sqsubseteq = "⊑";
var sqsup = "⊐";
var sqsupe = "⊒";
var sqsupset = "⊐";
var sqsupseteq = "⊒";
var squ = "□";
var square = "□";
var squarf = "▪";
var squf = "▪";
var srarr = "→";
var sscr = "𝓈";
var ssetmn = "∖";
var ssmile = "⌣";
var sstarf = "⋆";
var star = "☆";
var starf = "★";
var straightepsilon = "ϵ";
var straightphi = "ϕ";
var strns = "¯";
var sub = "⊂";
var subE = "⫅";
var subdot = "⪽";
var sube = "⊆";
var subedot = "⫃";
var submult = "⫁";
var subnE = "⫋";
var subne = "⊊";
var subplus = "⪿";
var subrarr = "⥹";
var subset = "⊂";
var subseteq = "⊆";
var subseteqq = "⫅";
var subsetneq = "⊊";
var subsetneqq = "⫋";
var subsim = "⫇";
var subsub = "⫕";
var subsup = "⫓";
var succ = "≻";
var succapprox = "⪸";
var succcurlyeq = "≽";
var succeq = "⪰";
var succnapprox = "⪺";
var succneqq = "⪶";
var succnsim = "⋩";
var succsim = "≿";
var sum = "∑";
var sung = "♪";
var sup = "⊃";
var sup1 = "¹";
var sup2 = "²";
var sup3 = "³";
var supE = "⫆";
var supdot = "⪾";
var supdsub = "⫘";
var supe = "⊇";
var supedot = "⫄";
var suphsol = "⟉";
var suphsub = "⫗";
var suplarr = "⥻";
var supmult = "⫂";
var supnE = "⫌";
var supne = "⊋";
var supplus = "⫀";
var supset = "⊃";
var supseteq = "⊇";
var supseteqq = "⫆";
var supsetneq = "⊋";
var supsetneqq = "⫌";
var supsim = "⫈";
var supsub = "⫔";
var supsup = "⫖";
var swArr = "⇙";
var swarhk = "⤦";
var swarr = "↙";
var swarrow = "↙";
var swnwar = "⤪";
var szli = "ß";
var szlig = "ß";
var target = "⌖";
var tau = "τ";
var tbrk = "⎴";
var tcaron = "ť";
var tcedil = "ţ";
var tcy = "т";
var tdot = "⃛";
var telrec = "⌕";
var tfr = "𝔱";
var there4 = "∴";
var therefore = "∴";
var theta = "θ";
var thetasym = "ϑ";
var thetav = "ϑ";
var thickapprox = "≈";
var thicksim = "∼";
var thinsp = " ";
var thkap = "≈";
var thksim = "∼";
var thor = "þ";
var thorn = "þ";
var tilde = "˜";
var time = "×";
var times = "×";
var timesb = "⊠";
var timesbar = "⨱";
var timesd = "⨰";
var tint = "∭";
var toea = "⤨";
var top = "⊤";
var topbot = "⌶";
var topcir = "⫱";
var topf = "𝕥";
var topfork = "⫚";
var tosa = "⤩";
var tprime = "‴";
var trade = "™";
var triangle = "▵";
var triangledown = "▿";
var triangleleft = "◃";
var trianglelefteq = "⊴";
var triangleq = "≜";
var triangleright = "▹";
var trianglerighteq = "⊵";
var tridot = "◬";
var trie = "≜";
var triminus = "⨺";
var triplus = "⨹";
var trisb = "⧍";
var tritime = "⨻";
var trpezium = "⏢";
var tscr = "𝓉";
var tscy = "ц";
var tshcy = "ћ";
var tstrok = "ŧ";
var twixt = "≬";
var twoheadleftarrow = "↞";
var twoheadrightarrow = "↠";
var uArr = "⇑";
var uHar = "⥣";
var uacut = "ú";
var uacute = "ú";
var uarr = "↑";
var ubrcy = "ў";
var ubreve = "ŭ";
var ucir = "û";
var ucirc = "û";
var ucy = "у";
var udarr = "⇅";
var udblac = "ű";
var udhar = "⥮";
var ufisht = "⥾";
var ufr = "𝔲";
var ugrav = "ù";
var ugrave = "ù";
var uharl = "↿";
var uharr = "↾";
var uhblk = "▀";
var ulcorn = "⌜";
var ulcorner = "⌜";
var ulcrop = "⌏";
var ultri = "◸";
var umacr = "ū";
var um = "¨";
var uml = "¨";
var uogon = "ų";
var uopf = "𝕦";
var uparrow = "↑";
var updownarrow = "↕";
var upharpoonleft = "↿";
var upharpoonright = "↾";
var uplus = "⊎";
var upsi = "υ";
var upsih = "ϒ";
var upsilon = "υ";
var upuparrows = "⇈";
var urcorn = "⌝";
var urcorner = "⌝";
var urcrop = "⌎";
var uring = "ů";
var urtri = "◹";
var uscr = "𝓊";
var utdot = "⋰";
var utilde = "ũ";
var utri = "▵";
var utrif = "▴";
var uuarr = "⇈";
var uum = "ü";
var uuml = "ü";
var uwangle = "⦧";
var vArr = "⇕";
var vBar = "⫨";
var vBarv = "⫩";
var vDash = "⊨";
var vangrt = "⦜";
var varepsilon = "ϵ";
var varkappa = "ϰ";
var varnothing = "∅";
var varphi = "ϕ";
var varpi = "ϖ";
var varpropto = "∝";
var varr = "↕";
var varrho = "ϱ";
var varsigma = "ς";
var varsubsetneq = "⊊︀";
var varsubsetneqq = "⫋︀";
var varsupsetneq = "⊋︀";
var varsupsetneqq = "⫌︀";
var vartheta = "ϑ";
var vartriangleleft = "⊲";
var vartriangleright = "⊳";
var vcy = "в";
var vdash = "⊢";
var vee = "∨";
var veebar = "⊻";
var veeeq = "≚";
var vellip = "⋮";
var verbar = "|";
var vert = "|";
var vfr = "𝔳";
var vltri = "⊲";
var vnsub = "⊂⃒";
var vnsup = "⊃⃒";
var vopf = "𝕧";
var vprop = "∝";
var vrtri = "⊳";
var vscr = "𝓋";
var vsubnE = "⫋︀";
var vsubne = "⊊︀";
var vsupnE = "⫌︀";
var vsupne = "⊋︀";
var vzigzag = "⦚";
var wcirc = "ŵ";
var wedbar = "⩟";
var wedge = "∧";
var wedgeq = "≙";
var weierp = "℘";
var wfr = "𝔴";
var wopf = "𝕨";
var wp = "℘";
var wr = "≀";
var wreath = "≀";
var wscr = "𝓌";
var xcap = "⋂";
var xcirc = "◯";
var xcup = "⋃";
var xdtri = "▽";
var xfr = "𝔵";
var xhArr = "⟺";
var xharr = "⟷";
var xi = "ξ";
var xlArr = "⟸";
var xlarr = "⟵";
var xmap = "⟼";
var xnis = "⋻";
var xodot = "⨀";
var xopf = "𝕩";
var xoplus = "⨁";
var xotime = "⨂";
var xrArr = "⟹";
var xrarr = "⟶";
var xscr = "𝓍";
var xsqcup = "⨆";
var xuplus = "⨄";
var xutri = "△";
var xvee = "⋁";
var xwedge = "⋀";
var yacut = "ý";
var yacute = "ý";
var yacy = "я";
var ycirc = "ŷ";
var ycy = "ы";
var ye = "¥";
var yen = "¥";
var yfr = "𝔶";
var yicy = "ї";
var yopf = "𝕪";
var yscr = "𝓎";
var yucy = "ю";
var yum = "ÿ";
var yuml = "ÿ";
var zacute = "ź";
var zcaron = "ž";
var zcy = "з";
var zdot = "ż";
var zeetrf = "ℨ";
var zeta = "ζ";
var zfr = "𝔷";
var zhcy = "ж";
var zigrarr = "⇝";
var zopf = "𝕫";
var zscr = "𝓏";
var zwj = "‍";
var zwnj = "‌";
var characterEntities = {
	AEli: AEli,
	AElig: AElig,
	AM: AM,
	AMP: AMP,
	Aacut: Aacut,
	Aacute: Aacute,
	Abreve: Abreve,
	Acir: Acir,
	Acirc: Acirc,
	Acy: Acy,
	Afr: Afr,
	Agrav: Agrav,
	Agrave: Agrave,
	Alpha: Alpha,
	Amacr: Amacr,
	And: And,
	Aogon: Aogon,
	Aopf: Aopf,
	ApplyFunction: ApplyFunction,
	Arin: Arin,
	Aring: Aring,
	Ascr: Ascr,
	Assign: Assign,
	Atild: Atild,
	Atilde: Atilde,
	Aum: Aum,
	Auml: Auml,
	Backslash: Backslash,
	Barv: Barv,
	Barwed: Barwed,
	Bcy: Bcy,
	Because: Because,
	Bernoullis: Bernoullis,
	Beta: Beta,
	Bfr: Bfr,
	Bopf: Bopf,
	Breve: Breve,
	Bscr: Bscr,
	Bumpeq: Bumpeq,
	CHcy: CHcy,
	COP: COP,
	COPY: COPY,
	Cacute: Cacute,
	Cap: Cap,
	CapitalDifferentialD: CapitalDifferentialD,
	Cayleys: Cayleys,
	Ccaron: Ccaron,
	Ccedi: Ccedi,
	Ccedil: Ccedil,
	Ccirc: Ccirc,
	Cconint: Cconint,
	Cdot: Cdot,
	Cedilla: Cedilla,
	CenterDot: CenterDot,
	Cfr: Cfr,
	Chi: Chi,
	CircleDot: CircleDot,
	CircleMinus: CircleMinus,
	CirclePlus: CirclePlus,
	CircleTimes: CircleTimes,
	ClockwiseContourIntegral: ClockwiseContourIntegral,
	CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
	CloseCurlyQuote: CloseCurlyQuote,
	Colon: Colon,
	Colone: Colone,
	Congruent: Congruent,
	Conint: Conint,
	ContourIntegral: ContourIntegral,
	Copf: Copf,
	Coproduct: Coproduct,
	CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
	Cross: Cross,
	Cscr: Cscr,
	Cup: Cup,
	CupCap: CupCap,
	DD: DD,
	DDotrahd: DDotrahd,
	DJcy: DJcy,
	DScy: DScy,
	DZcy: DZcy,
	Dagger: Dagger,
	Darr: Darr,
	Dashv: Dashv,
	Dcaron: Dcaron,
	Dcy: Dcy,
	Del: Del,
	Delta: Delta,
	Dfr: Dfr,
	DiacriticalAcute: DiacriticalAcute,
	DiacriticalDot: DiacriticalDot,
	DiacriticalDoubleAcute: DiacriticalDoubleAcute,
	DiacriticalGrave: DiacriticalGrave,
	DiacriticalTilde: DiacriticalTilde,
	Diamond: Diamond,
	DifferentialD: DifferentialD,
	Dopf: Dopf,
	Dot: Dot,
	DotDot: DotDot,
	DotEqual: DotEqual,
	DoubleContourIntegral: DoubleContourIntegral,
	DoubleDot: DoubleDot,
	DoubleDownArrow: DoubleDownArrow,
	DoubleLeftArrow: DoubleLeftArrow,
	DoubleLeftRightArrow: DoubleLeftRightArrow,
	DoubleLeftTee: DoubleLeftTee,
	DoubleLongLeftArrow: DoubleLongLeftArrow,
	DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
	DoubleLongRightArrow: DoubleLongRightArrow,
	DoubleRightArrow: DoubleRightArrow,
	DoubleRightTee: DoubleRightTee,
	DoubleUpArrow: DoubleUpArrow,
	DoubleUpDownArrow: DoubleUpDownArrow,
	DoubleVerticalBar: DoubleVerticalBar,
	DownArrow: DownArrow,
	DownArrowBar: DownArrowBar,
	DownArrowUpArrow: DownArrowUpArrow,
	DownBreve: DownBreve,
	DownLeftRightVector: DownLeftRightVector,
	DownLeftTeeVector: DownLeftTeeVector,
	DownLeftVector: DownLeftVector,
	DownLeftVectorBar: DownLeftVectorBar,
	DownRightTeeVector: DownRightTeeVector,
	DownRightVector: DownRightVector,
	DownRightVectorBar: DownRightVectorBar,
	DownTee: DownTee,
	DownTeeArrow: DownTeeArrow,
	Downarrow: Downarrow,
	Dscr: Dscr,
	Dstrok: Dstrok,
	ENG: ENG,
	ET: ET,
	ETH: ETH,
	Eacut: Eacut,
	Eacute: Eacute,
	Ecaron: Ecaron,
	Ecir: Ecir,
	Ecirc: Ecirc,
	Ecy: Ecy,
	Edot: Edot,
	Efr: Efr,
	Egrav: Egrav,
	Egrave: Egrave,
	Element: Element,
	Emacr: Emacr,
	EmptySmallSquare: EmptySmallSquare,
	EmptyVerySmallSquare: EmptyVerySmallSquare,
	Eogon: Eogon,
	Eopf: Eopf,
	Epsilon: Epsilon,
	Equal: Equal,
	EqualTilde: EqualTilde,
	Equilibrium: Equilibrium,
	Escr: Escr,
	Esim: Esim,
	Eta: Eta,
	Eum: Eum,
	Euml: Euml,
	Exists: Exists,
	ExponentialE: ExponentialE,
	Fcy: Fcy,
	Ffr: Ffr,
	FilledSmallSquare: FilledSmallSquare,
	FilledVerySmallSquare: FilledVerySmallSquare,
	Fopf: Fopf,
	ForAll: ForAll,
	Fouriertrf: Fouriertrf,
	Fscr: Fscr,
	GJcy: GJcy,
	G: G,
	GT: GT,
	Gamma: Gamma,
	Gammad: Gammad,
	Gbreve: Gbreve,
	Gcedil: Gcedil,
	Gcirc: Gcirc,
	Gcy: Gcy,
	Gdot: Gdot,
	Gfr: Gfr,
	Gg: Gg,
	Gopf: Gopf,
	GreaterEqual: GreaterEqual,
	GreaterEqualLess: GreaterEqualLess,
	GreaterFullEqual: GreaterFullEqual,
	GreaterGreater: GreaterGreater,
	GreaterLess: GreaterLess,
	GreaterSlantEqual: GreaterSlantEqual,
	GreaterTilde: GreaterTilde,
	Gscr: Gscr,
	Gt: Gt,
	HARDcy: HARDcy,
	Hacek: Hacek,
	Hat: Hat,
	Hcirc: Hcirc,
	Hfr: Hfr,
	HilbertSpace: HilbertSpace,
	Hopf: Hopf,
	HorizontalLine: HorizontalLine,
	Hscr: Hscr,
	Hstrok: Hstrok,
	HumpDownHump: HumpDownHump,
	HumpEqual: HumpEqual,
	IEcy: IEcy,
	IJlig: IJlig,
	IOcy: IOcy,
	Iacut: Iacut,
	Iacute: Iacute,
	Icir: Icir,
	Icirc: Icirc,
	Icy: Icy,
	Idot: Idot,
	Ifr: Ifr,
	Igrav: Igrav,
	Igrave: Igrave,
	Im: Im,
	Imacr: Imacr,
	ImaginaryI: ImaginaryI,
	Implies: Implies,
	Int: Int,
	Integral: Integral,
	Intersection: Intersection,
	InvisibleComma: InvisibleComma,
	InvisibleTimes: InvisibleTimes,
	Iogon: Iogon,
	Iopf: Iopf,
	Iota: Iota,
	Iscr: Iscr,
	Itilde: Itilde,
	Iukcy: Iukcy,
	Ium: Ium,
	Iuml: Iuml,
	Jcirc: Jcirc,
	Jcy: Jcy,
	Jfr: Jfr,
	Jopf: Jopf,
	Jscr: Jscr,
	Jsercy: Jsercy,
	Jukcy: Jukcy,
	KHcy: KHcy,
	KJcy: KJcy,
	Kappa: Kappa,
	Kcedil: Kcedil,
	Kcy: Kcy,
	Kfr: Kfr,
	Kopf: Kopf,
	Kscr: Kscr,
	LJcy: LJcy,
	L: L,
	LT: LT,
	Lacute: Lacute,
	Lambda: Lambda,
	Lang: Lang,
	Laplacetrf: Laplacetrf,
	Larr: Larr,
	Lcaron: Lcaron,
	Lcedil: Lcedil,
	Lcy: Lcy,
	LeftAngleBracket: LeftAngleBracket,
	LeftArrow: LeftArrow,
	LeftArrowBar: LeftArrowBar,
	LeftArrowRightArrow: LeftArrowRightArrow,
	LeftCeiling: LeftCeiling,
	LeftDoubleBracket: LeftDoubleBracket,
	LeftDownTeeVector: LeftDownTeeVector,
	LeftDownVector: LeftDownVector,
	LeftDownVectorBar: LeftDownVectorBar,
	LeftFloor: LeftFloor,
	LeftRightArrow: LeftRightArrow,
	LeftRightVector: LeftRightVector,
	LeftTee: LeftTee,
	LeftTeeArrow: LeftTeeArrow,
	LeftTeeVector: LeftTeeVector,
	LeftTriangle: LeftTriangle,
	LeftTriangleBar: LeftTriangleBar,
	LeftTriangleEqual: LeftTriangleEqual,
	LeftUpDownVector: LeftUpDownVector,
	LeftUpTeeVector: LeftUpTeeVector,
	LeftUpVector: LeftUpVector,
	LeftUpVectorBar: LeftUpVectorBar,
	LeftVector: LeftVector,
	LeftVectorBar: LeftVectorBar,
	Leftarrow: Leftarrow,
	Leftrightarrow: Leftrightarrow,
	LessEqualGreater: LessEqualGreater,
	LessFullEqual: LessFullEqual,
	LessGreater: LessGreater,
	LessLess: LessLess,
	LessSlantEqual: LessSlantEqual,
	LessTilde: LessTilde,
	Lfr: Lfr,
	Ll: Ll,
	Lleftarrow: Lleftarrow,
	Lmidot: Lmidot,
	LongLeftArrow: LongLeftArrow,
	LongLeftRightArrow: LongLeftRightArrow,
	LongRightArrow: LongRightArrow,
	Longleftarrow: Longleftarrow,
	Longleftrightarrow: Longleftrightarrow,
	Longrightarrow: Longrightarrow,
	Lopf: Lopf,
	LowerLeftArrow: LowerLeftArrow,
	LowerRightArrow: LowerRightArrow,
	Lscr: Lscr,
	Lsh: Lsh,
	Lstrok: Lstrok,
	Lt: Lt,
	"Map": "⤅",
	Mcy: Mcy,
	MediumSpace: MediumSpace,
	Mellintrf: Mellintrf,
	Mfr: Mfr,
	MinusPlus: MinusPlus,
	Mopf: Mopf,
	Mscr: Mscr,
	Mu: Mu,
	NJcy: NJcy,
	Nacute: Nacute,
	Ncaron: Ncaron,
	Ncedil: Ncedil,
	Ncy: Ncy,
	NegativeMediumSpace: NegativeMediumSpace,
	NegativeThickSpace: NegativeThickSpace,
	NegativeThinSpace: NegativeThinSpace,
	NegativeVeryThinSpace: NegativeVeryThinSpace,
	NestedGreaterGreater: NestedGreaterGreater,
	NestedLessLess: NestedLessLess,
	NewLine: NewLine,
	Nfr: Nfr,
	NoBreak: NoBreak,
	NonBreakingSpace: NonBreakingSpace,
	Nopf: Nopf,
	Not: Not,
	NotCongruent: NotCongruent,
	NotCupCap: NotCupCap,
	NotDoubleVerticalBar: NotDoubleVerticalBar,
	NotElement: NotElement,
	NotEqual: NotEqual,
	NotEqualTilde: NotEqualTilde,
	NotExists: NotExists,
	NotGreater: NotGreater,
	NotGreaterEqual: NotGreaterEqual,
	NotGreaterFullEqual: NotGreaterFullEqual,
	NotGreaterGreater: NotGreaterGreater,
	NotGreaterLess: NotGreaterLess,
	NotGreaterSlantEqual: NotGreaterSlantEqual,
	NotGreaterTilde: NotGreaterTilde,
	NotHumpDownHump: NotHumpDownHump,
	NotHumpEqual: NotHumpEqual,
	NotLeftTriangle: NotLeftTriangle,
	NotLeftTriangleBar: NotLeftTriangleBar,
	NotLeftTriangleEqual: NotLeftTriangleEqual,
	NotLess: NotLess,
	NotLessEqual: NotLessEqual,
	NotLessGreater: NotLessGreater,
	NotLessLess: NotLessLess,
	NotLessSlantEqual: NotLessSlantEqual,
	NotLessTilde: NotLessTilde,
	NotNestedGreaterGreater: NotNestedGreaterGreater,
	NotNestedLessLess: NotNestedLessLess,
	NotPrecedes: NotPrecedes,
	NotPrecedesEqual: NotPrecedesEqual,
	NotPrecedesSlantEqual: NotPrecedesSlantEqual,
	NotReverseElement: NotReverseElement,
	NotRightTriangle: NotRightTriangle,
	NotRightTriangleBar: NotRightTriangleBar,
	NotRightTriangleEqual: NotRightTriangleEqual,
	NotSquareSubset: NotSquareSubset,
	NotSquareSubsetEqual: NotSquareSubsetEqual,
	NotSquareSuperset: NotSquareSuperset,
	NotSquareSupersetEqual: NotSquareSupersetEqual,
	NotSubset: NotSubset,
	NotSubsetEqual: NotSubsetEqual,
	NotSucceeds: NotSucceeds,
	NotSucceedsEqual: NotSucceedsEqual,
	NotSucceedsSlantEqual: NotSucceedsSlantEqual,
	NotSucceedsTilde: NotSucceedsTilde,
	NotSuperset: NotSuperset,
	NotSupersetEqual: NotSupersetEqual,
	NotTilde: NotTilde,
	NotTildeEqual: NotTildeEqual,
	NotTildeFullEqual: NotTildeFullEqual,
	NotTildeTilde: NotTildeTilde,
	NotVerticalBar: NotVerticalBar,
	Nscr: Nscr,
	Ntild: Ntild,
	Ntilde: Ntilde,
	Nu: Nu,
	OElig: OElig,
	Oacut: Oacut,
	Oacute: Oacute,
	Ocir: Ocir,
	Ocirc: Ocirc,
	Ocy: Ocy,
	Odblac: Odblac,
	Ofr: Ofr,
	Ograv: Ograv,
	Ograve: Ograve,
	Omacr: Omacr,
	Omega: Omega,
	Omicron: Omicron,
	Oopf: Oopf,
	OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
	OpenCurlyQuote: OpenCurlyQuote,
	Or: Or,
	Oscr: Oscr,
	Oslas: Oslas,
	Oslash: Oslash,
	Otild: Otild,
	Otilde: Otilde,
	Otimes: Otimes,
	Oum: Oum,
	Ouml: Ouml,
	OverBar: OverBar,
	OverBrace: OverBrace,
	OverBracket: OverBracket,
	OverParenthesis: OverParenthesis,
	PartialD: PartialD,
	Pcy: Pcy,
	Pfr: Pfr,
	Phi: Phi,
	Pi: Pi,
	PlusMinus: PlusMinus,
	Poincareplane: Poincareplane,
	Popf: Popf,
	Pr: Pr,
	Precedes: Precedes,
	PrecedesEqual: PrecedesEqual,
	PrecedesSlantEqual: PrecedesSlantEqual,
	PrecedesTilde: PrecedesTilde,
	Prime: Prime,
	Product: Product,
	Proportion: Proportion,
	Proportional: Proportional,
	Pscr: Pscr,
	Psi: Psi,
	QUO: QUO,
	QUOT: QUOT,
	Qfr: Qfr,
	Qopf: Qopf,
	Qscr: Qscr,
	RBarr: RBarr,
	RE: RE,
	REG: REG,
	Racute: Racute,
	Rang: Rang,
	Rarr: Rarr,
	Rarrtl: Rarrtl,
	Rcaron: Rcaron,
	Rcedil: Rcedil,
	Rcy: Rcy,
	Re: Re,
	ReverseElement: ReverseElement,
	ReverseEquilibrium: ReverseEquilibrium,
	ReverseUpEquilibrium: ReverseUpEquilibrium,
	Rfr: Rfr,
	Rho: Rho,
	RightAngleBracket: RightAngleBracket,
	RightArrow: RightArrow,
	RightArrowBar: RightArrowBar,
	RightArrowLeftArrow: RightArrowLeftArrow,
	RightCeiling: RightCeiling,
	RightDoubleBracket: RightDoubleBracket,
	RightDownTeeVector: RightDownTeeVector,
	RightDownVector: RightDownVector,
	RightDownVectorBar: RightDownVectorBar,
	RightFloor: RightFloor,
	RightTee: RightTee,
	RightTeeArrow: RightTeeArrow,
	RightTeeVector: RightTeeVector,
	RightTriangle: RightTriangle,
	RightTriangleBar: RightTriangleBar,
	RightTriangleEqual: RightTriangleEqual,
	RightUpDownVector: RightUpDownVector,
	RightUpTeeVector: RightUpTeeVector,
	RightUpVector: RightUpVector,
	RightUpVectorBar: RightUpVectorBar,
	RightVector: RightVector,
	RightVectorBar: RightVectorBar,
	Rightarrow: Rightarrow,
	Ropf: Ropf,
	RoundImplies: RoundImplies,
	Rrightarrow: Rrightarrow,
	Rscr: Rscr,
	Rsh: Rsh,
	RuleDelayed: RuleDelayed,
	SHCHcy: SHCHcy,
	SHcy: SHcy,
	SOFTcy: SOFTcy,
	Sacute: Sacute,
	Sc: Sc,
	Scaron: Scaron,
	Scedil: Scedil,
	Scirc: Scirc,
	Scy: Scy,
	Sfr: Sfr,
	ShortDownArrow: ShortDownArrow,
	ShortLeftArrow: ShortLeftArrow,
	ShortRightArrow: ShortRightArrow,
	ShortUpArrow: ShortUpArrow,
	Sigma: Sigma,
	SmallCircle: SmallCircle,
	Sopf: Sopf,
	Sqrt: Sqrt,
	Square: Square,
	SquareIntersection: SquareIntersection,
	SquareSubset: SquareSubset,
	SquareSubsetEqual: SquareSubsetEqual,
	SquareSuperset: SquareSuperset,
	SquareSupersetEqual: SquareSupersetEqual,
	SquareUnion: SquareUnion,
	Sscr: Sscr,
	Star: Star,
	Sub: Sub,
	Subset: Subset,
	SubsetEqual: SubsetEqual,
	Succeeds: Succeeds,
	SucceedsEqual: SucceedsEqual,
	SucceedsSlantEqual: SucceedsSlantEqual,
	SucceedsTilde: SucceedsTilde,
	SuchThat: SuchThat,
	Sum: Sum,
	Sup: Sup,
	Superset: Superset,
	SupersetEqual: SupersetEqual,
	Supset: Supset,
	THOR: THOR,
	THORN: THORN,
	TRADE: TRADE,
	TSHcy: TSHcy,
	TScy: TScy,
	Tab: Tab,
	Tau: Tau,
	Tcaron: Tcaron,
	Tcedil: Tcedil,
	Tcy: Tcy,
	Tfr: Tfr,
	Therefore: Therefore,
	Theta: Theta,
	ThickSpace: ThickSpace,
	ThinSpace: ThinSpace,
	Tilde: Tilde,
	TildeEqual: TildeEqual,
	TildeFullEqual: TildeFullEqual,
	TildeTilde: TildeTilde,
	Topf: Topf,
	TripleDot: TripleDot,
	Tscr: Tscr,
	Tstrok: Tstrok,
	Uacut: Uacut,
	Uacute: Uacute,
	Uarr: Uarr,
	Uarrocir: Uarrocir,
	Ubrcy: Ubrcy,
	Ubreve: Ubreve,
	Ucir: Ucir,
	Ucirc: Ucirc,
	Ucy: Ucy,
	Udblac: Udblac,
	Ufr: Ufr,
	Ugrav: Ugrav,
	Ugrave: Ugrave,
	Umacr: Umacr,
	UnderBar: UnderBar,
	UnderBrace: UnderBrace,
	UnderBracket: UnderBracket,
	UnderParenthesis: UnderParenthesis,
	Union: Union,
	UnionPlus: UnionPlus,
	Uogon: Uogon,
	Uopf: Uopf,
	UpArrow: UpArrow,
	UpArrowBar: UpArrowBar,
	UpArrowDownArrow: UpArrowDownArrow,
	UpDownArrow: UpDownArrow,
	UpEquilibrium: UpEquilibrium,
	UpTee: UpTee,
	UpTeeArrow: UpTeeArrow,
	Uparrow: Uparrow,
	Updownarrow: Updownarrow,
	UpperLeftArrow: UpperLeftArrow,
	UpperRightArrow: UpperRightArrow,
	Upsi: Upsi,
	Upsilon: Upsilon,
	Uring: Uring,
	Uscr: Uscr,
	Utilde: Utilde,
	Uum: Uum,
	Uuml: Uuml,
	VDash: VDash,
	Vbar: Vbar,
	Vcy: Vcy,
	Vdash: Vdash,
	Vdashl: Vdashl,
	Vee: Vee,
	Verbar: Verbar,
	Vert: Vert,
	VerticalBar: VerticalBar,
	VerticalLine: VerticalLine,
	VerticalSeparator: VerticalSeparator,
	VerticalTilde: VerticalTilde,
	VeryThinSpace: VeryThinSpace,
	Vfr: Vfr,
	Vopf: Vopf,
	Vscr: Vscr,
	Vvdash: Vvdash,
	Wcirc: Wcirc,
	Wedge: Wedge,
	Wfr: Wfr,
	Wopf: Wopf,
	Wscr: Wscr,
	Xfr: Xfr,
	Xi: Xi,
	Xopf: Xopf,
	Xscr: Xscr,
	YAcy: YAcy,
	YIcy: YIcy,
	YUcy: YUcy,
	Yacut: Yacut,
	Yacute: Yacute,
	Ycirc: Ycirc,
	Ycy: Ycy,
	Yfr: Yfr,
	Yopf: Yopf,
	Yscr: Yscr,
	Yuml: Yuml,
	ZHcy: ZHcy,
	Zacute: Zacute,
	Zcaron: Zcaron,
	Zcy: Zcy,
	Zdot: Zdot,
	ZeroWidthSpace: ZeroWidthSpace,
	Zeta: Zeta,
	Zfr: Zfr,
	Zopf: Zopf,
	Zscr: Zscr,
	aacut: aacut,
	aacute: aacute,
	abreve: abreve,
	ac: ac,
	acE: acE,
	acd: acd,
	acir: acir,
	acirc: acirc,
	acut: acut,
	acute: acute,
	acy: acy,
	aeli: aeli,
	aelig: aelig,
	af: af,
	afr: afr,
	agrav: agrav,
	agrave: agrave,
	alefsym: alefsym,
	aleph: aleph,
	alpha: alpha,
	amacr: amacr,
	amalg: amalg,
	am: am,
	amp: amp,
	and: and,
	andand: andand,
	andd: andd,
	andslope: andslope,
	andv: andv,
	ang: ang,
	ange: ange,
	angle: angle,
	angmsd: angmsd,
	angmsdaa: angmsdaa,
	angmsdab: angmsdab,
	angmsdac: angmsdac,
	angmsdad: angmsdad,
	angmsdae: angmsdae,
	angmsdaf: angmsdaf,
	angmsdag: angmsdag,
	angmsdah: angmsdah,
	angrt: angrt,
	angrtvb: angrtvb,
	angrtvbd: angrtvbd,
	angsph: angsph,
	angst: angst,
	angzarr: angzarr,
	aogon: aogon,
	aopf: aopf,
	ap: ap,
	apE: apE,
	apacir: apacir,
	ape: ape,
	apid: apid,
	apos: apos,
	approx: approx,
	approxeq: approxeq,
	arin: arin,
	aring: aring,
	ascr: ascr,
	ast: ast,
	asymp: asymp,
	asympeq: asympeq,
	atild: atild,
	atilde: atilde,
	aum: aum,
	auml: auml,
	awconint: awconint,
	awint: awint,
	bNot: bNot,
	backcong: backcong,
	backepsilon: backepsilon,
	backprime: backprime,
	backsim: backsim,
	backsimeq: backsimeq,
	barvee: barvee,
	barwed: barwed,
	barwedge: barwedge,
	bbrk: bbrk,
	bbrktbrk: bbrktbrk,
	bcong: bcong,
	bcy: bcy,
	bdquo: bdquo,
	becaus: becaus,
	because: because,
	bemptyv: bemptyv,
	bepsi: bepsi,
	bernou: bernou,
	beta: beta,
	beth: beth,
	between: between,
	bfr: bfr,
	bigcap: bigcap,
	bigcirc: bigcirc,
	bigcup: bigcup,
	bigodot: bigodot,
	bigoplus: bigoplus,
	bigotimes: bigotimes,
	bigsqcup: bigsqcup,
	bigstar: bigstar,
	bigtriangledown: bigtriangledown,
	bigtriangleup: bigtriangleup,
	biguplus: biguplus,
	bigvee: bigvee,
	bigwedge: bigwedge,
	bkarow: bkarow,
	blacklozenge: blacklozenge,
	blacksquare: blacksquare,
	blacktriangle: blacktriangle,
	blacktriangledown: blacktriangledown,
	blacktriangleleft: blacktriangleleft,
	blacktriangleright: blacktriangleright,
	blank: blank,
	blk12: blk12,
	blk14: blk14,
	blk34: blk34,
	block: block,
	bne: bne,
	bnequiv: bnequiv,
	bnot: bnot,
	bopf: bopf,
	bot: bot,
	bottom: bottom,
	bowtie: bowtie,
	boxDL: boxDL,
	boxDR: boxDR,
	boxDl: boxDl,
	boxDr: boxDr,
	boxH: boxH,
	boxHD: boxHD,
	boxHU: boxHU,
	boxHd: boxHd,
	boxHu: boxHu,
	boxUL: boxUL,
	boxUR: boxUR,
	boxUl: boxUl,
	boxUr: boxUr,
	boxV: boxV,
	boxVH: boxVH,
	boxVL: boxVL,
	boxVR: boxVR,
	boxVh: boxVh,
	boxVl: boxVl,
	boxVr: boxVr,
	boxbox: boxbox,
	boxdL: boxdL,
	boxdR: boxdR,
	boxdl: boxdl,
	boxdr: boxdr,
	boxh: boxh,
	boxhD: boxhD,
	boxhU: boxhU,
	boxhd: boxhd,
	boxhu: boxhu,
	boxminus: boxminus,
	boxplus: boxplus,
	boxtimes: boxtimes,
	boxuL: boxuL,
	boxuR: boxuR,
	boxul: boxul,
	boxur: boxur,
	boxv: boxv,
	boxvH: boxvH,
	boxvL: boxvL,
	boxvR: boxvR,
	boxvh: boxvh,
	boxvl: boxvl,
	boxvr: boxvr,
	bprime: bprime,
	breve: breve,
	brvba: brvba,
	brvbar: brvbar,
	bscr: bscr,
	bsemi: bsemi,
	bsim: bsim,
	bsime: bsime,
	bsol: bsol,
	bsolb: bsolb,
	bsolhsub: bsolhsub,
	bull: bull,
	bullet: bullet,
	bump: bump,
	bumpE: bumpE,
	bumpe: bumpe,
	bumpeq: bumpeq,
	cacute: cacute,
	cap: cap,
	capand: capand,
	capbrcup: capbrcup,
	capcap: capcap,
	capcup: capcup,
	capdot: capdot,
	caps: caps,
	caret: caret,
	caron: caron,
	ccaps: ccaps,
	ccaron: ccaron,
	ccedi: ccedi,
	ccedil: ccedil,
	ccirc: ccirc,
	ccups: ccups,
	ccupssm: ccupssm,
	cdot: cdot,
	cedi: cedi,
	cedil: cedil,
	cemptyv: cemptyv,
	cen: cen,
	cent: cent,
	centerdot: centerdot,
	cfr: cfr,
	chcy: chcy,
	check: check,
	checkmark: checkmark,
	chi: chi,
	cir: cir,
	cirE: cirE,
	circ: circ,
	circeq: circeq,
	circlearrowleft: circlearrowleft,
	circlearrowright: circlearrowright,
	circledR: circledR,
	circledS: circledS,
	circledast: circledast,
	circledcirc: circledcirc,
	circleddash: circleddash,
	cire: cire,
	cirfnint: cirfnint,
	cirmid: cirmid,
	cirscir: cirscir,
	clubs: clubs,
	clubsuit: clubsuit,
	colon: colon,
	colone: colone,
	coloneq: coloneq,
	comma: comma,
	commat: commat,
	comp: comp,
	compfn: compfn,
	complement: complement,
	complexes: complexes,
	cong: cong,
	congdot: congdot,
	conint: conint,
	copf: copf,
	coprod: coprod,
	cop: cop,
	copy: copy,
	copysr: copysr,
	crarr: crarr,
	cross: cross,
	cscr: cscr,
	csub: csub,
	csube: csube,
	csup: csup,
	csupe: csupe,
	ctdot: ctdot,
	cudarrl: cudarrl,
	cudarrr: cudarrr,
	cuepr: cuepr,
	cuesc: cuesc,
	cularr: cularr,
	cularrp: cularrp,
	cup: cup,
	cupbrcap: cupbrcap,
	cupcap: cupcap,
	cupcup: cupcup,
	cupdot: cupdot,
	cupor: cupor,
	cups: cups,
	curarr: curarr,
	curarrm: curarrm,
	curlyeqprec: curlyeqprec,
	curlyeqsucc: curlyeqsucc,
	curlyvee: curlyvee,
	curlywedge: curlywedge,
	curre: curre,
	curren: curren,
	curvearrowleft: curvearrowleft,
	curvearrowright: curvearrowright,
	cuvee: cuvee,
	cuwed: cuwed,
	cwconint: cwconint,
	cwint: cwint,
	cylcty: cylcty,
	dArr: dArr,
	dHar: dHar,
	dagger: dagger,
	daleth: daleth,
	darr: darr,
	dash: dash,
	dashv: dashv,
	dbkarow: dbkarow,
	dblac: dblac,
	dcaron: dcaron,
	dcy: dcy,
	dd: dd,
	ddagger: ddagger,
	ddarr: ddarr,
	ddotseq: ddotseq,
	de: de,
	deg: deg,
	delta: delta,
	demptyv: demptyv,
	dfisht: dfisht,
	dfr: dfr,
	dharl: dharl,
	dharr: dharr,
	diam: diam,
	diamond: diamond,
	diamondsuit: diamondsuit,
	diams: diams,
	die: die,
	digamma: digamma,
	disin: disin,
	div: div,
	divid: divid,
	divide: divide,
	divideontimes: divideontimes,
	divonx: divonx,
	djcy: djcy,
	dlcorn: dlcorn,
	dlcrop: dlcrop,
	dollar: dollar,
	dopf: dopf,
	dot: dot,
	doteq: doteq,
	doteqdot: doteqdot,
	dotminus: dotminus,
	dotplus: dotplus,
	dotsquare: dotsquare,
	doublebarwedge: doublebarwedge,
	downarrow: downarrow,
	downdownarrows: downdownarrows,
	downharpoonleft: downharpoonleft,
	downharpoonright: downharpoonright,
	drbkarow: drbkarow,
	drcorn: drcorn,
	drcrop: drcrop,
	dscr: dscr,
	dscy: dscy,
	dsol: dsol,
	dstrok: dstrok,
	dtdot: dtdot,
	dtri: dtri,
	dtrif: dtrif,
	duarr: duarr,
	duhar: duhar,
	dwangle: dwangle,
	dzcy: dzcy,
	dzigrarr: dzigrarr,
	eDDot: eDDot,
	eDot: eDot,
	eacut: eacut,
	eacute: eacute,
	easter: easter,
	ecaron: ecaron,
	ecir: ecir,
	ecirc: ecirc,
	ecolon: ecolon,
	ecy: ecy,
	edot: edot,
	ee: ee,
	efDot: efDot,
	efr: efr,
	eg: eg,
	egrav: egrav,
	egrave: egrave,
	egs: egs,
	egsdot: egsdot,
	el: el,
	elinters: elinters,
	ell: ell,
	els: els,
	elsdot: elsdot,
	emacr: emacr,
	empty: empty,
	emptyset: emptyset,
	emptyv: emptyv,
	emsp13: emsp13,
	emsp14: emsp14,
	emsp: emsp,
	eng: eng,
	ensp: ensp,
	eogon: eogon,
	eopf: eopf,
	epar: epar,
	eparsl: eparsl,
	eplus: eplus,
	epsi: epsi,
	epsilon: epsilon,
	epsiv: epsiv,
	eqcirc: eqcirc,
	eqcolon: eqcolon,
	eqsim: eqsim,
	eqslantgtr: eqslantgtr,
	eqslantless: eqslantless,
	equals: equals,
	equest: equest,
	equiv: equiv,
	equivDD: equivDD,
	eqvparsl: eqvparsl,
	erDot: erDot,
	erarr: erarr,
	escr: escr,
	esdot: esdot,
	esim: esim,
	eta: eta,
	et: et,
	eth: eth,
	eum: eum,
	euml: euml,
	euro: euro,
	excl: excl,
	exist: exist,
	expectation: expectation,
	exponentiale: exponentiale,
	fallingdotseq: fallingdotseq,
	fcy: fcy,
	female: female,
	ffilig: ffilig,
	fflig: fflig,
	ffllig: ffllig,
	ffr: ffr,
	filig: filig,
	fjlig: fjlig,
	flat: flat,
	fllig: fllig,
	fltns: fltns,
	fnof: fnof,
	fopf: fopf,
	forall: forall,
	fork: fork,
	forkv: forkv,
	fpartint: fpartint,
	frac1: frac1,
	frac12: frac12,
	frac13: frac13,
	frac14: frac14,
	frac15: frac15,
	frac16: frac16,
	frac18: frac18,
	frac23: frac23,
	frac25: frac25,
	frac3: frac3,
	frac34: frac34,
	frac35: frac35,
	frac38: frac38,
	frac45: frac45,
	frac56: frac56,
	frac58: frac58,
	frac78: frac78,
	frasl: frasl,
	frown: frown,
	fscr: fscr,
	gE: gE,
	gEl: gEl,
	gacute: gacute,
	gamma: gamma,
	gammad: gammad,
	gap: gap,
	gbreve: gbreve,
	gcirc: gcirc,
	gcy: gcy,
	gdot: gdot,
	ge: ge,
	gel: gel,
	geq: geq,
	geqq: geqq,
	geqslant: geqslant,
	ges: ges,
	gescc: gescc,
	gesdot: gesdot,
	gesdoto: gesdoto,
	gesdotol: gesdotol,
	gesl: gesl,
	gesles: gesles,
	gfr: gfr,
	gg: gg,
	ggg: ggg,
	gimel: gimel,
	gjcy: gjcy,
	gl: gl,
	glE: glE,
	gla: gla,
	glj: glj,
	gnE: gnE,
	gnap: gnap,
	gnapprox: gnapprox,
	gne: gne,
	gneq: gneq,
	gneqq: gneqq,
	gnsim: gnsim,
	gopf: gopf,
	grave: grave,
	gscr: gscr,
	gsim: gsim,
	gsime: gsime,
	gsiml: gsiml,
	g: g,
	gt: gt,
	gtcc: gtcc,
	gtcir: gtcir,
	gtdot: gtdot,
	gtlPar: gtlPar,
	gtquest: gtquest,
	gtrapprox: gtrapprox,
	gtrarr: gtrarr,
	gtrdot: gtrdot,
	gtreqless: gtreqless,
	gtreqqless: gtreqqless,
	gtrless: gtrless,
	gtrsim: gtrsim,
	gvertneqq: gvertneqq,
	gvnE: gvnE,
	hArr: hArr,
	hairsp: hairsp,
	half: half,
	hamilt: hamilt,
	hardcy: hardcy,
	harr: harr,
	harrcir: harrcir,
	harrw: harrw,
	hbar: hbar,
	hcirc: hcirc,
	hearts: hearts,
	heartsuit: heartsuit,
	hellip: hellip,
	hercon: hercon,
	hfr: hfr,
	hksearow: hksearow,
	hkswarow: hkswarow,
	hoarr: hoarr,
	homtht: homtht,
	hookleftarrow: hookleftarrow,
	hookrightarrow: hookrightarrow,
	hopf: hopf,
	horbar: horbar,
	hscr: hscr,
	hslash: hslash,
	hstrok: hstrok,
	hybull: hybull,
	hyphen: hyphen,
	iacut: iacut,
	iacute: iacute,
	ic: ic,
	icir: icir,
	icirc: icirc,
	icy: icy,
	iecy: iecy,
	iexc: iexc,
	iexcl: iexcl,
	iff: iff,
	ifr: ifr,
	igrav: igrav,
	igrave: igrave,
	ii: ii,
	iiiint: iiiint,
	iiint: iiint,
	iinfin: iinfin,
	iiota: iiota,
	ijlig: ijlig,
	imacr: imacr,
	image: image,
	imagline: imagline,
	imagpart: imagpart,
	imath: imath,
	imof: imof,
	imped: imped,
	"in": "∈",
	incare: incare,
	infin: infin,
	infintie: infintie,
	inodot: inodot,
	int: int,
	intcal: intcal,
	integers: integers,
	intercal: intercal,
	intlarhk: intlarhk,
	intprod: intprod,
	iocy: iocy,
	iogon: iogon,
	iopf: iopf,
	iota: iota,
	iprod: iprod,
	iques: iques,
	iquest: iquest,
	iscr: iscr,
	isin: isin,
	isinE: isinE,
	isindot: isindot,
	isins: isins,
	isinsv: isinsv,
	isinv: isinv,
	it: it,
	itilde: itilde,
	iukcy: iukcy,
	ium: ium,
	iuml: iuml,
	jcirc: jcirc,
	jcy: jcy,
	jfr: jfr,
	jmath: jmath,
	jopf: jopf,
	jscr: jscr,
	jsercy: jsercy,
	jukcy: jukcy,
	kappa: kappa,
	kappav: kappav,
	kcedil: kcedil,
	kcy: kcy,
	kfr: kfr,
	kgreen: kgreen,
	khcy: khcy,
	kjcy: kjcy,
	kopf: kopf,
	kscr: kscr,
	lAarr: lAarr,
	lArr: lArr,
	lAtail: lAtail,
	lBarr: lBarr,
	lE: lE,
	lEg: lEg,
	lHar: lHar,
	lacute: lacute,
	laemptyv: laemptyv,
	lagran: lagran,
	lambda: lambda,
	lang: lang,
	langd: langd,
	langle: langle,
	lap: lap,
	laqu: laqu,
	laquo: laquo,
	larr: larr,
	larrb: larrb,
	larrbfs: larrbfs,
	larrfs: larrfs,
	larrhk: larrhk,
	larrlp: larrlp,
	larrpl: larrpl,
	larrsim: larrsim,
	larrtl: larrtl,
	lat: lat,
	latail: latail,
	late: late,
	lates: lates,
	lbarr: lbarr,
	lbbrk: lbbrk,
	lbrace: lbrace,
	lbrack: lbrack,
	lbrke: lbrke,
	lbrksld: lbrksld,
	lbrkslu: lbrkslu,
	lcaron: lcaron,
	lcedil: lcedil,
	lceil: lceil,
	lcub: lcub,
	lcy: lcy,
	ldca: ldca,
	ldquo: ldquo,
	ldquor: ldquor,
	ldrdhar: ldrdhar,
	ldrushar: ldrushar,
	ldsh: ldsh,
	le: le,
	leftarrow: leftarrow,
	leftarrowtail: leftarrowtail,
	leftharpoondown: leftharpoondown,
	leftharpoonup: leftharpoonup,
	leftleftarrows: leftleftarrows,
	leftrightarrow: leftrightarrow,
	leftrightarrows: leftrightarrows,
	leftrightharpoons: leftrightharpoons,
	leftrightsquigarrow: leftrightsquigarrow,
	leftthreetimes: leftthreetimes,
	leg: leg,
	leq: leq,
	leqq: leqq,
	leqslant: leqslant,
	les: les,
	lescc: lescc,
	lesdot: lesdot,
	lesdoto: lesdoto,
	lesdotor: lesdotor,
	lesg: lesg,
	lesges: lesges,
	lessapprox: lessapprox,
	lessdot: lessdot,
	lesseqgtr: lesseqgtr,
	lesseqqgtr: lesseqqgtr,
	lessgtr: lessgtr,
	lesssim: lesssim,
	lfisht: lfisht,
	lfloor: lfloor,
	lfr: lfr,
	lg: lg,
	lgE: lgE,
	lhard: lhard,
	lharu: lharu,
	lharul: lharul,
	lhblk: lhblk,
	ljcy: ljcy,
	ll: ll,
	llarr: llarr,
	llcorner: llcorner,
	llhard: llhard,
	lltri: lltri,
	lmidot: lmidot,
	lmoust: lmoust,
	lmoustache: lmoustache,
	lnE: lnE,
	lnap: lnap,
	lnapprox: lnapprox,
	lne: lne,
	lneq: lneq,
	lneqq: lneqq,
	lnsim: lnsim,
	loang: loang,
	loarr: loarr,
	lobrk: lobrk,
	longleftarrow: longleftarrow,
	longleftrightarrow: longleftrightarrow,
	longmapsto: longmapsto,
	longrightarrow: longrightarrow,
	looparrowleft: looparrowleft,
	looparrowright: looparrowright,
	lopar: lopar,
	lopf: lopf,
	loplus: loplus,
	lotimes: lotimes,
	lowast: lowast,
	lowbar: lowbar,
	loz: loz,
	lozenge: lozenge,
	lozf: lozf,
	lpar: lpar,
	lparlt: lparlt,
	lrarr: lrarr,
	lrcorner: lrcorner,
	lrhar: lrhar,
	lrhard: lrhard,
	lrm: lrm,
	lrtri: lrtri,
	lsaquo: lsaquo,
	lscr: lscr,
	lsh: lsh,
	lsim: lsim,
	lsime: lsime,
	lsimg: lsimg,
	lsqb: lsqb,
	lsquo: lsquo,
	lsquor: lsquor,
	lstrok: lstrok,
	l: l,
	lt: lt,
	ltcc: ltcc,
	ltcir: ltcir,
	ltdot: ltdot,
	lthree: lthree,
	ltimes: ltimes,
	ltlarr: ltlarr,
	ltquest: ltquest,
	ltrPar: ltrPar,
	ltri: ltri,
	ltrie: ltrie,
	ltrif: ltrif,
	lurdshar: lurdshar,
	luruhar: luruhar,
	lvertneqq: lvertneqq,
	lvnE: lvnE,
	mDDot: mDDot,
	mac: mac,
	macr: macr,
	male: male,
	malt: malt,
	maltese: maltese,
	map: map,
	mapsto: mapsto,
	mapstodown: mapstodown,
	mapstoleft: mapstoleft,
	mapstoup: mapstoup,
	marker: marker,
	mcomma: mcomma,
	mcy: mcy,
	mdash: mdash,
	measuredangle: measuredangle,
	mfr: mfr,
	mho: mho,
	micr: micr,
	micro: micro,
	mid: mid,
	midast: midast,
	midcir: midcir,
	middo: middo,
	middot: middot,
	minus: minus,
	minusb: minusb,
	minusd: minusd,
	minusdu: minusdu,
	mlcp: mlcp,
	mldr: mldr,
	mnplus: mnplus,
	models: models,
	mopf: mopf,
	mp: mp,
	mscr: mscr,
	mstpos: mstpos,
	mu: mu,
	multimap: multimap,
	mumap: mumap,
	nGg: nGg,
	nGt: nGt,
	nGtv: nGtv,
	nLeftarrow: nLeftarrow,
	nLeftrightarrow: nLeftrightarrow,
	nLl: nLl,
	nLt: nLt,
	nLtv: nLtv,
	nRightarrow: nRightarrow,
	nVDash: nVDash,
	nVdash: nVdash,
	nabla: nabla,
	nacute: nacute,
	nang: nang,
	nap: nap,
	napE: napE,
	napid: napid,
	napos: napos,
	napprox: napprox,
	natur: natur,
	natural: natural,
	naturals: naturals,
	nbs: nbs,
	nbsp: nbsp,
	nbump: nbump,
	nbumpe: nbumpe,
	ncap: ncap,
	ncaron: ncaron,
	ncedil: ncedil,
	ncong: ncong,
	ncongdot: ncongdot,
	ncup: ncup,
	ncy: ncy,
	ndash: ndash,
	ne: ne,
	neArr: neArr,
	nearhk: nearhk,
	nearr: nearr,
	nearrow: nearrow,
	nedot: nedot,
	nequiv: nequiv,
	nesear: nesear,
	nesim: nesim,
	nexist: nexist,
	nexists: nexists,
	nfr: nfr,
	ngE: ngE,
	nge: nge,
	ngeq: ngeq,
	ngeqq: ngeqq,
	ngeqslant: ngeqslant,
	nges: nges,
	ngsim: ngsim,
	ngt: ngt,
	ngtr: ngtr,
	nhArr: nhArr,
	nharr: nharr,
	nhpar: nhpar,
	ni: ni,
	nis: nis,
	nisd: nisd,
	niv: niv,
	njcy: njcy,
	nlArr: nlArr,
	nlE: nlE,
	nlarr: nlarr,
	nldr: nldr,
	nle: nle,
	nleftarrow: nleftarrow,
	nleftrightarrow: nleftrightarrow,
	nleq: nleq,
	nleqq: nleqq,
	nleqslant: nleqslant,
	nles: nles,
	nless: nless,
	nlsim: nlsim,
	nlt: nlt,
	nltri: nltri,
	nltrie: nltrie,
	nmid: nmid,
	nopf: nopf,
	no: no,
	not: not,
	notin: notin,
	notinE: notinE,
	notindot: notindot,
	notinva: notinva,
	notinvb: notinvb,
	notinvc: notinvc,
	notni: notni,
	notniva: notniva,
	notnivb: notnivb,
	notnivc: notnivc,
	npar: npar,
	nparallel: nparallel,
	nparsl: nparsl,
	npart: npart,
	npolint: npolint,
	npr: npr,
	nprcue: nprcue,
	npre: npre,
	nprec: nprec,
	npreceq: npreceq,
	nrArr: nrArr,
	nrarr: nrarr,
	nrarrc: nrarrc,
	nrarrw: nrarrw,
	nrightarrow: nrightarrow,
	nrtri: nrtri,
	nrtrie: nrtrie,
	nsc: nsc,
	nsccue: nsccue,
	nsce: nsce,
	nscr: nscr,
	nshortmid: nshortmid,
	nshortparallel: nshortparallel,
	nsim: nsim,
	nsime: nsime,
	nsimeq: nsimeq,
	nsmid: nsmid,
	nspar: nspar,
	nsqsube: nsqsube,
	nsqsupe: nsqsupe,
	nsub: nsub,
	nsubE: nsubE,
	nsube: nsube,
	nsubset: nsubset,
	nsubseteq: nsubseteq,
	nsubseteqq: nsubseteqq,
	nsucc: nsucc,
	nsucceq: nsucceq,
	nsup: nsup,
	nsupE: nsupE,
	nsupe: nsupe,
	nsupset: nsupset,
	nsupseteq: nsupseteq,
	nsupseteqq: nsupseteqq,
	ntgl: ntgl,
	ntild: ntild,
	ntilde: ntilde,
	ntlg: ntlg,
	ntriangleleft: ntriangleleft,
	ntrianglelefteq: ntrianglelefteq,
	ntriangleright: ntriangleright,
	ntrianglerighteq: ntrianglerighteq,
	nu: nu,
	num: num,
	numero: numero,
	numsp: numsp,
	nvDash: nvDash,
	nvHarr: nvHarr,
	nvap: nvap,
	nvdash: nvdash,
	nvge: nvge,
	nvgt: nvgt,
	nvinfin: nvinfin,
	nvlArr: nvlArr,
	nvle: nvle,
	nvlt: nvlt,
	nvltrie: nvltrie,
	nvrArr: nvrArr,
	nvrtrie: nvrtrie,
	nvsim: nvsim,
	nwArr: nwArr,
	nwarhk: nwarhk,
	nwarr: nwarr,
	nwarrow: nwarrow,
	nwnear: nwnear,
	oS: oS,
	oacut: oacut,
	oacute: oacute,
	oast: oast,
	ocir: ocir,
	ocirc: ocirc,
	ocy: ocy,
	odash: odash,
	odblac: odblac,
	odiv: odiv,
	odot: odot,
	odsold: odsold,
	oelig: oelig,
	ofcir: ofcir,
	ofr: ofr,
	ogon: ogon,
	ograv: ograv,
	ograve: ograve,
	ogt: ogt,
	ohbar: ohbar,
	ohm: ohm,
	oint: oint,
	olarr: olarr,
	olcir: olcir,
	olcross: olcross,
	oline: oline,
	olt: olt,
	omacr: omacr,
	omega: omega,
	omicron: omicron,
	omid: omid,
	ominus: ominus,
	oopf: oopf,
	opar: opar,
	operp: operp,
	oplus: oplus,
	or: or,
	orarr: orarr,
	ord: ord,
	order: order$1,
	orderof: orderof,
	ordf: ordf,
	ordm: ordm,
	origof: origof,
	oror: oror,
	orslope: orslope,
	orv: orv,
	oscr: oscr,
	oslas: oslas,
	oslash: oslash,
	osol: osol,
	otild: otild,
	otilde: otilde,
	otimes: otimes,
	otimesas: otimesas,
	oum: oum,
	ouml: ouml,
	ovbar: ovbar,
	par: par,
	para: para,
	parallel: parallel,
	parsim: parsim,
	parsl: parsl,
	part: part,
	pcy: pcy,
	percnt: percnt,
	period: period,
	permil: permil,
	perp: perp,
	pertenk: pertenk,
	pfr: pfr,
	phi: phi,
	phiv: phiv,
	phmmat: phmmat,
	phone: phone,
	pi: pi,
	pitchfork: pitchfork,
	piv: piv,
	planck: planck,
	planckh: planckh,
	plankv: plankv,
	plus: plus,
	plusacir: plusacir,
	plusb: plusb,
	pluscir: pluscir,
	plusdo: plusdo,
	plusdu: plusdu,
	pluse: pluse,
	plusm: plusm,
	plusmn: plusmn,
	plussim: plussim,
	plustwo: plustwo,
	pm: pm,
	pointint: pointint,
	popf: popf,
	poun: poun,
	pound: pound,
	pr: pr,
	prE: prE,
	prap: prap,
	prcue: prcue,
	pre: pre,
	prec: prec,
	precapprox: precapprox,
	preccurlyeq: preccurlyeq,
	preceq: preceq,
	precnapprox: precnapprox,
	precneqq: precneqq,
	precnsim: precnsim,
	precsim: precsim,
	prime: prime,
	primes: primes,
	prnE: prnE,
	prnap: prnap,
	prnsim: prnsim,
	prod: prod,
	profalar: profalar,
	profline: profline,
	profsurf: profsurf,
	prop: prop,
	propto: propto,
	prsim: prsim,
	prurel: prurel,
	pscr: pscr,
	psi: psi,
	puncsp: puncsp,
	qfr: qfr,
	qint: qint,
	qopf: qopf,
	qprime: qprime,
	qscr: qscr,
	quaternions: quaternions,
	quatint: quatint,
	quest: quest,
	questeq: questeq,
	quo: quo,
	quot: quot,
	rAarr: rAarr,
	rArr: rArr,
	rAtail: rAtail,
	rBarr: rBarr,
	rHar: rHar,
	race: race,
	racute: racute,
	radic: radic,
	raemptyv: raemptyv,
	rang: rang,
	rangd: rangd,
	range: range,
	rangle: rangle,
	raqu: raqu,
	raquo: raquo,
	rarr: rarr,
	rarrap: rarrap,
	rarrb: rarrb,
	rarrbfs: rarrbfs,
	rarrc: rarrc,
	rarrfs: rarrfs,
	rarrhk: rarrhk,
	rarrlp: rarrlp,
	rarrpl: rarrpl,
	rarrsim: rarrsim,
	rarrtl: rarrtl,
	rarrw: rarrw,
	ratail: ratail,
	ratio: ratio,
	rationals: rationals,
	rbarr: rbarr,
	rbbrk: rbbrk,
	rbrace: rbrace,
	rbrack: rbrack,
	rbrke: rbrke,
	rbrksld: rbrksld,
	rbrkslu: rbrkslu,
	rcaron: rcaron,
	rcedil: rcedil,
	rceil: rceil,
	rcub: rcub,
	rcy: rcy,
	rdca: rdca,
	rdldhar: rdldhar,
	rdquo: rdquo,
	rdquor: rdquor,
	rdsh: rdsh,
	real: real,
	realine: realine,
	realpart: realpart,
	reals: reals,
	rect: rect,
	re: re,
	reg: reg,
	rfisht: rfisht,
	rfloor: rfloor,
	rfr: rfr,
	rhard: rhard,
	rharu: rharu,
	rharul: rharul,
	rho: rho,
	rhov: rhov,
	rightarrow: rightarrow,
	rightarrowtail: rightarrowtail,
	rightharpoondown: rightharpoondown,
	rightharpoonup: rightharpoonup,
	rightleftarrows: rightleftarrows,
	rightleftharpoons: rightleftharpoons,
	rightrightarrows: rightrightarrows,
	rightsquigarrow: rightsquigarrow,
	rightthreetimes: rightthreetimes,
	ring: ring,
	risingdotseq: risingdotseq,
	rlarr: rlarr,
	rlhar: rlhar,
	rlm: rlm,
	rmoust: rmoust,
	rmoustache: rmoustache,
	rnmid: rnmid,
	roang: roang,
	roarr: roarr,
	robrk: robrk,
	ropar: ropar,
	ropf: ropf,
	roplus: roplus,
	rotimes: rotimes,
	rpar: rpar,
	rpargt: rpargt,
	rppolint: rppolint,
	rrarr: rrarr,
	rsaquo: rsaquo,
	rscr: rscr,
	rsh: rsh,
	rsqb: rsqb,
	rsquo: rsquo,
	rsquor: rsquor,
	rthree: rthree,
	rtimes: rtimes,
	rtri: rtri,
	rtrie: rtrie,
	rtrif: rtrif,
	rtriltri: rtriltri,
	ruluhar: ruluhar,
	rx: rx,
	sacute: sacute,
	sbquo: sbquo,
	sc: sc,
	scE: scE,
	scap: scap,
	scaron: scaron,
	sccue: sccue,
	sce: sce,
	scedil: scedil,
	scirc: scirc,
	scnE: scnE,
	scnap: scnap,
	scnsim: scnsim,
	scpolint: scpolint,
	scsim: scsim,
	scy: scy,
	sdot: sdot,
	sdotb: sdotb,
	sdote: sdote,
	seArr: seArr,
	searhk: searhk,
	searr: searr,
	searrow: searrow,
	sec: sec,
	sect: sect,
	semi: semi,
	seswar: seswar,
	setminus: setminus,
	setmn: setmn,
	sext: sext,
	sfr: sfr,
	sfrown: sfrown,
	sharp: sharp,
	shchcy: shchcy,
	shcy: shcy,
	shortmid: shortmid,
	shortparallel: shortparallel,
	sh: sh,
	shy: shy,
	sigma: sigma,
	sigmaf: sigmaf,
	sigmav: sigmav,
	sim: sim,
	simdot: simdot,
	sime: sime,
	simeq: simeq,
	simg: simg,
	simgE: simgE,
	siml: siml,
	simlE: simlE,
	simne: simne,
	simplus: simplus,
	simrarr: simrarr,
	slarr: slarr,
	smallsetminus: smallsetminus,
	smashp: smashp,
	smeparsl: smeparsl,
	smid: smid,
	smile: smile,
	smt: smt,
	smte: smte,
	smtes: smtes,
	softcy: softcy,
	sol: sol,
	solb: solb,
	solbar: solbar,
	sopf: sopf,
	spades: spades,
	spadesuit: spadesuit,
	spar: spar,
	sqcap: sqcap,
	sqcaps: sqcaps,
	sqcup: sqcup,
	sqcups: sqcups,
	sqsub: sqsub,
	sqsube: sqsube,
	sqsubset: sqsubset,
	sqsubseteq: sqsubseteq,
	sqsup: sqsup,
	sqsupe: sqsupe,
	sqsupset: sqsupset,
	sqsupseteq: sqsupseteq,
	squ: squ,
	square: square,
	squarf: squarf,
	squf: squf,
	srarr: srarr,
	sscr: sscr,
	ssetmn: ssetmn,
	ssmile: ssmile,
	sstarf: sstarf,
	star: star,
	starf: starf,
	straightepsilon: straightepsilon,
	straightphi: straightphi,
	strns: strns,
	sub: sub,
	subE: subE,
	subdot: subdot,
	sube: sube,
	subedot: subedot,
	submult: submult,
	subnE: subnE,
	subne: subne,
	subplus: subplus,
	subrarr: subrarr,
	subset: subset,
	subseteq: subseteq,
	subseteqq: subseteqq,
	subsetneq: subsetneq,
	subsetneqq: subsetneqq,
	subsim: subsim,
	subsub: subsub,
	subsup: subsup,
	succ: succ,
	succapprox: succapprox,
	succcurlyeq: succcurlyeq,
	succeq: succeq,
	succnapprox: succnapprox,
	succneqq: succneqq,
	succnsim: succnsim,
	succsim: succsim,
	sum: sum,
	sung: sung,
	sup: sup,
	sup1: sup1,
	sup2: sup2,
	sup3: sup3,
	supE: supE,
	supdot: supdot,
	supdsub: supdsub,
	supe: supe,
	supedot: supedot,
	suphsol: suphsol,
	suphsub: suphsub,
	suplarr: suplarr,
	supmult: supmult,
	supnE: supnE,
	supne: supne,
	supplus: supplus,
	supset: supset,
	supseteq: supseteq,
	supseteqq: supseteqq,
	supsetneq: supsetneq,
	supsetneqq: supsetneqq,
	supsim: supsim,
	supsub: supsub,
	supsup: supsup,
	swArr: swArr,
	swarhk: swarhk,
	swarr: swarr,
	swarrow: swarrow,
	swnwar: swnwar,
	szli: szli,
	szlig: szlig,
	target: target,
	tau: tau,
	tbrk: tbrk,
	tcaron: tcaron,
	tcedil: tcedil,
	tcy: tcy,
	tdot: tdot,
	telrec: telrec,
	tfr: tfr,
	there4: there4,
	therefore: therefore,
	theta: theta,
	thetasym: thetasym,
	thetav: thetav,
	thickapprox: thickapprox,
	thicksim: thicksim,
	thinsp: thinsp,
	thkap: thkap,
	thksim: thksim,
	thor: thor,
	thorn: thorn,
	tilde: tilde,
	time: time,
	times: times,
	timesb: timesb,
	timesbar: timesbar,
	timesd: timesd,
	tint: tint,
	toea: toea,
	top: top,
	topbot: topbot,
	topcir: topcir,
	topf: topf,
	topfork: topfork,
	tosa: tosa,
	tprime: tprime,
	trade: trade,
	triangle: triangle,
	triangledown: triangledown,
	triangleleft: triangleleft,
	trianglelefteq: trianglelefteq,
	triangleq: triangleq,
	triangleright: triangleright,
	trianglerighteq: trianglerighteq,
	tridot: tridot,
	trie: trie,
	triminus: triminus,
	triplus: triplus,
	trisb: trisb,
	tritime: tritime,
	trpezium: trpezium,
	tscr: tscr,
	tscy: tscy,
	tshcy: tshcy,
	tstrok: tstrok,
	twixt: twixt,
	twoheadleftarrow: twoheadleftarrow,
	twoheadrightarrow: twoheadrightarrow,
	uArr: uArr,
	uHar: uHar,
	uacut: uacut,
	uacute: uacute,
	uarr: uarr,
	ubrcy: ubrcy,
	ubreve: ubreve,
	ucir: ucir,
	ucirc: ucirc,
	ucy: ucy,
	udarr: udarr,
	udblac: udblac,
	udhar: udhar,
	ufisht: ufisht,
	ufr: ufr,
	ugrav: ugrav,
	ugrave: ugrave,
	uharl: uharl,
	uharr: uharr,
	uhblk: uhblk,
	ulcorn: ulcorn,
	ulcorner: ulcorner,
	ulcrop: ulcrop,
	ultri: ultri,
	umacr: umacr,
	um: um,
	uml: uml,
	uogon: uogon,
	uopf: uopf,
	uparrow: uparrow,
	updownarrow: updownarrow,
	upharpoonleft: upharpoonleft,
	upharpoonright: upharpoonright,
	uplus: uplus,
	upsi: upsi,
	upsih: upsih,
	upsilon: upsilon,
	upuparrows: upuparrows,
	urcorn: urcorn,
	urcorner: urcorner,
	urcrop: urcrop,
	uring: uring,
	urtri: urtri,
	uscr: uscr,
	utdot: utdot,
	utilde: utilde,
	utri: utri,
	utrif: utrif,
	uuarr: uuarr,
	uum: uum,
	uuml: uuml,
	uwangle: uwangle,
	vArr: vArr,
	vBar: vBar,
	vBarv: vBarv,
	vDash: vDash,
	vangrt: vangrt,
	varepsilon: varepsilon,
	varkappa: varkappa,
	varnothing: varnothing,
	varphi: varphi,
	varpi: varpi,
	varpropto: varpropto,
	varr: varr,
	varrho: varrho,
	varsigma: varsigma,
	varsubsetneq: varsubsetneq,
	varsubsetneqq: varsubsetneqq,
	varsupsetneq: varsupsetneq,
	varsupsetneqq: varsupsetneqq,
	vartheta: vartheta,
	vartriangleleft: vartriangleleft,
	vartriangleright: vartriangleright,
	vcy: vcy,
	vdash: vdash,
	vee: vee,
	veebar: veebar,
	veeeq: veeeq,
	vellip: vellip,
	verbar: verbar,
	vert: vert,
	vfr: vfr,
	vltri: vltri,
	vnsub: vnsub,
	vnsup: vnsup,
	vopf: vopf,
	vprop: vprop,
	vrtri: vrtri,
	vscr: vscr,
	vsubnE: vsubnE,
	vsubne: vsubne,
	vsupnE: vsupnE,
	vsupne: vsupne,
	vzigzag: vzigzag,
	wcirc: wcirc,
	wedbar: wedbar,
	wedge: wedge,
	wedgeq: wedgeq,
	weierp: weierp,
	wfr: wfr,
	wopf: wopf,
	wp: wp,
	wr: wr,
	wreath: wreath,
	wscr: wscr,
	xcap: xcap,
	xcirc: xcirc,
	xcup: xcup,
	xdtri: xdtri,
	xfr: xfr,
	xhArr: xhArr,
	xharr: xharr,
	xi: xi,
	xlArr: xlArr,
	xlarr: xlarr,
	xmap: xmap,
	xnis: xnis,
	xodot: xodot,
	xopf: xopf,
	xoplus: xoplus,
	xotime: xotime,
	xrArr: xrArr,
	xrarr: xrarr,
	xscr: xscr,
	xsqcup: xsqcup,
	xuplus: xuplus,
	xutri: xutri,
	xvee: xvee,
	xwedge: xwedge,
	yacut: yacut,
	yacute: yacute,
	yacy: yacy,
	ycirc: ycirc,
	ycy: ycy,
	ye: ye,
	yen: yen,
	yfr: yfr,
	yicy: yicy,
	yopf: yopf,
	yscr: yscr,
	yucy: yucy,
	yum: yum,
	yuml: yuml,
	zacute: zacute,
	zcaron: zcaron,
	zcy: zcy,
	zdot: zdot,
	zeetrf: zeetrf,
	zeta: zeta,
	zfr: zfr,
	zhcy: zhcy,
	zigrarr: zigrarr,
	zopf: zopf,
	zscr: zscr,
	zwj: zwj,
	zwnj: zwnj
};

var decodeEntity_1 = decodeEntity;

var own$3 = {}.hasOwnProperty;

function decodeEntity(characters) {
  return own$3.call(characterEntities, characters)
    ? characterEntities[characters]
    : false
}

var asciiHexDigit = regexCheck_1(/[\dA-Fa-f]/);

var tokenize$a = tokenizeCharacterReference;






function tokenizeCharacterReference(effects, ok, nok) {
  var self = this;
  var size = 0;
  var max;
  var test;

  return start

  function start(code) {
    effects.enter('characterReference');
    effects.enter('characterReferenceMarker');
    effects.consume(code);
    effects.exit('characterReferenceMarker');
    return open
  }

  function open(code) {
    if (code === 35) {
      effects.enter('characterReferenceMarkerNumeric');
      effects.consume(code);
      effects.exit('characterReferenceMarkerNumeric');
      return numeric
    }

    effects.enter('characterReferenceValue');
    max = 31;
    test = asciiAlphanumeric;
    return value(code)
  }

  function numeric(code) {
    if (code === 88 || code === 120) {
      effects.enter('characterReferenceMarkerHexadecimal');
      effects.consume(code);
      effects.exit('characterReferenceMarkerHexadecimal');
      effects.enter('characterReferenceValue');
      max = 6;
      test = asciiHexDigit;
      return value
    }

    effects.enter('characterReferenceValue');
    max = 7;
    test = asciiDigit;
    return value(code)
  }

  function value(code) {
    var token;

    if (code === 59 && size) {
      token = effects.exit('characterReferenceValue');

      if (test === asciiAlphanumeric && !decodeEntity_1(self.sliceSerialize(token))) {
        return nok(code)
      }

      effects.enter('characterReferenceMarker');
      effects.consume(code);
      effects.exit('characterReferenceMarker');
      effects.exit('characterReference');
      return ok
    }

    if (test(code) && size++ < max) {
      effects.consume(code);
      return value
    }

    return nok(code)
  }
}

var characterReference = {
	tokenize: tokenize$a
};

var tokenize$b = tokenizeCodeFenced;
var concrete = true;







function tokenizeCodeFenced(effects, ok, nok) {
  var self = this;
  var initialPrefix = prefixSize_1(this.events, 'linePrefix');
  var sizeOpen = 0;
  var marker;

  return start

  function start(code) {
    effects.enter('codeFenced');
    effects.enter('codeFencedFence');
    effects.enter('codeFencedFenceSequence');
    marker = code;
    return sequenceOpen(code)
  }

  function sequenceOpen(code) {
    if (code === marker) {
      effects.consume(code);
      sizeOpen++;
      return sequenceOpen
    }

    effects.exit('codeFencedFenceSequence');
    return sizeOpen < 3
      ? nok(code)
      : factorySpace(effects, infoOpen, 'whitespace')(code)
  }

  function infoOpen(code) {
    if (code === null || markdownLineEnding_1(code)) {
      return openAfter(code)
    }

    effects.enter('codeFencedFenceInfo');
    effects.enter('chunkString', {contentType: 'string'});
    return info(code)
  }

  function info(code) {
    if (code === null || markdownLineEndingOrSpace_1(code)) {
      effects.exit('chunkString');
      effects.exit('codeFencedFenceInfo');
      return factorySpace(effects, infoAfter, 'whitespace')(code)
    }

    if (code === 96 && code === marker) return nok(code)
    effects.consume(code);
    return info
  }

  function infoAfter(code) {
    if (code === null || markdownLineEnding_1(code)) {
      return openAfter(code)
    }

    effects.enter('codeFencedFenceMeta');
    effects.enter('chunkString', {contentType: 'string'});
    return meta(code)
  }

  function meta(code) {
    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('chunkString');
      effects.exit('codeFencedFenceMeta');
      return openAfter(code)
    }

    if (code === 96 && code === marker) return nok(code)
    effects.consume(code);
    return meta
  }

  function openAfter(code) {
    effects.exit('codeFencedFence');
    return self.interrupt ? ok(code) : content(code)
  }

  function content(code) {
    if (code === null) {
      return after(code)
    }

    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return effects.attempt(
        {tokenize: tokenizeClosingFence, partial: true},
        after,
        initialPrefix
          ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1)
          : content
      )
    }

    effects.enter('codeFlowValue');
    return contentContinue(code)
  }

  function contentContinue(code) {
    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('codeFlowValue');
      return content(code)
    }

    effects.consume(code);
    return contentContinue
  }

  function after(code) {
    effects.exit('codeFenced');
    return ok(code)
  }

  function tokenizeClosingFence(effects, ok, nok) {
    var size = 0;

    return factorySpace(effects, closingPrefixAfter, 'linePrefix', 4)

    function closingPrefixAfter(code) {
      effects.enter('codeFencedFence');
      effects.enter('codeFencedFenceSequence');
      return closingSequence(code)
    }

    function closingSequence(code) {
      if (code === marker) {
        effects.consume(code);
        size++;
        return closingSequence
      }

      if (size < sizeOpen) return nok(code)
      effects.exit('codeFencedFenceSequence');
      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
    }

    function closingSequenceEnd(code) {
      if (code === null || markdownLineEnding_1(code)) {
        effects.exit('codeFencedFence');
        return ok(code)
      }

      return nok(code)
    }
  }
}

var codeFenced = {
	tokenize: tokenize$b,
	concrete: concrete
};

var tokenize$c = tokenizeCodeIndented;
var resolve$2 = resolveCodeIndented;







var continuedIndent = {tokenize: tokenizeContinuedIndent, partial: true};

function resolveCodeIndented(events, context) {
  var code = {
    type: 'codeIndented',
    start: events[0][1].start,
    end: events[events.length - 1][1].end
  };

  chunkedSplice_1(events, 0, 0, [['enter', code, context]]);
  chunkedSplice_1(events, events.length, 0, [['exit', code, context]]);

  return events
}

function tokenizeCodeIndented(effects, ok, nok) {
  var self = this;

  return factorySpace(
    effects,
    afterInitial,
    'linePrefix',

    4 + 1
  )

  function afterInitial(code) {
    // Flow checks blank lines first, so we don’t have EOL/EOF.

    if (prefixSize_1(self.events, 'linePrefix') < 4) {
      return nok(code)
    }

    effects.enter('codeFlowValue');
    return content(code)
  }

  function afterPrefix(code) {
    if (code === null) {
      return ok(code)
    }

    if (markdownLineEnding_1(code)) {
      return effects.attempt(continuedIndent, afterPrefix, ok)(code)
    }

    effects.enter('codeFlowValue');
    return content(code)
  }

  function content(code) {
    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('codeFlowValue');
      return afterPrefix(code)
    }

    effects.consume(code);
    return content
  }
}

function tokenizeContinuedIndent(effects, ok, nok) {
  var self = this;

  return factorySpace(
    effects,
    afterPrefix,
    'linePrefix',

    4 + 1
  )

  function afterPrefix(code) {
    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');

      return factorySpace(
        effects,
        afterPrefix,
        'linePrefix',

        4 + 1
      )
    }

    return prefixSize_1(self.events, 'linePrefix') < 4 ? nok(code) : ok(code)
  }
}

var codeIndented = {
	tokenize: tokenize$c,
	resolve: resolve$2
};

var tokenize$d = tokenizeCodeText;
var resolve$3 = resolveCodeText;
var previous_1 = previous;



function resolveCodeText(events) {
  var tailExitIndex = events.length - 4;
  var headEnterIndex = 3;
  var index;
  var enter;

  // If we start and end with an EOL or a space.
  if (
    (events[headEnterIndex][1].type === 'lineEnding' ||
      events[headEnterIndex][1].type === 'space') &&
    (events[tailExitIndex][1].type === 'lineEnding' ||
      events[tailExitIndex][1].type === 'space')
  ) {
    index = headEnterIndex;

    // And we have data.
    while (++index < tailExitIndex) {
      if (events[index][1].type === 'codeTextData') {
        // Then we have padding.
        events[tailExitIndex][1].type = events[headEnterIndex][1].type =
          'codeTextPadding';

        headEnterIndex += 2;
        tailExitIndex -= 2;
        break
      }
    }
  }

  // Merge adjacent spaces and data.
  index = headEnterIndex - 1;
  tailExitIndex++;

  while (++index <= tailExitIndex) {
    if (enter === undefined) {
      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
        enter = index;
      }
    } else if (
      index === tailExitIndex ||
      events[index][1].type === 'lineEnding'
    ) {
      events[enter][1].type = 'codeTextData';

      if (index !== enter + 2) {
        events[enter][1].end = events[index - 1][1].end;
        events.splice(enter + 2, index - enter - 2);
        tailExitIndex -= index - enter - 2;
        index = enter + 2;
      }

      enter = undefined;
    }
  }

  return events
}

function previous(code) {
  // If there is a previous code, there will always be a tail.
  return (
    code !== 96 ||
    this.events[this.events.length - 1][1].type === 'characterEscape'
  )
}

function tokenizeCodeText(effects, ok, nok) {
  var sizeOpen = 0;
  var size;
  var token;

  return start

  function start(code) {
    effects.enter('codeText');
    effects.enter('codeTextSequence');
    return openingSequence(code)
  }

  function openingSequence(code) {
    if (code === 96) {
      effects.consume(code);
      sizeOpen++;
      return openingSequence
    }

    effects.exit('codeTextSequence');
    return gap(code)
  }

  function gap(code) {
    // EOF.
    if (code === null) {
      return nok(code)
    }

    // Closing fence?
    // Could also be data.
    if (code === 96) {
      token = effects.enter('codeTextSequence');
      size = 0;
      return closingSequence(code)
    }

    // Tabs don’t work, and virtual spaces don’t make sense.
    if (code === 32) {
      effects.enter('space');
      effects.consume(code);
      effects.exit('space');
      return gap
    }

    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return gap
    }

    // Data.
    effects.enter('codeTextData');
    return data(code)
  }

  // In code.
  function data(code) {
    if (
      code === null ||
      code === 32 ||
      code === 96 ||
      markdownLineEnding_1(code)
    ) {
      effects.exit('codeTextData');
      return gap(code)
    }

    effects.consume(code);
    return data
  }

  // Closing fence.
  function closingSequence(code) {
    // More.
    if (code === 96) {
      effects.consume(code);
      size++;
      return closingSequence
    }

    // Done!
    if (size === sizeOpen) {
      effects.exit('codeTextSequence');
      effects.exit('codeText');
      return ok(code)
    }

    // More or less accents: mark as data.
    token.type = 'codeTextData';
    return data(code)
  }
}

var codeText = {
	tokenize: tokenize$d,
	resolve: resolve$3,
	previous: previous_1
};

var factoryDestination = createDestination;





// eslint-disable-next-line max-params
function createDestination(
  effects,
  ok,
  nok,
  type,
  literalType,
  literalMarkerType,
  rawType,
  stringType,
  max
) {
  var limit = max || Infinity;
  var balance = 0;

  return start

  function start(code) {
    if (code === 60) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      return destinationEnclosedBefore
    }

    if (asciiControl_1(code)) {
      return nok(code)
    }

    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter('chunkString', {contentType: 'string'});
    return destinationRaw(code)
  }

  function destinationEnclosedBefore(code) {
    if (code === 62) {
      effects.enter(literalMarkerType);
      effects.consume(code);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok
    }

    effects.enter(stringType);
    effects.enter('chunkString', {contentType: 'string'});
    return destinationEnclosed(code)
  }

  function destinationEnclosed(code) {
    if (code === 62) {
      effects.exit('chunkString');
      effects.exit(stringType);
      return destinationEnclosedBefore(code)
    }

    if (code === null || code === 60 || markdownLineEnding_1(code)) {
      return nok(code)
    }

    effects.consume(code);
    return code === 92 ? destinationEnclosedEscape : destinationEnclosed
  }

  function destinationEnclosedEscape(code) {
    if (code === 60 || code === 62 || code === 92) {
      effects.consume(code);
      return destinationEnclosed
    }

    return destinationEnclosed(code)
  }

  function destinationRaw(code) {
    if (code === 40) {
      if (++balance > limit) return nok(code)
      effects.consume(code);
      return destinationRaw
    }

    if (code === 41) {
      if (!balance--) {
        effects.exit('chunkString');
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok(code)
      }

      effects.consume(code);
      return destinationRaw
    }

    if (code === null || markdownLineEndingOrSpace_1(code)) {
      if (balance) return nok(code)
      effects.exit('chunkString');
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok(code)
    }

    if (asciiControl_1(code)) return nok(code)
    effects.consume(code);
    return code === 92 ? destinationRawEscape : destinationRaw
  }

  function destinationRawEscape(code) {
    if (code === 40 || code === 41 || code === 92) {
      effects.consume(code);
      return destinationRaw
    }

    return destinationRaw(code)
  }
}

var factoryLabel = createLabel;




// eslint-disable-next-line max-params
function createLabel(effects, ok, nok, type, markerType, stringType) {
  var self = this;
  var size = 0;
  var data;

  return start

  function start(code) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak
  }

  function atBreak(code) {
    if (
      code === null ||
      code === 91 ||
      (code === 93 && !data) ||
      /* istanbul ignore next - footnotes. */
      (code === 94 &&
        !size &&
        '_hiddenFootnoteSupport' in self.parser.constructs) ||
      size > 999
    ) {
      return nok(code)
    }

    if (code === 93) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok
    }

    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return atBreak
    }

    effects.enter('chunkString', {contentType: 'string'});
    return label(code)
  }

  function label(code) {
    if (
      code === null ||
      code === 91 ||
      code === 93 ||
      markdownLineEnding_1(code) ||
      size++ > 999
    ) {
      effects.exit('chunkString');
      return atBreak(code)
    }

    effects.consume(code);
    data = data || !markdownSpace_1(code);
    return code === 92 ? labelEscape : label
  }

  function labelEscape(code) {
    if (code === 91 || code === 92 || code === 93) {
      effects.consume(code);
      size++;
      return label
    }

    return label(code)
  }
}

var factoryWhitespace = createWhitespace;






function createWhitespace(effects, ok) {
  var seen;
  return start

  function start(code) {
    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      seen = true;
      return start
    }

    if (markdownSpace_1(code)) {
      return factorySpace(
        effects,
        start,
        seen ? 'linePrefix' : 'lineSuffix'
      )(code)
    }

    return ok(code)
  }
}

var factoryTitle = createTitle;





// eslint-disable-next-line max-params
function createTitle(effects, ok, nok, type, markerType, stringType) {
  var marker;

  return start

  function start(code) {
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    marker = code === 40 ? 41 : code;
    return atFirstTitleBreak
  }

  function atFirstTitleBreak(code) {
    if (code === marker) {
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok
    }

    effects.enter(stringType);
    return atTitleBreak(code)
  }

  function atTitleBreak(code) {
    if (code === marker) {
      effects.exit(stringType);
      return atFirstTitleBreak(marker)
    }

    if (code === null) {
      return nok(code)
    }

    // Note: blank lines can’t exist in content.
    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, atTitleBreak, 'linePrefix')
    }

    effects.enter('chunkString', {contentType: 'string'});
    return title(code)
  }

  function title(code) {
    if (code === marker || code === null || markdownLineEnding_1(code)) {
      effects.exit('chunkString');
      return atTitleBreak(code)
    }

    effects.consume(code);
    return code === 92 ? titleEscape : title
  }

  function titleEscape(code) {
    if (code === marker || code === 92) {
      effects.consume(code);
      return title
    }

    return title(code)
  }
}

var tokenize$e = tokenizeDefinition;











function tokenizeDefinition(effects, ok, nok) {
  var self = this;
  var destinationAfter = effects.attempt(
    {tokenize: tokenizeTitle, partial: true},
    factorySpace(effects, after, 'whitespace'),
    factorySpace(effects, after, 'whitespace')
  );

  var identifier;

  return start

  function start(code) {
    effects.enter('definition');
    return factoryLabel.call(
      self,
      effects,
      labelAfter,
      nok,
      'definitionLabel',
      'definitionLabelMarker',
      'definitionLabelString'
    )(code)
  }

  function labelAfter(code) {
    identifier = normalizeIdentifier_1(
      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
    );

    if (code === 58) {
      effects.enter('definitionMarker');
      effects.consume(code);
      effects.exit('definitionMarker');

      // Note: blank lines can’t exist in content.
      return factoryWhitespace(
        effects,
        factoryDestination(
          effects,
          destinationAfter,
          nok,
          'definitionDestination',
          'definitionDestinationLiteral',
          'definitionDestinationLiteralMarker',
          'definitionDestinationRaw',
          'definitionDestinationString'
        )
      )
    }

    return nok(code)
  }

  function after(code) {
    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('definition');

      if (self.parser.defined.indexOf(identifier) < 0) {
        self.parser.defined.push(identifier);
      }

      return ok(code)
    }

    return nok(code)
  }
}

function tokenizeTitle(effects, ok, nok) {
  return start

  function start(code) {
    return markdownLineEndingOrSpace_1(code)
      ? factoryWhitespace(effects, before)(code)
      : nok(code)
  }

  function before(code) {
    if (code === 34 || code === 39 || code === 40) {
      return factoryTitle(
        effects,
        factorySpace(effects, after, 'whitespace'),
        nok,
        'definitionTitle',
        'definitionTitleMarker',
        'definitionTitleString'
      )(code)
    }

    return nok(code)
  }

  function after(code) {
    return code === null || markdownLineEnding_1(code) ? ok(code) : nok(code)
  }
}

var definition = {
	tokenize: tokenize$e
};

var tokenize$f = tokenizeHardBreakEscape;



function tokenizeHardBreakEscape(effects, ok, nok) {
  return start

  function start(code) {
    effects.enter('hardBreakEscape');
    effects.enter('escapeMarker');
    effects.consume(code);
    return open
  }

  function open(code) {
    if (markdownLineEnding_1(code)) {
      effects.exit('escapeMarker');
      effects.exit('hardBreakEscape');
      return ok(code)
    }

    return nok(code)
  }
}

var hardBreakEscape = {
	tokenize: tokenize$f
};

// This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.
var htmlBlockNames = [
  'address',
  'article',
  'aside',
  'base',
  'basefont',
  'blockquote',
  'body',
  'caption',
  'center',
  'col',
  'colgroup',
  'dd',
  'details',
  'dialog',
  'dir',
  'div',
  'dl',
  'dt',
  'fieldset',
  'figcaption',
  'figure',
  'footer',
  'form',
  'frame',
  'frameset',
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'head',
  'header',
  'hr',
  'html',
  'iframe',
  'legend',
  'li',
  'link',
  'main',
  'menu',
  'menuitem',
  'nav',
  'noframes',
  'ol',
  'optgroup',
  'option',
  'p',
  'param',
  'section',
  'source',
  'summary',
  'table',
  'tbody',
  'td',
  'tfoot',
  'th',
  'thead',
  'title',
  'tr',
  'track',
  'ul'
];

// This module is copied from <https://spec.commonmark.org/0.29/#html-blocks>.
var htmlRawNames = ['pre', 'script', 'style'];

var tokenize$g = tokenizeHtml;
var resolveTo = resolveToHtml;
var concrete$1 = true;














var nextBlank = {tokenize: tokenizeNextBlank, partial: true};

function resolveToHtml(events) {
  var index = events.length;

  while (index--) {
    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
      break
    }
  }

  if (index > 1 && events[index - 2][1].type === 'linePrefix') {
    // Add the prefix start to the HTML token.
    events[index][1].start = events[index - 2][1].start;
    // Add the prefix start to the HTML line token.
    events[index + 1][1].start = events[index - 2][1].start;
    // Remove the line prefix.
    events.splice(index - 2, 2);
  }

  return events
}

function tokenizeHtml(effects, ok, nok) {
  var self = this;
  var kind;
  var startTag;
  var buffer;
  var index;
  var marker;

  return start

  function start(code) {
    effects.enter('htmlFlow');
    effects.enter('htmlFlowData');
    effects.consume(code);
    return open
  }

  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationStart
    }

    if (code === 47) {
      effects.consume(code);
      return tagCloseStart
    }

    if (code === 63) {
      effects.consume(code);
      kind = 3;
      // While we’re in an instruction instead of a declaration, we’re on a `?`
      // right now, so we do need to search for `>`, similar to declarations.
      return self.interrupt ? ok : continuationDeclarationInside
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      buffer = fromCharCode(code);
      startTag = true;
      return tagName
    }

    return nok(code)
  }

  function declarationStart(code) {
    if (code === 45) {
      effects.consume(code);
      kind = 2;
      return commentOpenInside
    }

    if (code === 91) {
      effects.consume(code);
      kind = 5;
      buffer = 'CDATA[';
      index = 0;
      return cdataOpenInside
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      kind = 4;
      return self.interrupt ? ok : continuationDeclarationInside
    }

    return nok(code)
  }

  function commentOpenInside(code) {
    if (code === 45) {
      effects.consume(code);
      return self.interrupt ? ok : continuationDeclarationInside
    }

    return nok(code)
  }

  function cdataOpenInside(code) {
    if (code === buffer.charCodeAt(index++)) {
      effects.consume(code);
      return index === buffer.length
        ? self.interrupt
          ? ok
          : continuation
        : cdataOpenInside
    }

    return nok(code)
  }

  function tagCloseStart(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      buffer = fromCharCode(code);
      return tagName
    }

    return nok(code)
  }

  function tagName(code) {
    if (
      code === null ||
      code === 47 ||
      code === 62 ||
      markdownLineEndingOrSpace_1(code)
    ) {
      if (code !== 47 && startTag && htmlRawNames.indexOf(buffer.toLowerCase()) > -1) {
        kind = 1;
        return self.interrupt ? ok(code) : continuation(code)
      }

      if (htmlBlockNames.indexOf(buffer.toLowerCase()) > -1) {
        kind = 6;

        if (code === 47) {
          effects.consume(code);
          return basicSelfClosing
        }

        return self.interrupt ? ok(code) : continuation(code)
      }

      kind = 7;
      // Do not support complete HTML when interrupting.
      return self.interrupt
        ? nok(code)
        : startTag
        ? completeAttributeNameBefore(code)
        : completeClosingTagAfter(code)
    }

    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      buffer += fromCharCode(code);
      return tagName
    }

    return nok(code)
  }

  function basicSelfClosing(code) {
    if (code === 62) {
      effects.consume(code);
      return self.interrupt ? ok : continuation
    }

    return nok(code)
  }

  function completeClosingTagAfter(code) {
    if (markdownSpace_1(code)) {
      effects.consume(code);
      return completeClosingTagAfter
    }

    return completeEnd(code)
  }

  function completeAttributeNameBefore(code) {
    if (code === 47) {
      effects.consume(code);
      return completeEnd
    }

    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return completeAttributeName
    }

    if (markdownSpace_1(code)) {
      effects.consume(code);
      return completeAttributeNameBefore
    }

    return completeEnd(code)
  }

  function completeAttributeName(code) {
    if (
      code === 45 ||
      code === 46 ||
      code === 58 ||
      code === 95 ||
      asciiAlphanumeric(code)
    ) {
      effects.consume(code);
      return completeAttributeName
    }

    return completeAttributeNameAfter(code)
  }

  function completeAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return completeAttributeValueBefore
    }

    if (markdownSpace_1(code)) {
      effects.consume(code);
      return completeAttributeNameAfter
    }

    return completeAttributeNameBefore(code)
  }

  function completeAttributeValueBefore(code) {
    if (
      code === null ||
      code === 60 ||
      code === 61 ||
      code === 62 ||
      code === 96
    ) {
      return nok(code)
    }

    if (code === 34 || code === 39) {
      effects.consume(code);
      marker = code;
      return completeAttributeValueQuoted
    }

    if (markdownSpace_1(code)) {
      effects.consume(code);
      return completeAttributeValueBefore
    }

    marker = undefined;
    return completeAttributeValueUnquoted(code)
  }

  function completeAttributeValueQuoted(code) {
    if (code === marker) {
      effects.consume(code);
      return completeAttributeValueQuotedAfter
    }

    if (code === null || markdownLineEnding_1(code)) {
      return nok(code)
    }

    effects.consume(code);
    return completeAttributeValueQuoted
  }

  function completeAttributeValueUnquoted(code) {
    if (
      code === null ||
      code === 34 ||
      code === 39 ||
      code === 60 ||
      code === 61 ||
      code === 62 ||
      code === 96 ||
      markdownLineEndingOrSpace_1(code)
    ) {
      return completeAttributeNameAfter(code)
    }

    effects.consume(code);
    return completeAttributeValueUnquoted
  }

  function completeAttributeValueQuotedAfter(code) {
    if (code === 47 || code === 62 || markdownSpace_1(code)) {
      return completeAttributeNameBefore(code)
    }

    return nok(code)
  }

  function completeEnd(code) {
    if (code === 62) {
      effects.consume(code);
      return completeAfter
    }

    return nok(code)
  }

  function completeAfter(code) {
    if (markdownSpace_1(code)) {
      effects.consume(code);
      return completeAfter
    }

    return code === null || markdownLineEnding_1(code)
      ? continuation(code)
      : nok(code)
  }

  function continuation(code) {
    if (code === 45 && kind === 2) {
      effects.consume(code);
      return continuationCommentInside
    }

    if (code === 60 && kind === 1) {
      effects.consume(code);
      return continuationRawTagOpen
    }

    if (code === 62 && kind === 4) {
      effects.consume(code);
      return continuationClose
    }

    if (code === 63 && kind === 3) {
      effects.consume(code);
      return continuationDeclarationInside
    }

    if (code === 93 && kind === 5) {
      effects.consume(code);
      return continuationCharacterDataInside
    }

    if (markdownLineEnding_1(code) && (kind === 6 || kind === 7)) {
      return effects.check(
        nextBlank,
        continuationClose,
        continuationAtLineEnding
      )(code)
    }

    if (code === null || markdownLineEnding_1(code)) {
      return continuationAtLineEnding(code)
    }

    effects.consume(code);
    return continuation
  }

  function continuationAtLineEnding(code) {
    effects.exit('htmlFlowData');
    return htmlContinueStart(code)
  }

  function htmlContinueStart(code) {
    if (code === null) {
      return done(code)
    }

    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return htmlContinueStart
    }

    effects.enter('htmlFlowData');
    return continuation(code)
  }

  function continuationCommentInside(code) {
    if (code === 45) {
      effects.consume(code);
      return continuationDeclarationInside
    }

    return continuation(code)
  }

  function continuationRawTagOpen(code) {
    if (code === 47) {
      effects.consume(code);
      buffer = '';
      return continuationRawEndTag
    }

    return continuation(code)
  }

  function continuationRawEndTag(code) {
    if (code === 62 && htmlRawNames.indexOf(buffer.toLowerCase()) > -1) {
      effects.consume(code);
      return continuationClose
    }

    if (asciiAlpha(code) && buffer.length < 6) {
      effects.consume(code);
      buffer += fromCharCode(code);
      return continuationRawEndTag
    }

    return continuation(code)
  }

  function continuationCharacterDataInside(code) {
    if (code === 93) {
      effects.consume(code);
      return continuationDeclarationInside
    }

    return continuation(code)
  }

  function continuationDeclarationInside(code) {
    if (code === 62) {
      effects.consume(code);
      return continuationClose
    }

    return continuation(code)
  }

  function continuationClose(code) {
    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('htmlFlowData');
      return done(code)
    }

    effects.consume(code);
    return continuationClose
  }

  function done(code) {
    effects.exit('htmlFlow');
    return ok(code)
  }
}

function tokenizeNextBlank(effects, ok, nok) {
  return start

  function start(code) {
    effects.exit('htmlFlowData');
    effects.enter('lineEndingBlank');
    effects.consume(code);
    effects.exit('lineEndingBlank');
    return effects.attempt(partialBlankLine, ok, nok)
  }
}

var htmlFlow = {
	tokenize: tokenize$g,
	resolveTo: resolveTo,
	concrete: concrete$1
};

var tokenize$h = tokenizeHtml$1;









function tokenizeHtml$1(effects, ok, nok) {
  var marker;
  var buffer;
  var index;
  var returnState;

  return start

  function start(code) {
    effects.enter('htmlText');
    effects.enter('htmlTextData');
    effects.consume(code);
    return open
  }

  function open(code) {
    if (code === 33) {
      effects.consume(code);
      return declarationOpen
    }

    if (code === 47) {
      effects.consume(code);
      return tagCloseStart
    }

    if (code === 63) {
      effects.consume(code);
      return instruction
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagOpen
    }

    return nok(code)
  }

  function declarationOpen(code) {
    if (code === 45) {
      effects.consume(code);
      return commentOpen
    }

    if (code === 91) {
      effects.consume(code);
      buffer = 'CDATA[';
      index = 0;
      return cdataOpen
    }

    if (asciiAlpha(code)) {
      effects.consume(code);
      return declaration
    }

    return nok(code)
  }

  function commentOpen(code) {
    if (code === 45) {
      effects.consume(code);
      return commentStart
    }

    return nok(code)
  }

  function commentStart(code) {
    if (code === null || code === 62) {
      return nok(code)
    }

    if (code === 45) {
      effects.consume(code);
      return commentStartDash
    }

    return comment(code)
  }

  function commentStartDash(code) {
    if (code === null || code === 62) {
      return nok(code)
    }

    return comment(code)
  }

  function comment(code) {
    if (code === null) {
      return nok(code)
    }

    if (code === 45) {
      effects.consume(code);
      return commentClose
    }

    if (markdownLineEnding_1(code)) {
      returnState = comment;
      return atLineEnding(code)
    }

    effects.consume(code);
    return comment
  }

  function commentClose(code) {
    if (code === 45) {
      effects.consume(code);
      return end
    }

    return comment(code)
  }

  function cdataOpen(code) {
    if (code === buffer.charCodeAt(index++)) {
      effects.consume(code);
      return index === buffer.length ? cdata : cdataOpen
    }

    return nok(code)
  }

  function cdata(code) {
    if (code === null) {
      return nok(code)
    }

    if (code === 93) {
      effects.consume(code);
      return cdataClose
    }

    effects.consume(code);
    return cdata
  }

  function cdataClose(code) {
    if (code === 93) {
      effects.consume(code);
      return cdataEnd
    }

    return cdata(code)
  }

  function cdataEnd(code) {
    if (code === 62) {
      return end(code)
    }

    if (code === 93) {
      effects.consume(code);
      return cdataEnd
    }

    return cdata(code)
  }

  function declaration(code) {
    if (code === null || code === 62) {
      return end(code)
    }

    if (markdownLineEnding_1(code)) {
      returnState = declaration;
      return atLineEnding(code)
    }

    effects.consume(code);
    return declaration
  }

  function instruction(code) {
    if (code === null) {
      return nok(code)
    }

    if (code === 63) {
      effects.consume(code);
      return instructionClose
    }

    if (markdownLineEnding_1(code)) {
      returnState = instruction;
      return atLineEnding(code)
    }

    effects.consume(code);
    return instruction
  }

  function instructionClose(code) {
    return code === 62 ? end(code) : instruction(code)
  }

  function tagCloseStart(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return tagClose
    }

    return nok(code)
  }

  function tagClose(code) {
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagClose
    }

    return tagCloseBetween(code)
  }

  function tagCloseBetween(code) {
    if (markdownLineEnding_1(code)) {
      returnState = tagCloseBetween;
      return atLineEnding(code)
    }

    if (markdownSpace_1(code)) {
      effects.consume(code);
      return tagCloseBetween
    }

    return end(code)
  }

  function tagOpen(code) {
    if (code === 45 || asciiAlphanumeric(code)) {
      effects.consume(code);
      return tagOpen
    }

    if (code === 47 || code === 62 || markdownLineEndingOrSpace_1(code)) {
      return tagOpenBetween(code)
    }

    return nok(code)
  }

  function tagOpenBetween(code) {
    if (code === 47) {
      effects.consume(code);
      return end
    }

    if (code === 58 || code === 95 || asciiAlpha(code)) {
      effects.consume(code);
      return tagOpenAttributeName
    }

    if (markdownLineEnding_1(code)) {
      returnState = tagOpenBetween;
      return atLineEnding(code)
    }

    if (markdownSpace_1(code)) {
      effects.consume(code);
      return tagOpenBetween
    }

    return end(code)
  }

  function tagOpenAttributeName(code) {
    if (
      code === 45 ||
      code === 46 ||
      code === 58 ||
      code === 95 ||
      asciiAlphanumeric(code)
    ) {
      effects.consume(code);
      return tagOpenAttributeName
    }

    return tagOpenAttributeNameAfter(code)
  }

  function tagOpenAttributeNameAfter(code) {
    if (code === 61) {
      effects.consume(code);
      return tagOpenAttributeValueBefore
    }

    if (markdownLineEnding_1(code)) {
      returnState = tagOpenAttributeNameAfter;
      return atLineEnding(code)
    }

    if (markdownSpace_1(code)) {
      effects.consume(code);
      return tagOpenAttributeNameAfter
    }

    return tagOpenBetween(code)
  }

  function tagOpenAttributeValueBefore(code) {
    if (
      code === null ||
      code === 60 ||
      code === 61 ||
      code === 62 ||
      code === 96
    ) {
      return nok(code)
    }

    if (code === 34 || code === 39) {
      effects.consume(code);
      marker = code;
      return tagOpenAttributeValueQuoted
    }

    if (markdownLineEnding_1(code)) {
      returnState = tagOpenAttributeValueBefore;
      return atLineEnding(code)
    }

    if (markdownSpace_1(code)) {
      effects.consume(code);
      return tagOpenAttributeValueBefore
    }

    effects.consume(code);
    marker = undefined;
    return tagOpenAttributeValueUnquoted
  }

  function tagOpenAttributeValueQuoted(code) {
    if (code === marker) {
      effects.consume(code);
      return tagOpenAttributeValueQuotedAfter
    }

    if (code === null) {
      return nok(code)
    }

    if (markdownLineEnding_1(code)) {
      returnState = tagOpenAttributeValueQuoted;
      return atLineEnding(code)
    }

    effects.consume(code);
    return tagOpenAttributeValueQuoted
  }

  function tagOpenAttributeValueQuotedAfter(code) {
    if (code === 62 || code === 47 || markdownLineEndingOrSpace_1(code)) {
      return tagOpenBetween(code)
    }

    return nok(code)
  }

  function tagOpenAttributeValueUnquoted(code) {
    if (
      code === null ||
      code === 34 ||
      code === 39 ||
      code === 60 ||
      code === 61 ||
      code === 96
    ) {
      return nok(code)
    }

    if (code === 62 || markdownLineEndingOrSpace_1(code)) {
      return tagOpenBetween(code)
    }

    effects.consume(code);
    return tagOpenAttributeValueUnquoted
  }

  // We can’t have blank lines in content, so no need to worry about empty
  // tokens.
  function atLineEnding(code) {
    effects.exit('htmlTextData');
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, afterPrefix, 'linePrefix', 4)
  }

  function afterPrefix(code) {
    effects.enter('htmlTextData');
    return returnState(code)
  }

  function end(code) {
    if (code === 62) {
      effects.consume(code);
      effects.exit('htmlTextData');
      effects.exit('htmlText');
      return ok
    }

    return nok(code)
  }
}

var htmlText = {
	tokenize: tokenize$h
};

var tokenize$i = tokenizeLabelEnd;
var resolveTo$1 = resolveToLabelEnd;
var resolveAll_1$2 = resolveAllLabelEnd;












var resource = {tokenize: tokenizeResource};
var fullReference = {tokenize: tokenizeFullReference};
var collapsedReference = {tokenize: tokenizeCollapsedReference};

function resolveAllLabelEnd(events) {
  var index = -1;
  var token;

  while (++index < events.length) {
    token = events[index][1];

    if (
      !token._used &&
      (token.type === 'labelImage' ||
        token.type === 'labelLink' ||
        token.type === 'labelEnd')
    ) {
      // Remove the marker.
      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
      token.type = 'data';
      index++;
    }
  }

  return events
}

function resolveToLabelEnd(events, context) {
  var index = events.length;
  var offset = 0;
  var group;
  var label;
  var text;
  var token;
  var open;
  var close;
  var media;

  // Find an opening.
  while (index--) {
    token = events[index][1];

    if (open) {
      // If we see another link, or inactive link label, we’ve been here before.
      if (
        token.type === 'link' ||
        (token.type === 'labelLink' && token._inactive)
      ) {
        break
      }

      // Mark other link openings as inactive, as we can’t have links in
      // links.
      if (events[index][0] === 'enter' && token.type === 'labelLink') {
        token._inactive = true;
      }
    } else if (close) {
      if (
        events[index][0] === 'enter' &&
        (token.type === 'labelImage' || token.type === 'labelLink') &&
        !token._balanced
      ) {
        open = index;

        if (token.type !== 'labelLink') {
          offset = 2;
          break
        }
      }
    } else if (token.type === 'labelEnd') {
      close = index;
    }
  }

  group = {
    type: events[open][1].type === 'labelLink' ? 'link' : 'image',
    start: shallow_1(events[open][1].start),
    end: shallow_1(events[events.length - 1][1].end)
  };

  label = {
    type: 'label',
    start: shallow_1(events[open][1].start),
    end: shallow_1(events[close][1].end)
  };

  text = {
    type: 'labelText',
    start: shallow_1(events[open + offset + 2][1].end),
    end: shallow_1(events[close - 2][1].start)
  };

  media = [
    ['enter', group, context],
    ['enter', label, context]
  ];

  // Opening marker.
  chunkedSplice_1(
    media,
    media.length,
    0,
    events.slice(open + 1, open + offset + 3)
  );

  // Text open.
  chunkedSplice_1(media, media.length, 0, [['enter', text, context]]);

  // Between.
  chunkedSplice_1(
    media,
    media.length,
    0,
    resolveAll_1(
      context.parser.constructs.insideSpan.null,
      events.slice(open + offset + 4, close - 3),
      context
    )
  );

  // Text close, marker close, label close.
  chunkedSplice_1(media, media.length, 0, [
    ['exit', text, context],
    events[close - 2],
    events[close - 1],
    ['exit', label, context]
  ]);

  // Reference, resource, or so.
  chunkedSplice_1(media, media.length, 0, events.slice(close + 1));

  // Media close.
  chunkedSplice_1(media, media.length, 0, [['exit', group, context]]);

  chunkedSplice_1(events, open, events.length, media);

  return events
}

function tokenizeLabelEnd(effects, ok, nok) {
  var self = this;
  var index = self.events.length;
  var labelStart;
  var defined;

  // Find an opening.
  while (index--) {
    if (
      (self.events[index][1].type === 'labelImage' ||
        self.events[index][1].type === 'labelLink') &&
      !self.events[index][1]._balanced
    ) {
      labelStart = self.events[index][1];
      break
    }
  }

  return start

  function start(code) {
    if (!labelStart) {
      return nok(code)
    }

    // It’s a balanced bracket, but contains a link.
    if (labelStart._inactive) return balanced(code)
    defined =
      self.parser.defined.indexOf(
        normalizeIdentifier_1(
          self.sliceSerialize({start: labelStart.end, end: self.now()})
        )
      ) > -1;
    effects.enter('labelEnd');
    effects.enter('labelMarker');
    effects.consume(code);
    effects.exit('labelMarker');
    effects.exit('labelEnd');
    return afterLabelEnd
  }

  function afterLabelEnd(code) {
    // Resource: `[asd](fgh)`.
    if (code === 40) {
      return effects.attempt(resource, ok, defined ? ok : balanced)(code)
    }

    // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?
    if (code === 91) {
      return effects.attempt(
        fullReference,
        ok,
        defined ? effects.attempt(collapsedReference, ok, balanced) : balanced
      )(code)
    }

    // Shortcut reference: `[asd]`?
    return defined ? ok(code) : balanced(code)
  }

  function balanced(code) {
    labelStart._balanced = true;
    return nok(code)
  }
}

function tokenizeResource(effects, ok, nok) {
  return start

  function start(code) {
    effects.enter('resource');
    effects.enter('resourceMarker');
    effects.consume(code);
    effects.exit('resourceMarker');
    return factoryWhitespace(effects, open)
  }

  function open(code) {
    if (code === 41) {
      return end(code)
    }

    return factoryDestination(
      effects,
      destinationAfter,
      nok,
      'resourceDestination',
      'resourceDestinationLiteral',
      'resourceDestinationLiteralMarker',
      'resourceDestinationRaw',
      'resourceDestinationString',
      3
    )(code)
  }

  function destinationAfter(code) {
    return markdownLineEndingOrSpace_1(code)
      ? factoryWhitespace(effects, between)(code)
      : end(code)
  }

  function between(code) {
    if (code === 34 || code === 39 || code === 40) {
      return factoryTitle(
        effects,
        factoryWhitespace(effects, end),
        nok,
        'resourceTitle',
        'resourceTitleMarker',
        'resourceTitleString'
      )(code)
    }

    return end(code)
  }

  function end(code) {
    if (code === 41) {
      effects.enter('resourceMarker');
      effects.consume(code);
      effects.exit('resourceMarker');
      effects.exit('resource');
      return ok
    }

    return nok(code)
  }
}

function tokenizeFullReference(effects, ok, nok) {
  var self = this;

  return start

  function start(code) {
    return factoryLabel.call(
      self,
      effects,
      afterLabel,
      nok,
      'reference',
      'referenceMarker',
      'referenceString'
    )(code)
  }

  function afterLabel(code) {
    return self.parser.defined.indexOf(
      normalizeIdentifier_1(
        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
      )
    ) < 0
      ? nok(code)
      : ok(code)
  }
}

function tokenizeCollapsedReference(effects, ok, nok) {
  return start

  function start(code) {
    effects.enter('reference');
    effects.enter('referenceMarker');
    effects.consume(code);
    effects.exit('referenceMarker');
    return open
  }

  function open(code) {
    if (code === 93) {
      effects.enter('referenceMarker');
      effects.consume(code);
      effects.exit('referenceMarker');
      effects.exit('reference');
      return ok
    }

    return nok(code)
  }
}

var labelEnd = {
	tokenize: tokenize$i,
	resolveTo: resolveTo$1,
	resolveAll: resolveAll_1$2
};

var tokenize$j = tokenizelabelImage;
var resolveAll$1 = labelEnd.resolveAll;

function tokenizelabelImage(effects, ok, nok) {
  var self = this;

  return start

  function start(code) {
    effects.enter('labelImage');
    effects.enter('labelImageMarker');
    effects.consume(code);
    effects.exit('labelImageMarker');
    return open
  }

  function open(code) {
    if (code === 91) {
      effects.enter('labelMarker');
      effects.consume(code);
      effects.exit('labelMarker');
      effects.exit('labelImage');
      return after
    }

    return nok(code)
  }

  function after(code) {
    /* istanbul ignore next - footnotes. */
    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
      ? nok(code)
      : ok(code)
  }
}

var labelStartImage = {
	tokenize: tokenize$j,
	resolveAll: resolveAll$1
};

var tokenize$k = tokenizelabelLink;
var resolveAll$2 = labelEnd.resolveAll;

function tokenizelabelLink(effects, ok, nok) {
  var self = this;

  return start

  function start(code) {
    effects.enter('labelLink');
    effects.enter('labelMarker');
    effects.consume(code);
    effects.exit('labelMarker');
    effects.exit('labelLink');
    return after
  }

  function after(code) {
    /* istanbul ignore next - footnotes. */
    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
      ? nok(code)
      : ok(code)
  }
}

var labelStartLink = {
	tokenize: tokenize$k,
	resolveAll: resolveAll$2
};

var tokenize$l = tokenizeSetextUnderline;
var resolveTo$2 = resolveToSetextUnderline;






function resolveToSetextUnderline(events, context) {
  var index = events.length;
  var content;
  var text;
  var definition;
  var heading;

  // Find the opening of the content.
  // It’ll always exist: we don’t tokenize if it isn’t there.
  while (index--) {
    if (events[index][0] === 'enter') {
      if (events[index][1].type === 'content') {
        content = index;
        break
      }

      if (events[index][1].type === 'paragraph') {
        text = index;
      }
    }
    // Exit
    else {
      if (events[index][1].type === 'content') {
        // Remove the content end (if needed we’ll add it later)
        events.splice(index, 1);
      }

      if (!definition && events[index][1].type === 'definition') {
        definition = index;
      }
    }
  }

  heading = {
    type: 'setextHeading',
    start: shallow_1(events[text][1].start),
    end: shallow_1(events[events.length - 1][1].end)
  };

  // Change the paragraph to setext heading text.
  events[text][1].type = 'setextHeadingText';

  // If we have definitions in the content, we’ll keep on having content,
  // but we need move it.
  if (definition) {
    events.splice(text, 0, ['enter', heading, context]);
    events.splice(definition + 1, 0, ['exit', events[content][1], context]);
    events[content][1].end = shallow_1(events[definition][1].end);
  } else {
    events[content][1] = heading;
  }

  // Add the heading exit at the end.
  events.push(['exit', heading, context]);

  return events
}

function tokenizeSetextUnderline(effects, ok, nok) {
  var self = this;
  var index = self.events.length;
  var marker;
  var paragraph;

  // Find an opening.
  while (index--) {
    // Skip enter/exit of line ending, line prefix, and content.
    // We can now either have a definition or a paragraph.
    if (
      self.events[index][1].type !== 'lineEnding' &&
      self.events[index][1].type !== 'linePrefix' &&
      self.events[index][1].type !== 'content'
    ) {
      paragraph = self.events[index][1].type === 'paragraph';
      break
    }
  }

  return start

  function start(code) {
    if (!self.lazy && (self.interrupt || paragraph)) {
      effects.enter('setextHeadingLine');
      effects.enter('setextHeadingLineSequence');
      marker = code;
      return closingSequence(code)
    }

    return nok(code)
  }

  function closingSequence(code) {
    if (code === marker) {
      effects.consume(code);
      return closingSequence
    }

    effects.exit('setextHeadingLineSequence');
    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)
  }

  function closingSequenceEnd(code) {
    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('setextHeadingLine');
      return ok(code)
    }

    return nok(code)
  }
}

var setextUnderline = {
	tokenize: tokenize$l,
	resolveTo: resolveTo$2
};

var tokenize$m = tokenizeWhitespace;





function tokenizeWhitespace(effects, ok) {
  return start

  function start(code) {
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    return factorySpace(effects, ok, 'linePrefix')
  }
}

var lineEnding = {
	tokenize: tokenize$m
};

var resolveText = text.resolver;

var document$1 = {
  42: list, // Asterisk
  43: list, // Plus sign
  45: list, // Dash
  48: list, // 0
  49: list, // 1
  50: list, // 2
  51: list, // 3
  52: list, // 4
  53: list, // 5
  54: list, // 6
  55: list, // 7
  56: list, // 8
  57: list, // 9
  62: blockQuote // Greater than
};

var contentInitial = {
  91: definition // Left square bracket
};

var flowInitial = {
  '-2': codeIndented, // Horizontal tab
  '-1': codeIndented, // Virtual space
  32: codeIndented // Space
};

var flow$1 = {
  35: headingAtx, // Number sign
  42: thematicBreak, // Asterisk
  45: [setextUnderline, thematicBreak], // Dash
  60: htmlFlow, // Less than
  61: setextUnderline, // Equals to
  95: thematicBreak, // Underscore
  96: codeFenced, // Grave accent
  126: codeFenced // Tilde
};

var string$1 = {
  38: characterReference, // Ampersand
  92: characterEscape // Backslash
};

var text$1 = {
  '-5': lineEnding, // Carriage return
  '-4': lineEnding, // Line feed
  '-3': lineEnding, // Carriage return + line feed
  33: labelStartImage, // Exclamation mark
  38: characterReference, // Ampersand
  42: attention, // Asterisk
  60: [autolink, htmlText], // Less than
  91: labelStartLink, // Left square bracket
  92: [hardBreakEscape, characterEscape], // Backslash
  93: labelEnd, // Right square bracket
  95: attention, // Underscore
  96: codeText // Grave accent
};

var insideSpan = {
  null: [attention, resolveText]
};

var constructs = {
	document: document$1,
	contentInitial: contentInitial,
	flowInitial: flowInitial,
	flow: flow$1,
	string: string$1,
	text: text$1,
	insideSpan: insideSpan
};

var serializeChunks_1 = serializeChunks;



function serializeChunks(chunks) {
  var index = -1;
  var result = [];
  var chunk;
  var value;
  var atTab;

  while (++index < chunks.length) {
    chunk = chunks[index];

    if (typeof chunk === 'string') {
      value = chunk;
    } else if (chunk === -5) {
      value = '\r';
    } else if (chunk === -4) {
      value = '\n';
    } else if (chunk === -3) {
      value = '\r' + '\n';
    } else if (chunk === -2) {
      value = '\t';
    } else if (chunk === -1) {
      if (atTab) continue
      value = ' ';
    } else {
      // Currently only replacement character.
      value = fromCharCode(chunk);
    }

    atTab = chunk === -2;
    result.push(value);
  }

  return result.join('')
}

var sliceChunks_1 = sliceChunks;

function sliceChunks(chunks, token) {
  var startIndex = token.start._index;
  var startBufferIndex = token.start._bufferIndex;
  var endIndex = token.end._index;
  var endBufferIndex = token.end._bufferIndex;
  var view;

  if (startIndex === endIndex) {
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);

    if (startBufferIndex > -1) {
      view[0] = view[0].slice(startBufferIndex);
    }

    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }

  return view
}

var miniflat_1 = miniflat;

function miniflat(value) {
  return value === null || value === undefined
    ? []
    : 'length' in value
    ? value
    : [value]
}

var createTokenizer_1 = createTokenizer;











// Create a tokenizer.
// Tokenizers deal with one type of data (e.g., containers, flow, text).
// The parser is the object dealing with it all.
// `initialize` works like other constructs, except that only its `tokenize`
// function is used, in which case it doesn’t receive an `ok` or `nok`.
// `from` can be given to set the point before the first character, although
// when further lines are indented, they must be set with `defineSkip`.
function createTokenizer(parser, initialize, from) {
  var point = from ? shallow_1(from) : {line: 1, column: 1, offset: 0};
  var columnStart = {};
  var resolveAllConstructs = [];
  var chunks = [];
  var stack = [];

  // Tools used for tokenizing.
  var effects = {
    consume: consume,
    enter: enter,
    exit: exit,
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true}),
    lazy: constructFactory(onsuccessfulcheck, {lazy: true})
  };

  // State and tools for resolving and serializing.
  var context = {
    previous: null,
    events: [],
    parser: parser,
    sliceStream: sliceStream,
    sliceSerialize: sliceSerialize,
    now: now,
    defineSkip: skip,
    write: write
  };

  // The state function.
  var state = initialize.tokenize.call(context, effects);

  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }

  // Store where we are in the input stream.
  point._index = 0;
  point._bufferIndex = -1;

  return context

  function write(slice) {
    chunkedSplice_1(chunks, chunks.length, 0, slice);

    main();

    // Exit if we’re not done, resolve might change stuff.
    if (chunks[chunks.length - 1] !== null) {
      return []
    }

    addResult(initialize, 0);

    // Otherwise, resolve, and exit.
    context.events = resolveAll_1(resolveAllConstructs, context.events, context);

    return context.events
  }

  //
  // Tools.
  //

  function sliceSerialize(token) {
    return serializeChunks_1(sliceStream(token))
  }

  function sliceStream(token) {
    return sliceChunks_1(chunks, token)
  }

  function now() {
    return shallow_1(point)
  }

  function skip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
  }

  //
  // State management.
  //

  // Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
  // `consume`).
  // Here is where we walk through the chunks, which either include strings of
  // several characters, or numerical character codes.
  // The reason to do this in a loop instead of a call is so the stack can
  // drain.
  function main() {
    var chunkIndex;
    var chunk;

    while (point._index < chunks.length) {
      chunk = chunks[point._index];

      // If we’re in a buffer chunk, loop through it.
      if (typeof chunk === 'string') {
        chunkIndex = point._index;

        if (point._bufferIndex < 0) {
          point._bufferIndex = 0;
        }

        while (
          point._index === chunkIndex &&
          point._bufferIndex < chunk.length
        ) {
          go(chunk.charCodeAt(point._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }

  // Deal with one code.
  function go(code) {
    state = state(code);
  }

  // Move a character forward.
  function consume(code) {
    if (markdownLineEnding_1(code)) {
      point.line++;
      point.column = 1;
      point.offset += code === -3 ? 2 : 1;
      accountForPotentialSkip();
    } else if (code !== -1) {
      point.column++;
      point.offset++;
    }

    // Not in a string chunk.
    if (point._bufferIndex < 0) {
      point._index++;
    } else {
      point._bufferIndex++;

      // At end of string chunk.
      if (point._bufferIndex === chunks[point._index].length) {
        point._bufferIndex = -1;
        point._index++;
      }
    }

    // Expose the previous character.
    context.previous = code;
  }

  // Start a token.
  function enter(type, fields) {
    var token = fields || {};
    token.type = type;
    token.start = now();

    context.events.push(['enter', token, context]);

    stack.push(token);

    return token
  }

  // Stop a token.
  function exit(type) {
    var token = stack.pop();
    token.end = now();

    context.events.push(['exit', token, context]);

    return token
  }

  // Use results.
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }

  // Discard results.
  function onsuccessfulcheck(construct, info) {
    info.restore();
  }

  // Factory to attempt/check/interrupt.
  function constructFactory(onreturn, fields) {
    return hook

    // Handle either an object mapping codes to constructs, a list of
    // constructs, or a single construct.
    function hook(constructs, returnState, bogusState) {
      var listOfConstructs;
      var constructIndex;
      var currentConstruct;
      var info;

      return constructs.tokenize || 'length' in constructs
        ? handleListOfConstructs(miniflat_1(constructs))
        : handleMapOfConstructs

      function handleMapOfConstructs(code) {
        if (code in constructs || null in constructs) {
          return handleListOfConstructs(
            /* istanbul ignore next - `null` is used by some extensions */
            constructs.null
              ? miniflat_1(constructs[code]).concat(miniflat_1(constructs.null))
              : constructs[code]
          )(code)
        }

        return bogusState(code)
      }

      function handleListOfConstructs(list) {
        listOfConstructs = list;
        constructIndex = 0;
        return handleConstruct(list[constructIndex])
      }

      function handleConstruct(construct) {
        return start

        function start(code) {
          // To do: not nede to store if there is no bogus state, probably?
          // Currently doesn’t work because `inspect` in document does a check
          // w/o a bogus, which doesn’t make sense. But it does seem to help perf
          // by not storing.
          info = store();
          currentConstruct = construct;

          if (!construct.partial) {
            context.currentConstruct = construct;
          }

          return construct.tokenize.call(
            fields ? assign({}, context, fields) : context,
            effects,
            ok,
            nok
          )(code)
        }
      }

      function ok(code) {
        onreturn(currentConstruct, info);
        return returnState
      }

      function nok(code) {
        info.restore();

        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex])
        }

        return bogusState
      }
    }
  }

  function addResult(construct, from) {
    if (construct.resolveAll && resolveAllConstructs.indexOf(construct) < 0) {
      resolveAllConstructs.push(construct);
    }

    if (construct.resolve) {
      chunkedSplice_1(
        context.events,
        from,
        context.events.length - from,
        construct.resolve(context.events.slice(from), context)
      );
    }

    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
  }

  function store() {
    var startPoint = now();
    var startPrevious = context.previous;
    var startCurrentConstruct = context.currentConstruct;
    var startEventsIndex = context.events.length;
    var startStack = Array.from(stack);

    return {restore: restore, from: startEventsIndex}

    function restore() {
      point = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
    }
  }

  function accountForPotentialSkip() {
    if (point.line in columnStart && point.column < 2) {
      point.column = columnStart[point.line];
      point.offset += columnStart[point.line] - 1;
    }
  }
}

var combineExtensions_1 = combineExtensions;





// Combine several syntax extensions into one.
function combineExtensions(extensions) {
  var all = {};
  var index = -1;

  while (++index < extensions.length) {
    extension(all, extensions[index]);
  }

  return all
}

function extension(all, extension) {
  var hook;
  var left;
  var right;
  var code;

  for (hook in extension) {
    left = hasOwnProperty_1.call(all, hook) ? all[hook] : (all[hook] = {});
    right = extension[hook];

    for (code in right) {
      left[code] = constructs$1(
        miniflat_1(right[code]),
        hasOwnProperty_1.call(left, code) ? left[code] : []
      );
    }
  }
}

function constructs$1(list, existing) {
  var index = -1;
  var before = [];

  while (++index < list.length) {
(list[index].add === 'after' ? existing : before).push(list[index]);
  }

  chunkedSplice_1(existing, 0, 0, before);
  return existing
}

var parse = createParser;










function createParser(options) {
  var settings = options || {};
  var parser = {
    defined: [],
    constructs: combineExtensions_1(
      [constructs].concat(miniflat_1(settings.extensions))
    ),

    content: create(content),
    document: create(document),
    flow: create(flow),
    string: create(text.string),
    text: create(text.text)
  };

  return parser

  function create(initializer) {
    return creator
    function creator(from) {
      return createTokenizer_1(parser, initializer, from)
    }
  }
}

var preprocess = preprocessor;

var search = /[\0\t\n\r]/g;

function preprocessor() {
  var start = true;
  var column = 1;
  var buffer = '';
  var atCarriageReturn;

  return preprocess

  function preprocess(value, encoding, end) {
    var chunks = [];
    var match;
    var next;
    var startPosition;
    var endPosition;
    var code;

    value = buffer + value.toString(encoding);
    startPosition = 0;
    buffer = '';

    if (start) {
      if (value.charCodeAt(0) === 65279) {
        startPosition++;
      }

      start = undefined;
    }

    while (startPosition < value.length) {
      search.lastIndex = startPosition;
      match = search.exec(value);
      endPosition = match ? match.index : value.length;
      code = value.charCodeAt(endPosition);

      if (!match) {
        buffer = value.slice(startPosition);
        break
      }

      if (code === 10 && startPosition === endPosition && atCarriageReturn) {
        chunks.push(-3);
        atCarriageReturn = undefined;
      } else {
        if (atCarriageReturn) {
          chunks.push(-5);
          atCarriageReturn = undefined;
        }

        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column += endPosition - startPosition;
        }

        if (code === 0) {
          chunks.push(65533);
          column++;
        } else if (code === 9) {
          next = Math.ceil(column / 4) * 4;
          chunks.push(-2);
          while (column++ < next) chunks.push(-1);
        } else if (code === 10) {
          chunks.push(-4);
          column = 1;
        }
        // Must be carriage return.
        else {
          atCarriageReturn = true;
          column = 1;
        }
      }

      startPosition = endPosition + 1;
    }

    if (end) {
      if (atCarriageReturn) chunks.push(-5);
      if (buffer) chunks.push(buffer);
      chunks.push(null);
    }

    return chunks
  }
}

var postprocess_1 = postprocess;



function postprocess(events) {
  while (!subtokenize_1(events)) {
    // Empty
  }

  return events
}

var dist = fromMarkdown;

// These three are compiled away in the `dist/`












function fromMarkdown(value, encoding, options) {
  if (typeof encoding !== 'string') {
    options = encoding;
    encoding = undefined;
  }

  return compiler(options)(
    postprocess_1(
      parse(options).document().write(preprocess()(value, encoding, true))
    )
  )
}

// Note this compiler only understand complete buffering, not streaming.
function compiler(options) {
  var settings = options || {};
  var config = configure(
    {
      canContainEols: [
        'emphasis',
        'fragment',
        'heading',
        'paragraph',
        'strong'
      ],

      enter: {
        autolink: opener(link),
        autolinkProtocol: onenterdata,
        autolinkEmail: onenterdata,
        atxHeading: opener(heading),
        blockQuote: opener(blockQuote),
        characterEscape: onenterdata,
        characterReference: onenterdata,
        codeFenced: opener(codeFlow),
        codeFencedFenceInfo: buffer,
        codeFencedFenceMeta: buffer,
        codeIndented: opener(codeFlow, buffer),
        codeText: opener(codeText, buffer),
        codeTextData: onenterdata,
        data: onenterdata,
        codeFlowValue: onenterdata,
        definition: opener(definition),
        definitionDestinationString: buffer,
        definitionLabelString: buffer,
        definitionTitleString: buffer,
        emphasis: opener(emphasis),
        hardBreakEscape: opener(hardBreak),
        hardBreakTrailing: opener(hardBreak),
        htmlFlow: opener(html, buffer),
        htmlFlowData: onenterdata,
        htmlText: opener(html, buffer),
        htmlTextData: onenterdata,
        image: opener(image),
        label: buffer,
        link: opener(link),
        listItem: opener(listItem),
        listItemValue: onenterlistitemvalue,
        listOrdered: opener(list, onenterlistordered),
        listUnordered: opener(list),
        paragraph: opener(paragraph),
        reference: onenterreference,
        referenceString: buffer,
        resourceDestinationString: buffer,
        resourceTitleString: buffer,
        setextHeading: opener(heading),
        strong: opener(strong),
        thematicBreak: opener(thematicBreak)
      },

      exit: {
        atxHeading: closer(),
        atxHeadingSequence: onexitatxheadingsequence,
        autolink: closer(),
        autolinkEmail: onexitautolinkemail,
        autolinkProtocol: onexitautolinkprotocol,
        blockQuote: closer(),
        characterEscapeValue: onexitdata,
        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
        characterReferenceValue: onexitcharacterreferencevalue,
        codeFenced: closer(onexitcodefenced),
        codeFencedFence: onexitcodefencedfence,
        codeFencedFenceInfo: onexitcodefencedfenceinfo,
        codeFencedFenceMeta: onexitcodefencedfencemeta,
        codeFlowValue: onexitdata,
        codeIndented: closer(onexitcodeindented),
        codeText: closer(onexitcodetext),
        codeTextData: onexitdata,
        data: onexitdata,
        definition: closer(),
        definitionDestinationString: onexitdefinitiondestinationstring,
        definitionLabelString: onexitdefinitionlabelstring,
        definitionTitleString: onexitdefinitiontitlestring,
        emphasis: closer(),
        hardBreakEscape: closer(onexithardbreak),
        hardBreakTrailing: closer(onexithardbreak),
        htmlFlow: closer(onexithtmlflow),
        htmlFlowData: onexitdata,
        htmlText: closer(onexithtmltext),
        htmlTextData: onexitdata,
        image: closer(onexitimage),
        label: onexitlabel,
        labelText: onexitlabeltext,
        lineEnding: onexitlineending,
        link: closer(onexitlink),
        listItem: closer(),
        listOrdered: closer(),
        listUnordered: closer(),
        paragraph: closer(),
        referenceString: onexitreferencestring,
        resourceDestinationString: onexitresourcedestinationstring,
        resourceTitleString: onexitresourcetitlestring,
        resource: onexitresource,
        setextHeading: closer(onexitsetextheading),
        setextHeadingLineSequence: onexitsetextheadinglinesequence,
        setextHeadingText: onexitsetextheadingtext,
        strong: closer(),
        thematicBreak: closer()
      }
    },

    settings.mdastExtensions || []
  );

  var data = {};

  return compile

  function compile(events) {
    var stack = [{type: 'root', children: []}];
    var tokenStack = [];
    var listStack = [];
    var index = -1;
    var handler;
    var listStart;

    var context = {
      stack: stack,
      tokenStack: tokenStack,
      config: config,
      enter: enter,
      exit: exit,
      buffer: buffer,
      resume: resume,
      setData: setData,
      getData: getData
    };

    while (++index < events.length) {
      // We preprocess lists to add `listItem` tokens, and to infer whether
      // items the list itself are spread out.
      if (
        events[index][1].type === 'listOrdered' ||
        events[index][1].type === 'listUnordered'
      ) {
        if (events[index][0] === 'enter') {
          listStack.push(index);
        } else {
          listStart = listStack.pop(index);
          index = prepareList(events, listStart, index);
        }
      }
    }

    index = -1;

    while (++index < events.length) {
      handler = config[events[index][0]];

      if (hasOwnProperty_1.call(handler, events[index][1].type)) {
        handler[events[index][1].type].call(
          assign({sliceSerialize: events[index][2].sliceSerialize}, context),
          events[index][1]
        );
      }
    }

    if (tokenStack.length) {
      throw new Error(
        'Cannot close document, a token (`' +
          tokenStack[tokenStack.length - 1].type +
          '`, ' +
          unistUtilStringifyPosition({
            start: tokenStack[tokenStack.length - 1].start,
            end: tokenStack[tokenStack.length - 1].end
          }) +
          ') is still open'
      )
    }

    // Figure out `root` position.
    stack[0].position = {
      start: point(
        events.length ? events[0][1].start : {line: 1, column: 1, offset: 0}
      ),

      end: point(
        events.length
          ? events[events.length - 2][1].end
          : {line: 1, column: 1, offset: 0}
      )
    };

    return stack[0]
  }

  function prepareList(events, start, length) {
    var index = start - 1;
    var containerBalance = -1;
    var listSpread = false;
    var listItem;
    var tailIndex;
    var lineIndex;
    var tailEvent;
    var event;
    var firstBlankLineIndex;
    var atMarker;

    while (++index <= length) {
      event = events[index];

      if (
        event[1].type === 'listUnordered' ||
        event[1].type === 'listOrdered' ||
        event[1].type === 'blockQuote'
      ) {
        if (event[0] === 'enter') {
          containerBalance++;
        } else {
          containerBalance--;
        }

        atMarker = undefined;
      } else if (event[1].type === 'lineEndingBlank') {
        if (event[0] === 'enter') {
          if (
            listItem &&
            !atMarker &&
            !containerBalance &&
            !firstBlankLineIndex
          ) {
            firstBlankLineIndex = index;
          }

          atMarker = undefined;
        }
      } else if (
        event[1].type === 'linePrefix' ||
        event[1].type === 'listItemValue' ||
        event[1].type === 'listItemMarker' ||
        event[1].type === 'listItemPrefix' ||
        event[1].type === 'listItemPrefixWhitespace'
      ) ; else {
        atMarker = undefined;
      }

      if (
        (!containerBalance &&
          event[0] === 'enter' &&
          event[1].type === 'listItemPrefix') ||
        (containerBalance === -1 &&
          event[0] === 'exit' &&
          (event[1].type === 'listUnordered' ||
            event[1].type === 'listOrdered'))
      ) {
        if (listItem) {
          tailIndex = index;
          lineIndex = undefined;

          while (tailIndex--) {
            tailEvent = events[tailIndex];

            if (
              tailEvent[1].type === 'lineEnding' ||
              tailEvent[1].type === 'lineEndingBlank'
            ) {
              if (tailEvent[0] === 'exit') continue

              if (lineIndex) {
                events[lineIndex][1].type = 'lineEndingBlank';
                listSpread = true;
              }

              tailEvent[1].type = 'lineEnding';
              lineIndex = tailIndex;
            } else if (
              tailEvent[1].type === 'linePrefix' ||
              tailEvent[1].type === 'blockQuotePrefix' ||
              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
              tailEvent[1].type === 'blockQuoteMarker' ||
              tailEvent[1].type === 'listItemIndent'
            ) ; else {
              break
            }
          }

          if (
            firstBlankLineIndex &&
            (!lineIndex || firstBlankLineIndex < lineIndex)
          ) {
            listItem._spread = true;
          }

          // Fix position.
          listItem.end = point(
            lineIndex ? events[lineIndex][1].start : event[1].end
          );

          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
          index++;
          length++;
        }

        // Create a new list item.
        if (event[1].type === 'listItemPrefix') {
          listItem = {
            type: 'listItem',
            _spread: false,
            start: point(event[1].start)
          };

          events.splice(index, 0, ['enter', listItem, event[2]]);
          index++;
          length++;
          firstBlankLineIndex = undefined;
          atMarker = true;
        }
      }
    }

    events[start][1]._spread = listSpread;
    return length
  }

  function setData(key, value) {
    data[key] = value;
  }

  function getData(key) {
    return data[key]
  }

  function point(d) {
    return {line: d.line, column: d.column, offset: d.offset}
  }

  function opener(create, and) {
    return open

    function open(token) {
      enter.call(this, create(token), token);
      if (and) and.call(this, token);
    }
  }

  function buffer() {
    this.stack.push({type: 'fragment', children: []});
  }

  function enter(node, token) {
    this.stack[this.stack.length - 1].children.push(node);
    this.stack.push(node);
    this.tokenStack.push(token);
    node.position = {start: point(token.start)};
    return node
  }

  function closer(and) {
    return close

    function close(token) {
      if (and) and.call(this, token);
      exit.call(this, token);
    }
  }

  function exit(token) {
    var node = this.stack.pop();
    var open = this.tokenStack.pop();

    if (!open) {
      throw new Error(
        'Cannot close `' +
          token.type +
          '` (' +
          unistUtilStringifyPosition({start: token.start, end: token.end}) +
          '): it’s not open'
      )
    } else if (open.type !== token.type) {
      throw new Error(
        'Cannot close `' +
          token.type +
          '` (' +
          unistUtilStringifyPosition({start: token.start, end: token.end}) +
          '): a different token (`' +
          open.type +
          '`, ' +
          unistUtilStringifyPosition({start: open.start, end: open.end}) +
          ') is open'
      )
    }

    node.position.end = point(token.end);
    return node
  }

  function resume() {
    return mdastUtilToString(this.stack.pop())
  }

  //
  // Handlers.
  //

  function onenterlistordered() {
    setData('expectingFirstListItemValue', true);
  }

  function onenterlistitemvalue(token) {
    if (getData('expectingFirstListItemValue')) {
      this.stack[this.stack.length - 2].start = parseInt(
        this.sliceSerialize(token),
        10
      );

      setData('expectingFirstListItemValue');
    }
  }

  function onexitcodefencedfenceinfo() {
    var data = this.resume();
    this.stack[this.stack.length - 1].lang = data;
  }

  function onexitcodefencedfencemeta() {
    var data = this.resume();
    this.stack[this.stack.length - 1].meta = data;
  }

  function onexitcodefencedfence() {
    // Exit if this is the closing fence.
    if (getData('flowCodeInside')) return
    this.buffer();
    setData('flowCodeInside', true);
  }

  function onexitcodefenced() {
    var data = this.resume();
    this.stack[this.stack.length - 1].value = data.replace(
      /^(\r?\n|\r)|(\r?\n|\r)$/g,
      ''
    );

    setData('flowCodeInside');
  }

  function onexitcodeindented() {
    var data = this.resume();
    this.stack[this.stack.length - 1].value = data;
  }

  function onexitdefinitionlabelstring(token) {
    // Discard label, use the source content instead.
    var label = this.resume();
    this.stack[this.stack.length - 1].label = label;
    this.stack[this.stack.length - 1].identifier = normalizeIdentifier_1(
      this.sliceSerialize(token)
    ).toLowerCase();
  }

  function onexitdefinitiontitlestring() {
    var data = this.resume();
    this.stack[this.stack.length - 1].title = data;
  }

  function onexitdefinitiondestinationstring() {
    var data = this.resume();
    this.stack[this.stack.length - 1].url = data;
  }

  function onexitatxheadingsequence(token) {
    if (!this.stack[this.stack.length - 1].depth) {
      this.stack[this.stack.length - 1].depth = this.sliceSerialize(
        token
      ).length;
    }
  }

  function onexitsetextheadingtext() {
    setData('setextHeadingSlurpLineEnding', true);
  }

  function onexitsetextheadinglinesequence(token) {
    this.stack[this.stack.length - 1].depth =
      this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
  }

  function onexitsetextheading() {
    setData('setextHeadingSlurpLineEnding');
  }

  function onenterdata(token) {
    var siblings = this.stack[this.stack.length - 1].children;
    var tail = siblings[siblings.length - 1];

    if (!tail || tail.type !== 'text') {
      // Add a new text node.
      tail = text();
      tail.position = {start: point(token.start)};
      this.stack[this.stack.length - 1].children.push(tail);
    }

    this.stack.push(tail);
  }

  function onexitdata(token) {
    var tail = this.stack.pop();
    tail.value += this.sliceSerialize(token);
    tail.position.end = point(token.end);
  }

  function onexitlineending(token) {
    var context = this.stack[this.stack.length - 1];

    // If we’re at a hard break, include the line ending in there.
    if (getData('atHardBreak')) {
      context.children[context.children.length - 1].position.end = point(
        token.end
      );

      setData('atHardBreak');
      return
    }

    if (
      !getData('setextHeadingSlurpLineEnding') &&
      config.canContainEols.indexOf(context.type) > -1
    ) {
      onenterdata.call(this, token);
      onexitdata.call(this, token);
    }
  }

  function onexithardbreak() {
    setData('atHardBreak', true);
  }

  function onexithtmlflow() {
    var data = this.resume();
    this.stack[this.stack.length - 1].value = data;
  }

  function onexithtmltext() {
    var data = this.resume();
    this.stack[this.stack.length - 1].value = data;
  }

  function onexitcodetext() {
    var data = this.resume();
    this.stack[this.stack.length - 1].value = data;
  }

  function onexitlink() {
    var context = this.stack[this.stack.length - 1];

    // To do: clean.
    if (getData('inReference')) {
      context.type += 'Reference';
      context.referenceType = getData('referenceType') || 'shortcut';
      delete context.url;
      delete context.title;
    } else {
      delete context.identifier;
      delete context.label;
      delete context.referenceType;
    }

    setData('referenceType');
  }

  function onexitimage() {
    var context = this.stack[this.stack.length - 1];

    // To do: clean.
    if (getData('inReference')) {
      context.type += 'Reference';
      context.referenceType = getData('referenceType') || 'shortcut';
      delete context.url;
      delete context.title;
    } else {
      delete context.identifier;
      delete context.label;
      delete context.referenceType;
    }

    setData('referenceType');
  }

  function onexitlabeltext(token) {
    this.stack[this.stack.length - 2].identifier = normalizeIdentifier_1(
      this.sliceSerialize(token)
    ).toLowerCase();
  }

  function onexitlabel() {
    var fragment = this.stack[this.stack.length - 1];
    var value = this.resume();

    this.stack[this.stack.length - 1].label = value;

    // Assume a reference.
    setData('inReference', true);

    if (this.stack[this.stack.length - 1].type === 'link') {
      this.stack[this.stack.length - 1].children = fragment.children;
    } else {
      this.stack[this.stack.length - 1].alt = value;
    }
  }

  function onexitresourcedestinationstring() {
    var data = this.resume();
    this.stack[this.stack.length - 1].url = data;
  }

  function onexitresourcetitlestring() {
    var data = this.resume();
    this.stack[this.stack.length - 1].title = data;
  }

  function onexitresource() {
    setData('inReference');
  }

  function onenterreference() {
    setData('referenceType', 'collapsed');
  }

  function onexitreferencestring(token) {
    var label = this.resume();
    this.stack[this.stack.length - 1].label = label;
    this.stack[this.stack.length - 1].identifier = normalizeIdentifier_1(
      this.sliceSerialize(token)
    ).toLowerCase();
    setData('referenceType', 'full');
  }

  function onexitcharacterreferencemarker(token) {
    setData('characterReferenceType', token.type);
  }

  function onexitcharacterreferencevalue(token) {
    var data = this.sliceSerialize(token);
    var type = getData('characterReferenceType');
    var value;
    var tail;

    if (type) {
      value = safeFromInt_1(
        data,
        type === 'characterReferenceMarkerNumeric' ? 10 : 16
      );

      setData('characterReferenceType');
    } else {
      value = decodeEntity_1(data);
    }

    tail = this.stack.pop();
    tail.value += value;
    tail.position.end = point(token.end);
  }

  function onexitautolinkprotocol(token) {
    onexitdata.call(this, token);
    this.stack[this.stack.length - 1].url = this.sliceSerialize(token);
  }

  function onexitautolinkemail(token) {
    onexitdata.call(this, token);
    this.stack[this.stack.length - 1].url =
      'mailto:' + this.sliceSerialize(token);
  }

  //
  // Creaters.
  //

  function blockQuote() {
    return {type: 'blockquote', children: []}
  }

  function codeFlow() {
    return {type: 'code', lang: null, meta: null, value: ''}
  }

  function codeText() {
    return {type: 'inlineCode', value: ''}
  }

  function definition() {
    return {
      type: 'definition',
      identifier: '',
      label: null,
      title: null,
      url: ''
    }
  }

  function emphasis() {
    return {type: 'emphasis', children: []}
  }

  function heading() {
    return {type: 'heading', depth: undefined, children: []}
  }

  function hardBreak() {
    return {type: 'break'}
  }

  function html() {
    return {type: 'html', value: ''}
  }

  function image() {
    return {type: 'image', title: null, url: '', alt: null}
  }

  function link() {
    return {type: 'link', title: null, url: '', children: []}
  }

  function list(token) {
    return {
      type: 'list',
      ordered: token.type === 'listOrdered',
      start: null,
      spread: token._spread,
      children: []
    }
  }

  function listItem(token) {
    return {
      type: 'listItem',
      spread: token._spread,
      checked: null,
      children: []
    }
  }

  function paragraph() {
    return {type: 'paragraph', children: []}
  }

  function strong() {
    return {type: 'strong', children: []}
  }

  function text() {
    return {type: 'text', value: ''}
  }

  function thematicBreak() {
    return {type: 'thematicBreak'}
  }
}

function configure(config, extensions) {
  var index = -1;

  while (++index < extensions.length) {
    extension$1(config, extensions[index]);
  }

  return config
}

function extension$1(config, extension) {
  var key;
  var left;

  for (key in extension) {
    left = hasOwnProperty_1.call(config, key) ? config[key] : (config[key] = {});

    if (key === 'canContainEols') {
      config[key] = [].concat(left, extension[key]);
    } else {
      Object.assign(left, extension[key]);
    }
  }
}

var mdastUtilFromMarkdown = dist;

var remarkParse = parse$1;



function parse$1(options) {
  var self = this;

  this.Parser = parse;

  function parse(doc) {
    return mdastUtilFromMarkdown(
      doc,
      Object.assign({}, self.data('settings'), options, {
        // Note: these options are not in the readme.
        // The goal is for them to be set by plugins on `data` instead of being
        // passed by users.
        extensions: self.data('micromarkExtensions') || [],
        mdastExtensions: self.data('fromMarkdownExtensions') || []
      })
    )
  }
}

var tokenize$n = tokenizeMathFenced;
var concrete$2 = true;




function tokenizeMathFenced(effects, ok, nok) {
  var self = this;
  var initialPrefix = prefixSize_1(this.events, 'linePrefix');
  var sizeOpen = 0;

  return start

  function start(code) {
    /* istanbul ignore if - handled by mm */
    if (code !== 36) throw new Error('expected `$`')

    effects.enter('mathFlow');
    effects.enter('mathFlowFence');
    effects.enter('mathFlowFenceSequence');
    return sequenceOpen(code)
  }

  function sequenceOpen(code) {
    if (code === 36) {
      effects.consume(code);
      sizeOpen++;
      return sequenceOpen
    }

    effects.exit('mathFlowFenceSequence');
    return sizeOpen < 2
      ? nok(code)
      : factorySpace(effects, metaOpen, 'whitespace')(code)
  }

  function metaOpen(code) {
    if (code === null || code === -5 || code === -4 || code === -3) {
      return openAfter(code)
    }

    effects.enter('mathFlowFenceMeta');
    effects.enter('chunkString', {contentType: 'string'});
    return meta(code)
  }

  function meta(code) {
    if (code === null || code === -5 || code === -4 || code === -3) {
      effects.exit('chunkString');
      effects.exit('mathFlowFenceMeta');
      return openAfter(code)
    }

    if (code === 36) return nok(code)
    effects.consume(code);
    return meta
  }

  function openAfter(code) {
    effects.exit('mathFlowFence');
    return self.interrupt ? ok(code) : content(code)
  }

  function content(code) {
    if (code === null) {
      return after(code)
    }

    if (code === -5 || code === -4 || code === -3) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return effects.attempt(
        {tokenize: tokenizeClosingFence, partial: true},
        after,
        initialPrefix
          ? factorySpace(effects, content, 'linePrefix', initialPrefix + 1)
          : content
      )
    }

    effects.enter('mathFlowValue');
    return contentContinue(code)
  }

  function contentContinue(code) {
    if (code === null || code === -5 || code === -4 || code === -3) {
      effects.exit('mathFlowValue');
      return content(code)
    }

    effects.consume(code);
    return contentContinue
  }

  function after(code) {
    effects.exit('mathFlow');
    return ok(code)
  }

  function tokenizeClosingFence(effects, ok, nok) {
    var size = 0;

    return factorySpace(effects, closingPrefixAfter, 'linePrefix', 4)

    function closingPrefixAfter(code) {
      effects.enter('mathFlowFence');
      effects.enter('mathFlowFenceSequence');
      return closingSequence(code)
    }

    function closingSequence(code) {
      if (code === 36) {
        effects.consume(code);
        size++;
        return closingSequence
      }

      if (size < sizeOpen) return nok(code)
      effects.exit('mathFlowFenceSequence');
      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
    }

    function closingSequenceEnd(code) {
      if (code === null || code === -5 || code === -4 || code === -3) {
        effects.exit('mathFlowFence');
        return ok(code)
      }

      return nok(code)
    }
  }
}

var tokenizeMathFlow = {
	tokenize: tokenize$n,
	concrete: concrete$2
};

var tokenize$o = tokenizeMathText;
var resolve$4 = resolveMathText;
var previous_1$1 = previous$1;

function resolveMathText(events) {
  var tailExitIndex = events.length - 4;
  var headEnterIndex = 3;
  var index;
  var enter;

  // If we start and end with an EOL or a space.
  if (
    (events[headEnterIndex][1].type === 'lineEnding' ||
      events[headEnterIndex][1].type === 'space') &&
    (events[tailExitIndex][1].type === 'lineEnding' ||
      events[tailExitIndex][1].type === 'space')
  ) {
    index = headEnterIndex;

    // And we have data.
    while (++index < tailExitIndex) {
      if (events[index][1].type === 'mathTextData') {
        // Then we have padding.
        events[tailExitIndex][1].type = 'mathTextPadding';
        events[headEnterIndex][1].type = 'mathTextPadding';
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break
      }
    }
  }

  // Merge adjacent spaces and data.
  index = headEnterIndex - 1;
  tailExitIndex++;

  while (++index <= tailExitIndex) {
    if (enter === undefined) {
      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
        enter = index;
      }
    } else if (
      index === tailExitIndex ||
      events[index][1].type === 'lineEnding'
    ) {
      events[enter][1].type = 'mathTextData';

      if (index !== enter + 2) {
        events[enter][1].end = events[index - 1][1].end;
        events.splice(enter + 2, index - enter - 2);
        tailExitIndex -= index - enter - 2;
        index = enter + 2;
      }

      enter = undefined;
    }
  }

  return events
}

function previous$1(code) {
  // If there is a previous code, there will always be a tail.
  return (
    code !== 36 ||
    this.events[this.events.length - 1][1].type === 'characterEscape'
  )
}

function tokenizeMathText(effects, ok, nok) {
  var self = this;
  var sizeOpen = 0;
  var size;
  var token;

  return start

  function start(code) {
    /* istanbul ignore if - handled by mm */
    if (code !== 36) throw new Error('expected `$`')

    /* istanbul ignore if - handled by mm */
    if (!previous$1.call(self, self.previous)) {
      throw new Error('expected correct previous')
    }

    effects.enter('mathText');
    effects.enter('mathTextSequence');
    return openingSequence(code)
  }

  function openingSequence(code) {
    if (code === 36) {
      effects.consume(code);
      sizeOpen++;
      return openingSequence
    }

    effects.exit('mathTextSequence');
    return gap(code)
  }

  function gap(code) {
    // EOF.
    if (code === null) {
      return nok(code)
    }

    // Closing fence?
    // Could also be data.
    if (code === 36) {
      token = effects.enter('mathTextSequence');
      size = 0;
      return closingSequence(code)
    }

    // Tabs don’t work, and virtual spaces don’t make sense.
    if (code === 32) {
      effects.enter('space');
      effects.consume(code);
      effects.exit('space');
      return gap
    }

    if (code === -5 || code === -4 || code === -3) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return gap
    }

    // Data.
    effects.enter('mathTextData');
    return data(code)
  }

  // In code.
  function data(code) {
    if (
      code === null ||
      code === 32 ||
      code === 36 ||
      code === -5 ||
      code === -4 ||
      code === -3
    ) {
      effects.exit('mathTextData');
      return gap(code)
    }

    effects.consume(code);
    return data
  }

  // Closing fence.
  function closingSequence(code) {
    // More.
    if (code === 36) {
      effects.consume(code);
      size++;
      return closingSequence
    }

    // Done!
    if (size === sizeOpen) {
      effects.exit('mathTextSequence');
      effects.exit('mathText');
      return ok(code)
    }

    // More or less accents: mark as data.
    token.type = 'mathTextData';
    return data(code)
  }
}

var tokenizeMathText_1 = {
	tokenize: tokenize$o,
	resolve: resolve$4,
	previous: previous_1$1
};

var flow$2 = {36: tokenizeMathFlow};
var text$2 = {36: tokenizeMathText_1};

var syntax = {
	flow: flow$2,
	text: text$2
};

var micromarkExtensionMath = syntax;

var enter = {
  mathFlow: enterMathFlow,
  mathFlowFenceMeta: enterMathFlowMeta,
  mathText: enterMathText
};
var exit = {
  mathFlow: exitMathFlow,
  mathFlowFence: exitMathFlowFence,
  mathFlowFenceMeta: exitMathFlowMeta,
  mathFlowValue: exitMathData,
  mathText: exitMathText,
  mathTextData: exitMathData
};

function enterMathFlow(token) {
  this.enter(
    {
      type: 'math',
      meta: null,
      value: '',
      data: {
        hName: 'div',
        hProperties: {className: ['math', 'math-display']},
        hChildren: [{type: 'text', value: ''}]
      }
    },
    token
  );
}

function enterMathFlowMeta() {
  this.buffer();
}

function exitMathFlowMeta() {
  var data = this.resume();
  this.stack[this.stack.length - 1].meta = data;
}

function exitMathFlowFence() {
  // Exit if this is the closing fence.
  if (this.getData('mathFlowInside')) return
  this.buffer();
  this.setData('mathFlowInside', true);
}

function exitMathFlow(token) {
  var data = this.resume().replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
  var node = this.exit(token);
  node.value = data;
  node.data.hChildren[0].value = data;
  this.setData('mathFlowInside');
}

function enterMathText(token) {
  this.enter(
    {
      type: 'inlineMath',
      value: '',
      data: {
        hName: 'span',
        hProperties: {className: ['math', 'math-inline']},
        hChildren: [{type: 'text', value: ''}]
      }
    },
    token
  );
  this.buffer();
}

function exitMathText(token) {
  var data = this.resume();
  var node = this.exit(token);
  node.value = data;
  node.data.hChildren[0].value = data;
}

function exitMathData(token) {
  this.config.enter.data.call(this, token);
  this.config.exit.data.call(this, token);
}

var fromMarkdown$1 = {
	enter: enter,
	exit: exit
};

/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/**
 * Results cache
 */

var res = '';
var cache;

/**
 * Expose `repeat`
 */

var repeatString = repeat;

/**
 * Repeat the given `string` the specified `number`
 * of times.
 *
 * **Example:**
 *
 * ```js
 * var repeat = require('repeat-string');
 * repeat('A', 5);
 * //=> AAAAA
 * ```
 *
 * @param {String} `string` The string to repeat
 * @param {Number} `number` The number of times to repeat the string
 * @return {String} Repeated string
 * @api public
 */

function repeat(str, num) {
  if (typeof str !== 'string') {
    throw new TypeError('expected a string');
  }

  // cover common, quick use cases
  if (num === 1) return str;
  if (num === 2) return str + str;

  var max = str.length * num;
  if (cache !== str || typeof cache === 'undefined') {
    cache = str;
    res = '';
  } else if (res.length >= max) {
    return res.substr(0, max);
  }

  while (max > res.length && num > 1) {
    if (num & 1) {
      res += str;
    }

    num >>= 1;
    str += str;
  }

  res += str;
  res = res.substr(0, max);
  return res;
}

var longestStreak_1 = longestStreak;

// Get the count of the longest repeating streak of `character` in `value`.
function longestStreak(value, character) {
  var count = 0;
  var maximum = 0;
  var expected;
  var index;

  if (typeof character !== 'string' || character.length !== 1) {
    throw new Error('Expected character')
  }

  value = String(value);
  index = value.indexOf(character);
  expected = index;

  while (index !== -1) {
    count++;

    if (index === expected) {
      if (count > maximum) {
        maximum = count;
      }
    } else {
      count = 1;
    }

    expected = index + 1;
    index = value.indexOf(character, expected);
  }

  return maximum
}

var safe_1 = safe;

function safe(context, input, config) {
  var value = (config.before || '') + (input || '') + (config.after || '');
  var positions = [];
  var result = [];
  var infos = {};
  var index = -1;
  var before;
  var after;
  var position;
  var pattern;
  var expression;
  var match;
  var start;
  var end;

  while (++index < context.unsafePatterns.length) {
    pattern = context.unsafePatterns[index];

    if (
      !inScope(context.stack, pattern.inConstruct, true) ||
      inScope(context.stack, pattern.notInConstruct)
    ) {
      continue
    }

    expression =
      pattern._compiled || (pattern._compiled = toExpression(pattern));

    while ((match = expression.exec(value))) {
      before = 'before' in pattern || pattern.atBreak;
      after = 'after' in pattern;
      position = match.index + (before ? match[1].length : 0);

      if (positions.indexOf(position) === -1) {
        positions.push(position);
        infos[position] = {before: before, after: after};
      } else {
        if (infos[position].before && !before) {
          infos[position].before = false;
        }

        if (infos[position].after && !after) {
          infos[position].after = false;
        }
      }
    }
  }

  positions.sort(numerical);

  start = config.before ? config.before.length : 0;
  end = value.length - (config.after ? config.after.length : 0);
  index = -1;

  while (++index < positions.length) {
    position = positions[index];

    if (
      // Character before or after matched:
      position < start ||
      position >= end
    ) {
      continue
    }

    // If this character is supposed to be escaped because it has a condition on
    // the next character, and the next character is definitly being escaped,
    // then skip this escape.
    if (
      position + 1 < end &&
      positions[index + 1] === position + 1 &&
      infos[position].after &&
      !infos[position + 1].before &&
      !infos[position + 1].after
    ) {
      continue
    }

    if (start !== position) {
      result.push(value.slice(start, position));
    }

    start = position;

    if (
      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&
      (!config.encode || config.encode.indexOf(value.charAt(position)) === -1)
    ) {
      // Character escape.
      result.push('\\');
    } else {
      // Character reference.
      result.push(
        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'
      );
      start++;
    }
  }

  result.push(value.slice(start, end));

  return result.join('')
}

function inScope(stack, list, none) {
  var index;

  if (!list) {
    return none
  }

  if (typeof list === 'string') {
    list = [list];
  }

  index = -1;

  while (++index < list.length) {
    if (stack.indexOf(list[index]) !== -1) {
      return true
    }
  }

  return false
}

function toExpression(pattern) {
  var before = pattern.before ? '(?:' + pattern.before + ')' : '';
  var after = pattern.after ? '(?:' + pattern.after + ')' : '';

  if (pattern.atBreak) {
    before = '[\\r\\n][\\t ]*' + before;
  }

  return new RegExp(
    (before ? '(' + before + ')' : '') +
      (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? '\\' : '') +
      pattern.character +
      (after || ''),
    'g'
  )
}

function numerical(a, b) {
  return a - b
}

var unsafe = [
  {character: '\r', inConstruct: ['mathFlowMeta']},
  {character: '\r', inConstruct: ['mathFlowMeta']},
  {character: '$', inConstruct: ['mathFlowMeta', 'phrasing']},
  {atBreak: true, character: '$', after: '\\$'}
];

var handlers = {math: math, inlineMath: inlineMath};

inlineMath.peek = inlineMathPeek;





function math(node, _, context) {
  var raw = node.value || '';
  var fence = repeatString('$', Math.max(longestStreak_1(raw, '$') + 1, 2));
  var exit = context.enter('mathFlow');
  var value = fence;
  var subexit;

  if (node.meta) {
    subexit = context.enter('mathFlowMeta');
    value += safe_1(context, node.meta, {before: '$', after: ' ', encode: ['$']});
    subexit();
  }

  value += '\n';

  if (raw) {
    value += raw + '\n';
  }

  value += fence;
  exit();
  return value
}

function inlineMath(node) {
  var value = node.value || '';
  var size = 1;
  var pad = '';
  var sequence;

  // If there is a single dollar sign on its own in the math, use a fence of
  // two.
  // If there are two in a row, use one.
  while (
    new RegExp('(^|[^$])' + repeatString('\\$', size) + '([^$]|$)').test(value)
  ) {
    size++;
  }

  // If this is not just spaces or eols (tabs don’t count), and either the first
  // or last character are a space, eol, or dollar sign, then pad with spaces.
  if (
    /[^ \r\n]/.test(value) &&
    (/[ \r\n$]/.test(value.charAt(0)) ||
      /[ \r\n$]/.test(value.charAt(value.length - 1)))
  ) {
    pad = ' ';
  }

  sequence = repeatString('$', size);
  return sequence + pad + value + pad + sequence
}

function inlineMathPeek() {
  return '$'
}

var toMarkdown = {
	unsafe: unsafe,
	handlers: handlers
};

var warningIssued;

var remarkMath = math$1;

function math$1() {
  var data = this.data();

  /* istanbul ignore next - old remark. */
  if (
    !warningIssued &&
    ((this.Parser &&
      this.Parser.prototype &&
      this.Parser.prototype.blockTokenizers) ||
      (this.Compiler &&
        this.Compiler.prototype &&
        this.Compiler.prototype.visitors))
  ) {
    warningIssued = true;
    console.warn(
      '[remark-math] Warning: please upgrade to remark 13 to use this plugin'
    );
  }

  add('micromarkExtensions', micromarkExtensionMath);
  add('fromMarkdownExtensions', fromMarkdown$1);
  add('toMarkdownExtensions', toMarkdown);

  function add(field, value) {
    /* istanbul ignore if - other extensions. */
    if (data[field]) data[field].push(value);
    else data[field] = [value];
  }
}

var domain = {tokenize: tokenizeDomain};
var path = {tokenize: tokenizePath};
var punctuation = {tokenize: tokenizePunctuation};
var paren = {tokenize: tokenizeParen};
var namedCharacterReference = {tokenize: tokenizeNamedCharacterReference};

var wwwAutolink = {tokenize: tokenizeWwwAutolink, previous: previous$2};
var httpAutolink = {tokenize: tokenizeHttpAutolink, previous: previous$2};
var emailAutolink = {tokenize: tokenizeEmailAutolink, previous: previous$2};

var text$3 = {};

// Export hooked constructs.
var text_1$1 = text$3;

// `0`
var code = 48;

// While the code is smaller than `{`.
while (code < 123) {
  text$3[code] = emailAutolink;
  code++;
  // Jump from `:` -> `A`
  if (code === 58) code = 65;
  // Jump from `[` -> `a`
  else if (code === 91) code = 97;
}

// `+`
text$3[43] = emailAutolink;
// `-`
text$3[45] = emailAutolink;
// `.`
text$3[46] = emailAutolink;
// `_`
text$3[95] = emailAutolink;
// `h`.
text$3[72] = [emailAutolink, httpAutolink];
text$3[104] = [emailAutolink, httpAutolink];
// `w`.
text$3[87] = [emailAutolink, wwwAutolink];
text$3[119] = [emailAutolink, wwwAutolink];

function tokenizeEmailAutolink(effects, ok, nok) {
  var self = this;
  var hasDot;

  return start

  function start(code) {
    /* istanbul ignore next - hooks. */
    if (!gfmAtext(code) || !previous$2(self.previous)) {
      return nok(code)
    }

    effects.enter('literalAutolink');
    effects.enter('literalAutolinkEmail');
    return atext(code)
  }

  function atext(code) {
    if (gfmAtext(code)) {
      effects.consume(code);
      return atext
    }

    // `@`
    if (code === 64) {
      effects.consume(code);
      return label
    }

    return nok(code)
  }

  function label(code) {
    // `.`
    if (code === 46) {
      return effects.check(punctuation, done, dotContinuation)(code)
    }

    if (
      // `-`
      code === 45 ||
      // `_`
      code === 95
    ) {
      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)
    }

    if (asciiAlphanumeric(code)) {
      effects.consume(code);
      return label
    }

    return done(code)
  }

  function dotContinuation(code) {
    effects.consume(code);
    hasDot = true;
    return label
  }

  function dashOrUnderscoreContinuation(code) {
    effects.consume(code);
    return afterDashOrUnderscore
  }

  function afterDashOrUnderscore(code) {
    // `.`
    if (code === 46) {
      return effects.check(punctuation, nok, dotContinuation)(code)
    }

    return label(code)
  }

  function done(code) {
    if (hasDot) {
      effects.exit('literalAutolinkEmail');
      effects.exit('literalAutolink');
      return ok(code)
    }

    return nok(code)
  }
}

function tokenizeWwwAutolink(effects, ok, nok) {
  var self = this;

  return start

  function start(code) {
    /* istanbul ignore next - hooks. */
    if ((code !== 87 && code - 32 !== 87) || !previous$2(self.previous)) {
      return nok(code)
    }

    effects.enter('literalAutolink');
    effects.enter('literalAutolinkWww');
    effects.consume(code);
    return w2
  }

  function w2(code) {
    // `w`
    if (code === 87 || code - 32 === 87) {
      effects.consume(code);
      return w3
    }

    return nok(code)
  }

  function w3(code) {
    // `w`
    if (code === 87 || code - 32 === 87) {
      effects.consume(code);
      return dot
    }

    return nok(code)
  }

  function dot(code) {
    // `.`
    if (code === 46) {
      effects.consume(code);
      return effects.attempt(domain, effects.attempt(path, done), nok)
    }

    return nok(code)
  }

  function done(code) {
    effects.exit('literalAutolinkWww');
    effects.exit('literalAutolink');
    return ok(code)
  }
}

function tokenizeHttpAutolink(effects, ok, nok) {
  var self = this;

  return start

  function start(code) {
    /* istanbul ignore next - hooks. */
    if ((code !== 72 && code - 32 !== 72) || !previous$2(self.previous)) {
      return nok(code)
    }

    effects.enter('literalAutolink');
    effects.enter('literalAutolinkHttp');
    effects.consume(code);
    return t1
  }

  function t1(code) {
    // `t`
    if (code === 84 || code - 32 === 84) {
      effects.consume(code);
      return t2
    }

    return nok(code)
  }

  function t2(code) {
    // `t`
    if (code === 84 || code - 32 === 84) {
      effects.consume(code);
      return p
    }

    return nok(code)
  }

  function p(code) {
    // `p`
    if (code === 80 || code - 32 === 80) {
      effects.consume(code);
      return s
    }

    return nok(code)
  }

  function s(code) {
    // `s`
    if (code === 83 || code - 32 === 83) {
      effects.consume(code);
      return colon
    }

    return colon(code)
  }

  function colon(code) {
    // `:`
    if (code === 58) {
      effects.consume(code);
      return slash1
    }

    return nok(code)
  }

  function slash1(code) {
    // `/`
    if (code === 47) {
      effects.consume(code);
      return slash2
    }

    return nok(code)
  }

  function slash2(code) {
    // `/`
    if (code === 47) {
      effects.consume(code);
      return effects.attempt(domain, effects.attempt(path, done), nok)
    }

    return nok(code)
  }

  function done(code) {
    effects.exit('literalAutolinkHttp');
    effects.exit('literalAutolink');
    return ok(code)
  }
}

function tokenizeDomain(effects, ok, nok) {
  var hasUnderscoreInLastSegment;
  var hasUnderscoreInLastLastSegment;
  var hasDot;

  return start

  function start(code) {
    effects.enter('literalAutolinkDomain');
    return domain(code)
  }

  function domain(code) {
    if (
      // `-`
      code === 45 ||
      // `_`
      code === 95 ||
      asciiAlphanumeric(code)
    ) {
      if (code === 95) {
        hasUnderscoreInLastSegment = true;
      }

      effects.consume(code);
      return domain
    }

    // `.`
    if (code === 46) {
      return effects.check(punctuation, done, dotContinuation)(code)
    }

    return done(code)
  }

  function dotContinuation(code) {
    effects.consume(code);
    hasDot = true;
    hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment;
    hasUnderscoreInLastSegment = undefined;
    return domain
  }

  function done(code) {
    if (
      hasDot &&
      !hasUnderscoreInLastLastSegment &&
      !hasUnderscoreInLastSegment
    ) {
      effects.exit('literalAutolinkDomain');
      return ok(code)
    }

    return nok(code)
  }
}

function tokenizePath(effects, ok) {
  var balance = 0;

  return start

  function start(code) {
    if (pathEnd(code)) {
      return ok(code)
    }

    if (trailingPunctuation(code)) {
      return effects.check(punctuation, ok, atPathStart)(code)
    }

    return atPathStart(code)
  }

  function atPathStart(code) {
    effects.enter('literalAutolinkWwwPath');
    return inPath(code)
  }

  function inPath(code) {
    // `&`
    if (code === 38) {
      return effects.check(
        namedCharacterReference,
        atPathEnd,
        continuedPunctuation
      )(code)
    }

    // `(`
    if (code === 40) {
      balance++;
    }

    // `)`
    if (code === 41) {
      return effects.check(paren, parenAtPathEnd, continuedPunctuation)(code)
    }

    if (pathEnd(code)) {
      return atPathEnd(code)
    }

    if (trailingPunctuation(code)) {
      return effects.check(punctuation, atPathEnd, continuedPunctuation)(code)
    }

    effects.consume(code);
    return inPath
  }

  function continuedPunctuation(code) {
    effects.consume(code);
    return inPath
  }

  function parenAtPathEnd(code) {
    balance--;
    return balance < 0 ? atPathEnd(code) : continuedPunctuation(code)
  }

  function atPathEnd(code) {
    effects.exit('literalAutolinkWwwPath');
    return ok(code)
  }
}

function tokenizeNamedCharacterReference(effects, ok, nok) {
  return start

  function start(code) {
    // Assume an ampersand.
    effects.enter('literalAutolinkCharacterReferenceNamed');
    effects.consume(code);
    return inside
  }

  function inside(code) {
    if (asciiAlpha(code)) {
      effects.consume(code);
      return inside
    }

    // `;`
    if (code === 59) {
      effects.consume(code);
      return after
    }

    return nok(code)
  }

  function after(code) {
    // If the named character reference is followed by the end of the path, it’s
    // not continued punctuation.
    effects.exit('literalAutolinkCharacterReferenceNamed');
    return pathEnd(code) ? ok(code) : nok(code)
  }
}

function tokenizeParen(effects, ok, nok) {
  return start

  function start(code) {
    // Assume a right paren.
    effects.enter('literalAutolinkParen');
    effects.consume(code);
    return after
  }

  function after(code) {
    // If the punctuation marker is followed by the end of the path, it’s not
    // continued punctuation.
    effects.exit('literalAutolinkParen');
    return pathEnd(code) ||
      // `)`
      code === 41
      ? ok(code)
      : nok(code)
  }
}

function tokenizePunctuation(effects, ok, nok) {
  return start

  function start(code) {
    effects.enter('literalAutolinkPunctuation');
    // Always a valid trailing punctuation marker.
    effects.consume(code);
    return after
  }

  function after(code) {
    // If the punctuation marker is followed by the end of the path, it’s not
    // continued punctuation.
    effects.exit('literalAutolinkPunctuation');
    return pathEnd(code) ? ok(code) : nok(code)
  }
}

function trailingPunctuation(code) {
  return (
    // Exclamation mark.
    code === 33 ||
    // Asterisk.
    code === 42 ||
    // Comma.
    code === 44 ||
    // Dot.
    code === 46 ||
    // Colon.
    code === 58 ||
    // Question mark.
    code === 63 ||
    // Underscore.
    code === 95 ||
    // Tilde.
    code === 126
  )
}

function pathEnd(code) {
  return (
    // EOF.
    code === null ||
    // CR, LF, CRLF, HT, VS.
    code < 0 ||
    // Space.
    code === 32 ||
    // Less than.
    code === 60
  )
}

function gfmAtext(code) {
  return (
    // `+`
    code === 43 ||
    // `-`
    code === 45 ||
    // `.`
    code === 46 ||
    // `_`
    code === 95 ||
    asciiAlphanumeric(code)
  )
}

function previous$2(code) {
  return (
    // EOF.
    code === null ||
    // CR, LF, CRLF, HT, VS.
    code < 0 ||
    // Space.
    code === 32 ||
    // Left paren.
    code === 40 ||
    // Asterisk.
    code === 42 ||
    // Underscore.
    code === 95 ||
    // Tilde.
    code === 126
  )
}

var syntax$1 = {
	text: text_1$1
};

var micromarkExtensionGfmAutolinkLiteral = syntax$1;

var micromarkExtensionGfmStrikethrough = create;






function create(options) {
  var settings = options || {};
  var single = settings.singleTilde;
  var tokenizer = {
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };

  if (single === null || single === undefined) {
    single = true;
  }

  return {text: {126: tokenizer}, insideSpan: {null: tokenizer}}

  // Take events and resolve strikethrough.
  function resolveAllStrikethrough(events, context) {
    var index = -1;
    var strikethrough;
    var text;
    var open;
    var nextEvents;

    // Walk through all events.
    while (++index < events.length) {
      // Find a token that can close.
      if (
        events[index][0] === 'enter' &&
        events[index][1].type === 'strikethroughSequenceTemporary' &&
        events[index][1]._close
      ) {
        open = index;

        // Now walk back to find an opener.
        while (open--) {
          // Find a token that can open the closer.
          if (
            events[open][0] === 'exit' &&
            events[open][1].type === 'strikethroughSequenceTemporary' &&
            events[open][1]._open &&
            // If the sizes are the same:
            events[index][1].end.offset - events[index][1].start.offset ===
              events[open][1].end.offset - events[open][1].start.offset
          ) {
            events[index][1].type = 'strikethroughSequence';
            events[open][1].type = 'strikethroughSequence';

            strikethrough = {
              type: 'strikethrough',
              start: shallow_1(events[open][1].start),
              end: shallow_1(events[index][1].end)
            };

            text = {
              type: 'strikethroughText',
              start: shallow_1(events[open][1].end),
              end: shallow_1(events[index][1].start)
            };

            // Opening.
            nextEvents = [
              ['enter', strikethrough, context],
              ['enter', events[open][1], context],
              ['exit', events[open][1], context],
              ['enter', text, context]
            ];

            // Between.
            chunkedSplice_1(
              nextEvents,
              nextEvents.length,
              0,
              resolveAll_1(
                context.parser.constructs.insideSpan.null,
                events.slice(open + 1, index),
                context
              )
            );

            // Closing.
            chunkedSplice_1(nextEvents, nextEvents.length, 0, [
              ['exit', text, context],
              ['enter', events[index][1], context],
              ['exit', events[index][1], context],
              ['exit', strikethrough, context]
            ]);

            chunkedSplice_1(events, open - 1, index - open + 3, nextEvents);

            index = open + nextEvents.length - 2;
            break
          }
        }
      }
    }

    return removeRemainingSequences(events)
  }

  function removeRemainingSequences(events) {
    var index = -1;
    var length = events.length;

    while (++index < length) {
      if (events[index][1].type === 'strikethroughSequenceTemporary') {
        events[index][1].type = 'data';
      }
    }

    return events
  }

  function tokenizeStrikethrough(effects, ok, nok) {
    var previous = this.previous;
    var events = this.events;
    var size = 0;

    return start

    function start(code) {
      if (
        code !== 126 ||
        (previous === 126 &&
          events[events.length - 1][1].type !== 'characterEscape')
      ) {
        return nok(code)
      }

      effects.enter('strikethroughSequenceTemporary');
      return more(code)
    }

    function more(code) {
      var before = classifyCharacter_1(previous);
      var token;
      var after;

      if (code === 126) {
        // If this is the third marker, exit.
        if (size > 1) return nok(code)
        effects.consume(code);
        size++;
        return more
      }

      if (size < 2 && !single) return nok(code)
      token = effects.exit('strikethroughSequenceTemporary');
      after = classifyCharacter_1(code);
      token._open = !after || (after === 2 && before);
      token._close = !before || (before === 2 && after);
      return ok(code)
    }
  }
}

var flow$3 = {
  null: {tokenize: tokenizeTable, resolve: resolveTable, interruptible: true}
};



var setextUnderlineMini = {tokenize: tokenizeSetextUnderlineMini, partial: true};
var nextPrefixedOrBlank = {tokenize: tokenizeNextPrefixedOrBlank, partial: true};

function resolveTable(events, context) {
  var length = events.length;
  var index = -1;
  var token;
  var inHead;
  var inDelimiterRow;
  var inRow;
  var cell;
  var content;
  var text;
  var contentStart;
  var contentEnd;
  var cellStart;

  while (++index < length) {
    token = events[index][1];

    if (inRow) {
      if (token.type === 'temporaryTableCellContent') {
        contentStart = contentStart || index;
        contentEnd = index;
      }

      if (
        // Combine separate content parts into one.
        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&
        contentEnd
      ) {
        content = {
          type: 'tableContent',
          start: events[contentStart][1].start,
          end: events[contentEnd][1].end
        };
        text = {
          type: 'chunkText',
          start: content.start,
          end: content.end,
          contentType: 'text'
        };

        events.splice(
          contentStart,
          contentEnd - contentStart + 1,
          ['enter', content, context],
          ['enter', text, context],
          ['exit', text, context],
          ['exit', content, context]
        );
        index -= contentEnd - contentStart - 3;
        length = events.length;
        contentStart = undefined;
        contentEnd = undefined;
      }
    }

    if (
      events[index][0] === 'exit' &&
      (token.type === 'tableCellDivider' || token.type === 'tableRow') &&
      cellStart &&
      cellStart + 1 < index
    ) {
      cell = {
        type: inDelimiterRow
          ? 'tableDelimiter'
          : inHead
          ? 'tableHeader'
          : 'tableData',
        start: events[cellStart][1].start,
        end: events[index][1].end
      };
      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [
        'exit',
        cell,
        context
      ]);
      events.splice(cellStart, 0, ['enter', cell, context]);
      index += 2;
      length = events.length;
      cellStart = index + 1;
    }

    if (token.type === 'tableRow') {
      inRow = events[index][0] === 'enter';

      if (inRow) {
        cellStart = index + 1;
      }
    }

    if (token.type === 'tableDelimiterRow') {
      inDelimiterRow = events[index][0] === 'enter';

      if (inDelimiterRow) {
        cellStart = index + 1;
      }
    }

    if (token.type === 'tableHead') {
      inHead = events[index][0] === 'enter';
    }
  }

  return events
}

function tokenizeTable(effects, ok, nok) {
  var align = [];
  var tableHeaderCount = 0;
  var seenDelimiter;
  var hasDash;

  return start

  function start(code) {
    /* istanbul ignore if - used to be passed in beta micromark versions. */
    if (code === null || code === -5 || code === -4 || code === -3) {
      return nok(code)
    }

    effects.enter('table')._align = align;
    effects.enter('tableHead');
    effects.enter('tableRow');

    // If we start with a pipe, we open a cell marker.
    if (code === 124) {
      return cellDividerHead(code)
    }

    tableHeaderCount++;
    effects.enter('temporaryTableCellContent');
    // Can’t be space or eols at the start of a construct, so we’re in a cell.
    return inCellContentHead(code)
  }

  function cellDividerHead(code) {
    // Always a pipe.
    effects.enter('tableCellDivider');
    effects.consume(code);
    effects.exit('tableCellDivider');
    seenDelimiter = true;
    return cellBreakHead
  }

  function cellBreakHead(code) {
    // EOF, CR, LF, CRLF.
    if (code === null || code === -5 || code === -4 || code === -3) {
      return atRowEndHead(code)
    }

    // HT, VS, SP.
    if (code === -2 || code === -1 || code === 32) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceHead
    }

    if (seenDelimiter) {
      seenDelimiter = undefined;
      tableHeaderCount++;
    }

    // `|`
    if (code === 124) {
      return cellDividerHead(code)
    }

    // Anything else is cell content.
    effects.enter('temporaryTableCellContent');
    return inCellContentHead(code)
  }

  function inWhitespaceHead(code) {
    // HT, VS, SP.
    if (code === -2 || code === -1 || code === 32) {
      effects.consume(code);
      return inWhitespaceHead
    }

    effects.exit('whitespace');
    return cellBreakHead(code)
  }

  function inCellContentHead(code) {
    // EOF, whitespace, pipe
    if (code === null || code < 0 || code === 32 || code === 124) {
      effects.exit('temporaryTableCellContent');
      return cellBreakHead(code)
    }

    effects.consume(code);
    // `\`
    return code === 92 ? inCellContentEscapeHead : inCellContentHead
  }

  function inCellContentEscapeHead(code) {
    // `\` or `|`
    if (code === 92 || code === 124) {
      effects.consume(code);
      return inCellContentHead
    }

    // Anything else.
    return inCellContentHead(code)
  }

  function atRowEndHead(code) {
    if (code === null) {
      return nok(code)
    }

    effects.exit('tableRow');
    effects.exit('tableHead');

    // Always a line ending.
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');

    // If a setext heading, exit.
    return effects.check(
      setextUnderlineMini,
      nok,
      // Support an indent before the delimiter row.
      factorySpace(effects, rowStartDelimiter, 'linePrefix', 4)
    )
  }

  function rowStartDelimiter(code) {
    // If there’s another space, or we’re at the EOL/EOF, exit.
    if (code === null || code < 0 || code === 32) {
      return nok(code)
    }

    effects.enter('tableDelimiterRow');
    return atDelimiterRowBreak(code)
  }

  function atDelimiterRowBreak(code) {
    // EOF, CR, LF, CRLF.
    if (code === null || code === -5 || code === -4 || code === -3) {
      return rowEndDelimiter(code)
    }

    // HT, VS, SP.
    if (code === -2 || code === -1 || code === 32) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceDelimiter
    }

    // `-`
    if (code === 45) {
      effects.enter('tableDelimiterFiller');
      effects.consume(code);
      hasDash = true;
      align.push(null);
      return inFillerDelimiter
    }

    // `:`
    if (code === 58) {
      effects.enter('tableDelimiterAlignment');
      effects.consume(code);
      effects.exit('tableDelimiterAlignment');
      align.push('left');
      return afterLeftAlignment
    }

    // If we start with a pipe, we open a cell marker.
    if (code === 124) {
      effects.enter('tableCellDivider');
      effects.consume(code);
      effects.exit('tableCellDivider');
      return atDelimiterRowBreak
    }

    return nok(code)
  }

  function inWhitespaceDelimiter(code) {
    // HT, VS, SP.
    if (code === -2 || code === -1 || code === 32) {
      effects.consume(code);
      return inWhitespaceDelimiter
    }

    effects.exit('whitespace');
    return atDelimiterRowBreak(code)
  }

  function inFillerDelimiter(code) {
    // `-`
    if (code === 45) {
      effects.consume(code);
      return inFillerDelimiter
    }

    effects.exit('tableDelimiterFiller');

    // `:`
    if (code === 58) {
      effects.enter('tableDelimiterAlignment');
      effects.consume(code);
      effects.exit('tableDelimiterAlignment');

      align[align.length - 1] =
        align[align.length - 1] === 'left' ? 'center' : 'right';

      return afterRightAlignment
    }

    return atDelimiterRowBreak(code)
  }

  function afterLeftAlignment(code) {
    // `-`
    if (code === 45) {
      effects.enter('tableDelimiterFiller');
      effects.consume(code);
      hasDash = true;
      return inFillerDelimiter
    }

    // Anything else is not ok.
    return nok(code)
  }

  function afterRightAlignment(code) {
    // EOF, CR, LF, CRLF.
    if (code === null || code === -5 || code === -4 || code === -3) {
      return rowEndDelimiter(code)
    }

    // HT, VS, SP.
    if (code === -2 || code === -1 || code === 32) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceDelimiter
    }

    // `|`
    if (code === 124) {
      effects.enter('tableCellDivider');
      effects.consume(code);
      effects.exit('tableCellDivider');
      return atDelimiterRowBreak
    }

    return nok(code)
  }

  function rowEndDelimiter(code) {
    effects.exit('tableDelimiterRow');

    // Exit if there was no dash at all, or if the header cell count is not the
    // delimiter cell count.
    if (!hasDash || tableHeaderCount !== align.length) {
      return nok(code)
    }

    if (code === null) {
      return tableClose(code)
    }

    return effects.check(nextPrefixedOrBlank, tableClose, tableContinue)(code)
  }

  function tableClose(code) {
    effects.exit('table');
    return ok(code)
  }

  function tableContinue(code) {
    // Always a line ending.
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    // We checked that it’s not a prefixed or blank line, so we’re certain a
    // body is coming, though it may be indented.
    return factorySpace(effects, bodyStart, 'linePrefix', 4)
  }

  function bodyStart(code) {
    effects.enter('tableBody');
    return rowStartBody(code)
  }

  function rowStartBody(code) {
    effects.enter('tableRow');

    // If we start with a pipe, we open a cell marker.
    if (code === 124) {
      return cellDividerBody(code)
    }

    effects.enter('temporaryTableCellContent');
    // Can’t be space or eols at the start of a construct, so we’re in a cell.
    return inCellContentBody(code)
  }

  function cellDividerBody(code) {
    // Always a pipe.
    effects.enter('tableCellDivider');
    effects.consume(code);
    effects.exit('tableCellDivider');
    return cellBreakBody
  }

  function cellBreakBody(code) {
    // EOF, CR, LF, CRLF.
    if (code === null || code === -5 || code === -4 || code === -3) {
      return atRowEndBody(code)
    }

    // HT, VS, SP.
    if (code === -2 || code === -1 || code === 32) {
      effects.enter('whitespace');
      effects.consume(code);
      return inWhitespaceBody
    }

    // `|`
    if (code === 124) {
      return cellDividerBody(code)
    }

    // Anything else is cell content.
    effects.enter('temporaryTableCellContent');
    return inCellContentBody(code)
  }

  function inWhitespaceBody(code) {
    // HT, VS, SP.
    if (code === -2 || code === -1 || code === 32) {
      effects.consume(code);
      return inWhitespaceBody
    }

    effects.exit('whitespace');
    return cellBreakBody(code)
  }

  function inCellContentBody(code) {
    // EOF, whitespace, pipe
    if (code === null || code < 0 || code === 32 || code === 124) {
      effects.exit('temporaryTableCellContent');
      return cellBreakBody(code)
    }

    effects.consume(code);
    // `\`
    return code === 92 ? inCellContentEscapeBody : inCellContentBody
  }

  function inCellContentEscapeBody(code) {
    // `\` or `|`
    if (code === 92 || code === 124) {
      effects.consume(code);
      return inCellContentBody
    }

    // Anything else.
    return inCellContentBody(code)
  }

  function atRowEndBody(code) {
    effects.exit('tableRow');

    if (code === null) {
      return tableBodyClose(code)
    }

    return effects.check(
      nextPrefixedOrBlank,
      tableBodyClose,
      tableBodyContinue
    )(code)
  }

  function tableBodyClose(code) {
    effects.exit('tableBody');
    return tableClose(code)
  }

  function tableBodyContinue(code) {
    // Always a line ending.
    effects.enter('lineEnding');
    effects.consume(code);
    effects.exit('lineEnding');
    // Support an optional prefix, then start a body row.
    return factorySpace(effects, rowStartBody, 'linePrefix', 4)
  }
}

// Based on micromark, but that won’t work as we’re in a table, and that expects
// content.
// <https://github.com/micromark/micromark/blob/main/lib/tokenize/setext-underline.js>
function tokenizeSetextUnderlineMini(effects, ok, nok) {
  return start

  function start(code) {
    // `-`
    if (code !== 45) {
      return nok(code)
    }

    effects.enter('setextUnderline');
    return sequence(code)
  }

  function sequence(code) {
    if (code === 45) {
      effects.consume(code);
      return sequence
    }

    return whitespace(code)
  }

  function whitespace(code) {
    if (code === -2 || code === -1 || code === 32) {
      effects.consume(code);
      return whitespace
    }

    if (code === null || code === -5 || code === -4 || code === -3) {
      return ok(code)
    }

    return nok(code)
  }
}

function tokenizeNextPrefixedOrBlank(effects, ok, nok) {
  var size = 0;

  return start

  function start(code) {
    // This is a check, so we don’t care about tokens, but we open a bogus one
    // so we’re valid.
    effects.enter('check');
    // EOL.
    effects.consume(code);
    return whitespace
  }

  function whitespace(code) {
    // VS or SP.
    if (code === -1 || code === 32) {
      effects.consume(code);
      size++;
      return size === 4 ? ok : whitespace
    }

    // EOF or whitespace
    if (code === null || code < 0) {
      return ok(code)
    }

    // Anything else.
    return nok(code)
  }
}

var syntax$2 = {
	flow: flow$3
};

var micromarkExtensionGfmTable = syntax$2;

var tasklistCheck = {tokenize: tokenizeTasklistCheck};

var text$4 = {91: tasklistCheck};

function tokenizeTasklistCheck(effects, ok, nok) {
  var self = this;

  return open

  function open(code) {
    if (
      // Exit if not `[`.
      code !== 91 ||
      // Exit if there’s stuff before.
      self.previous !== null ||
      // Exit if not in the first content that is the first child of a list
      // item.
      !self._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code)
    }

    effects.enter('taskListCheck');
    effects.enter('taskListCheckMarker');
    effects.consume(code);
    effects.exit('taskListCheckMarker');
    return inside
  }

  function inside(code) {
    // Tab or space.
    if (code === -2 || code === 32) {
      effects.enter('taskListCheckValueUnchecked');
      effects.consume(code);
      effects.exit('taskListCheckValueUnchecked');
      return close
    }

    // Upper- and lower `x`.
    if (code === 88 || code === 120) {
      effects.enter('taskListCheckValueChecked');
      effects.consume(code);
      effects.exit('taskListCheckValueChecked');
      return close
    }

    return nok(code)
  }

  function close(code) {
    // `]`
    if (code === 93) {
      effects.enter('taskListCheckMarker');
      effects.consume(code);
      effects.exit('taskListCheckMarker');
      effects.exit('taskListCheck');
      return effects.check({tokenize: spaceThenNonSpace}, ok, nok)
    }

    return nok(code)
  }
}

function spaceThenNonSpace(effects, ok, nok) {
  var self = this;

  return factorySpace(effects, after, 'whitespace')

  function after(code) {
    return prefixSize_1(self.events, 'whitespace') &&
      code !== null &&
      !markdownLineEndingOrSpace_1(code)
      ? ok(code)
      : nok(code)
  }
}

var syntax$3 = {
	text: text$4
};

var micromarkExtensionGfmTaskListItem = syntax$3;

var syntax$4 = create$1;

function create$1(options) {
  return combineExtensions_1([micromarkExtensionGfmAutolinkLiteral, micromarkExtensionGfmStrikethrough(options), micromarkExtensionGfmTable, micromarkExtensionGfmTaskListItem])
}

var micromarkExtensionGfm = syntax$4;

var enter$1 = {
  literalAutolink: enterLiteralAutolink,
  literalAutolinkEmail: enterLiteralAutolinkValue,
  literalAutolinkHttp: enterLiteralAutolinkValue,
  literalAutolinkWww: enterLiteralAutolinkValue
};
var exit$1 = {
  literalAutolink: exitLiteralAutolink,
  literalAutolinkEmail: exitLiteralAutolinkEmail,
  literalAutolinkHttp: exitLiteralAutolinkHttp,
  literalAutolinkWww: exitLiteralAutolinkWww
};

function enterLiteralAutolink(token) {
  this.enter({type: 'link', title: null, url: '', children: []}, token);
}

function enterLiteralAutolinkValue(token) {
  this.config.enter.autolinkProtocol.call(this, token);
}

function exitLiteralAutolinkHttp(token) {
  this.config.exit.autolinkProtocol.call(this, token);
}

function exitLiteralAutolinkWww(token) {
  this.config.exit.data.call(this, token);
  this.stack[this.stack.length - 1].url = 'http://' + this.sliceSerialize(token);
}

function exitLiteralAutolinkEmail(token) {
  this.config.exit.autolinkEmail.call(this, token);
}

function exitLiteralAutolink(token) {
  this.exit(token);
}

var fromMarkdown$2 = {
	enter: enter$1,
	exit: exit$1
};

var canContainEols = ['delete'];
var enter$2 = {strikethrough: enterStrikethrough};
var exit$2 = {strikethrough: exitStrikethrough};

function enterStrikethrough(token) {
  this.enter({type: 'delete', children: []}, token);
}

function exitStrikethrough(token) {
  this.exit(token);
}

var fromMarkdown$3 = {
	canContainEols: canContainEols,
	enter: enter$2,
	exit: exit$2
};

var enter$3 = {
  table: enterTable,
  tableData: enterCell,
  tableHeader: enterCell,
  tableRow: enterRow
};
var exit_1 = {
  codeText: exitCodeText,
  table: exitTable,
  tableData: exit$3,
  tableHeader: exit$3,
  tableRow: exit$3
};

function enterTable(token) {
  this.enter({type: 'table', align: token._align, children: []}, token);
  this.setData('inTable', true);
}

function exitTable(token) {
  this.exit(token);
  this.setData('inTable');
}

function enterRow(token) {
  this.enter({type: 'tableRow', children: []}, token);
}

function exit$3(token) {
  this.exit(token);
}

function enterCell(token) {
  this.enter({type: 'tableCell', children: []}, token);
}

// Overwrite the default code text data handler to unescape escaped pipes when
// they are in tables.
function exitCodeText(token) {
  var value = this.resume();

  if (this.getData('inTable')) {
    value = value.replace(/\\([\\|])/g, replace);
  }

  this.stack[this.stack.length - 1].value = value;
  this.exit(token);
}

function replace($0, $1) {
  // Pipes work, backslashes don’t (but can’t escape pipes).
  return $1 === '|' ? $1 : $0
}

var fromMarkdown$4 = {
	enter: enter$3,
	exit: exit_1
};

var exit$4 = {
  taskListCheckValueChecked: exitCheck,
  taskListCheckValueUnchecked: exitCheck,
  paragraph: exitParagraphWithTaskListItem
};

function exitCheck(token) {
  // We’re always in a paragraph, in a list item.
  this.stack[this.stack.length - 2].checked =
    token.type === 'taskListCheckValueChecked';
}

function exitParagraphWithTaskListItem(token) {
  var parent = this.stack[this.stack.length - 2];
  var node = this.stack[this.stack.length - 1];
  var siblings = parent.children;
  var head = node.children[0];
  var index = -1;
  var firstParaghraph;

  if (
    parent &&
    parent.type === 'listItem' &&
    typeof parent.checked === 'boolean' &&
    head &&
    head.type === 'text'
  ) {
    while (++index < siblings.length) {
      if (siblings[index].type === 'paragraph') {
        firstParaghraph = siblings[index];
        break
      }
    }

    if (firstParaghraph === node) {
      // Must start with a space or a tab.
      head.value = head.value.slice(1);

      if (head.value.length === 0) {
        node.children.shift();
      } else {
        head.position.start.column++;
        head.position.start.offset++;
        node.position.start = Object.assign({}, head.position.start);
      }
    }
  }

  this.exit(token);
}

var fromMarkdown$5 = {
	exit: exit$4
};

var own$4 = {}.hasOwnProperty;

var fromMarkdown$6 = configure$1([
  fromMarkdown$2,
  fromMarkdown$3,
  fromMarkdown$4,
  fromMarkdown$5
]);

function configure$1(extensions) {
  var config = {canContainEols: []};
  var length = extensions.length;
  var index = -1;

  while (++index < length) {
    extension$2(config, extensions[index]);
  }

  return config
}

function extension$2(config, extension) {
  var key;
  var left;
  var right;

  for (key in extension) {
    left = own$4.call(config, key) ? config[key] : (config[key] = {});
    right = extension[key];

    if (key === 'canContainEols') {
      config[key] = [].concat(left, right);
    } else {
      Object.assign(left, right);
    }
  }
}

var inConstruct = 'phrasing';
var notInConstruct = ['autolink', 'link', 'image'];

var unsafe$1 = [
  {
    character: '@',
    before: '[+\\-.\\w]',
    after: '[\\-.\\w]',
    inConstruct: inConstruct,
    notInConstruct: notInConstruct
  },
  {
    character: '.',
    before: '[Ww]',
    after: '[\\-.\\w]',
    inConstruct: inConstruct,
    notInConstruct: notInConstruct
  },
  {
    character: ':',
    before: '[ps]',
    after: '\\/',
    inConstruct: inConstruct,
    notInConstruct: notInConstruct
  }
];

var toMarkdown$1 = {
	unsafe: unsafe$1
};

var containerPhrasing = phrasing;

function phrasing(parent, context, safeOptions) {
  var children = parent.children || [];
  var results = [];
  var index = -1;
  var before = safeOptions.before;
  var after;
  var handle;
  var child;

  while (++index < children.length) {
    child = children[index];

    if (index + 1 < children.length) {
      handle = context.handle.handlers[children[index + 1].type];
      if (handle && handle.peek) handle = handle.peek;
      after = handle
        ? handle(children[index + 1], parent, context, {
            before: '',
            after: ''
          }).charAt(0)
        : '';
    } else {
      after = safeOptions.after;
    }

    results.push(
      context.handle(child, parent, context, {
        before: before,
        after: after
      })
    );
    before = results[results.length - 1].slice(-1);
  }

  return results.join('')
}

var unsafe$2 = [{character: '~', inConstruct: 'phrasing'}];
var handlers$1 = {delete: handleDelete};

handleDelete.peek = peekDelete;

function handleDelete(node, _, context) {
  var exit = context.enter('emphasis');
  var value = containerPhrasing(node, context, {before: '~', after: '~'});
  exit();
  return '~~' + value + '~~'
}

function peekDelete() {
  return '~'
}

var toMarkdown$2 = {
	unsafe: unsafe$2,
	handlers: handlers$1
};

var inlineCode_1 = inlineCode;
inlineCode.peek = inlineCodePeek;

function inlineCode(node) {
  var value = node.value || '';
  var sequence = '`';
  var pad = '';

  // If there is a single grave accent on its own in the code, use a fence of
  // two.
  // If there are two in a row, use one.
  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {
    sequence += '`';
  }

  // If this is not just spaces or eols (tabs don’t count), and either the
  // first or last character are a space, eol, or tick, then pad with spaces.
  if (
    /[^ \r\n]/.test(value) &&
    (/[ \r\n`]/.test(value.charAt(0)) ||
      /[ \r\n`]/.test(value.charAt(value.length - 1)))
  ) {
    pad = ' ';
  }

  return sequence + pad + value + pad + sequence
}

function inlineCodePeek() {
  return '`'
}

var markdownTable_1 = markdownTable;

var trailingWhitespace = / +$/;

// Characters.
var space = ' ';
var lineFeed = '\n';
var dash$1 = '-';
var colon$1 = ':';
var verticalBar = '|';

var x = 0;
var C = 67;
var L$1 = 76;
var R = 82;
var c = 99;
var l$1 = 108;
var r = 114;

// Create a table from a matrix of strings.
function markdownTable(table, options) {
  var settings = options || {};
  var padding = settings.padding !== false;
  var start = settings.delimiterStart !== false;
  var end = settings.delimiterEnd !== false;
  var align = (settings.align || []).concat();
  var alignDelimiters = settings.alignDelimiters !== false;
  var alignments = [];
  var stringLength = settings.stringLength || defaultStringLength;
  var rowIndex = -1;
  var rowLength = table.length;
  var cellMatrix = [];
  var sizeMatrix = [];
  var row = [];
  var sizes = [];
  var longestCellByColumn = [];
  var mostCellsPerRow = 0;
  var cells;
  var columnIndex;
  var columnLength;
  var largest;
  var size;
  var cell;
  var lines;
  var line;
  var before;
  var after;
  var code;

  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d
  // do superfluous work when aligning, so optimize for aligning.
  while (++rowIndex < rowLength) {
    cells = table[rowIndex];
    columnIndex = -1;
    columnLength = cells.length;
    row = [];
    sizes = [];

    if (columnLength > mostCellsPerRow) {
      mostCellsPerRow = columnLength;
    }

    while (++columnIndex < columnLength) {
      cell = serialize(cells[columnIndex]);

      if (alignDelimiters === true) {
        size = stringLength(cell);
        sizes[columnIndex] = size;

        largest = longestCellByColumn[columnIndex];

        if (largest === undefined || size > largest) {
          longestCellByColumn[columnIndex] = size;
        }
      }

      row.push(cell);
    }

    cellMatrix[rowIndex] = row;
    sizeMatrix[rowIndex] = sizes;
  }

  // Figure out which alignments to use.
  columnIndex = -1;
  columnLength = mostCellsPerRow;

  if (typeof align === 'object' && 'length' in align) {
    while (++columnIndex < columnLength) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    code = toAlignment(align);

    while (++columnIndex < columnLength) {
      alignments[columnIndex] = code;
    }
  }

  // Inject the alignment row.
  columnIndex = -1;
  columnLength = mostCellsPerRow;
  row = [];
  sizes = [];

  while (++columnIndex < columnLength) {
    code = alignments[columnIndex];
    before = '';
    after = '';

    if (code === l$1) {
      before = colon$1;
    } else if (code === r) {
      after = colon$1;
    } else if (code === c) {
      before = colon$1;
      after = colon$1;
    }

    // There *must* be at least one hyphen-minus in each alignment cell.
    size = alignDelimiters
      ? Math.max(
          1,
          longestCellByColumn[columnIndex] - before.length - after.length
        )
      : 1;

    cell = before + repeatString(dash$1, size) + after;

    if (alignDelimiters === true) {
      size = before.length + size + after.length;

      if (size > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size;
      }

      sizes[columnIndex] = size;
    }

    row[columnIndex] = cell;
  }

  // Inject the alignment row.
  cellMatrix.splice(1, 0, row);
  sizeMatrix.splice(1, 0, sizes);

  rowIndex = -1;
  rowLength = cellMatrix.length;
  lines = [];

  while (++rowIndex < rowLength) {
    row = cellMatrix[rowIndex];
    sizes = sizeMatrix[rowIndex];
    columnIndex = -1;
    columnLength = mostCellsPerRow;
    line = [];

    while (++columnIndex < columnLength) {
      cell = row[columnIndex] || '';
      before = '';
      after = '';

      if (alignDelimiters === true) {
        size = longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
        code = alignments[columnIndex];

        if (code === r) {
          before = repeatString(space, size);
        } else if (code === c) {
          if (size % 2 === 0) {
            before = repeatString(space, size / 2);
            after = before;
          } else {
            before = repeatString(space, size / 2 + 0.5);
            after = repeatString(space, size / 2 - 0.5);
          }
        } else {
          after = repeatString(space, size);
        }
      }

      if (start === true && columnIndex === 0) {
        line.push(verticalBar);
      }

      if (
        padding === true &&
        // Don’t add the opening space if we’re not aligning and the cell is
        // empty: there will be a closing space.
        !(alignDelimiters === false && cell === '') &&
        (start === true || columnIndex !== 0)
      ) {
        line.push(space);
      }

      if (alignDelimiters === true) {
        line.push(before);
      }

      line.push(cell);

      if (alignDelimiters === true) {
        line.push(after);
      }

      if (padding === true) {
        line.push(space);
      }

      if (end === true || columnIndex !== columnLength - 1) {
        line.push(verticalBar);
      }
    }

    line = line.join('');

    if (end === false) {
      line = line.replace(trailingWhitespace, '');
    }

    lines.push(line);
  }

  return lines.join(lineFeed)
}

function serialize(value) {
  return value === null || value === undefined ? '' : String(value)
}

function defaultStringLength(value) {
  return value.length
}

function toAlignment(value) {
  var code = typeof value === 'string' ? value.charCodeAt(0) : x;

  return code === L$1 || code === l$1
    ? l$1
    : code === R || code === r
    ? r
    : code === C || code === c
    ? c
    : x
}

var toMarkdown_1 = toMarkdown$3;

function toMarkdown$3(options) {
  var settings = options || {};
  var padding = settings.tableCellPadding;
  var alignDelimiters = settings.tablePipeAlign;
  var stringLength = settings.stringLength;
  var around = padding ? ' ' : '|';

  return {
    unsafe: [
      {character: '\r', inConstruct: 'tableCell'},
      {character: '\n', inConstruct: 'tableCell'},
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      {atBreak: true, character: '|', after: '[\t :-]'},
      // A pipe in a cell must be encoded.
      {character: '|', inConstruct: 'tableCell'},
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      {atBreak: true, character: ':', after: '-'},
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      {atBreak: true, character: '-', after: '[:|-]'}
    ],
    handlers: {
      table: handleTable,
      tableRow: handleTableRow,
      tableCell: handleTableCell,
      inlineCode: inlineCodeWithTable
    }
  }

  function handleTable(node, _, context) {
    return serializeData(handleTableAsData(node, context), node.align)
  }

  // This function isn’t really used normally, because we handle rows at the
  // table level.
  // But, if someone passes in a table row, this ensures we make somewhat sense.
  function handleTableRow(node, _, context) {
    var row = handleTableRowAsData(node, context);
    // `markdown-table` will always add an align row
    var value = serializeData([row]);
    return value.slice(0, value.indexOf('\n'))
  }

  function handleTableCell(node, _, context) {
    var exit = context.enter('tableCell');
    var value = containerPhrasing(node, context, {before: around, after: around});
    exit();
    return value
  }

  function serializeData(matrix, align) {
    return markdownTable_1(matrix, {
      align: align,
      alignDelimiters: alignDelimiters,
      padding: padding,
      stringLength: stringLength
    })
  }

  function handleTableAsData(node, context) {
    var children = node.children;
    var index = -1;
    var length = children.length;
    var result = [];
    var subexit = context.enter('table');

    while (++index < length) {
      result[index] = handleTableRowAsData(children[index], context);
    }

    subexit();

    return result
  }

  function handleTableRowAsData(node, context) {
    var children = node.children;
    var index = -1;
    var length = children.length;
    var result = [];
    var subexit = context.enter('tableRow');

    while (++index < length) {
      result[index] = handleTableCell(children[index], node, context);
    }

    subexit();

    return result
  }

  function inlineCodeWithTable(node, parent, context) {
    var value = inlineCode_1(node);

    if (context.stack.indexOf('tableCell') !== -1) {
      value = value.replace(/\|/, '\\$&');
    }

    return value
  }
}

var checkBullet_1 = checkBullet;

function checkBullet(context) {
  var marker = context.options.bullet || '*';

  if (marker !== '*' && marker !== '+' && marker !== '-') {
    throw new Error(
      'Cannot serialize items with `' +
        marker +
        '` for `options.bullet`, expected `*`, `+`, or `-`'
    )
  }

  return marker
}

var checkListItemIndent_1 = checkListItemIndent;

function checkListItemIndent(context) {
  var style = context.options.listItemIndent || 'tab';

  if (style === 1 || style === '1') {
    return 'one'
  }

  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
    throw new Error(
      'Cannot serialize items with `' +
        style +
        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'
    )
  }

  return style
}

var containerFlow = flow$4;



function flow$4(parent, context) {
  var children = parent.children || [];
  var results = [];
  var index = -1;
  var child;

  while (++index < children.length) {
    child = children[index];

    results.push(
      context.handle(child, parent, context, {before: '\n', after: '\n'})
    );

    if (index + 1 < children.length) {
      results.push(between(child, children[index + 1]));
    }
  }

  return results.join('')

  function between(left, right) {
    var index = -1;
    var result;

    while (++index < context.join.length) {
      result = context.join[index](left, right, parent, context);

      if (result === true || result === 1) {
        break
      }

      if (typeof result === 'number') {
        return repeatString('\n', 1 + Number(result))
      }

      if (result === false) {
        return '\n\n<!---->\n\n'
      }
    }

    return '\n\n'
  }
}

var indentLines_1 = indentLines;

var eol = /\r?\n|\r/g;

function indentLines(value, map) {
  var result = [];
  var start = 0;
  var line = 0;
  var match;

  while ((match = eol.exec(value))) {
    one(value.slice(start, match.index));
    result.push(match[0]);
    start = match.index + match[0].length;
    line++;
  }

  one(value.slice(start));

  return result.join('')

  function one(value) {
    result.push(map(value, line, !value));
  }
}

var listItem_1 = listItem;







function listItem(node, parent, context) {
  var bullet = checkBullet_1(context);
  var listItemIndent = checkListItemIndent_1(context);
  var size;
  var value;
  var exit;

  if (parent && parent.ordered) {
    bullet =
      (parent.start > -1 ? parent.start : 1) +
      (context.options.incrementListMarker === false
        ? 0
        : parent.children.indexOf(node)) +
      '.';
  }

  size = bullet.length + 1;

  if (
    listItemIndent === 'tab' ||
    (listItemIndent === 'mixed' && ((parent && parent.spread) || node.spread))
  ) {
    size = Math.ceil(size / 4) * 4;
  }

  exit = context.enter('listItem');
  value = indentLines_1(containerFlow(node, context), map);
  exit();

  return value

  function map(line, index, blank) {
    if (index) {
      return (blank ? '' : repeatString(' ', size)) + line
    }

    return (blank ? bullet : bullet + repeatString(' ', size - bullet.length)) + line
  }
}

var unsafe$3 = [{atBreak: true, character: '-', after: '[:|-]'}];

var handlers$2 = {
  listItem: listItemWithTaskListItem
};

function listItemWithTaskListItem(node, parent, context) {
  var value = listItem_1(node, parent, context);
  var head = node.children[0];

  if (typeof node.checked === 'boolean' && head && head.type === 'paragraph') {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }

  return value

  function check($0) {
    return $0 + '[' + (node.checked ? 'x' : ' ') + '] '
  }
}

var toMarkdown$4 = {
	unsafe: unsafe$3,
	handlers: handlers$2
};

var toMarkdown_1$1 = toMarkdown$5;

function toMarkdown$5(options) {
  var extensions = [
    toMarkdown$1,
    toMarkdown$2,
    toMarkdown_1(options),
    toMarkdown$4
  ];
  var length = extensions.length;
  var index = -1;
  var extension;
  var unsafe = [];
  var handlers = {};

  while (++index < length) {
    extension = extensions[index];
    // istanbul ignore next - unsafe always exists, for now.
    unsafe = unsafe.concat(extension.unsafe || []);
    handlers = Object.assign(handlers, extension.handlers || {});
  }

  return {unsafe: unsafe, handlers: handlers}
}

var warningIssued$1;

var remarkGfm = gfm;

function gfm(options) {
  var data = this.data();

  /* istanbul ignore next - old remark. */
  if (
    !warningIssued$1 &&
    ((this.Parser &&
      this.Parser.prototype &&
      this.Parser.prototype.blockTokenizers) ||
      (this.Compiler &&
        this.Compiler.prototype &&
        this.Compiler.prototype.visitors))
  ) {
    warningIssued$1 = true;
    console.warn(
      '[remark-gfm] Warning: please upgrade to remark 13 to use this plugin'
    );
  }

  add('micromarkExtensions', micromarkExtensionGfm(options));
  add('fromMarkdownExtensions', fromMarkdown$6);
  add('toMarkdownExtensions', toMarkdown_1$1(options));

  function add(field, value) {
    /* istanbul ignore if - other extensions. */
    if (data[field]) data[field].push(value);
    else data[field] = [value];
  }
}

var factoryAttributes = createAttributes;

// To do: use `dist/`








/* eslint-disable-next-line max-params */
function createAttributes(
  effects,
  ok,
  nok,
  attributesType,
  attributesMarkerType,
  attributeType,
  attributeIdType,
  attributeClassType,
  attributeNameType,
  attributeInitializerType,
  attributeValueLiteralType,
  attributeValueType,
  attributeValueMarker,
  attributeValueData,
  disallowEol
) {
  var type;
  var marker;

  return start

  function start(code) {
    // Always a `{`
    effects.enter(attributesType);
    effects.enter(attributesMarkerType);
    effects.consume(code);
    effects.exit(attributesMarkerType);
    return between
  }

  function between(code) {
    if (code === 35 /* `#` */) {
      type = attributeIdType;
      return shortcutStart(code)
    }

    if (code === 46 /* `.` */) {
      type = attributeClassType;
      return shortcutStart(code)
    }

    if (code === 58 /* `:` */ || code === 95 /* `_` */ || asciiAlpha(code)) {
      effects.enter(attributeType);
      effects.enter(attributeNameType);
      effects.consume(code);
      return name
    }

    if (disallowEol && markdownSpace_1(code)) {
      return factorySpace(effects, between, 'whitespace')(code)
    }

    if (!disallowEol && markdownLineEndingOrSpace_1(code)) {
      return factoryWhitespace(effects, between)(code)
    }

    return end(code)
  }

  function shortcutStart(code) {
    effects.enter(attributeType);
    effects.enter(type);
    effects.enter(type + 'Marker');
    effects.consume(code);
    effects.exit(type + 'Marker');
    return shortcutStartAfter
  }

  function shortcutStartAfter(code) {
    if (
      code === null /* EOF */ ||
      code === 34 /* `"` */ ||
      code === 35 /* `#` */ ||
      code === 39 /* `'` */ ||
      code === 46 /* `.` */ ||
      code === 60 /* `<` */ ||
      code === 61 /* `=` */ ||
      code === 62 /* `>` */ ||
      code === 96 /* `` ` `` */ ||
      code === 125 /* `}` */ ||
      markdownLineEndingOrSpace_1(code)
    ) {
      return nok(code)
    }

    effects.enter(type + 'Value');
    effects.consume(code);
    return shortcut
  }

  function shortcut(code) {
    if (
      code === null /* EOF */ ||
      code === 34 /* `"` */ ||
      code === 39 /* `'` */ ||
      code === 60 /* `<` */ ||
      code === 61 /* `=` */ ||
      code === 62 /* `>` */ ||
      code === 96 /* `` ` `` */
    ) {
      return nok(code)
    }

    if (
      code === 35 /* `#` */ ||
      code === 46 /* `.` */ ||
      code === 125 /* `}` */ ||
      markdownLineEndingOrSpace_1(code)
    ) {
      effects.exit(type + 'Value');
      effects.exit(type);
      effects.exit(attributeType);
      return between(code)
    }

    effects.consume(code);
    return shortcut
  }

  function name(code) {
    if (
      code === 45 /* `-` */ ||
      code === 46 /* `.` */ ||
      code === 58 /* `:` */ ||
      code === 95 /* `_` */ ||
      asciiAlphanumeric(code)
    ) {
      effects.consume(code);
      return name
    }

    effects.exit(attributeNameType);

    if (disallowEol && markdownSpace_1(code)) {
      return factorySpace(effects, nameAfter, 'whitespace')(code)
    }

    if (!disallowEol && markdownLineEndingOrSpace_1(code)) {
      return factoryWhitespace(effects, nameAfter)(code)
    }

    return nameAfter(code)
  }

  function nameAfter(code) {
    if (code === 61 /* `=` */) {
      effects.enter(attributeInitializerType);
      effects.consume(code);
      effects.exit(attributeInitializerType);
      return valueBefore
    }

    // Attribute w/o value.
    effects.exit(attributeType);
    return between(code)
  }

  function valueBefore(code) {
    if (
      code === null /* EOF */ ||
      code === 60 /* `<` */ ||
      code === 61 /* `=` */ ||
      code === 62 /* `>` */ ||
      code === 96 /* `` ` `` */ ||
      code === 125 /* `}` */ ||
      (disallowEol && markdownLineEnding_1(code))
    ) {
      return nok(code)
    }

    if (code === 34 /* `"` */ || code === 39 /* `'` */) {
      effects.enter(attributeValueLiteralType);
      effects.enter(attributeValueMarker);
      effects.consume(code);
      effects.exit(attributeValueMarker);
      marker = code;
      return valueQuotedStart
    }

    if (disallowEol && markdownSpace_1(code)) {
      return factorySpace(effects, valueBefore, 'whitespace')(code)
    }

    if (!disallowEol && markdownLineEndingOrSpace_1(code)) {
      return factoryWhitespace(effects, valueBefore)(code)
    }

    effects.enter(attributeValueType);
    effects.enter(attributeValueData);
    effects.consume(code);
    marker = undefined;
    return valueUnquoted
  }

  function valueUnquoted(code) {
    if (
      code === null /* EOF */ ||
      code === 34 /* `"` */ ||
      code === 39 /* `'` */ ||
      code === 60 /* `<` */ ||
      code === 61 /* `=` */ ||
      code === 62 /* `>` */ ||
      code === 96 /* `` ` `` */
    ) {
      return nok(code)
    }

    if (code === 125 /* `}` */ || markdownLineEndingOrSpace_1(code)) {
      effects.exit(attributeValueData);
      effects.exit(attributeValueType);
      effects.exit(attributeType);
      return between(code)
    }

    effects.consume(code);
    return valueUnquoted
  }

  function valueQuotedStart(code) {
    if (code === marker) {
      effects.enter(attributeValueMarker);
      effects.consume(code);
      effects.exit(attributeValueMarker);
      effects.exit(attributeValueLiteralType);
      effects.exit(attributeType);
      return valueQuotedAfter
    }

    effects.enter(attributeValueType);
    return valueQuotedBetween(code)
  }

  function valueQuotedBetween(code) {
    if (code === marker) {
      effects.exit(attributeValueType);
      return valueQuotedStart(code)
    }

    if (code === null /* EOF */) {
      return nok(code)
    }

    // Note: blank lines can’t exist in content.
    if (markdownLineEnding_1(code)) {
      return disallowEol
        ? nok(code)
        : factoryWhitespace(effects, valueQuotedBetween)(code)
    }

    effects.enter(attributeValueData);
    effects.consume(code);
    return valueQuoted
  }

  function valueQuoted(code) {
    if (
      code === marker ||
      code === null /* EOF */ ||
      markdownLineEnding_1(code)
    ) {
      effects.exit(attributeValueData);
      return valueQuotedBetween(code)
    }

    effects.consume(code);
    return valueQuoted
  }

  function valueQuotedAfter(code) {
    return code === 125 /* `}` */ || markdownLineEndingOrSpace_1(code)
      ? between(code)
      : end(code)
  }

  function end(code) {
    if (code === 125 /* `}` */) {
      effects.enter(attributesMarkerType);
      effects.consume(code);
      effects.exit(attributesMarkerType);
      effects.exit(attributesType);
      return ok
    }

    return nok(code)
  }
}

var factoryLabel$1 = createLabel$1;

// To do: use `dist/`



// This is a fork of:
// <https://github.com/micromark/micromark/blob/bf53bf9/lib/tokenize/factory-label.js>
// to allow empty, support text instead of strings, and optionally w/o EOLs,
// labels.

// eslint-disable-next-line max-params
function createLabel$1(
  effects,
  ok,
  nok,
  type,
  markerType,
  stringType,
  allowEmpty,
  disallowEol
) {
  var size = 0;
  var data;

  return start

  function start(code) {
    /* istanbul ignore if - always `[` */
    if (code !== 91 /* `[` */) throw new Error('expected `[`')
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code);
    effects.exit(markerType);
    return afterStart
  }

  function afterStart(code) {
    if (code === 93 /* `]` */ && allowEmpty) {
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok
    }

    effects.enter(stringType);
    return atBreak(code)
  }

  function atBreak(code) {
    if (
      code === null /* EOF */ ||
      code === 91 /* `[` */ ||
      (code === 93 /* `]` */ && !data && !allowEmpty) ||
      /* <https://github.com/micromark/micromark/blob/bf53bf9/lib/constant/constants.js#L34> */
      size > 999
    ) {
      return nok(code)
    }

    if (code === 93 /* `]` */) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok
    }

    if (markdownLineEnding_1(code)) {
      if (disallowEol) {
        return nok(code)
      }

      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return atBreak
    }

    effects.enter('chunkText', {contentType: 'text'});
    return label(code)
  }

  function label(code) {
    if (
      code === null /* EOF */ ||
      code === 91 /* `[` */ ||
      code === 93 /* `]` */ ||
      markdownLineEnding_1(code) ||
      /* <https://github.com/micromark/micromark/blob/bf53bf9/lib/constant/constants.js#L34> */
      size > 999
    ) {
      effects.exit('chunkText');
      return atBreak(code)
    }

    effects.consume(code);
    data = data || !markdownSpace_1(code);
    return code === 92 /* `\` */ ? labelEscape : label
  }

  function labelEscape(code) {
    if (
      code === 91 /* `[` */ ||
      code === 92 /* `\` */ ||
      code === 93 /* `]` */
    ) {
      effects.consume(code);
      size++;
      return label
    }

    return label(code)
  }
}

var factoryName = createName;

// To do: use `dist/`



function createName(effects, ok, nok, nameType) {
  return start

  function start(code) {
    if (asciiAlpha(code)) {
      effects.enter(nameType);
      effects.consume(code);
      return name
    }

    return nok(code)
  }

  function name(code) {
    if (code === 45 /* `-` */ || asciiAlphanumeric(code)) {
      effects.consume(code);
      return name
    }

    effects.exit(nameType);
    return ok(code)
  }
}

var tokenize$p = tokenizeDirectiveText;
var previous_1$2 = previous$3;

// To do: use `dist/`




var label = {tokenize: tokenizeLabel};
var attributes = {tokenize: tokenizeAttributes};

function previous$3(code) {
  // If there is a previous code, there will always be a tail.
  return (
    code !== 58 /* `:` */ ||
    this.events[this.events.length - 1][1].type === 'characterEscape'
  )
}

function tokenizeDirectiveText(effects, ok, nok) {
  var self = this;

  return start

  function start(code) {
    /* istanbul ignore if - handled by mm */
    if (code !== 58 /* `:` */) throw new Error('expected `:`')

    /* istanbul ignore if - handled by mm */
    if (!previous$3.call(self, self.previous)) {
      throw new Error('expected correct previous')
    }

    effects.enter('directiveText');
    effects.enter('directiveTextMarker');
    effects.consume(code);
    effects.exit('directiveTextMarker');
    return factoryName(effects, afterName, nok, 'directiveTextName')
  }

  function afterName(code) {
    return code === 91 /* `[` */
      ? effects.attempt(label, afterLabel, afterLabel)(code)
      : afterLabel(code)
  }

  function afterLabel(code) {
    return code === 123 /* `{` */
      ? effects.attempt(attributes, afterAttributes, afterAttributes)(code)
      : afterAttributes(code)
  }

  function afterAttributes(code) {
    effects.exit('directiveText');
    return ok(code)
  }
}

function tokenizeLabel(effects, ok, nok) {
  // Always a `[`
  return factoryLabel$1(
    effects,
    ok,
    nok,
    'directiveTextLabel',
    'directiveTextLabelMarker',
    'directiveTextLabelString',
    true
  )
}

function tokenizeAttributes(effects, ok, nok) {
  // Always a `{`
  return factoryAttributes(
    effects,
    ok,
    nok,
    'directiveTextAttributes',
    'directiveTextAttributesMarker',
    'directiveTextAttribute',
    'directiveTextAttributeId',
    'directiveTextAttributeClass',
    'directiveTextAttributeName',
    'directiveTextAttributeInitializerMarker',
    'directiveTextAttributeValueLiteral',
    'directiveTextAttributeValue',
    'directiveTextAttributeValueMarker',
    'directiveTextAttributeValueData'
  )
}

var tokenizeDirectiveText_1 = {
	tokenize: tokenize$p,
	previous: previous_1$2
};

var tokenize$q = tokenizeDirectiveLeaf;

// To do: use `dist/`






var label$1 = {tokenize: tokenizeLabel$1};
var attributes$1 = {tokenize: tokenizeAttributes$1};

function tokenizeDirectiveLeaf(effects, ok, nok) {
  return start

  function start(code) {
    /* istanbul ignore if - handled by mm */
    if (code !== 58 /* `:` */) throw new Error('expected `:`')

    effects.enter('directiveLeaf');
    effects.enter('directiveLeafSequence');
    effects.consume(code);
    return inStart
  }

  function inStart(code) {
    if (code === 58 /* `:` */) {
      effects.consume(code);
      effects.exit('directiveLeafSequence');
      return factoryName(effects, afterName, nok, 'directiveLeafName')
    }

    return nok(code)
  }

  function afterName(code) {
    return code === 91 /* `[` */
      ? effects.attempt(label$1, afterLabel, afterLabel)(code)
      : afterLabel(code)
  }

  function afterLabel(code) {
    return code === 123 /* `{` */
      ? effects.attempt(attributes$1, afterAttributes, afterAttributes)(code)
      : afterAttributes(code)
  }

  function afterAttributes(code) {
    return factorySpace(effects, end, 'whitespace')(code)
  }

  function end(code) {
    if (code === null || markdownLineEnding_1(code)) {
      effects.exit('directiveLeaf');
      return ok(code)
    }

    return nok(code)
  }
}

function tokenizeLabel$1(effects, ok, nok) {
  // Always a `[`
  return factoryLabel$1(
    effects,
    ok,
    nok,
    'directiveLeafLabel',
    'directiveLeafLabelMarker',
    'directiveLeafLabelString',
    true,
    true
  )
}

function tokenizeAttributes$1(effects, ok, nok) {
  // Always a `{`
  return factoryAttributes(
    effects,
    ok,
    nok,
    'directiveLeafAttributes',
    'directiveLeafAttributesMarker',
    'directiveLeafAttribute',
    'directiveLeafAttributeId',
    'directiveLeafAttributeClass',
    'directiveLeafAttributeName',
    'directiveLeafAttributeInitializerMarker',
    'directiveLeafAttributeValueLiteral',
    'directiveLeafAttributeValue',
    'directiveLeafAttributeValueMarker',
    'directiveLeafAttributeValueData',
    true
  )
}

var tokenizeDirectiveLeaf_1 = {
	tokenize: tokenize$q
};

var tokenize$r = tokenizeDirectiveContainer;
var concrete$3 = true;

// To do: use `dist/`







var label$2 = {tokenize: tokenizeLabel$2};
var attributes$2 = {tokenize: tokenizeAttributes$2};

function tokenizeDirectiveContainer(effects, ok, nok) {
  var self = this;
  var initialPrefix = prefixSize_1(this.events, 'linePrefix');
  var sizeOpen = 0;
  var previous;

  return start

  function start(code) {
    /* istanbul ignore if - handled by mm */
    if (code !== 58 /* `:` */) throw new Error('expected `:`')
    effects.enter('directiveContainer');
    effects.enter('directiveContainerFence');
    effects.enter('directiveContainerSequence');
    return sequenceOpen(code)
  }

  function sequenceOpen(code) {
    if (code === 58 /* `:` */) {
      effects.consume(code);
      sizeOpen++;
      return sequenceOpen
    }

    if (sizeOpen < 3) {
      return nok(code)
    }

    effects.exit('directiveContainerSequence');
    return factoryName(effects, afterName, nok, 'directiveContainerName')(code)
  }

  function afterName(code) {
    return code === 91 /* `[` */
      ? effects.attempt(label$2, afterLabel, afterLabel)(code)
      : afterLabel(code)
  }

  function afterLabel(code) {
    return code === 123 /* `{` */
      ? effects.attempt(attributes$2, afterAttributes, afterAttributes)(code)
      : afterAttributes(code)
  }

  function afterAttributes(code) {
    return factorySpace(effects, openAfter, 'whitespace')(code)
  }

  function openAfter(code) {
    effects.exit('directiveContainerFence');

    if (code === null) {
      effects.exit('directiveContainer');
      return ok(code)
    }

    if (markdownLineEnding_1(code)) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return self.interrupt ? ok : contentStart
    }

    return nok(code)
  }

  function contentStart(code) {
    if (code === null) {
      effects.exit('directiveContainer');
      return ok(code)
    }

    effects.enter('directiveContainerContent');
    return lineStart(code)
  }

  function lineStart(code) {
    if (code === null) {
      return after(code)
    }

    return effects.attempt(
      {tokenize: tokenizeClosingFence, partial: true},
      after,
      initialPrefix
        ? factorySpace(effects, chunkStart, 'linePrefix', initialPrefix + 1)
        : chunkStart
    )(code)
  }

  function chunkStart(code) {
    var token = effects.enter('chunkDocument', {
      contentType: 'document',
      previous: previous
    });
    if (previous) previous.next = token;
    previous = token;
    return contentContinue(code)
  }

  function contentContinue(code) {
    if (code === null) {
      effects.exit('chunkDocument');
      return after(code)
    }

    if (markdownLineEnding_1(code)) {
      effects.consume(code);
      effects.exit('chunkDocument');
      return lineStart
    }

    effects.consume(code);
    return contentContinue
  }

  function after(code) {
    effects.exit('directiveContainerContent');
    effects.exit('directiveContainer');
    return ok(code)
  }

  function tokenizeClosingFence(effects, ok, nok) {
    var size = 0;

    return factorySpace(effects, closingPrefixAfter, 'linePrefix', 4)

    function closingPrefixAfter(code) {
      effects.enter('directiveContainerFence');
      effects.enter('directiveContainerSequence');
      return closingSequence(code)
    }

    function closingSequence(code) {
      if (code === 58 /* `:` */) {
        effects.consume(code);
        size++;
        return closingSequence
      }

      if (size < sizeOpen) return nok(code)
      effects.exit('directiveContainerSequence');
      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
    }

    function closingSequenceEnd(code) {
      if (code === null || markdownLineEnding_1(code)) {
        effects.exit('directiveContainerFence');
        return ok(code)
      }

      return nok(code)
    }
  }
}

function tokenizeLabel$2(effects, ok, nok) {
  // Always a `[`
  return factoryLabel$1(
    effects,
    ok,
    nok,
    'directiveContainerLabel',
    'directiveContainerLabelMarker',
    'directiveContainerLabelString',
    true,
    true
  )
}

function tokenizeAttributes$2(effects, ok, nok) {
  // Always a `{`
  return factoryAttributes(
    effects,
    ok,
    nok,
    'directiveContainerAttributes',
    'directiveContainerAttributesMarker',
    'directiveContainerAttribute',
    'directiveContainerAttributeId',
    'directiveContainerAttributeClass',
    'directiveContainerAttributeName',
    'directiveContainerAttributeInitializerMarker',
    'directiveContainerAttributeValueLiteral',
    'directiveContainerAttributeValue',
    'directiveContainerAttributeValueMarker',
    'directiveContainerAttributeValueData',
    true
  )
}

var tokenizeDirectiveContainer_1 = {
	tokenize: tokenize$r,
	concrete: concrete$3
};

var syntax$5 = directive;





function directive() {
  return {
    text: {58: tokenizeDirectiveText_1},
    flow: {58: [tokenizeDirectiveContainer_1, tokenizeDirectiveLeaf_1]}
  }
}

var micromarkExtensionDirective = syntax$5;

var canContainEols$1 = ['textDirective'];
var enter_1 = {
  directiveContainer: enterContainer,
  directiveContainerAttributes: enterAttributes,
  directiveContainerLabel: enterContainerLabel,

  directiveLeaf: enterLeaf,
  directiveLeafAttributes: enterAttributes,

  directiveText: enterText,
  directiveTextAttributes: enterAttributes
};
var exit_1$1 = {
  directiveContainer: exit$5,
  directiveContainerAttributeClassValue: exitAttributeClassValue,
  directiveContainerAttributeIdValue: exitAttributeIdValue,
  directiveContainerAttributeName: exitAttributeName,
  directiveContainerAttributeValue: exitAttributeValue,
  directiveContainerAttributes: exitAttributes,
  directiveContainerLabel: exitContainerLabel,
  directiveContainerName: exitName,

  directiveLeaf: exit$5,
  directiveLeafAttributeClassValue: exitAttributeClassValue,
  directiveLeafAttributeIdValue: exitAttributeIdValue,
  directiveLeafAttributeName: exitAttributeName,
  directiveLeafAttributeValue: exitAttributeValue,
  directiveLeafAttributes: exitAttributes,
  directiveLeafName: exitName,

  directiveText: exit$5,
  directiveTextAttributeClassValue: exitAttributeClassValue,
  directiveTextAttributeIdValue: exitAttributeIdValue,
  directiveTextAttributeName: exitAttributeName,
  directiveTextAttributeValue: exitAttributeValue,
  directiveTextAttributes: exitAttributes,
  directiveTextName: exitName
};

function enterContainer(token) {
  enter$4.call(this, 'containerDirective', token);
}

function enterLeaf(token) {
  enter$4.call(this, 'leafDirective', token);
}

function enterText(token) {
  enter$4.call(this, 'textDirective', token);
}

function enter$4(type, token) {
  this.enter({type: type, name: '', attributes: {}, children: []}, token);
}

function exitName(token) {
  this.stack[this.stack.length - 1].name = this.sliceSerialize(token);
}

function enterContainerLabel(token) {
  this.enter(
    {type: 'paragraph', data: {directiveLabel: true}, children: []},
    token
  );
}

function exitContainerLabel(token) {
  this.exit(token);
}

function enterAttributes() {
  this.setData('directiveAttributes', []);
  this.buffer(); // Capture EOLs
}

function exitAttributeIdValue(token) {
  this.getData('directiveAttributes').push([
    'id',
    decodeLight(this.sliceSerialize(token))
  ]);
}

function exitAttributeClassValue(token) {
  this.getData('directiveAttributes').push([
    'class',
    decodeLight(this.sliceSerialize(token))
  ]);
}

function exitAttributeValue(token) {
  var attributes = this.getData('directiveAttributes');
  attributes[attributes.length - 1][1] = decodeLight(this.sliceSerialize(token));
}

function exitAttributeName(token) {
  // Attribute names in CommonMark are significantly limited, so character
  // references can’t exist.
  this.getData('directiveAttributes').push([this.sliceSerialize(token), '']);
}

function exitAttributes() {
  var attributes = this.getData('directiveAttributes');
  var cleaned = {};
  var index = -1;
  var attribute;

  while (++index < attributes.length) {
    attribute = attributes[index];

    if (attribute[0] === 'class' && cleaned.class) {
      cleaned.class += ' ' + attribute[1];
    } else {
      cleaned[attribute[0]] = attribute[1];
    }
  }

  this.setData('directiveAttributes');
  this.resume(); // Drop EOLs
  this.stack[this.stack.length - 1].attributes = cleaned;
}

function exit$5(token) {
  this.exit(token);
}

function decodeLight(value) {
  return value.replace(
    /&(#(\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi,
    decodeIfPossible
  )
}

function decodeIfPossible($0, $1) {
  return decodeEntity_1($1) || $0
}

var fromMarkdown$7 = {
	canContainEols: canContainEols$1,
	enter: enter_1,
	exit: exit_1$1
};

var core$1 = encode;

// Encode special characters in `value`.
function encode(value, options) {
  value = value.replace(
    options.subset ? charactersToExpression(options.subset) : /["&'<>`]/g,
    basic
  );

  if (options.subset || options.escapeOnly) {
    return value
  }

  return (
    value
      // Surrogate pairs.
      .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate)
      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more
      // non-ASCII ones).
      .replace(
        // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
        /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,
        basic
      )
  )

  function surrogate(pair, index, all) {
    return options.format(
      (pair.charCodeAt(0) - 0xd800) * 0x400 +
        pair.charCodeAt(1) -
        0xdc00 +
        0x10000,
      all.charCodeAt(index + 2),
      options
    )
  }

  function basic(character, index, all) {
    return options.format(
      character.charCodeAt(0),
      all.charCodeAt(index + 1),
      options
    )
  }
}

function charactersToExpression(subset) {
  var groups = [];
  var index = -1;

  while (++index < subset.length) {
    groups.push(subset[index].replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'));
  }

  return new RegExp('(?:' + groups.join('|') + ')', 'g')
}

var assign$1 = Object.assign;

var formatBasic_1 = formatBasic;

function formatBasic(code) {
  return '&#x' + code.toString(16).toUpperCase() + ';'
}

var encodeHexadecimal_1 = encodeHexadecimal;

// Encode special characters in `value` as hexadecimals.
function encodeHexadecimal(value, options) {
  // Note: this file was added in a minor release, so here we can use
  // `Object.assign`.
  return core$1(value, assign$1({format: formatBasic_1}, options))
}

var light = encodeHexadecimal_1;

var convert_1 = convert;

function convert(test) {
  if (test == null) {
    return ok
  }

  if (typeof test === 'string') {
    return typeFactory(test)
  }

  if (typeof test === 'object') {
    return 'length' in test ? anyFactory(test) : allFactory(test)
  }

  if (typeof test === 'function') {
    return test
  }

  throw new Error('Expected function, string, or object as test')
}

// Utility assert each property in `test` is represented in `node`, and each
// values are strictly equal.
function allFactory(test) {
  return all

  function all(node) {
    var key;

    for (key in test) {
      if (node[key] !== test[key]) return false
    }

    return true
  }
}

function anyFactory(tests) {
  var checks = [];
  var index = -1;

  while (++index < tests.length) {
    checks[index] = convert(tests[index]);
  }

  return any

  function any() {
    var index = -1;

    while (++index < checks.length) {
      if (checks[index].apply(this, arguments)) {
        return true
      }
    }

    return false
  }
}

// Utility to convert a string into a function which checks a given node’s type
// for said string.
function typeFactory(test) {
  return type

  function type(node) {
    return Boolean(node && node.type === test)
  }
}

// Utility to return true.
function ok() {
  return true
}

var color_1 = color;
function color(d) {
  return '\u001B[33m' + d + '\u001B[39m'
}

var unistUtilVisitParents = visitParents;




var CONTINUE = true;
var SKIP = 'skip';
var EXIT = false;

visitParents.CONTINUE = CONTINUE;
visitParents.SKIP = SKIP;
visitParents.EXIT = EXIT;

function visitParents(tree, test, visitor, reverse) {
  var step;
  var is;

  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  is = convert_1(test);
  step = reverse ? -1 : 1;

  factory(tree, null, [])();

  function factory(node, index, parents) {
    var value = typeof node === 'object' && node !== null ? node : {};
    var name;

    if (typeof value.type === 'string') {
      name =
        typeof value.tagName === 'string'
          ? value.tagName
          : typeof value.name === 'string'
          ? value.name
          : undefined;

      visit.displayName =
        'node (' + color_1(value.type + (name ? '<' + name + '>' : '')) + ')';
    }

    return visit

    function visit() {
      var grandparents = parents.concat(node);
      var result = [];
      var subresult;
      var offset;

      if (!test || is(node, index, parents[parents.length - 1] || null)) {
        result = toResult(visitor(node, parents));

        if (result[0] === EXIT) {
          return result
        }
      }

      if (node.children && result[0] !== SKIP) {
        offset = (reverse ? node.children.length : -1) + step;

        while (offset > -1 && offset < node.children.length) {
          subresult = factory(node.children[offset], offset, grandparents)();

          if (subresult[0] === EXIT) {
            return subresult
          }

          offset =
            typeof subresult[1] === 'number' ? subresult[1] : offset + step;
        }
      }

      return result
    }
  }
}

function toResult(value) {
  if (value !== null && typeof value === 'object' && 'length' in value) {
    return value
  }

  if (typeof value === 'number') {
    return [CONTINUE, value]
  }

  return [value]
}

var checkQuote_1 = checkQuote;

function checkQuote(context) {
  var marker = context.options.quote || '"';

  if (marker !== '"' && marker !== "'") {
    throw new Error(
      'Cannot serialize title with `' +
        marker +
        '` for `options.quote`, expected `"`, or `\'`'
    )
  }

  return marker
}

var unsafe$4 = [
  {
    character: '\r',
    inConstruct: ['leafDirectiveLabel', 'containerDirectiveLabel']
  },
  {
    character: '\n',
    inConstruct: ['leafDirectiveLabel', 'containerDirectiveLabel']
  },
  {
    before: '[^:]',
    character: ':',
    after: '[A-Za-z]',
    inConstruct: ['phrasing']
  },
  {atBreak: true, character: ':', after: ':'}
];

var handlers$3 = {
  containerDirective: handleDirective,
  leafDirective: handleDirective,
  textDirective: handleDirective
};

handleDirective.peek = peekDirective;








var own$5 = {}.hasOwnProperty;

var shortcut = /^[^\t\n\r "#'.<=>`}]+$/;

function handleDirective(node, _, context) {
  var prefix = fence(node);
  var exit = context.enter(node.type);
  var value =
    prefix +
    (node.name || '') +
    label$3(node, context) +
    attributes$3(node, context);
  var subvalue;

  if (node.type === 'containerDirective') {
    subvalue = content$2(node, context);
    if (subvalue) value += '\n' + subvalue;
    value += '\n' + prefix;
  }

  exit();
  return value
}

function peekDirective() {
  return ':'
}

function label$3(node, context) {
  var label = node;
  var exit;
  var subexit;
  var value;

  if (node.type === 'containerDirective') {
    if (!inlineDirectiveLabel(node)) return ''
    label = node.children[0];
  }

  exit = context.enter('label');
  subexit = context.enter(node.type + 'Label');
  value = containerPhrasing(label, context, {before: '[', after: ']'});
  subexit();
  exit();
  return value ? '[' + value + ']' : ''
}

function attributes$3(node, context) {
  var quote = checkQuote_1(context);
  var subset = node.type === 'textDirective' ? [quote] : [quote, '\n', '\r'];
  var attrs = node.attributes || {};
  var values = [];
  var id;
  var classesFull;
  var classes;
  var value;
  var key;
  var index;

  for (key in attrs) {
    if (own$5.call(attrs, key) && attrs[key] != null) {
      value = String(attrs[key]);

      if (key === 'id') {
        id = shortcut.test(value) ? '#' + value : quoted('id', value);
      } else if (key === 'class') {
        value = value.split(/[\t\n\r ]+/g);
        classesFull = [];
        classes = [];
        index = -1;

        while (++index < value.length) {
(shortcut.test(value[index]) ? classes : classesFull).push(
            value[index]
          );
        }

        classesFull = classesFull.length
          ? quoted('class', classesFull.join(' '))
          : '';
        classes = classes.length ? '.' + classes.join('.') : '';
      } else {
        values.push(quoted(key, value));
      }
    }
  }

  if (classesFull) {
    values.unshift(classesFull);
  }

  if (classes) {
    values.unshift(classes);
  }

  if (id) {
    values.unshift(id);
  }

  return values.length ? '{' + values.join(' ') + '}' : ''

  function quoted(key, value) {
    return (
      key + (value ? '=' + quote + light(value, {subset: subset}) + quote : '')
    )
  }
}

function content$2(node, context) {
  var content = inlineDirectiveLabel(node)
    ? Object.assign({}, node, {children: node.children.slice(1)})
    : node;

  return containerFlow(content, context)
}

function inlineDirectiveLabel(node) {
  return (
    node.children &&
    node.children[0] &&
    node.children[0].data &&
    node.children[0].data.directiveLabel
  )
}

function fence(node) {
  var size = 0;

  if (node.type === 'containerDirective') {
    unistUtilVisitParents(node, 'containerDirective', onvisit);
    size += 3;
  } else if (node.type === 'leafDirective') {
    size = 2;
  } else {
    size = 1;
  }

  return repeatString(':', size)

  function onvisit(node, parents) {
    var index = parents.length;
    var nesting = 0;

    while (index--) {
      if (parents[index].type === 'containerDirective') {
        nesting++;
      }
    }

    if (nesting > size) size = nesting;
  }
}

var toMarkdown$6 = {
	unsafe: unsafe$4,
	handlers: handlers$3
};

var warningIssued$2;

var remarkDirective = directive$1;

function directive$1() {
  var data = this.data();

  /* istanbul ignore next - old remark. */
  if (
    !warningIssued$2 &&
    ((this.Parser &&
      this.Parser.prototype &&
      this.Parser.prototype.blockTokenizers) ||
      (this.Compiler &&
        this.Compiler.prototype &&
        this.Compiler.prototype.visitors))
  ) {
    warningIssued$2 = true;
    console.warn(
      '[remark-directive] Warning: please upgrade to remark 13 to use this plugin'
    );
  }

  add('micromarkExtensions', micromarkExtensionDirective());
  add('fromMarkdownExtensions', fromMarkdown$7);
  add('toMarkdownExtensions', toMarkdown$6);

  function add(field, value) {
    /* istanbul ignore if - other extensions. */
    if (data[field]) data[field].push(value);
    else data[field] = [value];
  }
}

var index_cjs = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });

function html() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var permalinks = opts.permalinks || [];

  var defaultPageResolver = function defaultPageResolver(name) {
    return [name.replace(/ /g, '_').toLowerCase()];
  };

  var pageResolver = opts.pageResolver || defaultPageResolver;
  var newClassName = opts.newClassName || 'new';
  var wikiLinkClassName = opts.wikiLinkClassName || 'internal';

  var defaultHrefTemplate = function defaultHrefTemplate(permalink) {
    return "#/page/".concat(permalink);
  };

  var hrefTemplate = opts.hrefTemplate || defaultHrefTemplate;

  function enterWikiLink() {
    var stack = this.getData('wikiLinkStack');
    if (!stack) this.setData('wikiLinkStack', stack = []);
    stack.push({});
  }

  function top(stack) {
    return stack[stack.length - 1];
  }

  function exitWikiLinkAlias(token) {
    var alias = this.sliceSerialize(token);
    var current = top(this.getData('wikiLinkStack'));
    current.alias = alias;
  }

  function exitWikiLinkTarget(token) {
    var target = this.sliceSerialize(token);
    var current = top(this.getData('wikiLinkStack'));
    current.target = target;
  }

  function exitWikiLink() {
    var wikiLink = this.getData('wikiLinkStack').pop();
    var pagePermalinks = pageResolver(wikiLink.target);
    var permalink = pagePermalinks.find(function (p) {
      return permalinks.indexOf(p) !== -1;
    });
    var exists = permalink !== undefined;

    if (!exists) {
      permalink = pagePermalinks[0];
    }

    var displayName = wikiLink.target;

    if (wikiLink.alias) {
      displayName = wikiLink.alias;
    }

    var classNames = wikiLinkClassName;

    if (!exists) {
      classNames += ' ' + newClassName;
    }

    this.tag('<a href="' + hrefTemplate(permalink) + '" class="' + classNames + '">');
    this.raw(displayName);
    this.tag('</a>');
  }

  return {
    enter: {
      wikiLink: enterWikiLink
    },
    exit: {
      wikiLinkTarget: exitWikiLinkTarget,
      wikiLinkAlias: exitWikiLinkAlias,
      wikiLink: exitWikiLink
    }
  };
}

function wikiLink() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var aliasDivider = opts.aliasDivider || ':';
  var aliasMarker = aliasDivider;
  var startMarker = '[[';
  var endMarker = ']]';

  function tokenize(effects, ok, nok) {
    var data;
    var alias;
    var aliasCursor = 0;
    var startMarkerCursor = 0;
    var endMarkerCursor = 0;
    return start;

    function start(code) {
      if (code !== startMarker.charCodeAt(startMarkerCursor)) return nok(code);
      effects.enter('wikiLink');
      effects.enter('wikiLinkMarker');
      return consumeStart;
    }

    function consumeStart(code) {
      if (startMarkerCursor === startMarker.length) {
        effects.exit('wikiLinkMarker');
        return consumeData;
      }

      if (code !== startMarker.charCodeAt(startMarkerCursor)) {
        return nok(code);
      }

      effects.consume(code);
      startMarkerCursor++;
      return consumeStart;
    }

    function consumeData(code) {
      effects.enter('wikiLinkData');
      effects.enter('wikiLinkTarget');
      return consumeTarget;
    }

    function consumeTarget(code) {
      if (code === aliasMarker.charCodeAt(aliasCursor)) {
        if (!data) return nok(code);
        effects.exit('wikiLinkTarget');
        effects.enter('wikiLinkAliasMarker');
        return consumeAliasMarker;
      }

      if (code === endMarker.charCodeAt(endMarkerCursor)) {
        if (!data) return nok(code);
        effects.exit('wikiLinkTarget');
        effects.exit('wikiLinkData');
        effects.enter('wikiLinkMarker');
        return consumeEnd;
      }

      if (!(code < 0 || code === 32)) {
        data = true;
      }

      effects.consume();
      return consumeTarget;
    }

    function consumeAliasMarker(code) {
      if (aliasCursor === aliasMarker.length) {
        effects.exit('wikiLinkAliasMarker');
        effects.enter('wikiLinkAlias');
        return consumeAlias;
      }

      if (code !== aliasMarker.charCodeAt(aliasCursor)) {
        return nok(code);
      }

      effects.consume(code);
      aliasCursor++;
      return consumeAliasMarker;
    }

    function consumeAlias(code) {
      if (code === endMarker.charCodeAt(endMarkerCursor)) {
        if (!alias) return nok(code);
        effects.exit('wikiLinkAlias');
        effects.exit('wikiLinkData');
        effects.enter('wikiLinkMarker');
        return consumeEnd;
      }

      if (!(code < 0 || code === 32)) {
        alias = true;
      }

      effects.consume();
      return consumeAlias;
    }

    function consumeEnd(code) {
      if (endMarkerCursor === endMarker.length) {
        effects.exit('wikiLinkMarker');
        effects.exit('wikiLink');
        return ok;
      }

      if (code !== endMarker.charCodeAt(endMarkerCursor)) {
        return nok(code);
      }

      effects.consume(code);
      endMarkerCursor++;
      return consumeEnd;
    }
  }

  var call = {
    tokenize: tokenize
  };
  return {
    text: {
      91: call
    }
  };
}

exports.html = html;
exports.syntax = wikiLink;
});

var index_cjs$1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });



function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var safe__default = /*#__PURE__*/_interopDefaultLegacy(safe_1);

function fromMarkdown() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var permalinks = opts.permalinks || [];

  var defaultPageResolver = function defaultPageResolver(name) {
    return [name.replace(/ /g, '_').toLowerCase()];
  };

  var pageResolver = opts.pageResolver || defaultPageResolver;
  var newClassName = opts.newClassName || 'new';
  var wikiLinkClassName = opts.wikiLinkClassName || 'internal';

  var defaultHrefTemplate = function defaultHrefTemplate(permalink) {
    return "#/page/".concat(permalink);
  };

  var hrefTemplate = opts.hrefTemplate || defaultHrefTemplate;

  function enterWikiLink(token) {
    this.enter({
      type: 'wikiLink',
      value: null,
      data: {
        alias: null,
        permalink: null,
        exists: null
      }
    }, token);
  }

  function top(stack) {
    return stack[stack.length - 1];
  }

  function exitWikiLinkAlias(token) {
    var alias = this.sliceSerialize(token);
    var current = top(this.stack);
    current.data.alias = alias;
  }

  function exitWikiLinkTarget(token) {
    var target = this.sliceSerialize(token);
    var current = top(this.stack);
    current.value = target;
  }

  function exitWikiLink(token) {
    var wikiLink = this.exit(token);
    var pagePermalinks = pageResolver(wikiLink.value);
    var permalink = pagePermalinks.find(function (p) {
      return permalinks.indexOf(p) !== -1;
    });
    var exists = permalink !== undefined;

    if (!exists) {
      permalink = pagePermalinks[0];
    }

    var displayName = wikiLink.value;

    if (wikiLink.data.alias) {
      displayName = wikiLink.data.alias;
    }

    var classNames = wikiLinkClassName;

    if (!exists) {
      classNames += ' ' + newClassName;
    }

    wikiLink.data.alias = displayName;
    wikiLink.data.permalink = permalink;
    wikiLink.data.exists = exists;
    wikiLink.data.hName = 'a';
    wikiLink.data.hProperties = {
      className: classNames,
      href: hrefTemplate(permalink)
    };
    wikiLink.data.hChildren = [{
      type: 'text',
      value: displayName
    }];
  }

  return {
    enter: {
      wikiLink: enterWikiLink
    },
    exit: {
      wikiLinkTarget: exitWikiLinkTarget,
      wikiLinkAlias: exitWikiLinkAlias,
      wikiLink: exitWikiLink
    }
  };
}

function toMarkdown() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var aliasDivider = opts.aliasDivider || ':';
  var unsafe = [{
    character: '[',
    inConstruct: ['phrasing', 'label', 'reference']
  }, {
    character: ']',
    inConstruct: ['label', 'reference']
  }];

  function handler(node, _, context) {
    var exit = context.enter('wikiLink');
    var nodeValue = safe__default['default'](context, node.value, {
      before: '[',
      after: ']'
    });
    var nodeAlias = safe__default['default'](context, node.data.alias, {
      before: '[',
      after: ']'
    });
    var value;

    if (nodeAlias !== nodeValue) {
      value = "[[".concat(nodeValue).concat(aliasDivider).concat(nodeAlias, "]]");
    } else {
      value = "[[".concat(nodeValue, "]]");
    }

    exit();
    return value;
  }

  return {
    unsafe: unsafe,
    handlers: {
      wikiLink: handler
    }
  };
}

exports.fromMarkdown = fromMarkdown;
exports.toMarkdown = toMarkdown;
});

var index_cjs$2 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });




var warningIssued;

function wikiLinkPlugin() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var data = this.data();

  function add(field, value) {
    if (data[field]) data[field].push(value);else data[field] = [value];
  }

  if (!warningIssued && (this.Parser && this.Parser.prototype && this.Parser.prototype.blockTokenizers || this.Compiler && this.Compiler.prototype && this.Compiler.prototype.visitors)) {
    warningIssued = true;
    console.warn('[remark-wiki-link] Warning: please upgrade to remark 13 to use this plugin');
  }

  add('micromarkExtensions', index_cjs.syntax(opts));
  add('fromMarkdownExtensions', index_cjs$1.fromMarkdown(opts));
  add('toMarkdownExtensions', index_cjs$1.toMarkdown(opts));
}

exports.wikiLinkPlugin = wikiLinkPlugin;
});

var format = createCommonjsModule(function (module) {
(function() {

  //// Export the API
  var namespace;

  // CommonJS / Node module
  {
    namespace = module.exports = format;
  }

  namespace.format = format;
  namespace.vsprintf = vsprintf;

  if (typeof console !== 'undefined' && typeof console.log === 'function') {
    namespace.printf = printf;
  }

  function printf(/* ... */) {
    console.log(format.apply(null, arguments));
  }

  function vsprintf(fmt, replacements) {
    return format.apply(null, [fmt].concat(replacements));
  }

  function format(fmt) {
    var argIndex = 1 // skip initial format argument
      , args = [].slice.call(arguments)
      , i = 0
      , n = fmt.length
      , result = ''
      , c
      , escaped = false
      , arg
      , tmp
      , leadingZero = false
      , precision
      , nextArg = function() { return args[argIndex++]; }
      , slurpNumber = function() {
          var digits = '';
          while (/\d/.test(fmt[i])) {
            digits += fmt[i++];
            c = fmt[i];
          }
          return digits.length > 0 ? parseInt(digits) : null;
        }
      ;
    for (; i < n; ++i) {
      c = fmt[i];
      if (escaped) {
        escaped = false;
        if (c == '.') {
          leadingZero = false;
          c = fmt[++i];
        }
        else if (c == '0' && fmt[i + 1] == '.') {
          leadingZero = true;
          i += 2;
          c = fmt[i];
        }
        else {
          leadingZero = true;
        }
        precision = slurpNumber();
        switch (c) {
        case 'b': // number in binary
          result += parseInt(nextArg(), 10).toString(2);
          break;
        case 'c': // character
          arg = nextArg();
          if (typeof arg === 'string' || arg instanceof String)
            result += arg;
          else
            result += String.fromCharCode(parseInt(arg, 10));
          break;
        case 'd': // number in decimal
          result += parseInt(nextArg(), 10);
          break;
        case 'f': // floating point number
          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));
          result += leadingZero ? tmp : tmp.replace(/^0/, '');
          break;
        case 'j': // JSON
          result += JSON.stringify(nextArg());
          break;
        case 'o': // number in octal
          result += '0' + parseInt(nextArg(), 10).toString(8);
          break;
        case 's': // string
          result += nextArg();
          break;
        case 'x': // lowercase hexadecimal
          result += '0x' + parseInt(nextArg(), 10).toString(16);
          break;
        case 'X': // uppercase hexadecimal
          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();
          break;
        default:
          result += c;
          break;
        }
      } else if (c === '%') {
        escaped = true;
      } else {
        result += c;
      }
    }
    return result;
  }

}());
});

var fault = create$2(Error);

var fault_1 = fault;

fault.eval = create$2(EvalError);
fault.range = create$2(RangeError);
fault.reference = create$2(ReferenceError);
fault.syntax = create$2(SyntaxError);
fault.type = create$2(TypeError);
fault.uri = create$2(URIError);

fault.create = create$2;

// Create a new `EConstructor`, with the formatted `format` as a first argument.
function create$2(EConstructor) {
  FormattedError.displayName = EConstructor.displayName || EConstructor.name;

  return FormattedError

  function FormattedError(format$1) {
    if (format$1) {
      format$1 = format.apply(null, arguments);
    }

    return new EConstructor(format$1)
  }
}

var matters_1 = matters;



var own$6 = {}.hasOwnProperty;

var markers = {yaml: '-', toml: '+'};

function matters(options) {
  var settings = options || 'yaml';
  var results = [];
  var index = -1;
  var length;

  // One preset or matter.
  if (typeof settings === 'string' || !('length' in settings)) {
    settings = [settings];
  }

  length = settings.length;

  while (++index < length) {
    results[index] = matter(settings[index]);
  }

  return results
}

function matter(option) {
  var result = option;

  if (typeof result === 'string') {
    if (!own$6.call(markers, result)) {
      throw fault_1('Missing matter definition for `%s`', result)
    }

    result = {type: result, marker: markers[result]};
  } else if (typeof result !== 'object') {
    throw fault_1('Expected matter to be an object, not `%j`', result)
  }

  if (!own$6.call(result, 'type')) {
    throw fault_1('Missing `type` in matter `%j`', result)
  }

  if (!own$6.call(result, 'fence') && !own$6.call(result, 'marker')) {
    throw fault_1('Missing `marker` or `fence` in matter `%j`', result)
  }

  return result
}

var syntax$6 = create$3;



function create$3(options) {
  var settings = matters_1(options);
  var length = settings.length;
  var index = -1;
  var flow = {};
  var matter;
  var code;

  while (++index < length) {
    matter = settings[index];
    code = fence$1(matter, 'open').charCodeAt(0);
    if (code in flow) {
      flow[code].push(parse$2(matter));
    } else {
      flow[code] = [parse$2(matter)];
    }
  }

  return {flow: flow}
}

function parse$2(matter) {
  var name = matter.type;
  var anywhere = matter.anywhere;
  var valueType = name + 'Value';
  var fenceType = name + 'Fence';
  var sequenceType = fenceType + 'Sequence';
  var fenceConstruct = {tokenize: tokenizeFence, partial: true};
  var buffer;

  return {tokenize: tokenizeFrontmatter, concrete: true}

  function tokenizeFrontmatter(effects, ok, nok) {
    var self = this;

    return start

    function start(code) {
      var position = self.now();

      if (position.column !== 1 || (!anywhere && position.line !== 1)) {
        return nok(code)
      }

      effects.enter(name);
      buffer = fence$1(matter, 'open');
      return effects.attempt(fenceConstruct, afterOpeningFence, nok)(code)
    }

    function afterOpeningFence(code) {
      buffer = fence$1(matter, 'close');
      return lineEnd(code)
    }

    function lineStart(code) {
      if (code === -5 || code === -4 || code === -3 || code === null) {
        return lineEnd(code)
      }

      effects.enter(valueType);
      return lineData(code)
    }

    function lineData(code) {
      if (code === -5 || code === -4 || code === -3 || code === null) {
        effects.exit(valueType);
        return lineEnd(code)
      }

      effects.consume(code);
      return lineData
    }

    function lineEnd(code) {
      // Require a closing fence.
      if (code === null) {
        return nok(code)
      }

      // Can only be an eol.
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return effects.attempt(fenceConstruct, after, lineStart)
    }

    function after(code) {
      effects.exit(name);
      return ok(code)
    }
  }

  function tokenizeFence(effects, ok, nok) {
    var bufferIndex = 0;

    return start

    function start(code) {
      if (code === buffer.charCodeAt(bufferIndex)) {
        effects.enter(fenceType);
        effects.enter(sequenceType);
        return insideSequence(code)
      }

      return nok(code)
    }

    function insideSequence(code) {
      if (bufferIndex === buffer.length) {
        effects.exit(sequenceType);

        if (code === -2 || code === -1 || code === 32) {
          effects.enter('whitespace');
          return insideWhitespace(code)
        }

        return fenceEnd(code)
      }

      if (code === buffer.charCodeAt(bufferIndex)) {
        effects.consume(code);
        bufferIndex++;
        return insideSequence
      }

      return nok(code)
    }

    function insideWhitespace(code) {
      if (code === -2 || code === -1 || code === 32) {
        effects.consume(code);
        return insideWhitespace
      }

      effects.exit('whitespace');
      return fenceEnd(code)
    }

    function fenceEnd(code) {
      if (code === -5 || code === -4 || code === -3 || code === null) {
        effects.exit(fenceType);
        return ok(code)
      }

      return nok(code)
    }
  }
}

function fence$1(matter, prop) {
  var marker;

  if (matter.marker) {
    marker = pick(matter.marker, prop);
    return marker + marker + marker
  }

  return pick(matter.fence, prop)
}

function pick(schema, prop) {
  return typeof schema === 'string' ? schema : schema[prop]
}

var micromarkExtensionFrontmatter = syntax$6;

var fromMarkdown$8 = createFromMarkdown;



function createFromMarkdown(options) {
  var settings = matters_1(options);
  var length = settings.length;
  var index = -1;
  var enter = {};
  var exit = {};
  var matter;

  while (++index < length) {
    matter = settings[index];
    enter[matter.type] = opener(matter);
    exit[matter.type] = close;
    exit[matter.type + 'Value'] = value;
  }

  return {enter: enter, exit: exit}
}

function opener(matter) {
  return open
  function open(token) {
    this.enter({type: matter.type, value: ''}, token);
    this.buffer();
  }
}

function close(token) {
  var data = this.resume();
  // Remove the initial and final eol.
  this.exit(token).value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
}

function value(token) {
  this.config.enter.data.call(this, token);
  this.config.exit.data.call(this, token);
}

var toMarkdown$7 = createToMarkdown;



function createToMarkdown(options) {
  var unsafe = [];
  var handlers = {};
  var settings = matters_1(options);
  var length = settings.length;
  var index = -1;
  var matter;

  while (++index < length) {
    matter = settings[index];
    handlers[matter.type] = handler(matter);
    unsafe.push({atBreak: true, character: fence$2(matter, 'open').charAt(0)});
  }

  return {unsafe: unsafe, handlers: handlers}
}

function handler(matter) {
  var open = fence$2(matter, 'open');
  var close = fence$2(matter, 'close');

  return handle

  function handle(node) {
    return open + (node.value ? '\n' + node.value : '') + '\n' + close
  }
}

function fence$2(matter, prop) {
  var marker;

  if (matter.marker) {
    marker = pick$1(matter.marker, prop);
    return marker + marker + marker
  }

  return pick$1(matter.fence, prop)
}

function pick$1(schema, prop) {
  return typeof schema === 'string' ? schema : schema[prop]
}

var remarkFrontmatter = frontmatter;

function frontmatter(options) {
  var data = this.data();
  add('micromarkExtensions', micromarkExtensionFrontmatter(options));
  add('fromMarkdownExtensions', fromMarkdown$8(options));
  add('toMarkdownExtensions', toMarkdown$7(options));
  function add(field, value) {
    /* istanbul ignore if - other extensions. */
    if (data[field]) data[field].push(value);
    else data[field] = [value];
  }
}

var immutable = extend$1;

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend$1() {
    var target = {};

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }

    return target
}

var unistUtilVisit = visit;



var CONTINUE$1 = unistUtilVisitParents.CONTINUE;
var SKIP$1 = unistUtilVisitParents.SKIP;
var EXIT$1 = unistUtilVisitParents.EXIT;

visit.CONTINUE = CONTINUE$1;
visit.SKIP = SKIP$1;
visit.EXIT = EXIT$1;

function visit(tree, test, visitor, reverse) {
  if (typeof test === 'function' && typeof visitor !== 'function') {
    reverse = visitor;
    visitor = test;
    test = null;
  }

  unistUtilVisitParents(tree, test, overload, reverse);

  function overload(node, parents) {
    var parent = parents[parents.length - 1];
    var index = parent ? parent.children.indexOf(node) : null;
    return visitor(node, index, parent)
  }
}

var mdastUtilDefinitions = getDefinitionFactory;

var own$7 = {}.hasOwnProperty;

// Get a definition in `node` by `identifier`.
function getDefinitionFactory(node, options) {
  return getterFactory(gather(node, options))
}

// Gather all definitions in `node`
function gather(node, options) {
  var cache = {};

  if (!node || !node.type) {
    throw new Error('mdast-util-definitions expected node')
  }

  unistUtilVisit(node, 'definition', options && options.commonmark ? commonmark : normal);

  return cache

  function commonmark(definition) {
    var id = normalise(definition.identifier);
    if (!own$7.call(cache, id)) {
      cache[id] = definition;
    }
  }

  function normal(definition) {
    cache[normalise(definition.identifier)] = definition;
  }
}

// Factory to get a node from the given definition-cache.
function getterFactory(cache) {
  return getter

  // Get a node from the bound definition-cache.
  function getter(identifier) {
    var id = identifier && normalise(identifier);
    return id && own$7.call(cache, id) ? cache[id] : null
  }
}

function normalise(identifier) {
  return identifier.toUpperCase()
}

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice$3 = Array.prototype.slice;
var toStr$1 = Object.prototype.toString;
var funcType = '[object Function]';

var implementation = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr$1.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice$3.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice$3.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice$3.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

var functionBind = Function.prototype.bind || implementation;

var src = functionBind.call(Function.call, Object.prototype.hasOwnProperty);

/* Dependencies. */

/* Expose. */


var all_1 = all$1;
/* Stringify all children of `parent`. */

function all$1(ctx, parent) {
  var children = parent && parent.children;
  if (!children) return '';
  return children.map(function (child, index) {
    return one_1(ctx, child, index, parent);
  }).join('');
}

/* Expose. */
var blockquote_1 = blockquote;

var defaultMacro = function defaultMacro(innerText) {
  return "\\begin{Quotation}\n".concat(innerText, "\n\\end{Quotation}\n\n");
};
/* Stringify a Blockquote `node`. */


function blockquote(ctx, node) {
  var macro = ctx.blockquote || defaultMacro;

  var innerText = all_1(ctx, node);

  return macro(innerText.trim());
}

/* Expose. */
var _break = br;

var defaultMacro$1 = function defaultMacro() {
  return ' \\\\\n';
};
/* Stringify a break `node`. */


function br(ctx, node) {
  var macro = ctx["break"] ? ctx["break"] : defaultMacro$1;
  return macro(node);
}

/* Expose. */
var code_1 = code$1;
var codeBlockParamsMapping = [null, 'hl_lines=', 'linenostart='];

var defaultMacro$2 = function defaultMacro(content, lang, attrs) {
  // Default language is "text"
  if (!lang) lang = 'text'; // Create a list of attributes to be serialized

  var localCodeBlockParams = Array(codeBlockParamsMapping.length).fill(''); // Check for attributes and enumerate them

  if (attrs !== null) {
    for (var i = 0; i < codeBlockParamsMapping.length; i++) {
      var _param = codeBlockParamsMapping[i]; // Skip unwanted parameters

      if (_param === null) continue;
      var location = attrs.indexOf(_param); // Parse the attributes we know

      if (location > -1) {
        var begin = location + _param.length;
        var remaining = attrs.slice(begin);
        var length = remaining.indexOf(' ');
        var value = length > -1 ? attrs.slice(begin, begin + length) : remaining; // Remove string-delimiters

        if (value.startsWith('"') && value.endsWith('"') || value.startsWith("'") && value.endsWith("'")) {
          value = value.slice(1, -1).trim();
        }

        localCodeBlockParams[i] = value;
      }
    }
  } // If we matched something, return optional arguments
  // Note that we do stop serialization on a chain of empty arguments


  var matched = localCodeBlockParams.reduce(function (a, v, i) {
    return v !== '' ? i : a;
  }, -1) + 1;
  var param = matched > 0 ? "[".concat(localCodeBlockParams.slice(0, matched).join(']['), "]") : '';
  return "\\begin{CodeBlock}".concat(param, "{").concat(lang, "}\n").concat(content, "\n\\end{CodeBlock}\n\n");
};
/* Stringify a code `node`. */


function code$1(ctx, node) {
  var macro = ctx.code || defaultMacro$2;
  return "".concat(macro(node.value, node.lang, node.meta, node));
}

code$1.macro = defaultMacro$2;

var definition_1 = definition$1;

var defaultMacro$3 = function defaultMacro(ctx, identifier, url, title) {
  var node = {
    children: [{
      type: 'link',
      title: title,
      url: url,
      children: [{
        type: 'text',
        value: url
      }]
    }]
  };

  var link = all_1(ctx, node);

  return "\\footnote{\\label{".concat(identifier, "}").concat(link, "}");
};

function definition$1(ctx, node) {
  var macro = ctx.definition ? ctx.definition : defaultMacro$3;
  return macro(ctx, node.identifier, node.url, node.title);
}

// TODO: make it customizable

/* Expose. */
var _delete = deleteNode;
/* Stringify a delete `node`. */

function deleteNode(ctx, node, index, parent) {
  var contents = all_1(ctx, node);

  return "\\sout{".concat(contents, "}");
}

// TODO: make it customizable

/* Expose. */
var emphasis_1 = emphasis;
/* Stringify an emphasis `node`. */

function emphasis(ctx, node, index, parent) {
  var contents = all_1(ctx, node);

  return "\\textit{".concat(contents, "}");
}

/* Expose. */
var footnote = notes;

var defaultMacro$4 = function defaultMacro(identifier, text, protect) {
  var footnote = "\\footnote[".concat(identifier, "]{\\label{footnote:").concat(identifier, "} ").concat(text, "}");

  if (protect) {
    return "".concat(footnote, "\\protect");
  }

  return footnote;
};

function autoId(node) {
  var _node$position$start = node.position.start,
      line = _node$position$start.line,
      column = _node$position$start.column,
      offset = _node$position$start.offset;
  return "l".concat(line, "c").concat(column, "o").concat(offset);
}
/* Stringify a footnote `node`. */


function notes(ctx, node, _index, parent) {
  var macro = ctx.footnote || defaultMacro$4;
  var protect = !!node.inHeading;
  var identifier = autoId(node);
  return macro(identifier, all_1(ctx, node).trim(), protect);
}

var footnoteDefinition = notes$1;

var defaultMacro$5 = function defaultMacro(identifier, text, protect) {
  var footnote = "\\footnotetext[".concat(identifier, "]{\\label{footnote:").concat(identifier, "} ").concat(text, "}");

  if (protect) {
    return "".concat(footnote, "\\protect");
  }

  return footnote;
};

function notes$1(ctx, node) {
  var macro = ctx.footnoteDefinition || defaultMacro$5;
  var protect = !!node.inHeading;
  return macro(node.identifier, all_1(ctx, node).trim());
}

var footnoteReference = notes$2;

var defaultMacro$6 = function defaultMacro(identifier) {
  return "\\textsuperscript{\\ref{footnote:".concat(identifier, "}}");
};

function notes$2(ctx, node) {
  var macro = ctx.footnoteReference || defaultMacro$6;
  return macro(node.identifier);
}

/* Expose. */
var heading_1 = heading;
var defaultHeadings = [function (val) {
  return "\\part{".concat(val, "}\n");
}, function (val) {
  return "\\chapter{".concat(val, "}\n");
}, function (val) {
  return "\\section{".concat(val, "}\n");
}, function (val) {
  return "\\subsection{".concat(val, "}\n");
}, function (val) {
  return "\\subsubsection{".concat(val, "}\n");
}, function (val) {
  return "\\paragraph{".concat(val, "}\n");
}, function (val) {
  return "\\subparagaph{".concat(val, "}\n");
}];
/* Stringify a heading `node`.
 */

function heading(ctx, node) {
  var depth = node.depth;

  var content = all_1(ctx, node);

  var headings = ctx.headings || defaultHeadings;
  var fn = headings[node.depth - 1];

  if (typeof fn !== 'function') {
    throw new Error("Cannot compile heading of depth ".concat(depth, ": not a function"));
  }

  return fn(content);
}

// TODO: make it customizable

/* Expose. */
var html_1 = html;
/* Stringify a html `node`. */

function html(ctx, node, index, parent) {
  return node.value;
}

/* Expose. */
var image_1 = image$1;

var defaultInlineMatcher = function defaultInlineMatcher(node, parent) {
  return parent.type === 'paragraph' && parent.children.length - 1 || parent.type === 'heading';
};

var defaultMacro$7 = function defaultMacro(node) {
  /*
  Note that MDAST `Image` nodes don't have a `width` property.
  You might still want to specify a width since \includegraphics handles it.
  */
  var width = node.width ? "[width=".concat(node.width, "]") : '';
  return "\\includegraphics".concat(width, "{").concat(node.url, "}");
};

var defaultInline = defaultMacro$7;

function image$1(ctx, node, _, parent) {
  var options = ctx.image || {};
  /*
  LaTeX cannot handle remote images, only local ones.
  \includegraphics crashes with filenames that contain more than one `.`,
  the workaround is \includegraphics{/path/to/{image.foo}.jpg}
  */

  if (node.url) {
    var pathParts = node.url.split('/');
    var filename = pathParts.pop();

    if (filename.includes('.')) {
      var filenameParts = filename.split('.');
      var extension = filenameParts.pop();
      var basename = filenameParts.join('.');
      var safeBasename = basename.includes('.') ? "{".concat(basename, "}.").concat(extension) : "".concat(basename, ".").concat(extension);
      pathParts.push(safeBasename);
      node.url = "".concat(pathParts.join('/'));
    }
  }

  var macro = options.image ? options.image : defaultMacro$7;
  var inlineMatcher = options.inlineMatcher ? options.inlineMatcher : defaultInlineMatcher;

  if (inlineMatcher(node, parent)) {
    macro = options.inlineImage ? options.inlineImage : defaultInline;
  }

  return macro(node);
}

var collapseWhiteSpace = collapse;

// `collapse(' \t\nbar \nbaz\t') // ' bar baz '`
function collapse(value) {
  return String(value).replace(/\s+/g, ' ')
}

/* Dependencies. */



/* Expose. */


var escaper = encode$1;
encode$1.escape = escape;
/* List of enforced escapes. */

var defaultEscapes = {
  '#': '\\#',
  '$': '\\$',
  '%': '\\%',
  '&': '\\&',
  '\\': '\\textbackslash{}',
  '^': '\\textasciicircum{}',
  '_': '\\_',
  '{': '\\{',
  '}': '\\}',
  '~': '\\textasciitilde{}'
};
/* Encode special characters in `value`. */

function encode$1(value) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var escapes = immutable(defaultEscapes, opts);
  var set = toExpression$1(Object.keys(escapes));
  value = value.replace(set, function (_char, pos, val) {
    return one(_char, val.charAt(pos + 1), escapes);
  });
  return value;
}
/* Encode `char` according to `options`. */


function one(_char2, next, escapes) {
  if (src(escapes, _char2)) {
    return escapes[_char2];
  }

  return _char2;
}
/* Create an expression for `characters`. */


function toExpression$1(characters) {
  var pattern = characters.map(escapeRegExp).join('|');
  return new RegExp("[".concat(pattern, "]"), 'g');
}

function escapeRegExp(str) {
  return str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
}

var inlinecode = function inlineCode(ctx, node) {
  var finalCode = escaper(collapseWhiteSpace(node.value));
  return "\\texttt{".concat(finalCode, "}");
};

/* Dependencies. */



/* Expose. */


var link_1 = link;

var defaultMacro$8 = function defaultMacro(displayText, url, title) {
  return "\\externalLink{".concat(displayText, "}{").concat(url, "}");
};
/* Stringify a link `node`.
*/


function link(ctx, node) {
  if (!node.url) return '';
  var config = ctx.link || {};
  var macro = src(config, 'macro') ? config.macro : defaultMacro$8;
  var prefix = src(config, 'prefix') ? config.prefix : '';
  var url = escaper(node.url.startsWith('/') ? prefix + node.url : node.url);
  return macro(all_1(ctx, node), url, node.title);
}

var linkReference_1 = linkReference;

var defaultMacro$9 = function defaultMacro(reference, inner) {
  return "\\hyperref[".concat(reference, "]{").concat(inner, "}");
};

function linkReference(ctx, node) {
  var macro = ctx.linkReference ? ctx.linkReference : defaultMacro$9;

  var innerText = all_1(ctx, node);

  if (!ctx.definitions(node.identifier)) return "[".concat(innerText, "]");
  return macro(node.identifier, innerText);
}

var list_1 = list$1;

var defaultMacro$a = function defaultMacro(innerText, isOrdered) {
  if (isOrdered) {
    return "\\begin{enumerate}\n".concat(innerText, "\\end{enumerate}\n");
  } else {
    return "\\begin{itemize}\n".concat(innerText, "\\end{itemize}\n");
  }
};

function list$1(ctx, node) {
  var rebberList = src(ctx, 'list') ? ctx.list : defaultMacro$a;

  var itemized = all_1(ctx, node);

  return rebberList(itemized, node.ordered);
}

var defaultMacro$b = function defaultMacro(innerText) {
  return "\\item\\relax ".concat(innerText, "\n");
};

var listItem_1$1 = listItem$1;

function listItem$1(ctx, node) {
  var rebberListItem = src(ctx, 'listItem') ? ctx.listItem : defaultMacro$b;
  return rebberListItem(all_1(ctx, node).trim());
}

/* Expose. */
var paragraph_1 = paragraph;
/* Stringify a paragraph `node`.
 */

function paragraph(ctx, node) {
  var contents = all_1(ctx, node);

  return "".concat(contents.trim(), "\n\n");
}

/* Dependencies. */

/* Expose. */


var root_1 = root;
/* Stringify a text `node`. */

function root(ctx, node, _, parent) {
  var children = node.children;
  if (!children) return '';
  var previous;
  return children.reduce(function (output, child, index) {
    if (previous) {
      if (child.type === previous.type && previous.type === 'list') {
        output += previous.ordered === child.ordered ? '\n\n\n' : '\n\n';
      } else if (previous.type === 'list' && child.type === 'code' && !child.lang) {
        output += '\n\n\n';
      } else {
        output += '\n\n';
      }
    }

    output += one_1(ctx, child, index, node);
    previous = child;
    return output;
  }, '');
}

// TODO: make it customizable

/* Expose. */
var strong_1 = strong;
/* Stringify a strong `node`. */

function strong(ctx, node, index, parent) {
  var contents = all_1(ctx, node);

  return "\\textbf{".concat(contents, "}");
}

var clone_1 = createCommonjsModule(function (module) {
var clone = (function() {

function _instanceof(obj, type) {
  return type != null && obj instanceof type;
}

var nativeMap;
try {
  nativeMap = Map;
} catch(_) {
  // maybe a reference error because no `Map`. Give it a dummy value that no
  // value will ever be an instanceof.
  nativeMap = function() {};
}

var nativeSet;
try {
  nativeSet = Set;
} catch(_) {
  nativeSet = function() {};
}

var nativePromise;
try {
  nativePromise = Promise;
} catch(_) {
  nativePromise = function() {};
}

/**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/
function clone(parent, circular, depth, prototype, includeNonEnumerable) {
  if (typeof circular === 'object') {
    depth = circular.depth;
    prototype = circular.prototype;
    includeNonEnumerable = circular.includeNonEnumerable;
    circular = circular.circular;
  }
  // maintain two arrays for circular references, where corresponding parents
  // and children have the same index
  var allParents = [];
  var allChildren = [];

  var useBuffer = typeof Buffer != 'undefined';

  if (typeof circular == 'undefined')
    circular = true;

  if (typeof depth == 'undefined')
    depth = Infinity;

  // recurse this function so we don't reset allParents and allChildren
  function _clone(parent, depth) {
    // cloning null always returns null
    if (parent === null)
      return null;

    if (depth === 0)
      return parent;

    var child;
    var proto;
    if (typeof parent != 'object') {
      return parent;
    }

    if (_instanceof(parent, nativeMap)) {
      child = new nativeMap();
    } else if (_instanceof(parent, nativeSet)) {
      child = new nativeSet();
    } else if (_instanceof(parent, nativePromise)) {
      child = new nativePromise(function (resolve, reject) {
        parent.then(function(value) {
          resolve(_clone(value, depth - 1));
        }, function(err) {
          reject(_clone(err, depth - 1));
        });
      });
    } else if (clone.__isArray(parent)) {
      child = [];
    } else if (clone.__isRegExp(parent)) {
      child = new RegExp(parent.source, __getRegExpFlags(parent));
      if (parent.lastIndex) child.lastIndex = parent.lastIndex;
    } else if (clone.__isDate(parent)) {
      child = new Date(parent.getTime());
    } else if (useBuffer && Buffer.isBuffer(parent)) {
      if (Buffer.allocUnsafe) {
        // Node.js >= 4.5.0
        child = Buffer.allocUnsafe(parent.length);
      } else {
        // Older Node.js versions
        child = new Buffer(parent.length);
      }
      parent.copy(child);
      return child;
    } else if (_instanceof(parent, Error)) {
      child = Object.create(parent);
    } else {
      if (typeof prototype == 'undefined') {
        proto = Object.getPrototypeOf(parent);
        child = Object.create(proto);
      }
      else {
        child = Object.create(prototype);
        proto = prototype;
      }
    }

    if (circular) {
      var index = allParents.indexOf(parent);

      if (index != -1) {
        return allChildren[index];
      }
      allParents.push(parent);
      allChildren.push(child);
    }

    if (_instanceof(parent, nativeMap)) {
      parent.forEach(function(value, key) {
        var keyChild = _clone(key, depth - 1);
        var valueChild = _clone(value, depth - 1);
        child.set(keyChild, valueChild);
      });
    }
    if (_instanceof(parent, nativeSet)) {
      parent.forEach(function(value) {
        var entryChild = _clone(value, depth - 1);
        child.add(entryChild);
      });
    }

    for (var i in parent) {
      var attrs;
      if (proto) {
        attrs = Object.getOwnPropertyDescriptor(proto, i);
      }

      if (attrs && attrs.set == null) {
        continue;
      }
      child[i] = _clone(parent[i], depth - 1);
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(parent);
      for (var i = 0; i < symbols.length; i++) {
        // Don't need to worry about cloning a symbol because it is a primitive,
        // like a number or string.
        var symbol = symbols[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
          continue;
        }
        child[symbol] = _clone(parent[symbol], depth - 1);
        if (!descriptor.enumerable) {
          Object.defineProperty(child, symbol, {
            enumerable: false
          });
        }
      }
    }

    if (includeNonEnumerable) {
      var allPropertyNames = Object.getOwnPropertyNames(parent);
      for (var i = 0; i < allPropertyNames.length; i++) {
        var propertyName = allPropertyNames[i];
        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
        if (descriptor && descriptor.enumerable) {
          continue;
        }
        child[propertyName] = _clone(parent[propertyName], depth - 1);
        Object.defineProperty(child, propertyName, {
          enumerable: false
        });
      }
    }

    return child;
  }

  return _clone(parent, depth);
}

/**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */
clone.clonePrototype = function clonePrototype(parent) {
  if (parent === null)
    return null;

  var c = function () {};
  c.prototype = parent;
  return new c();
};

// private utility functions

function __objToStr(o) {
  return Object.prototype.toString.call(o);
}
clone.__objToStr = __objToStr;

function __isDate(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Date]';
}
clone.__isDate = __isDate;

function __isArray(o) {
  return typeof o === 'object' && __objToStr(o) === '[object Array]';
}
clone.__isArray = __isArray;

function __isRegExp(o) {
  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
}
clone.__isRegExp = __isRegExp;

function __getRegExpFlags(re) {
  var flags = '';
  if (re.global) flags += 'g';
  if (re.ignoreCase) flags += 'i';
  if (re.multiline) flags += 'm';
  return flags;
}
clone.__getRegExpFlags = __getRegExpFlags;

return clone;
})();

if ( module.exports) {
  module.exports = clone;
}
});

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }




/* Expose. */


var table_1 = table;

var defaultHeaderParse = function defaultHeaderParse(rows) {
  var columns = Math.max.apply(Math, _toConsumableArray(rows.map(function (l) {
    return l.split('&').length;
  })));
  var colHeader = "|".concat('X[-1]|'.repeat(columns));
  return colHeader;
};

var defaultMacro$c = function defaultMacro(ctx, node) {
  var headerParse = ctx.headerParse ? ctx.headerParse : defaultHeaderParse;
  var parsed = node.children.map(function (n, index) {
    return one_1(ctx, n, index, node);
  });
  var inner = parsed.join('');
  var colHeader = headerParse(parsed);
  var spreadCell = typeof ctx.spreadCell === 'string' ? ctx.spreadCell : ' spread 0pt ';
  var caption = node.caption ? "\n\\captionof{table}{".concat(node.caption, "}\n") : '';
  return "\\begin{longtabu}".concat(spreadCell, "{").concat(colHeader, "} \\hline\n").concat(inner, "\\end{longtabu}").concat(caption, "\n");
};
/* Stringify a table `node`. */


function table(ctx, node) {
  var macro = ctx.table || defaultMacro$c;
  var overriddenCtx = clone_1(ctx);
  overriddenCtx.image = overriddenCtx.image ? overriddenCtx.image : {};

  overriddenCtx.image.inlineMatcher = function () {
    return true;
  };

  return macro(overriddenCtx, node);
}

/* Expose. */
var tableCell_1 = tableCell;

var defaultMacro$d = function defaultMacro(ctx, node) {
  return all_1(ctx, node);
};
/* Stringify a tableCell `node`. */


function tableCell(ctx, node) {
  var macro = ctx.tableCell || defaultMacro$d;
  return macro(ctx, node);
}

/* Expose. */


var tableRow_1 = tableRow;

var defaultMacro$e = function defaultMacro(ctx, node) {
  var parsed = [];
  node.children.map(function (n, index) {
    return parsed.push(one_1(ctx, n, index, node));
  });
  var line = parsed.join(' & ');
  return "".concat(line, " \\\\ \\hline\n");
};

var defaultFirstLineRowFont = "\\rowfont[c]{\\bfseries}";
var defaultOtherLineRowFont = "\\rowfont[l]{}";
/* Stringify a tableRow `node`. */

function tableRow(ctx, node, index) {
  var macro = ctx.tableRow || defaultMacro$e;
  var firstLineRowFont = ctx.firstLineRowFont || defaultFirstLineRowFont;
  var otherLineRowFont = ctx.otherLineRowFont || defaultOtherLineRowFont;

  if (index === 0) {
    return "".concat(firstLineRowFont, "\n").concat(macro(ctx, node));
  } else if (index === 1) {
    return "".concat(otherLineRowFont, "\n").concat(macro(ctx, node));
  } else {
    return macro(ctx, node);
  }
}

var trimLines_1 = trimLines;

var ws = /[ \t]*\n+[ \t]*/g;
var newline = '\n';

function trimLines(value) {
  return String(value).replace(ws, newline)
}

/* Dependencies. */



/* Stringify a text `node`. */


var text$5 = function text(ctx, node, index, parent) {
  var value = trimLines_1(node.value);
  return isLiteral(parent) ? value : escaper(value, ctx.escapes);
}; // TODO: `tagName` isn't part of MDAST!

/* Check if content of `node` should not be escaped. */


function isLiteral(node) {
  return node && (node.tagName === 'script' || node.tagName === 'style');
}

/* Expose. */
var thematicBreak_1 = thematicBreak$1;

var defaultMacro$f = function defaultMacro() {
  return '\\horizontalLine\n\n';
};
/* Stringify a delete `node`. */


function thematicBreak$1(ctx, node, index, parent) {
  var macro = ctx.thematicBreak || defaultMacro$f;
  return macro(node);
}

/* Dependencies. */



/* Expose. */


var one_1 = one$1;
/* Handlers. */

var handlers$4 = {};
handlers$4.blockquote = blockquote_1;
handlers$4["break"] = _break;
handlers$4.code = code_1;
handlers$4.definition = definition_1;
handlers$4["delete"] = _delete;
handlers$4.emphasis = emphasis_1;
handlers$4.footnote = footnote;
handlers$4.footnoteDefinition = footnoteDefinition;
handlers$4.footnoteReference = footnoteReference;
handlers$4.heading = heading_1;
handlers$4.html = html_1;
handlers$4.image = image_1;
handlers$4.inlineCode = inlinecode;
handlers$4.link = link_1;
handlers$4.linkReference = linkReference_1;
handlers$4.list = list_1;
handlers$4.listItem = listItem_1$1;
handlers$4.paragraph = paragraph_1;
handlers$4.root = root_1;
handlers$4.strong = strong_1;
handlers$4.table = table_1;
handlers$4.tableCell = tableCell_1;
handlers$4.tableRow = tableRow_1;
handlers$4.text = text$5;
handlers$4.thematicBreak = thematicBreak_1;
/* Stringify `node`. */

function one$1(ctx, node, index, parent) {
  var handlersOverrides = src(ctx, 'overrides') ? ctx.overrides : {};
  var h = immutable(handlers$4, handlersOverrides);
  var type = node && node.type;

  if (!type) {
    throw new Error("Received node '".concat(node, "' does not have a type."));
  }

  if (!src(h, type) || typeof h[type] !== 'function') {
    throw new Error("Cannot compile unknown node `".concat(type, "`"));
  }

  return h[type](ctx, node, index, parent);
}

var headingVisitor = plugin;
/*
LaTeX requires special handlings of footnotes placed in headings such as \section{}
We therefore mark each footnote placed in heading for later handling.
*/

var nodeTypes = ['footnote', 'footnoteDefinition'];

function plugin() {
  return function headingVisitor(node, index, parent) {
    if (nodeTypes.includes(node.type) && node.inHeading !== true) {
      node.inHeading = true;
    }

    if (node.children) {
      node.children.forEach(function (n, i) {
        return headingVisitor(n);
      });
    }
  };
}

var referenceVisitors = function () {
  var state = {};
  return {
    definitionVisitor: function definitionVisitor() {
      return function (node, index, parent) {
        var identifier = node.identifier;

        while (Object.keys(state).includes(identifier)) {
          identifier += '-1';
        }

        state[identifier] = node.url;
        node.identifier = identifier; // force to remove twice so that latex compiles

        if (node.referenceType === 'shortcut') {
          // remark for abbr
          parent.children.splice(index, 1);
        }
      };
    },
    imageReferenceVisitor: function imageReferenceVisitor() {
      return function (node) {
        node.type = 'image';
        node.title = '';
        node.url = state[node.identifier];
      };
    },
    addIdentifier: function addIdentifier(identifier, content) {
      state[identifier] = content;
    }
  };
};

var preprocessors = preprocess$1;

function preprocess$1(ctx, tree) {
  var _referenceVisitors = referenceVisitors(),
      definitionVisitor = _referenceVisitors.definitionVisitor,
      imageReferenceVisitor = _referenceVisitors.imageReferenceVisitor;

  var defaultVisitors = {
    definition: [definitionVisitor],
    imageReference: [imageReferenceVisitor],
    heading: [headingVisitor]
  };
  var visitors = immutable(defaultVisitors, ctx.preprocessors || {});
  Object.keys(visitors).forEach(function (nodeType) {
    if (Array.isArray(visitors[nodeType])) {
      visitors[nodeType].forEach(function (visitor) {
        return unistUtilVisit(tree, nodeType, visitor(ctx, tree));
      });
    } else {
      unistUtilVisit(tree, nodeType, visitors[nodeType](ctx, tree));
    }
  });
}

/* Dependencies. */







/* Expose. */


var dist$1 = stringify$1;
var toLaTeX_1 = toLaTeX;

function toLaTeX(tree) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  /* Stringify the given MDAST node. */
  preprocessors(options, tree); // resolve definition after preprocess because this step can create new identifiers

  options.definitions = mdastUtilDefinitions(tree, options);
  return one_1(options, tree, undefined, undefined);
}
/* Compile MDAST tree using toLaTeX */


function stringify$1(config) {
  var settings = immutable(config, this.data('settings'));
  this.Compiler = compiler;

  function compiler(tree) {
    return toLaTeX(tree, settings, tree);
  }
}
dist$1.toLaTeX = toLaTeX_1;

function isHeading(node) {
    return node.type === 'heading';
}
function assertHeading(node) {
    if (!isHeading(node))
        throwWrongNode('heading', node);
}
function isTextDirective(node) {
    return node.type === 'textDirective';
}
function isLabelDirective(node) {
    return isTextDirective(node) && node.name === 'label';
}
function assertLabelDirective(node) {
    if (!isLabelDirective(node))
        throwWrongNode('label', node);
}
function isEmbedDirective(node) {
    return isTextDirective(node) && node.name === 'embed';
}
function assertEmbedDirective(node) {
    if (!isEmbedDirective(node))
        throwWrongNode('embed', node);
}
function isLabeledLink(node) {
    return node.type === 'wikiLink';
}
function assertLabeledLink(node) {
    if (!isLabeledLink(node))
        throwWrongNode('wikiLink', node);
}
function isBlockquote(node) {
    return node.type === 'blockquote';
}
function assertBlockquote(node) {
    if (!isBlockquote(node))
        throwWrongNode('blockquote', node);
}
function isInlineMath(node) {
    return node.type === 'inlineMath';
}
function assertInlineMath(node) {
    if (!isInlineMath(node))
        throwWrongNode('inlineMath', node);
}
function isMath(node) {
    return node.type === 'math';
}
function assertMath(node) {
    if (!isMath(node))
        throwWrongNode('math', node);
}
function throwWrongNode(expected, node) {
    throw new Error("Expected node of type " + expected + " but received node " + JSON.stringify(node));
}

function preprocess$2(data) {
    return data
        .replaceAll(/\$\$(.+)$/gm, '$$$$\n$1')
        .replaceAll(/^(.+)\$\$/gm, '$1\n$$$$')
        .replaceAll(/!\[\[([^\]]+)]]/gm, ':embed{target="$1"}')
        .replaceAll(/^\^([^ \t]+)[ \t\n]+$/gm, ':label{text=$1}');
}

function toVFile(file) {
    return __awaiter(this, void 0, void 0, function () {
        var data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, file.vault.adapter.exists(file.path)];
                case 1:
                    if (!(_a.sent())) {
                        throw new Error(file.basename + " does not exist");
                    }
                    return [4 /*yield*/, file.vault.cachedRead(file)];
                case 2:
                    data = _a.sent();
                    return [2 /*return*/, makeVFile(data, file.path)];
            }
        });
    });
}
function makeVFile(contents, path, subpath) {
    var options = {
        contents: preprocess$2(contents),
        path: path,
        data: { embedded: new Array() },
        subpath: subpath,
    };
    return vfile(options);
}
function toNamedVFile(vfile) {
    if (vfile.path === undefined)
        throw new Error('Processed file must have a name');
    return vfile;
}

var ImagePathSettings;
(function (ImagePathSettings) {
    ImagePathSettings[ImagePathSettings["RelativeToRoot"] = 0] = "RelativeToRoot";
    ImagePathSettings[ImagePathSettings["FullPath"] = 1] = "FullPath";
    ImagePathSettings[ImagePathSettings["BaseName"] = 2] = "BaseName";
    ImagePathSettings[ImagePathSettings["RelativeToExport"] = 3] = "RelativeToExport";
})(ImagePathSettings || (ImagePathSettings = {}));
var ImagePathSettingDescriptions = [
    'Relative to vault root',
    'Absolute path',
    'File base name',
    'Relative to export directory',
];
var ExportToTexSettings = /** @class */ (function () {
    function ExportToTexSettings() {
        this.refCommand = 'cref';
        this.defaultToEquation = false;
        this.additionalMathEnvironments = [];
        this.generateLabels = true;
        this.compressNewlines = false;
        this.imagePathSettings = ImagePathSettings.RelativeToRoot;
        this.defaultExportDirectory = '';
    }
    return ExportToTexSettings;
}());
function ensureSettings(partial) {
    var _a, _b, _c, _d, _e, _f, _g;
    var settings = new ExportToTexSettings();
    settings.refCommand = (_a = partial.refCommand) !== null && _a !== void 0 ? _a : settings.refCommand;
    settings.additionalMathEnvironments = (_b = partial.additionalMathEnvironments) !== null && _b !== void 0 ? _b : settings.additionalMathEnvironments;
    settings.generateLabels = (_c = partial.generateLabels) !== null && _c !== void 0 ? _c : settings.generateLabels;
    settings.defaultToEquation = (_d = partial.defaultToEquation) !== null && _d !== void 0 ? _d : settings.defaultToEquation;
    settings.compressNewlines = (_e = partial.compressNewlines) !== null && _e !== void 0 ? _e : settings.compressNewlines;
    if (partial.imagePathSettings === undefined &&
        partial.fullImagePath !== undefined) {
        settings.imagePathSettings = partial.fullImagePath
            ? ImagePathSettings.FullPath
            : ImagePathSettings.RelativeToRoot;
    }
    else {
        settings.imagePathSettings = (_f = partial.imagePathSettings) !== null && _f !== void 0 ? _f : settings.imagePathSettings;
    }
    settings.defaultExportDirectory = (_g = partial.defaultExportDirectory) !== null && _g !== void 0 ? _g : settings.defaultExportDirectory;
    return settings;
}

/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

var normalizePath = function(path, stripTrailing) {
  if (typeof path !== 'string') {
    throw new TypeError('expected path to be a string');
  }

  if (path === '\\' || path === '/') return '/';

  var len = path.length;
  if (len <= 1) return path;

  // ensure that win32 namespaces has two leading slashes, so that the path is
  // handled properly by the win32 version of path.parse() after being normalized
  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces
  var prefix = '';
  if (len > 4 && path[3] === '\\') {
    var ch = path[2];
    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\') {
      path = path.slice(2);
      prefix = '//';
    }
  }

  var segs = path.split(/[/\\]+/);
  if (stripTrailing !== false && segs[segs.length - 1] === '') {
    segs.pop();
  }
  return prefix + segs.join('/');
};

function embed() {
    var _this = this;
    return function (tree, file) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, embedTransformer(this, tree, file)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
}
function embedTransformer(processor, tree, file) {
    return __awaiter(this, void 0, void 0, function () {
        var promises;
        return __generator(this, function (_a) {
            promises = [];
            unistUtilVisit(tree, { type: 'textDirective', name: 'embed' }, function (node, index, parent) {
                assertEmbedDirective(node);
                if (parent === undefined)
                    throw new Error('found an embed without a parent');
                var resolver = new EmbedResolver(processor, file, node);
                promises.push(resolver
                    .resolve()
                    .then(function (newNode) {
                    parent.children[index] = newNode;
                })
                    .catch(function (reason) {
                    file.message(reason, node, 'embed:error');
                    parent.children[index] = resolver.failedEmbed();
                }));
            });
            return [2 /*return*/, Promise.allSettled(promises).then(function () {
                    file.info('All embeds resolved', tree);
                })];
        });
    });
}
var EmbedResolver = /** @class */ (function () {
    function EmbedResolver(processor, parentFile, node) {
        this.processor = processor;
        this.parentFile = parentFile;
        this.node = node;
    }
    EmbedResolver.prototype.failedEmbed = function () {
        var embedTarget = this.node.attributes.target;
        this.parentFile.message("Failed to resolve embed " + embedTarget, this.node);
        return { type: 'inlineCode', value: "Missing " + embedTarget };
    };
    EmbedResolver.prototype.resolve = function () {
        return __awaiter(this, void 0, void 0, function () {
            var embedTarget, metadata, _a, file, result, subpath, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        embedTarget = this.node.attributes.target;
                        this.parentFile.info("Resolving embed \"" + embedTarget + "\"", this.node);
                        metadata = this.processor.data('metadata');
                        if (!(metadata instanceof obsidian.MetadataCache)) {
                            throw Error('metadata must be passed to the processor in the form of an obsidian MetadataCache');
                        }
                        _a = this.getTarget(metadata), file = _a.file, result = _a.result, subpath = _a.subpath;
                        if (file === undefined) {
                            return [2 /*return*/, this.failedEmbed()];
                        }
                        _b = file.extension;
                        switch (_b) {
                            case 'md': return [3 /*break*/, 1];
                        }
                        return [3 /*break*/, 4];
                    case 1:
                        if (result === null) {
                            return [2 /*return*/, this.failedEmbed()];
                        }
                        this.parentFile.info("Reading embedded file " + file.basename, this.node);
                        return [4 /*yield*/, file.vault.adapter.exists(file.path)];
                    case 2:
                        if (!(_c.sent())) {
                            this.parentFile.message(file.basename + " does not exists", this.node);
                            return [2 /*return*/, this.failedEmbed()];
                        }
                        return [4 /*yield*/, this.processMarkdownEmbed(embedTarget, subpath, file, result)];
                    case 3: return [2 /*return*/, _c.sent()];
                    case 4: return [2 /*return*/, this.processImageEmbed(embedTarget, subpath, file)];
                }
            });
        });
    };
    EmbedResolver.prototype.processMarkdownEmbed = function (embedTarget, subpath, file, result) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var fileData, data, embedFile, node, processed;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, file.vault.cachedRead(file)];
                    case 1:
                        fileData = _c.sent();
                        data = fileData.slice(result.start.offset, (_a = result.end) === null || _a === void 0 ? void 0 : _a.offset);
                        this.parentFile.info("Parsing \"" + embedTarget + "\"", this.node);
                        embedFile = makeVFile(data, file.path, subpath);
                        node = this.processor.parse(embedFile);
                        return [4 /*yield*/, this.processor.run(node, embedFile)];
                    case 2:
                        processed = _c.sent();
                        (_b = this.parentFile.messages).push.apply(_b, embedFile.messages);
                        return [2 /*return*/, processed];
                }
            });
        });
    };
    EmbedResolver.prototype.processImageEmbed = function (embedTarget, subpath, file) {
        this.parentFile.info("Processing image \"" + embedTarget + "\"", this.node);
        var settings = this.processor.data('settings');
        var imagePath = this.getImagePath(file, settings);
        return {
            type: 'image',
            url: imagePath,
        };
    };
    EmbedResolver.prototype.getTarget = function (metadata) {
        var embedTarget = this.node.attributes.target;
        var _a = obsidian.parseLinktext(embedTarget), path = _a.path, subpath = _a.subpath;
        if (this.parentFile.path === undefined) {
            this.parentFile.message("cannot resolve target of link " + embedTarget + " as the path of the embedding file is not available", this.node);
            return EmbedResolver.FAILED_TARGET;
        }
        var target = metadata.getFirstLinkpathDest(path, this.parentFile.path);
        if (target === null) {
            this.parentFile.message("cannot resolve target of link " + embedTarget, this.node);
            return EmbedResolver.FAILED_TARGET;
        }
        var cache = metadata.getFileCache(target);
        if (cache === null) {
            this.parentFile.message("cannot access file cache of " + embedTarget, this.node);
            return EmbedResolver.FAILED_TARGET;
        }
        return {
            file: target,
            subpath: subpath,
            result: obsidian.resolveSubpath(cache, subpath.trimEnd()),
        };
    };
    EmbedResolver.prototype.getImagePath = function (file, settings) {
        var adapter = file.vault.adapter;
        var absolutePath = adapter.getFullPath(file.path);
        switch (settings.exportToTex.imagePathSettings) {
            case ImagePathSettings.RelativeToRoot:
                return normalizePath(file.path);
            case ImagePathSettings.FullPath:
                return normalizePath(absolutePath);
            case ImagePathSettings.BaseName:
                return file.basename;
            case ImagePathSettings.RelativeToExport: {
                var exportPath = this.processor.data('exportPath');
                var exportFolder = exportPath === null || exportPath === undefined
                    ? settings.exportToTex.defaultExportDirectory
                    : path$1.dirname(exportPath);
                return normalizePath(path$1.relative(exportFolder, absolutePath));
            }
        }
    };
    EmbedResolver.FAILED_TARGET = {
        subpath: '',
        result: null,
    };
    return EmbedResolver;
}());

var emojiRegex = function() {
	return /[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2694\u2696\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD79\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED0\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3]|\uD83E[\uDD10-\uDD18\uDD80-\uDD84\uDDC0]|\uD83C\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uD83C\uDDFE\uD83C[\uDDEA\uDDF9]|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDFC\uD83C[\uDDEB\uDDF8]|\uD83C\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uD83C\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF8\uDDFE\uDDFF]|\uD83C\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uD83C\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uD83C\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uD83C\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uD83C\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uD83C\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uD83C\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uD83C\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uD83C\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uD83C\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uD83C\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uD83C\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uD83C\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uD83C\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uD83C\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uD83C\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|[#\*0-9]\u20E3/g;
};

var githubSlugger = BananaSlug;

var own$8 = Object.hasOwnProperty;
var whitespace = /\s/g;
var specials = /[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~’]/g;

function BananaSlug () {
  var self = this;

  if (!(self instanceof BananaSlug)) return new BananaSlug()

  self.reset();
}

/**
 * Generate a unique slug.
 * @param  {string} value String of text to slugify
 * @param  {boolean} [false] Keep the current case, otherwise make all lowercase
 * @return {string}       A unique slug string
 */
BananaSlug.prototype.slug = function (value, maintainCase) {
  var self = this;
  var slug = slugger(value, maintainCase === true);
  var originalSlug = slug;

  while (own$8.call(self.occurrences, slug)) {
    self.occurrences[originalSlug]++;
    slug = originalSlug + '-' + self.occurrences[originalSlug];
  }

  self.occurrences[slug] = 0;

  return slug
};

/**
 * Reset - Forget all previous slugs
 * @return void
 */
BananaSlug.prototype.reset = function () {
  this.occurrences = Object.create(null);
};

function slugger (string, maintainCase) {
  if (typeof string !== 'string') return ''
  if (!maintainCase) string = string.toLowerCase();

  return string.trim()
    .replace(specials, '')
    .replace(emojiRegex(), '')
    .replace(whitespace, '-')
}

BananaSlug.slug = slugger;

function labels() {
    var slugger = new githubSlugger();
    var labels = new Map();
    return function (tree, file) {
        addLabel(slugger, labels, tree, file);
        targetLabels(labels, tree, file);
    };
}
function addLabel(slugger, labelsMap, tree, file) {
    unistUtilVisit(tree, ['heading', 'textDirective'], function (node) {
        if (!isHeading(node) && !isLabelDirective(node)) {
            file.message("node of type " + node.type + " cannot be labeled");
            return;
        }
        var namedFile = toNamedVFile(file);
        var _a = getLabel(node), subpath = _a.subpath, type = _a.type;
        var key = {
            path: namedFile.stem,
            subpath: subpath,
            type: type,
        };
        if (node.data === undefined) {
            node.data = {};
        }
        if (node.data.label === undefined) {
            node.data.label = slugger.slug(subpath);
        }
        labelsMap.set(keyToString(key), node.data.label);
    });
}
function getLabel(node) {
    if (isHeading(node)) {
        return {
            subpath: "#" + node.children.map(function (c) { return c.value; }).join(''),
            type: 'heading',
        };
    }
    else if (isLabelDirective(node)) {
        return { subpath: "#^" + node.attributes.text, type: 'block' };
    }
    throw new Error('Tried to generate label for unexpected type: ' + node.type);
}
function targetLabels(labelsMap, tree, file) {
    unistUtilVisit(tree, 'wikiLink', function (node) {
        assertLabeledLink(node);
        if (node.data.label !== undefined) {
            return;
        }
        if (!node.value.contains('#')) {
            return;
        }
        var namedFile = toNamedVFile(file);
        var _a = obsidian.parseLinktext(node.value), path = _a.path, subpath = _a.subpath;
        var key = {
            type: node.value.contains('^') ? 'block' : 'heading',
            path: path.length > 0 ? path : namedFile.stem,
            subpath: subpath,
        };
        var label = labelsMap.get(keyToString(key));
        if (label !== null) {
            node.data.label = label;
            node.data.targetType = key.type;
        }
    });
}
function keyToString(key) {
    return key.type + ":" + key.path + ":" + key.subpath;
}

var mathEnvironments = [
    'equation',
    'multline',
    'gather',
    'align',
    'flalign',
    'split',
    'alignat',
];
var beginRegex = /^\s*\\begin{\s*(\w+)\*?\s*}/m;
function inlineMath$1(_ctx, node) {
    assertInlineMath(node);
    return "$" + node.value + "$";
}
function displayMath(ctx, node) {
    assertMath(node);
    var value = node.value;
    var match = beginRegex.exec(value);
    var _a = ctx.exportToTex, additionalMathEnvironments = _a.additionalMathEnvironments, defaultToEquation = _a.defaultToEquation;
    if (match !== null &&
        (mathEnvironments.contains(match[1]) ||
            additionalMathEnvironments.contains(match[1]))) {
        return value;
    }
    if (defaultToEquation) {
        return "\\begin{equation}\n" + value + "\n\\end{equation}";
    }
    return "\\[\n" + value + "\n\\]";
}

function isTexContext(ctx) {
    return 'exportToTex' in ctx && ctx.exportToTex instanceof ExportToTexSettings;
}
function getContext(ctx) {
    if (!isTexContext(ctx)) {
        throw new Error('Settings missing for export to tex');
    }
    return ctx;
}

var consume = function (_ctx, _node) { return ''; };
var yaml = consume;
var rebberOverrides = {
    wikiLink: ensureContext(wikiLink),
    inlineMath: ensureContext(inlineMath$1),
    textDirective: ensureContext(textDirective),
    yaml: yaml,
    math: ensureContext(displayMath),
    heading: ensureContext(heading$1),
    blockquote: ensureContext(blockquote$1),
};
function ensureContext(fn) {
    return function (ctx, node) {
        return fn(getContext(ctx), node);
    };
}
function textDirective(ctx, node) {
    var _a, _b;
    assertLabelDirective(node);
    return getLabel$1(ctx, 'block', (_b = (_a = node.data) === null || _a === void 0 ? void 0 : _a.label) !== null && _b !== void 0 ? _b : '');
}
var keyPrefixes = {
    heading: 'sec',
    block: 'block',
};
function getPrefix(targetType) {
    if (targetType !== undefined && targetType in keyPrefixes) {
        return keyPrefixes[targetType] + ':';
    }
    return '';
}
function getRef(ctx, targetType, label) {
    var _a = ctx.exportToTex, refCommand = _a.refCommand, generateLabels = _a.generateLabels;
    if (!generateLabels)
        return '';
    return "\\" + refCommand + "{" + getPrefix(targetType) + label + "}";
}
function getLabel$1(ctx, targetType, label) {
    var generateLabels = ctx.exportToTex.generateLabels;
    if (!generateLabels)
        return '';
    return "\\label{" + getPrefix(targetType) + label + "}";
}
function wikiLink(ctx, node) {
    assertLabeledLink(node);
    var _a = node.data, alias = _a.alias, label = _a.label, targetType = _a.targetType;
    if (!node.value.contains('#') || label === undefined) {
        return alias !== null && alias !== void 0 ? alias : node.value;
    }
    return "" + (alias !== null && alias !== void 0 ? alias : '') + getRef(ctx, targetType, label);
}
var headingNames = [
    'section',
    'subsection',
    'subsubsection',
    'paragraph',
    'subparagraph',
];
function heading$1(ctx, node) {
    var _a;
    assertHeading(node);
    if (node.depth > 5) {
        return '';
    }
    var cmd = headingNames[node.depth - 1];
    var text = node.children
        .map(function (content) { return dist$1.toLaTeX(content, ctx); })
        .join('');
    var label = (_a = node.data) === null || _a === void 0 ? void 0 : _a.label;
    return "\\" + cmd + "{" + text + "}" + getLabel$1(ctx, 'heading', label);
}
function blockquote$1(ctx, node) {
    assertBlockquote(node);
    var text = node.children
        .map(function (content) { return dist$1.toLaTeX(content, ctx); })
        .join('');
    return "\\begin{quotation}\n" + text + "\\end{quotation}\n\n";
}

var markdownToTex = unified_1()
    .use(remarkParse)
    .use(remarkGfm)
    .use(remarkMath)
    .use(remarkFrontmatter)
    .use(remarkDirective)
    .use(index_cjs$2.wikiLinkPlugin, {
    aliasDivider: '|',
})
    .use(embed)
    .use(labels)
    .use(dist$1, {
    overrides: rebberOverrides,
})
    .freeze();

var hasFlag = (flag, argv) => {
	argv = argv || process.argv;
	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
	const pos = argv.indexOf(prefix + flag);
	const terminatorPos = argv.indexOf('--');
	return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
};

const {env} = process;

let forceColor;
if (hasFlag('no-color') ||
	hasFlag('no-colors') ||
	hasFlag('color=false') ||
	hasFlag('color=never')) {
	forceColor = 0;
} else if (hasFlag('color') ||
	hasFlag('colors') ||
	hasFlag('color=true') ||
	hasFlag('color=always')) {
	forceColor = 1;
}
if ('FORCE_COLOR' in env) {
	if (env.FORCE_COLOR === true || env.FORCE_COLOR === 'true') {
		forceColor = 1;
	} else if (env.FORCE_COLOR === false || env.FORCE_COLOR === 'false') {
		forceColor = 0;
	} else {
		forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
	}
}

function translateLevel(level) {
	if (level === 0) {
		return false;
	}

	return {
		level,
		hasBasic: true,
		has256: level >= 2,
		has16m: level >= 3
	};
}

function supportsColor(stream) {
	if (forceColor === 0) {
		return 0;
	}

	if (hasFlag('color=16m') ||
		hasFlag('color=full') ||
		hasFlag('color=truecolor')) {
		return 3;
	}

	if (hasFlag('color=256')) {
		return 2;
	}

	if (stream && !stream.isTTY && forceColor === undefined) {
		return 0;
	}

	const min = forceColor || 0;

	if (env.TERM === 'dumb') {
		return min;
	}

	if (process.platform === 'win32') {
		// Node.js 7.5.0 is the first version of Node.js to include a patch to
		// libuv that enables 256 color output on Windows. Anything earlier and it
		// won't work. However, here we target Node.js 8 at minimum as it is an LTS
		// release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
		// release that supports 256 colors. Windows 10 build 14931 is the first release
		// that supports 16m/TrueColor.
		const osRelease = os__default['default'].release().split('.');
		if (
			Number(process.versions.node.split('.')[0]) >= 8 &&
			Number(osRelease[0]) >= 10 &&
			Number(osRelease[2]) >= 10586
		) {
			return Number(osRelease[2]) >= 14931 ? 3 : 2;
		}

		return 1;
	}

	if ('CI' in env) {
		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
			return 1;
		}

		return min;
	}

	if ('TEAMCITY_VERSION' in env) {
		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
	}

	if (env.COLORTERM === 'truecolor') {
		return 3;
	}

	if ('TERM_PROGRAM' in env) {
		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

		switch (env.TERM_PROGRAM) {
			case 'iTerm.app':
				return version >= 3 ? 3 : 2;
			case 'Apple_Terminal':
				return 2;
			// No default
		}
	}

	if (/-256(color)?$/i.test(env.TERM)) {
		return 2;
	}

	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
		return 1;
	}

	if ('COLORTERM' in env) {
		return 1;
	}

	return min;
}

function getSupportLevel(stream) {
	const level = supportsColor(stream);
	return translateLevel(level);
}

var supportsColor_1 = {
	supportsColor: getSupportLevel,
	stdout: getSupportLevel(process.stdout),
	stderr: getSupportLevel(process.stderr)
};

var ansiRegex = ({onlyFirst = false} = {}) => {
	const pattern = [
		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
	].join('|');

	return new RegExp(pattern, onlyFirst ? undefined : 'g');
};

var stripAnsi = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;

/* eslint-disable yoda */

const isFullwidthCodePoint = codePoint => {
	if (Number.isNaN(codePoint)) {
		return false;
	}

	// Code points are derived from:
	// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
	if (
		codePoint >= 0x1100 && (
			codePoint <= 0x115F || // Hangul Jamo
			codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET
			codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET
			// CJK Radicals Supplement .. Enclosed CJK Letters and Months
			(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||
			// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
			(0x3250 <= codePoint && codePoint <= 0x4DBF) ||
			// CJK Unified Ideographs .. Yi Radicals
			(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||
			// Hangul Jamo Extended-A
			(0xA960 <= codePoint && codePoint <= 0xA97C) ||
			// Hangul Syllables
			(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||
			// CJK Compatibility Ideographs
			(0xF900 <= codePoint && codePoint <= 0xFAFF) ||
			// Vertical Forms
			(0xFE10 <= codePoint && codePoint <= 0xFE19) ||
			// CJK Compatibility Forms .. Small Form Variants
			(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||
			// Halfwidth and Fullwidth Forms
			(0xFF01 <= codePoint && codePoint <= 0xFF60) ||
			(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||
			// Kana Supplement
			(0x1B000 <= codePoint && codePoint <= 0x1B001) ||
			// Enclosed Ideographic Supplement
			(0x1F200 <= codePoint && codePoint <= 0x1F251) ||
			// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
			(0x20000 <= codePoint && codePoint <= 0x3FFFD)
		)
	) {
		return true;
	}

	return false;
};

var isFullwidthCodePoint_1 = isFullwidthCodePoint;
var _default = isFullwidthCodePoint;
isFullwidthCodePoint_1.default = _default;

var emojiRegex$1 = function () {
  // https://mths.be/emoji
  return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
};

const stringWidth = string => {
	string = string.replace(emojiRegex$1(), '  ');

	if (typeof string !== 'string' || string.length === 0) {
		return 0;
	}

	string = stripAnsi(string);

	let width = 0;

	for (let i = 0; i < string.length; i++) {
		const code = string.codePointAt(i);

		// Ignore control characters
		if (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {
			continue;
		}

		// Ignore combining characters
		if (code >= 0x300 && code <= 0x36F) {
			continue;
		}

		// Surrogates
		if (code > 0xFFFF) {
			i++;
		}

		width += isFullwidthCodePoint_1(code) ? 2 : 1;
	}

	return width;
};

var stringWidth_1 = stringWidth;
// TODO: remove this in the next major version
var _default$1 = stringWidth;
stringWidth_1.default = _default$1;

var vfileStatistics = statistics;

// Get stats for a file, list of files, or list of messages.
function statistics(files) {
  var result = {true: 0, false: 0, null: 0};

  count(files);

  return {
    fatal: result.true,
    nonfatal: result.false + result.null,
    warn: result.false,
    info: result.null,
    total: result.true + result.false + result.null
  }

  function count(value) {
    if (value) {
      if (value[0] && value[0].messages) {
        // Multiple vfiles
        countInAll(value);
      } else {
        // One vfile / messages
        countAll(value.messages || value);
      }
    }
  }

  function countInAll(files) {
    var length = files.length;
    var index = -1;

    while (++index < length) {
      count(files[index].messages);
    }
  }

  function countAll(messages) {
    var length = messages.length;
    var index = -1;
    var fatal;

    while (++index < length) {
      fatal = messages[index].fatal;
      result[fatal === null || fatal === undefined ? null : Boolean(fatal)]++;
    }
  }
}

var vfileSort = sort;

var severities = {
  true: 2,
  false: 1,
  null: 0,
  undefined: 0
};

function sort(file) {
  file.messages.sort(comparator);
  return file
}

function comparator(a, b) {
  return (
    check$1(a, b, 'line') ||
    check$1(a, b, 'column') ||
    severities[b.fatal] - severities[a.fatal] ||
    compare(a, b, 'source') ||
    compare(a, b, 'ruleId') ||
    compare(a, b, 'reason') ||
    0
  )
}

function check$1(a, b, property) {
  return (a[property] || 0) - (b[property] || 0)
}

function compare(a, b, property) {
  return (a[property] || '').localeCompare(b[property] || '')
}

var supported = supportsColor_1.stderr.hasBasic;






var vfileReporter = reporter;

var push = [].push;

// `log-symbols` without chalk:
/* istanbul ignore next - Windows. */
var chars =
  process.platform === 'win32'
    ? {error: '×', warning: '‼'}
    : {error: '✖', warning: '⚠'};

var labels$1 = {
  true: 'error',
  false: 'warning',
  null: 'info',
  undefined: 'info'
};

// Report a file’s messages.
function reporter(files, options) {
  var settings = options || {};
  var one;

  if (!files) {
    return ''
  }

  // Error.
  if ('name' in files && 'message' in files) {
    return String(files.stack || files)
  }

  // One file.
  if (!('length' in files)) {
    one = true;
    files = [files];
  }

  return format$1(transform(files, settings), one, settings)
}

function transform(files, options) {
  var index = -1;
  var rows = [];
  var all = [];
  var sizes = {};
  var messages;
  var offset;
  var message;
  var messageRows;
  var row;
  var key;

  while (++index < files.length) {
    messages = vfileSort({messages: files[index].messages.concat()}).messages;
    messageRows = [];
    offset = -1;

    while (++offset < messages.length) {
      message = messages[offset];

      if (!options.silent || message.fatal) {
        all.push(message);

        row = {
          location: unistUtilStringifyPosition(
            message.location.end.line && message.location.end.column
              ? message.location
              : message.location.start
          ),
          label: labels$1[message.fatal],
          reason:
            (message.stack || message.message) +
            (options.verbose && message.note ? '\n' + message.note : ''),
          ruleId: message.ruleId || '',
          source: message.source || ''
        };

        for (key in row) {
          sizes[key] = Math.max(size(row[key]), sizes[key] || 0);
        }

        messageRows.push(row);
      }
    }

    if ((!options.quiet && !options.silent) || messageRows.length) {
      rows.push({type: 'file', file: files[index], stats: vfileStatistics(messages)});
      push.apply(rows, messageRows);
    }
  }

  return {rows: rows, stats: vfileStatistics(all), sizes: sizes}
}

function format$1(map, one, options) {
  var enabled = options.color == null ? supported : options.color;
  var lines = [];
  var index = -1;
  var stats;
  var row;
  var line;
  var reason;
  var rest;
  var match;

  while (++index < map.rows.length) {
    row = map.rows[index];

    if (row.type === 'file') {
      stats = row.stats;
      line = row.file.history[0] || options.defaultName || '<stdin>';

      line =
        one && !options.defaultName && !row.file.history[0]
          ? ''
          : (enabled
              ? '\x1b[4m' /* Underline. */ +
                (stats.fatal
                  ? '\x1b[31m' /* Red. */
                  : stats.total
                  ? '\x1b[33m' /* Yellow. */
                  : '\x1b[32m') /* Green. */ +
                line +
                '\x1b[39m\x1b[24m'
              : line) +
            (row.file.stored && row.file.path !== row.file.history[0]
              ? ' > ' + row.file.path
              : '');

      if (!stats.total) {
        line =
          (line ? line + ': ' : '') +
          (row.file.stored
            ? enabled
              ? '\x1b[33mwritten\x1b[39m' /* Yellow. */
              : 'written'
            : 'no issues found');
      }

      if (line) {
        if (index && map.rows[index - 1].type !== 'file') {
          lines.push('');
        }

        lines.push(line);
      }
    } else {
      reason = row.reason;
      match = /\r?\n|\r/.exec(reason);

      if (match) {
        rest = reason.slice(match.index);
        reason = reason.slice(0, match.index);
      } else {
        rest = '';
      }

      lines.push(
        (
          '  ' +
          repeatString(' ', map.sizes.location - size(row.location)) +
          row.location +
          '  ' +
          (enabled
            ? (row.label === 'error'
                ? '\x1b[31m' /* Red. */
                : '\x1b[33m') /* Yellow. */ +
              row.label +
              '\x1b[39m'
            : row.label) +
          repeatString(' ', map.sizes.label - size(row.label)) +
          '  ' +
          reason +
          repeatString(' ', map.sizes.reason - size(reason)) +
          '  ' +
          row.ruleId +
          repeatString(' ', map.sizes.ruleId - size(row.ruleId)) +
          '  ' +
          (row.source || '')
        ).replace(/ +$/, '') + rest
      );
    }
  }

  stats = map.stats;

  if (stats.fatal || stats.warn) {
    line = '';

    if (stats.fatal) {
      line =
        (enabled
          ? '\x1b[31m' /* Red. */ + chars.error + '\x1b[39m'
          : chars.error) +
        ' ' +
        stats.fatal +
        ' ' +
        (labels$1.true + (stats.fatal === 1 ? '' : 's'));
    }

    if (stats.warn) {
      line =
        (line ? line + ', ' : '') +
        (enabled
          ? '\x1b[33m' /* Yellow. */ + chars.warning + '\x1b[39m'
          : chars.warning) +
        ' ' +
        stats.warn +
        ' ' +
        (labels$1.false + (stats.warn === 1 ? '' : 's'));
    }

    if (stats.total !== stats.fatal && stats.total !== stats.warn) {
      line = stats.total + ' messages (' + line + ')';
    }

    lines.push('', line);
  }

  return lines.join('\n')
}

// Get the length of `value`, ignoring ANSI sequences.
function size(value) {
  var match = /\r?\n|\r/.exec(value);
  return stringWidth_1(match ? value.slice(0, match.index) : value)
}

var TeXPrinter = /** @class */ (function () {
    function TeXPrinter(metadata, settings, exportPath) {
        this.metadata = metadata;
        this.settings = settings;
        this.exportPath = exportPath;
    }
    TeXPrinter.prototype.process = function (vfile) {
        return __awaiter(this, void 0, void 0, function () {
            var output;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, markdownToTex()
                            .data('settings', {
                            exportToTex: this.settings,
                        })
                            .data('metadata', this.metadata)
                            .data('exportPath', this.exportPath)
                            .process(vfile)];
                    case 1:
                        output = _a.sent();
                        return [2 /*return*/, output.toString()];
                }
            });
        });
    };
    TeXPrinter.prototype.toTex = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var vfile, tex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, toVFile(file)];
                    case 1:
                        vfile = _a.sent();
                        console.groupCollapsed('export-to-tex');
                        return [4 /*yield*/, this.process(vfile)];
                    case 2:
                        tex = _a.sent();
                        console.log(vfileReporter(vfile));
                        if (this.settings.compressNewlines) {
                            console.log('Compressing newlines');
                            tex = TeXPrinter.compressNewlines(tex);
                        }
                        console.groupEnd();
                        return [2 /*return*/, tex];
                }
            });
        });
    };
    TeXPrinter.compressNewlines = function (tex) {
        var lines = tex.split('\n');
        var output = [];
        var wasEmpty = false;
        for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
            var line = lines_1[_i];
            if (line === '') {
                wasEmpty = true;
                continue;
            }
            if (wasEmpty) {
                output.push('');
                wasEmpty = false;
            }
            output.push(line);
        }
        return output.join('\n');
    };
    return TeXPrinter;
}());

var writeFile = util.promisify(fs.writeFile);

var ExportToTeXSettingTab = /** @class */ (function (_super) {
    __extends(ExportToTeXSettingTab, _super);
    function ExportToTeXSettingTab(app, plugin) {
        var _this = _super.call(this, app, plugin) || this;
        _this.plugin = plugin;
        return _this;
    }
    ExportToTeXSettingTab.prototype.display = function () {
        var _this = this;
        var containerEl = this.containerEl;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for exporting to TeX' });
        new obsidian.Setting(containerEl)
            .setName('Generate labels and refs')
            .setDesc('Automatically generate TeX labels and refs for blocks and headings?')
            .addToggle(function (toggle) {
            toggle
                .setValue(_this.plugin.settings.generateLabels)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.generateLabels = value;
                            return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Ref command')
            .setDesc('Command to use when converting links to headings/blocks to refs.')
            .addText(function (text) {
            return text
                .setValue(_this.plugin.settings.refCommand)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.refCommand = value;
                            return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Additional math environments')
            .setDesc('Additional environments which trigger math content without needing \\[...\\]' +
            ' (one per line)')
            .addTextArea(function (text) {
            text
                .setValue(_this.plugin.settings.additionalMathEnvironments.join('\n'))
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.additionalMathEnvironments = value
                                .split('\n')
                                .map(function (x) { return x.trim(); })
                                .filter(function (x) { return x.length > 0; });
                            return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Default to Equation')
            .setDesc('Convert display math to equation environemtns')
            .addToggle(function (toggle) {
            toggle
                .setValue(_this.plugin.settings.defaultToEquation)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.defaultToEquation = value;
                            return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Compress newlines')
            .setDesc('Reduce any instance of 2 or more blank lines to a single blank line')
            .addToggle(function (toggle) {
            toggle
                .setValue(_this.plugin.settings.compressNewlines)
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.compressNewlines = value;
                            return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.Setting(containerEl)
            .setName('Image path format')
            .setDesc([
            'Specifies how the path for images should be written in exported \\includegraphics calls',
        ].join('\n'))
            .addDropdown(function (dropdown) {
            for (var i = 0; i < ImagePathSettingDescriptions.length; i++) {
                dropdown.addOption(i.toString(), ImagePathSettingDescriptions[i]);
            }
            dropdown
                .setValue(_this.plugin.settings.imagePathSettings.toString())
                .onChange(function (value) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.plugin.settings.imagePathSettings = Number.parseInt(value);
                            return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        var textEl;
        new obsidian.Setting(containerEl)
            .setName('Default export directory')
            .setDesc('Default directory to save TeX files to. If blank will default to vault root.')
            .addText(function (text) {
            textEl = text
                .setPlaceholder('Default (Vault root)')
                .setValue(_this.plugin.settings.defaultExportDirectory);
            textEl.inputEl.disabled = true;
        })
            .addButton(function (button) {
            button.setButtonText('Choose').onClick(function () { return __awaiter(_this, void 0, void 0, function () {
                var _a, filePaths, canceled, exportPath;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, electron.remote.dialog.showOpenDialog({
                                defaultPath: this.app.vault
                                    .adapter.getBasePath(),
                                properties: ['createDirectory', 'openDirectory'],
                            })];
                        case 1:
                            _a = _b.sent(), filePaths = _a.filePaths, canceled = _a.canceled;
                            if (canceled)
                                return [2 /*return*/];
                            exportPath = filePaths[0];
                            textEl.setValue(exportPath);
                            this.plugin.settings.defaultExportDirectory = exportPath;
                            return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                        case 2:
                            _b.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        new obsidian.ButtonComponent(containerEl)
            .setButtonText('Reset to default')
            .onClick(function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, electron.remote.dialog
                            .showMessageBox({
                            title: 'Reset settings to default?',
                            type: 'question',
                            message: 'Are you sure?',
                            buttons: ['No', 'Yes'],
                        })
                            .then(function (value) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (value.response === 0)
                                            return [2 /*return*/];
                                        this.plugin.settings = new ExportToTexSettings();
                                        return [4 /*yield*/, this.plugin.saveData(this.plugin.settings)];
                                    case 1:
                                        _a.sent();
                                        this.display();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    return ExportToTeXSettingTab;
}(obsidian.PluginSettingTab));

var ExportToTeXPlugin = /** @class */ (function (_super) {
    __extends(ExportToTeXPlugin, _super);
    function ExportToTeXPlugin() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.settings = new ExportToTexSettings();
        return _this;
    }
    ExportToTeXPlugin.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var settings;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadData()];
                    case 1:
                        settings = _a.sent();
                        if (settings !== null) {
                            this.settings = ensureSettings(settings);
                        }
                        this.addCommand({
                            id: 'export-to-tex',
                            name: 'Export To TeX',
                            checkCallback: function (checking) {
                                var file = _this.app.workspace.getActiveFile();
                                if (file !== null) {
                                    if (!checking) {
                                        _this.exportToFile(file).catch(_this.onExportError);
                                    }
                                    return true;
                                }
                                return false;
                            },
                        });
                        this.addCommand({
                            id: 'export-tex-to-clipboard',
                            name: 'Export To Clipboard',
                            checkCallback: function (checking) {
                                var file = _this.app.workspace.getActiveFile();
                                if (file !== null) {
                                    if (!checking) {
                                        _this.exportToClipboard(file).catch(_this.onExportError);
                                    }
                                    return true;
                                }
                                return false;
                            },
                        });
                        this.addSettingTab(new ExportToTeXSettingTab(this.app, this));
                        return [2 /*return*/];
                }
            });
        });
    };
    ExportToTeXPlugin.prototype.exportToFile = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var directory, _a, filePath, canceled, printer, contents;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        directory = this.settings.defaultExportDirectory.length > 0
                            ? this.settings.defaultExportDirectory
                            : file.vault.adapter.getBasePath();
                        return [4 /*yield*/, electron.remote.dialog.showSaveDialog({
                                defaultPath: directory,
                                properties: ['createDirectory'],
                                filters: [
                                    {
                                        name: 'TeX',
                                        extensions: ['tex'],
                                    },
                                ],
                            })];
                    case 1:
                        _a = _b.sent(), filePath = _a.filePath, canceled = _a.canceled;
                        if (canceled || filePath === undefined)
                            return [2 /*return*/];
                        printer = new TeXPrinter(this.app.metadataCache, this.settings, filePath);
                        return [4 /*yield*/, printer.toTex(file)];
                    case 2:
                        contents = _b.sent();
                        return [4 /*yield*/, writeFile(filePath, contents)];
                    case 3:
                        _b.sent();
                        // eslint-disable-next-line no-new
                        new obsidian.Notice("Tex exported to " + filePath);
                        return [2 /*return*/];
                }
            });
        });
    };
    ExportToTeXPlugin.prototype.exportToClipboard = function (file) {
        return __awaiter(this, void 0, void 0, function () {
            var printer, contents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        printer = new TeXPrinter(this.app.metadataCache, this.settings);
                        return [4 /*yield*/, printer.toTex(file)];
                    case 1:
                        contents = _a.sent();
                        electron.remote.clipboard.writeText(contents);
                        // eslint-disable-next-line no-new
                        new obsidian.Notice("Tex exported to clipboard");
                        return [2 /*return*/];
                }
            });
        });
    };
    ExportToTeXPlugin.prototype.onExportError = function (e) {
        console.log(e);
        // eslint-disable-next-line no-new
        new obsidian.Notice("Error of type \"" + e.name + " occurred on export. See console for details.\"");
    };
    return ExportToTeXPlugin;
}(obsidian.Plugin));

module.exports = ExportToTeXPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0Byb2xsdXAvcGx1Z2luLXR5cGVzY3JpcHRANi4xLjBfN2FjZDkyMWQwYjNiODM1NTUzYjdmNTEzODkxY2UzY2Evbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9iYWlsQDEuMC41L25vZGVfbW9kdWxlcy9iYWlsL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2lzLWJ1ZmZlckAyLjAuNS9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2V4dGVuZEAzLjAuMi9ub2RlX21vZHVsZXMvZXh0ZW5kL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2lzLXBsYWluLW9iakAyLjEuMC9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Ryb3VnaEAxLjAuNS9ub2RlX21vZHVsZXMvdHJvdWdoL3dyYXAuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vdHJvdWdoQDEuMC41L25vZGVfbW9kdWxlcy90cm91Z2gvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vdW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb25AMi4wLjMvbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3ZmaWxlLW1lc3NhZ2VAMi4wLjQvbm9kZV9tb2R1bGVzL3ZmaWxlLW1lc3NhZ2UvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vdmZpbGVANC4yLjEvbm9kZV9tb2R1bGVzL3ZmaWxlL2xpYi9taW5wYXRoLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3ZmaWxlQDQuMi4xL25vZGVfbW9kdWxlcy92ZmlsZS9saWIvbWlucHJvYy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA0LjIuMS9ub2RlX21vZHVsZXMvdmZpbGUvbGliL2NvcmUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vdmZpbGVANC4yLjEvbm9kZV9tb2R1bGVzL3ZmaWxlL2xpYi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZUA0LjIuMS9ub2RlX21vZHVsZXMvdmZpbGUvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vdW5pZmllZEA5LjIuMC9ub2RlX21vZHVsZXMvdW5pZmllZC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLXN0cmluZ0AyLjAuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC10by1zdHJpbmcvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY29uc3RhbnQvYXNzaWduLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L2NvbnN0YW50L2hhcy1vd24tcHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdXRpbC9ub3JtYWxpemUtaWRlbnRpZmllci5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC9jb25zdGFudC9mcm9tLWNoYXItY29kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC91dGlsL3NhZmUtZnJvbS1pbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L2NoYXJhY3Rlci9tYXJrZG93bi1zcGFjZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9mYWN0b3J5LXNwYWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L2luaXRpYWxpemUvY29udGVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9wYXJ0aWFsLWJsYW5rLWxpbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvaW5pdGlhbGl6ZS9kb2N1bWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC91dGlsL2NodW5rZWQtc3BsaWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3V0aWwvc2hhbGxvdy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC91dGlsL3N1YnRva2VuaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3V0aWwvc2l6ZS1jaHVua3MuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdXRpbC9wcmVmaXgtc2l6ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9jb250ZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L2luaXRpYWxpemUvZmxvdy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC9pbml0aWFsaXplL3RleHQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nLW9yLXNwYWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L2NvbnN0YW50L3VuaWNvZGUtcHVuY3R1YXRpb24tcmVnZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdXRpbC9yZWdleC1jaGVjay5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvdW5pY29kZS1wdW5jdHVhdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvdW5pY29kZS13aGl0ZXNwYWNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3V0aWwvY2xhc3NpZnktY2hhcmFjdGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3V0aWwvbW92ZS1wb2ludC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC91dGlsL3Jlc29sdmUtYWxsLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2F0dGVudGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9oZWFkaW5nLWF0eC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvYXNjaWktYWxwaGEuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL2FzY2lpLWFscGhhbnVtZXJpYy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvYXNjaWktYXRleHQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL2FzY2lpLWNvbnRyb2wuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvYXV0b2xpbmsuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL2FzY2lpLWRpZ2l0LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL3RoZW1hdGljLWJyZWFrLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2xpc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvYmxvY2stcXVvdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL2FzY2lpLXB1bmN0dWF0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2NoYXJhY3Rlci1lc2NhcGUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcGFyc2UtZW50aXRpZXNAMi4wLjAvbm9kZV9tb2R1bGVzL3BhcnNlLWVudGl0aWVzL2RlY29kZS1lbnRpdHkuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL2FzY2lpLWhleC1kaWdpdC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9jaGFyYWN0ZXItcmVmZXJlbmNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2NvZGUtZmVuY2VkLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2NvZGUtaW5kZW50ZWQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvY29kZS10ZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2ZhY3RvcnktZGVzdGluYXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvZmFjdG9yeS1sYWJlbC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9mYWN0b3J5LXdoaXRlc3BhY2UuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvZmFjdG9yeS10aXRsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9kZWZpbml0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2hhcmQtYnJlYWstZXNjYXBlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L2NvbnN0YW50L2h0bWwtYmxvY2stbmFtZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvY29uc3RhbnQvaHRtbC1yYXctbmFtZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvaHRtbC1mbG93LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2h0bWwtdGV4dC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9sYWJlbC1lbmQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvbGFiZWwtc3RhcnQtaW1hZ2UuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvbGFiZWwtc3RhcnQtbGluay5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmtAMi4xMC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmsvZGlzdC90b2tlbml6ZS9zZXRleHQtdW5kZXJsaW5lLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2xpbmUtZW5kaW5nLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L2NvbnN0cnVjdHMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdXRpbC9zZXJpYWxpemUtY2h1bmtzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3V0aWwvc2xpY2UtY2h1bmtzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3V0aWwvbWluaWZsYXQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvdXRpbC9jcmVhdGUtdG9rZW5pemVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3V0aWwvY29tYmluZS1leHRlbnNpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3BhcnNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFya0AyLjEwLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay9kaXN0L3ByZXByb2Nlc3MuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrQDIuMTAuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrL2Rpc3QvcG9zdHByb2Nlc3MuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duQDAuOC4yL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLWZyb20tbWFya2Rvd24vZGlzdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLWZyb20tbWFya2Rvd25AMC44LjIvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZnJvbS1tYXJrZG93bi9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZW1hcmstcGFyc2VAOS4wLjAvbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLW1hdGhAMC4xLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWF0aC9saWIvdG9rZW5pemUtbWF0aC1mbG93LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tbWF0aEAwLjEuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1tYXRoL2xpYi90b2tlbml6ZS1tYXRoLXRleHQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1tYXRoQDAuMS4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLW1hdGgvbGliL3N5bnRheC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLW1hdGhAMC4xLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tbWF0aC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLW1hdGhAMC4xLjEvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtbWF0aC9mcm9tLW1hcmtkb3duLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlcGVhdC1zdHJpbmdAMS42LjEvbm9kZV9tb2R1bGVzL3JlcGVhdC1zdHJpbmcvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbG9uZ2VzdC1zdHJlYWtAMi4wLjQvbm9kZV9tb2R1bGVzL2xvbmdlc3Qtc3RyZWFrL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8tbWFya2Rvd25AMC41LjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL3V0aWwvc2FmZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLW1hdGhAMC4xLjEvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtbWF0aC90by1tYXJrZG93bi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZW1hcmstbWF0aEA0LjAuMC9ub2RlX21vZHVsZXMvcmVtYXJrLW1hdGgvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tYXV0b2xpbmstbGl0ZXJhbEAwLjUuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tYXV0b2xpbmstbGl0ZXJhbC9zeW50YXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tYXV0b2xpbmstbGl0ZXJhbEAwLjUuMS9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tYXV0b2xpbmstbGl0ZXJhbC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLWdmbS1zdHJpa2V0aHJvdWdoQDAuNi4yL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWdmbS1zdHJpa2V0aHJvdWdoL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZ2ZtLXRhYmxlQDAuNC4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWdmbS10YWJsZS9zeW50YXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFibGVAMC40LjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZ2ZtLXRhYmxlL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZ2ZtLXRhc2stbGlzdC1pdGVtQDAuMy4yL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWdmbS10YXNrLWxpc3QtaXRlbS9zeW50YXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFzay1saXN0LWl0ZW1AMC4zLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZ2ZtLXRhc2stbGlzdC1pdGVtL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZ2ZtQDAuMy4xL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWdmbS9zeW50YXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1nZm1AMC4zLjEvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZ2ZtL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtZ2ZtLWF1dG9saW5rLWxpdGVyYWxAMC4xLjEvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZ2ZtLWF1dG9saW5rLWxpdGVyYWwvZnJvbS1tYXJrZG93bi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLWdmbS1zdHJpa2V0aHJvdWdoQDAuMi4yL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLWdmbS1zdHJpa2V0aHJvdWdoL2Zyb20tbWFya2Rvd24uanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1nZm0tdGFibGVAMC4xLjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZ2ZtLXRhYmxlL2Zyb20tbWFya2Rvd24uanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1nZm0tdGFzay1saXN0LWl0ZW1AMC4xLjUvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZ2ZtLXRhc2stbGlzdC1pdGVtL2Zyb20tbWFya2Rvd24uanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1nZm1AMC4xLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZ2ZtL2Zyb20tbWFya2Rvd24uanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1nZm0tYXV0b2xpbmstbGl0ZXJhbEAwLjEuMS9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1nZm0tYXV0b2xpbmstbGl0ZXJhbC90by1tYXJrZG93bi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLW1hcmtkb3duQDAuNS40L25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2NvbnRhaW5lci1waHJhc2luZy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLWdmbS1zdHJpa2V0aHJvdWdoQDAuMi4yL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLWdmbS1zdHJpa2V0aHJvdWdoL3RvLW1hcmtkb3duLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8tbWFya2Rvd25AMC41LjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL2hhbmRsZS9pbmxpbmUtY29kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tYXJrZG93bi10YWJsZUAyLjAuMC9ub2RlX21vZHVsZXMvbWFya2Rvd24tdGFibGUvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1nZm0tdGFibGVAMC4xLjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZ2ZtLXRhYmxlL3RvLW1hcmtkb3duLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8tbWFya2Rvd25AMC41LjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL3V0aWwvY2hlY2stYnVsbGV0LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8tbWFya2Rvd25AMC41LjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL3V0aWwvY2hlY2stbGlzdC1pdGVtLWluZGVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLW1hcmtkb3duQDAuNS40L25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2NvbnRhaW5lci1mbG93LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8tbWFya2Rvd25AMC41LjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL3V0aWwvaW5kZW50LWxpbmVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtdG8tbWFya2Rvd25AMC41LjQvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL2hhbmRsZS9saXN0LWl0ZW0uanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1nZm0tdGFzay1saXN0LWl0ZW1AMC4xLjUvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZ2ZtLXRhc2stbGlzdC1pdGVtL3RvLW1hcmtkb3duLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtZ2ZtQDAuMS4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLWdmbS90by1tYXJrZG93bi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZW1hcmstZ2ZtQDEuMC4wL25vZGVfbW9kdWxlcy9yZW1hcmstZ2ZtL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZGlyZWN0aXZlQDEuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZS9saWIvZmFjdG9yeS1hdHRyaWJ1dGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZGlyZWN0aXZlQDEuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZS9saWIvZmFjdG9yeS1sYWJlbC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZUAxLjAuMC9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1kaXJlY3RpdmUvbGliL2ZhY3RvcnktbmFtZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9taWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZUAxLjAuMC9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1kaXJlY3RpdmUvbGliL3Rva2VuaXplLWRpcmVjdGl2ZS10ZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZGlyZWN0aXZlQDEuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZS9saWIvdG9rZW5pemUtZGlyZWN0aXZlLWxlYWYuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1kaXJlY3RpdmVAMS4wLjAvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZGlyZWN0aXZlL2xpYi90b2tlbml6ZS1kaXJlY3RpdmUtY29udGFpbmVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZGlyZWN0aXZlQDEuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZS9saWIvc3ludGF4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZGlyZWN0aXZlQDEuMC4wL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLWRpcmVjdGl2ZUAxLjAuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1kaXJlY3RpdmUvZnJvbS1tYXJrZG93bi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNAMy4xLjAvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvY29yZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNAMy4xLjAvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvY29uc3RhbnQvYXNzaWduLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0cmluZ2lmeS1lbnRpdGllc0AzLjEuMC9ub2RlX21vZHVsZXMvc3RyaW5naWZ5LWVudGl0aWVzL2xpYi91dGlsL2Zvcm1hdC1iYXNpYy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpbmdpZnktZW50aXRpZXNAMy4xLjAvbm9kZV9tb2R1bGVzL3N0cmluZ2lmeS1lbnRpdGllcy9saWIvZW5jb2RlLWhleGFkZWNpbWFsLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3N0cmluZ2lmeS1lbnRpdGllc0AzLjEuMC9ub2RlX21vZHVsZXMvc3RyaW5naWZ5LWVudGl0aWVzL2xpZ2h0LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3VuaXN0LXV0aWwtaXNANC4wLjQvbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtaXMvY29udmVydC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlzdC11dGlsLXZpc2l0LXBhcmVudHNAMy4xLjEvbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9jb2xvci5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlzdC11dGlsLXZpc2l0LXBhcmVudHNAMy4xLjEvbm9kZV9tb2R1bGVzL3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXRvLW1hcmtkb3duQDAuNS40L25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2NoZWNrLXF1b3RlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtZGlyZWN0aXZlQDEuMC4wL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLWRpcmVjdGl2ZS90by1tYXJrZG93bi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZW1hcmstZGlyZWN0aXZlQDEuMC4xL25vZGVfbW9kdWxlcy9yZW1hcmstZGlyZWN0aXZlL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24td2lraS1saW5rQDAuMC4yL25vZGVfbW9kdWxlcy9taWNyb21hcmstZXh0ZW5zaW9uLXdpa2ktbGluay9kaXN0L2luZGV4LmNqcy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLXdpa2ktbGlua0AwLjAuMS9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC13aWtpLWxpbmsvZGlzdC9pbmRleC5janMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmVtYXJrLXdpa2ktbGlua0AxLjAuMC9ub2RlX21vZHVsZXMvcmVtYXJrLXdpa2ktbGluay9kaXN0L2luZGV4LmNqcy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9mb3JtYXRAMC4yLjIvbm9kZV9tb2R1bGVzL2Zvcm1hdC9mb3JtYXQuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vZmF1bHRAMS4wLjQvbm9kZV9tb2R1bGVzL2ZhdWx0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXJAMC4yLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXIvbGliL21hdHRlcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWljcm9tYXJrLWV4dGVuc2lvbi1mcm9udG1hdHRlckAwLjIuMi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1mcm9udG1hdHRlci9saWIvc3ludGF4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXJAMC4yLjIvbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbWRhc3QtdXRpbC1mcm9udG1hdHRlckAwLjIuMC9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1mcm9udG1hdHRlci9mcm9tLW1hcmtkb3duLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtZnJvbnRtYXR0ZXJAMC4yLjAvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZnJvbnRtYXR0ZXIvdG8tbWFya2Rvd24uanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmVtYXJrLWZyb250bWF0dGVyQDMuMC4wL25vZGVfbW9kdWxlcy9yZW1hcmstZnJvbnRtYXR0ZXIvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0veHRlbmRANC4wLjIvbm9kZV9tb2R1bGVzL3h0ZW5kL2ltbXV0YWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS91bmlzdC11dGlsLXZpc2l0QDIuMC4zL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtZGVmaW5pdGlvbnNAMi4wLjEvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtZGVmaW5pdGlvbnMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vZnVuY3Rpb24tYmluZEAxLjEuMS9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9mdW5jdGlvbi1iaW5kQDEuMS4xL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2hhc0AxLjAuMy9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L2FsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL2Jsb2NrcXVvdGUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC90eXBlcy9icmVhay5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL2NvZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC90eXBlcy9kZWZpbml0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvZGVsZXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvZW1waGFzaXMuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC90eXBlcy9mb290bm90ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL2Zvb3Rub3RlRGVmaW5pdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL2Zvb3Rub3RlUmVmZXJlbmNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvaGVhZGluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL2h0bWwuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC90eXBlcy9pbWFnZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9jb2xsYXBzZS13aGl0ZS1zcGFjZUAxLjAuNi9ub2RlX21vZHVsZXMvY29sbGFwc2Utd2hpdGUtc3BhY2UvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC9lc2NhcGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvaW5saW5lY29kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL2xpbmsuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC90eXBlcy9saW5rUmVmZXJlbmNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvbGlzdC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL2xpc3RJdGVtLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvcGFyYWdyYXBoLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvcm9vdC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL3N0cm9uZy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9jbG9uZUAyLjEuMi9ub2RlX21vZHVsZXMvY2xvbmUvY2xvbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC90eXBlcy90YWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL3RhYmxlQ2VsbC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3R5cGVzL3RhYmxlUm93LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3RyaW0tbGluZXNAMS4xLjMvbm9kZV9tb2R1bGVzL3RyaW0tbGluZXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC90eXBlcy90ZXh0LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvdHlwZXMvdGhlbWF0aWMtYnJlYWsuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC9vbmUuanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC9wcmVwcm9jZXNzb3JzL2hlYWRpbmdWaXNpdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYmJlckA1LjEuMi9ub2RlX21vZHVsZXMvcmViYmVyL2Rpc3QvcHJlcHJvY2Vzc29ycy9yZWZlcmVuY2VWaXNpdG9ycy5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWJiZXJANS4xLjIvbm9kZV9tb2R1bGVzL3JlYmJlci9kaXN0L3ByZXByb2Nlc3NvcnMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vcmViYmVyQDUuMS4yL25vZGVfbW9kdWxlcy9yZWJiZXIvZGlzdC9pbmRleC5qcyIsIi4uL3NyYy9tZGFzdEludGVyZmFjZXMudHMiLCIuLi9zcmMvcHJlcHJvY2Vzc29yLnRzIiwiLi4vc3JjL2ZpbGUudHMiLCIuLi9zcmMvc2V0dGluZ3MudHMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vbm9ybWFsaXplLXBhdGhAMy4wLjAvbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS1wYXRoL2luZGV4LmpzIiwiLi4vc3JjL2VtYmVkLnRzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Vtb2ppLXJlZ2V4QDYuMS4xL25vZGVfbW9kdWxlcy9lbW9qaS1yZWdleC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9naXRodWItc2x1Z2dlckAxLjMuMC9ub2RlX21vZHVsZXMvZ2l0aHViLXNsdWdnZXIvaW5kZXguanMiLCIuLi9zcmMvbGFiZWxzLnRzIiwiLi4vc3JjL21hdGgudHMiLCIuLi9zcmMvZGF0YS50cyIsIi4uL3NyYy9zdHJpbmdpZnkudHMiLCIuLi9zcmMvcHJvY2Vzc29yLnRzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2hhcy1mbGFnQDMuMC4wL25vZGVfbW9kdWxlcy9oYXMtZmxhZy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdXBwb3J0cy1jb2xvckA2LjEuMC9ub2RlX21vZHVsZXMvc3VwcG9ydHMtY29sb3IvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vYW5zaS1yZWdleEA1LjAuMC9ub2RlX21vZHVsZXMvYW5zaS1yZWdleC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9zdHJpcC1hbnNpQDYuMC4wL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2lzLWZ1bGx3aWR0aC1jb2RlLXBvaW50QDMuMC4wL25vZGVfbW9kdWxlcy9pcy1mdWxsd2lkdGgtY29kZS1wb2ludC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbW9qaS1yZWdleEA4LjAuMC9ub2RlX21vZHVsZXMvZW1vamktcmVnZXgvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vc3RyaW5nLXdpZHRoQDQuMi4wL25vZGVfbW9kdWxlcy9zdHJpbmctd2lkdGgvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvLnBucG0vdmZpbGUtc3RhdGlzdGljc0AxLjEuNC9ub2RlX21vZHVsZXMvdmZpbGUtc3RhdGlzdGljcy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy8ucG5wbS92ZmlsZS1zb3J0QDIuMi4yL25vZGVfbW9kdWxlcy92ZmlsZS1zb3J0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3ZmaWxlLXJlcG9ydGVyQDYuMC4yL25vZGVfbW9kdWxlcy92ZmlsZS1yZXBvcnRlci9pbmRleC5qcyIsIi4uL3NyYy90ZXhQcmludGVyLnRzIiwiLi4vc3JjL3Byb21pc2VzLnRzIiwiLi4vc3JjL3NldHRpbmdzVGFicy50cyIsIi4uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJhaWxcblxuZnVuY3Rpb24gYmFpbChlcnIpIHtcbiAgaWYgKGVycikge1xuICAgIHRocm93IGVyclxuICB9XG59XG4iLCIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9IG51bGwgJiZcbiAgICB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KGFycikge1xuXHRpZiAodHlwZW9mIEFycmF5LmlzQXJyYXkgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gQXJyYXkuaXNBcnJheShhcnIpO1xuXHR9XG5cblx0cmV0dXJuIHRvU3RyLmNhbGwoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbnZhciBpc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcblx0aWYgKCFvYmogfHwgdG9TdHIuY2FsbChvYmopICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBoYXNPd25Db25zdHJ1Y3RvciA9IGhhc093bi5jYWxsKG9iaiwgJ2NvbnN0cnVjdG9yJyk7XG5cdHZhciBoYXNJc1Byb3RvdHlwZU9mID0gb2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgJiYgaGFzT3duLmNhbGwob2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ2lzUHJvdG90eXBlT2YnKTtcblx0Ly8gTm90IG93biBjb25zdHJ1Y3RvciBwcm9wZXJ0eSBtdXN0IGJlIE9iamVjdFxuXHRpZiAob2JqLmNvbnN0cnVjdG9yICYmICFoYXNPd25Db25zdHJ1Y3RvciAmJiAhaGFzSXNQcm90b3R5cGVPZikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93bi5cblx0dmFyIGtleTtcblx0Zm9yIChrZXkgaW4gb2JqKSB7IC8qKi8gfVxuXG5cdHJldHVybiB0eXBlb2Yga2V5ID09PSAndW5kZWZpbmVkJyB8fCBoYXNPd24uY2FsbChvYmosIGtleSk7XG59O1xuXG4vLyBJZiBuYW1lIGlzICdfX3Byb3RvX18nLCBhbmQgT2JqZWN0LmRlZmluZVByb3BlcnR5IGlzIGF2YWlsYWJsZSwgZGVmaW5lIF9fcHJvdG9fXyBhcyBhbiBvd24gcHJvcGVydHkgb24gdGFyZ2V0XG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMpIHtcblx0aWYgKGRlZmluZVByb3BlcnR5ICYmIG9wdGlvbnMubmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG9wdGlvbnMubmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBvcHRpb25zLm5ld1ZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR0YXJnZXRbb3B0aW9ucy5uYW1lXSA9IG9wdGlvbnMubmV3VmFsdWU7XG5cdH1cbn07XG5cbi8vIFJldHVybiB1bmRlZmluZWQgaW5zdGVhZCBvZiBfX3Byb3RvX18gaWYgJ19fcHJvdG9fXycgaXMgbm90IGFuIG93biBwcm9wZXJ0eVxudmFyIGdldFByb3BlcnR5ID0gZnVuY3Rpb24gZ2V0UHJvcGVydHkob2JqLCBuYW1lKSB7XG5cdGlmIChuYW1lID09PSAnX19wcm90b19fJykge1xuXHRcdGlmICghaGFzT3duLmNhbGwob2JqLCBuYW1lKSkge1xuXHRcdFx0cmV0dXJuIHZvaWQgMDtcblx0XHR9IGVsc2UgaWYgKGdPUEQpIHtcblx0XHRcdC8vIEluIGVhcmx5IHZlcnNpb25zIG9mIG5vZGUsIG9ialsnX19wcm90b19fJ10gaXMgYnVnZ3kgd2hlbiBvYmogaGFzXG5cdFx0XHQvLyBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5LiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKCkgd29ya3MuXG5cdFx0XHRyZXR1cm4gZ09QRChvYmosIG5hbWUpLnZhbHVlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvYmpbbmFtZV07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4dGVuZCgpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lO1xuXHR2YXIgdGFyZ2V0ID0gYXJndW1lbnRzWzBdO1xuXHR2YXIgaSA9IDE7XG5cdHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHR2YXIgZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKHR5cGVvZiB0YXJnZXQgPT09ICdib29sZWFuJykge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuXHRcdC8vIHNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHRpID0gMjtcblx0fVxuXHRpZiAodGFyZ2V0ID09IG51bGwgfHwgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHRmb3IgKDsgaSA8IGxlbmd0aDsgKytpKSB7XG5cdFx0b3B0aW9ucyA9IGFyZ3VtZW50c1tpXTtcblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKG9wdGlvbnMgIT0gbnVsbCkge1xuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yIChuYW1lIGluIG9wdGlvbnMpIHtcblx0XHRcdFx0c3JjID0gZ2V0UHJvcGVydHkodGFyZ2V0LCBuYW1lKTtcblx0XHRcdFx0Y29weSA9IGdldFByb3BlcnR5KG9wdGlvbnMsIG5hbWUpO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKHRhcmdldCAhPT0gY29weSkge1xuXHRcdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRcdGlmIChkZWVwICYmIGNvcHkgJiYgKGlzUGxhaW5PYmplY3QoY29weSkgfHwgKGNvcHlJc0FycmF5ID0gaXNBcnJheShjb3B5KSkpKSB7XG5cdFx0XHRcdFx0XHRpZiAoY29weUlzQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNBcnJheShzcmMpID8gc3JjIDogW107XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBpc1BsYWluT2JqZWN0KHNyYykgPyBzcmMgOiB7fTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGV4dGVuZChkZWVwLCBjbG9uZSwgY29weSkgfSk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgY29weSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHRcdHNldFByb3BlcnR5KHRhcmdldCwgeyBuYW1lOiBuYW1lLCBuZXdWYWx1ZTogY29weSB9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB2YWx1ZSA9PiB7XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNvbnN0IHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG5cdHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXBcblxuLy8gV3JhcCBgZm5gLlxuLy8gQ2FuIGJlIHN5bmMgb3IgYXN5bmM7IHJldHVybiBhIHByb21pc2UsIHJlY2VpdmUgYSBjb21wbGV0aW9uIGhhbmRsZXIsIHJldHVyblxuLy8gbmV3IHZhbHVlcyBhbmQgZXJyb3JzLlxuZnVuY3Rpb24gd3JhcChmbiwgY2FsbGJhY2spIHtcbiAgdmFyIGludm9rZWRcblxuICByZXR1cm4gd3JhcHBlZFxuXG4gIGZ1bmN0aW9uIHdyYXBwZWQoKSB7XG4gICAgdmFyIHBhcmFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgIHZhciBjYWxsYmFjayA9IGZuLmxlbmd0aCA+IHBhcmFtcy5sZW5ndGhcbiAgICB2YXIgcmVzdWx0XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHBhcmFtcy5wdXNoKGRvbmUpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KG51bGwsIHBhcmFtcylcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gV2VsbCwgdGhpcyBpcyBxdWl0ZSB0aGUgcGlja2xlLlxuICAgICAgLy8gYGZuYCByZWNlaXZlZCBhIGNhbGxiYWNrIGFuZCBpbnZva2VkIGl0ICh0aHVzIGNvbnRpbnVpbmcgdGhlIHBpcGVsaW5lKSxcbiAgICAgIC8vIGJ1dCBsYXRlciBhbHNvIHRocmV3IGFuIGVycm9yLlxuICAgICAgLy8gV2XigJlyZSBub3QgYWJvdXQgdG8gcmVzdGFydCB0aGUgcGlwZWxpbmUgYWdhaW4sIHNvIHRoZSBvbmx5IHRoaW5nIGxlZnRcbiAgICAgIC8vIHRvIGRvIGlzIHRvIHRocm93IHRoZSB0aGluZyBpbnN0ZWFkLlxuICAgICAgaWYgKGNhbGxiYWNrICYmIGludm9rZWQpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRvbmUoZXJyb3IpXG4gICAgfVxuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4odGhlbiwgZG9uZSlcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgZG9uZShyZXN1bHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGVuKHJlc3VsdClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBJbnZva2UgYG5leHRgLCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgaWYgKCFpbnZva2VkKSB7XG4gICAgICBpbnZva2VkID0gdHJ1ZVxuXG4gICAgICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG5cbiAgLy8gSW52b2tlIGBkb25lYCB3aXRoIG9uZSB2YWx1ZS5cbiAgLy8gVHJhY2tzIGlmIGFuIGVycm9yIGlzIHBhc3NlZCwgdG9vLlxuICBmdW5jdGlvbiB0aGVuKHZhbHVlKSB7XG4gICAgZG9uZShudWxsLCB2YWx1ZSlcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB3cmFwID0gcmVxdWlyZSgnLi93cmFwLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSB0cm91Z2hcblxudHJvdWdoLndyYXAgPSB3cmFwXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG5cbi8vIENyZWF0ZSBuZXcgbWlkZGxld2FyZS5cbmZ1bmN0aW9uIHRyb3VnaCgpIHtcbiAgdmFyIGZucyA9IFtdXG4gIHZhciBtaWRkbGV3YXJlID0ge31cblxuICBtaWRkbGV3YXJlLnJ1biA9IHJ1blxuICBtaWRkbGV3YXJlLnVzZSA9IHVzZVxuXG4gIHJldHVybiBtaWRkbGV3YXJlXG5cbiAgLy8gUnVuIGBmbnNgLiAgTGFzdCBhcmd1bWVudCBtdXN0IGJlIGEgY29tcGxldGlvbiBoYW5kbGVyLlxuICBmdW5jdGlvbiBydW4oKSB7XG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgaW5wdXQgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMCwgLTEpXG4gICAgdmFyIGRvbmUgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdXG5cbiAgICBpZiAodHlwZW9mIGRvbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZnVuY3Rpb24gYXMgbGFzdCBhcmd1bWVudCwgbm90ICcgKyBkb25lKVxuICAgIH1cblxuICAgIG5leHQuYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChpbnB1dCkpXG5cbiAgICAvLyBSdW4gdGhlIG5leHQgYGZuYCwgaWYgYW55LlxuICAgIGZ1bmN0aW9uIG5leHQoZXJyKSB7XG4gICAgICB2YXIgZm4gPSBmbnNbKytpbmRleF1cbiAgICAgIHZhciBwYXJhbXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMClcbiAgICAgIHZhciB2YWx1ZXMgPSBwYXJhbXMuc2xpY2UoMSlcbiAgICAgIHZhciBsZW5ndGggPSBpbnB1dC5sZW5ndGhcbiAgICAgIHZhciBwb3MgPSAtMVxuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGRvbmUoZXJyKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBub24tbnVsbHkgaW5wdXQgaW50byB2YWx1ZXMuXG4gICAgICB3aGlsZSAoKytwb3MgPCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKHZhbHVlc1twb3NdID09PSBudWxsIHx8IHZhbHVlc1twb3NdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YWx1ZXNbcG9zXSA9IGlucHV0W3Bvc11cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnB1dCA9IHZhbHVlc1xuXG4gICAgICAvLyBOZXh0IG9yIGRvbmUuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgd3JhcChmbiwgbmV4dCkuYXBwbHkobnVsbCwgaW5wdXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lLmFwcGx5KG51bGwsIFtudWxsXS5jb25jYXQoaW5wdXQpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCBgZm5gIHRvIHRoZSBsaXN0LlxuICBmdW5jdGlvbiB1c2UoZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBmbmAgdG8gYmUgYSBmdW5jdGlvbiwgbm90ICcgKyBmbilcbiAgICB9XG5cbiAgICBmbnMucHVzaChmbilcblxuICAgIHJldHVybiBtaWRkbGV3YXJlXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdpZnlcblxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlKSB7XG4gIC8vIE5vdGhpbmcuXG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gTm9kZS5cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAncG9zaXRpb24nKSB8fCBvd24uY2FsbCh2YWx1ZSwgJ3R5cGUnKSkge1xuICAgIHJldHVybiBwb3NpdGlvbih2YWx1ZS5wb3NpdGlvbilcbiAgfVxuXG4gIC8vIFBvc2l0aW9uLlxuICBpZiAob3duLmNhbGwodmFsdWUsICdzdGFydCcpIHx8IG93bi5jYWxsKHZhbHVlLCAnZW5kJykpIHtcbiAgICByZXR1cm4gcG9zaXRpb24odmFsdWUpXG4gIH1cblxuICAvLyBQb2ludC5cbiAgaWYgKG93bi5jYWxsKHZhbHVlLCAnbGluZScpIHx8IG93bi5jYWxsKHZhbHVlLCAnY29sdW1uJykpIHtcbiAgICByZXR1cm4gcG9pbnQodmFsdWUpXG4gIH1cblxuICAvLyA/XG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBwb2ludChwb2ludCkge1xuICBpZiAoIXBvaW50IHx8IHR5cGVvZiBwb2ludCAhPT0gJ29iamVjdCcpIHtcbiAgICBwb2ludCA9IHt9XG4gIH1cblxuICByZXR1cm4gaW5kZXgocG9pbnQubGluZSkgKyAnOicgKyBpbmRleChwb2ludC5jb2x1bW4pXG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uKHBvcykge1xuICBpZiAoIXBvcyB8fCB0eXBlb2YgcG9zICE9PSAnb2JqZWN0Jykge1xuICAgIHBvcyA9IHt9XG4gIH1cblxuICByZXR1cm4gcG9pbnQocG9zLnN0YXJ0KSArICctJyArIHBvaW50KHBvcy5lbmQpXG59XG5cbmZ1bmN0aW9uIGluZGV4KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiAxXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSBWTWVzc2FnZVxuXG4vLyBJbmhlcml0IGZyb20gYEVycm9yI2AuXG5mdW5jdGlvbiBWTWVzc2FnZVByb3RvdHlwZSgpIHt9XG5WTWVzc2FnZVByb3RvdHlwZS5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGVcblZNZXNzYWdlLnByb3RvdHlwZSA9IG5ldyBWTWVzc2FnZVByb3RvdHlwZSgpXG5cbi8vIE1lc3NhZ2UgcHJvcGVydGllcy5cbnZhciBwcm90byA9IFZNZXNzYWdlLnByb3RvdHlwZVxuXG5wcm90by5maWxlID0gJydcbnByb3RvLm5hbWUgPSAnJ1xucHJvdG8ucmVhc29uID0gJydcbnByb3RvLm1lc3NhZ2UgPSAnJ1xucHJvdG8uc3RhY2sgPSAnJ1xucHJvdG8uZmF0YWwgPSBudWxsXG5wcm90by5jb2x1bW4gPSBudWxsXG5wcm90by5saW5lID0gbnVsbFxuXG4vLyBDb25zdHJ1Y3QgYSBuZXcgVk1lc3NhZ2UuXG4vL1xuLy8gTm90ZTogV2UgY2Fubm90IGludm9rZSBgRXJyb3JgIG9uIHRoZSBjcmVhdGVkIGNvbnRleHQsIGFzIHRoYXQgYWRkcyByZWFkb25seVxuLy8gYGxpbmVgIGFuZCBgY29sdW1uYCBhdHRyaWJ1dGVzIG9uIFNhZmFyaSA5LCB0aHVzIHRocm93aW5nIGFuZCBmYWlsaW5nIHRoZVxuLy8gZGF0YS5cbmZ1bmN0aW9uIFZNZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24sIG9yaWdpbikge1xuICB2YXIgcGFydHNcbiAgdmFyIHJhbmdlXG4gIHZhciBsb2NhdGlvblxuXG4gIGlmICh0eXBlb2YgcG9zaXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgb3JpZ2luID0gcG9zaXRpb25cbiAgICBwb3NpdGlvbiA9IG51bGxcbiAgfVxuXG4gIHBhcnRzID0gcGFyc2VPcmlnaW4ob3JpZ2luKVxuICByYW5nZSA9IHN0cmluZ2lmeShwb3NpdGlvbikgfHwgJzE6MSdcblxuICBsb2NhdGlvbiA9IHtcbiAgICBzdGFydDoge2xpbmU6IG51bGwsIGNvbHVtbjogbnVsbH0sXG4gICAgZW5kOiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsfVxuICB9XG5cbiAgLy8gTm9kZS5cbiAgaWYgKHBvc2l0aW9uICYmIHBvc2l0aW9uLnBvc2l0aW9uKSB7XG4gICAgcG9zaXRpb24gPSBwb3NpdGlvbi5wb3NpdGlvblxuICB9XG5cbiAgaWYgKHBvc2l0aW9uKSB7XG4gICAgLy8gUG9zaXRpb24uXG4gICAgaWYgKHBvc2l0aW9uLnN0YXJ0KSB7XG4gICAgICBsb2NhdGlvbiA9IHBvc2l0aW9uXG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLnN0YXJ0XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBvaW50LlxuICAgICAgbG9jYXRpb24uc3RhcnQgPSBwb3NpdGlvblxuICAgIH1cbiAgfVxuXG4gIGlmIChyZWFzb24uc3RhY2spIHtcbiAgICB0aGlzLnN0YWNrID0gcmVhc29uLnN0YWNrXG4gICAgcmVhc29uID0gcmVhc29uLm1lc3NhZ2VcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IHJlYXNvblxuICB0aGlzLm5hbWUgPSByYW5nZVxuICB0aGlzLnJlYXNvbiA9IHJlYXNvblxuICB0aGlzLmxpbmUgPSBwb3NpdGlvbiA/IHBvc2l0aW9uLmxpbmUgOiBudWxsXG4gIHRoaXMuY29sdW1uID0gcG9zaXRpb24gPyBwb3NpdGlvbi5jb2x1bW4gOiBudWxsXG4gIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvblxuICB0aGlzLnNvdXJjZSA9IHBhcnRzWzBdXG4gIHRoaXMucnVsZUlkID0gcGFydHNbMV1cbn1cblxuZnVuY3Rpb24gcGFyc2VPcmlnaW4ob3JpZ2luKSB7XG4gIHZhciByZXN1bHQgPSBbbnVsbCwgbnVsbF1cbiAgdmFyIGluZGV4XG5cbiAgaWYgKHR5cGVvZiBvcmlnaW4gPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBvcmlnaW4uaW5kZXhPZignOicpXG5cbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXN1bHRbMV0gPSBvcmlnaW5cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0WzBdID0gb3JpZ2luLnNsaWNlKDAsIGluZGV4KVxuICAgICAgcmVzdWx0WzFdID0gb3JpZ2luLnNsaWNlKGluZGV4ICsgMSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdwYXRoJylcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3NcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgcCA9IHJlcXVpcmUoJy4vbWlucGF0aCcpXG52YXIgcHJvYyA9IHJlcXVpcmUoJy4vbWlucHJvYycpXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJylcblxubW9kdWxlLmV4cG9ydHMgPSBWRmlsZVxuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLy8gT3JkZXIgb2Ygc2V0dGluZyAobGVhc3Qgc3BlY2lmaWMgdG8gbW9zdCksIHdlIG5lZWQgdGhpcyBiZWNhdXNlIG90aGVyd2lzZVxuLy8gYHtzdGVtOiAnYScsIHBhdGg6ICd+L2IuanMnfWAgd291bGQgdGhyb3csIGFzIGEgcGF0aCBpcyBuZWVkZWQgYmVmb3JlIGFcbi8vIHN0ZW0gY2FuIGJlIHNldC5cbnZhciBvcmRlciA9IFsnaGlzdG9yeScsICdwYXRoJywgJ2Jhc2VuYW1lJywgJ3N0ZW0nLCAnZXh0bmFtZScsICdkaXJuYW1lJ11cblxuVkZpbGUucHJvdG90eXBlLnRvU3RyaW5nID0gdG9TdHJpbmdcblxuLy8gQWNjZXNzIGZ1bGwgcGF0aCAoYH4vaW5kZXgubWluLmpzYCkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVkZpbGUucHJvdG90eXBlLCAncGF0aCcsIHtnZXQ6IGdldFBhdGgsIHNldDogc2V0UGF0aH0pXG5cbi8vIEFjY2VzcyBwYXJlbnQgcGF0aCAoYH5gKS5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWRmlsZS5wcm90b3R5cGUsICdkaXJuYW1lJywge1xuICBnZXQ6IGdldERpcm5hbWUsXG4gIHNldDogc2V0RGlybmFtZVxufSlcblxuLy8gQWNjZXNzIGJhc2VuYW1lIChgaW5kZXgubWluLmpzYCkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVkZpbGUucHJvdG90eXBlLCAnYmFzZW5hbWUnLCB7XG4gIGdldDogZ2V0QmFzZW5hbWUsXG4gIHNldDogc2V0QmFzZW5hbWVcbn0pXG5cbi8vIEFjY2VzcyBleHRuYW1lIChgLmpzYCkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVkZpbGUucHJvdG90eXBlLCAnZXh0bmFtZScsIHtcbiAgZ2V0OiBnZXRFeHRuYW1lLFxuICBzZXQ6IHNldEV4dG5hbWVcbn0pXG5cbi8vIEFjY2VzcyBzdGVtIChgaW5kZXgubWluYCkuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVkZpbGUucHJvdG90eXBlLCAnc3RlbScsIHtnZXQ6IGdldFN0ZW0sIHNldDogc2V0U3RlbX0pXG5cbi8vIENvbnN0cnVjdCBhIG5ldyBmaWxlLlxuZnVuY3Rpb24gVkZpbGUob3B0aW9ucykge1xuICB2YXIgcHJvcFxuICB2YXIgaW5kZXhcblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgYnVmZmVyKG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtjb250ZW50czogb3B0aW9uc31cbiAgfSBlbHNlIGlmICgnbWVzc2FnZScgaW4gb3B0aW9ucyAmJiAnbWVzc2FnZXMnIGluIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFZGaWxlKSkge1xuICAgIHJldHVybiBuZXcgVkZpbGUob3B0aW9ucylcbiAgfVxuXG4gIHRoaXMuZGF0YSA9IHt9XG4gIHRoaXMubWVzc2FnZXMgPSBbXVxuICB0aGlzLmhpc3RvcnkgPSBbXVxuICB0aGlzLmN3ZCA9IHByb2MuY3dkKClcblxuICAvLyBTZXQgcGF0aCByZWxhdGVkIHByb3BlcnRpZXMgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuXG4gIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IG9yZGVyLmxlbmd0aCkge1xuICAgIHByb3AgPSBvcmRlcltpbmRleF1cblxuICAgIGlmIChvd24uY2FsbChvcHRpb25zLCBwcm9wKSkge1xuICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF1cbiAgICB9XG4gIH1cblxuICAvLyBTZXQgbm9uLXBhdGggcmVsYXRlZCBwcm9wZXJ0aWVzLlxuICBmb3IgKHByb3AgaW4gb3B0aW9ucykge1xuICAgIGlmIChvcmRlci5pbmRleE9mKHByb3ApIDwgMCkge1xuICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aCgpIHtcbiAgcmV0dXJuIHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV1cbn1cblxuZnVuY3Rpb24gc2V0UGF0aChwYXRoKSB7XG4gIGFzc2VydE5vbkVtcHR5KHBhdGgsICdwYXRoJylcblxuICBpZiAodGhpcy5wYXRoICE9PSBwYXRoKSB7XG4gICAgdGhpcy5oaXN0b3J5LnB1c2gocGF0aClcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREaXJuYW1lKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwLmRpcm5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBzZXREaXJuYW1lKGRpcm5hbWUpIHtcbiAgYXNzZXJ0UGF0aCh0aGlzLnBhdGgsICdkaXJuYW1lJylcbiAgdGhpcy5wYXRoID0gcC5qb2luKGRpcm5hbWUgfHwgJycsIHRoaXMuYmFzZW5hbWUpXG59XG5cbmZ1bmN0aW9uIGdldEJhc2VuYW1lKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwLmJhc2VuYW1lKHRoaXMucGF0aCkgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gc2V0QmFzZW5hbWUoYmFzZW5hbWUpIHtcbiAgYXNzZXJ0Tm9uRW1wdHkoYmFzZW5hbWUsICdiYXNlbmFtZScpXG4gIGFzc2VydFBhcnQoYmFzZW5hbWUsICdiYXNlbmFtZScpXG4gIHRoaXMucGF0aCA9IHAuam9pbih0aGlzLmRpcm5hbWUgfHwgJycsIGJhc2VuYW1lKVxufVxuXG5mdW5jdGlvbiBnZXRFeHRuYW1lKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwLmV4dG5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBzZXRFeHRuYW1lKGV4dG5hbWUpIHtcbiAgYXNzZXJ0UGFydChleHRuYW1lLCAnZXh0bmFtZScpXG4gIGFzc2VydFBhdGgodGhpcy5wYXRoLCAnZXh0bmFtZScpXG5cbiAgaWYgKGV4dG5hbWUpIHtcbiAgICBpZiAoZXh0bmFtZS5jaGFyQ29kZUF0KDApICE9PSA0NiAvKiBgLmAgKi8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYGV4dG5hbWVgIG11c3Qgc3RhcnQgd2l0aCBgLmAnKVxuICAgIH1cblxuICAgIGlmIChleHRuYW1lLmluZGV4T2YoJy4nLCAxKSA+IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRuYW1lYCBjYW5ub3QgY29udGFpbiBtdWx0aXBsZSBkb3RzJylcbiAgICB9XG4gIH1cblxuICB0aGlzLnBhdGggPSBwLmpvaW4odGhpcy5kaXJuYW1lLCB0aGlzLnN0ZW0gKyAoZXh0bmFtZSB8fCAnJykpXG59XG5cbmZ1bmN0aW9uIGdldFN0ZW0oKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJ1xuICAgID8gcC5iYXNlbmFtZSh0aGlzLnBhdGgsIHRoaXMuZXh0bmFtZSlcbiAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBzZXRTdGVtKHN0ZW0pIHtcbiAgYXNzZXJ0Tm9uRW1wdHkoc3RlbSwgJ3N0ZW0nKVxuICBhc3NlcnRQYXJ0KHN0ZW0sICdzdGVtJylcbiAgdGhpcy5wYXRoID0gcC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgc3RlbSArICh0aGlzLmV4dG5hbWUgfHwgJycpKVxufVxuXG4vLyBHZXQgdGhlIHZhbHVlIG9mIHRoZSBmaWxlLlxuZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2RpbmcpIHtcbiAgcmV0dXJuICh0aGlzLmNvbnRlbnRzIHx8ICcnKS50b1N0cmluZyhlbmNvZGluZylcbn1cblxuLy8gQXNzZXJ0IHRoYXQgYHBhcnRgIGlzIG5vdCBhIHBhdGggKGkuZS4sIGRvZXMgbm90IGNvbnRhaW4gYHAuc2VwYCkuXG5mdW5jdGlvbiBhc3NlcnRQYXJ0KHBhcnQsIG5hbWUpIHtcbiAgaWYgKHBhcnQgJiYgcGFydC5pbmRleE9mKHAuc2VwKSA+IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBhIHBhdGg6IGRpZCBub3QgZXhwZWN0IGAnICsgcC5zZXAgKyAnYCdcbiAgICApXG4gIH1cbn1cblxuLy8gQXNzZXJ0IHRoYXQgYHBhcnRgIGlzIG5vdCBlbXB0eS5cbmZ1bmN0aW9uIGFzc2VydE5vbkVtcHR5KHBhcnQsIG5hbWUpIHtcbiAgaWYgKCFwYXJ0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgJyArIG5hbWUgKyAnYCBjYW5ub3QgYmUgZW1wdHknKVxuICB9XG59XG5cbi8vIEFzc2VydCBgcGF0aGAgZXhpc3RzLlxuZnVuY3Rpb24gYXNzZXJ0UGF0aChwYXRoLCBuYW1lKSB7XG4gIGlmICghcGF0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZyBgJyArIG5hbWUgKyAnYCByZXF1aXJlcyBgcGF0aGAgdG8gYmUgc2V0IHRvbycpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgVk1lc3NhZ2UgPSByZXF1aXJlKCd2ZmlsZS1tZXNzYWdlJylcbnZhciBWRmlsZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gVkZpbGVcblxuVkZpbGUucHJvdG90eXBlLm1lc3NhZ2UgPSBtZXNzYWdlXG5WRmlsZS5wcm90b3R5cGUuaW5mbyA9IGluZm9cblZGaWxlLnByb3RvdHlwZS5mYWlsID0gZmFpbFxuXG4vLyBDcmVhdGUgYSBtZXNzYWdlIHdpdGggYHJlYXNvbmAgYXQgYHBvc2l0aW9uYC5cbi8vIFdoZW4gYW4gZXJyb3IgaXMgcGFzc2VkIGluIGFzIGByZWFzb25gLCBjb3BpZXMgdGhlIHN0YWNrLlxuZnVuY3Rpb24gbWVzc2FnZShyZWFzb24sIHBvc2l0aW9uLCBvcmlnaW4pIHtcbiAgdmFyIG1lc3NhZ2UgPSBuZXcgVk1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbiwgb3JpZ2luKVxuXG4gIGlmICh0aGlzLnBhdGgpIHtcbiAgICBtZXNzYWdlLm5hbWUgPSB0aGlzLnBhdGggKyAnOicgKyBtZXNzYWdlLm5hbWVcbiAgICBtZXNzYWdlLmZpbGUgPSB0aGlzLnBhdGhcbiAgfVxuXG4gIG1lc3NhZ2UuZmF0YWwgPSBmYWxzZVxuXG4gIHRoaXMubWVzc2FnZXMucHVzaChtZXNzYWdlKVxuXG4gIHJldHVybiBtZXNzYWdlXG59XG5cbi8vIEZhaWw6IGNyZWF0ZXMgYSB2bWVzc2FnZSwgYXNzb2NpYXRlcyBpdCB3aXRoIHRoZSBmaWxlLCBhbmQgdGhyb3dzIGl0LlxuZnVuY3Rpb24gZmFpbCgpIHtcbiAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuXG4gIG1lc3NhZ2UuZmF0YWwgPSB0cnVlXG5cbiAgdGhyb3cgbWVzc2FnZVxufVxuXG4vLyBJbmZvOiBjcmVhdGVzIGEgdm1lc3NhZ2UsIGFzc29jaWF0ZXMgaXQgd2l0aCB0aGUgZmlsZSwgYW5kIG1hcmtzIHRoZSBmYXRhbGl0eVxuLy8gYXMgbnVsbC5cbmZ1bmN0aW9uIGluZm8oKSB7XG4gIHZhciBtZXNzYWdlID0gdGhpcy5tZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcblxuICBtZXNzYWdlLmZhdGFsID0gbnVsbFxuXG4gIHJldHVybiBtZXNzYWdlXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYicpXG4iLCIndXNlIHN0cmljdCdcblxudmFyIGJhaWwgPSByZXF1aXJlKCdiYWlsJylcbnZhciBidWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKVxudmFyIGV4dGVuZCA9IHJlcXVpcmUoJ2V4dGVuZCcpXG52YXIgcGxhaW4gPSByZXF1aXJlKCdpcy1wbGFpbi1vYmonKVxudmFyIHRyb3VnaCA9IHJlcXVpcmUoJ3Ryb3VnaCcpXG52YXIgdmZpbGUgPSByZXF1aXJlKCd2ZmlsZScpXG5cbi8vIEV4cG9zZSBhIGZyb3plbiBwcm9jZXNzb3IuXG5tb2R1bGUuZXhwb3J0cyA9IHVuaWZpZWQoKS5mcmVlemUoKVxuXG52YXIgc2xpY2UgPSBbXS5zbGljZVxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8vIFByb2Nlc3MgcGlwZWxpbmUuXG52YXIgcGlwZWxpbmUgPSB0cm91Z2goKVxuICAudXNlKHBpcGVsaW5lUGFyc2UpXG4gIC51c2UocGlwZWxpbmVSdW4pXG4gIC51c2UocGlwZWxpbmVTdHJpbmdpZnkpXG5cbmZ1bmN0aW9uIHBpcGVsaW5lUGFyc2UocCwgY3R4KSB7XG4gIGN0eC50cmVlID0gcC5wYXJzZShjdHguZmlsZSlcbn1cblxuZnVuY3Rpb24gcGlwZWxpbmVSdW4ocCwgY3R4LCBuZXh0KSB7XG4gIHAucnVuKGN0eC50cmVlLCBjdHguZmlsZSwgZG9uZSlcblxuICBmdW5jdGlvbiBkb25lKGVyciwgdHJlZSwgZmlsZSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIG5leHQoZXJyKVxuICAgIH0gZWxzZSB7XG4gICAgICBjdHgudHJlZSA9IHRyZWVcbiAgICAgIGN0eC5maWxlID0gZmlsZVxuICAgICAgbmV4dCgpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lU3RyaW5naWZ5KHAsIGN0eCkge1xuICB2YXIgcmVzdWx0ID0gcC5zdHJpbmdpZnkoY3R4LnRyZWUsIGN0eC5maWxlKVxuICB2YXIgZmlsZSA9IGN0eC5maWxlXG5cbiAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA9PT0gbnVsbCkge1xuICAgIC8vIEVtcHR5LlxuICB9IGVsc2UgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnIHx8IGJ1ZmZlcihyZXN1bHQpKSB7XG4gICAgZmlsZS5jb250ZW50cyA9IHJlc3VsdFxuICB9IGVsc2Uge1xuICAgIGZpbGUucmVzdWx0ID0gcmVzdWx0XG4gIH1cbn1cblxuLy8gRnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBmaXJzdCBwcm9jZXNzb3IuXG5mdW5jdGlvbiB1bmlmaWVkKCkge1xuICB2YXIgYXR0YWNoZXJzID0gW11cbiAgdmFyIHRyYW5zZm9ybWVycyA9IHRyb3VnaCgpXG4gIHZhciBuYW1lc3BhY2UgPSB7fVxuICB2YXIgZnJvemVuID0gZmFsc2VcbiAgdmFyIGZyZWV6ZUluZGV4ID0gLTFcblxuICAvLyBEYXRhIG1hbmFnZW1lbnQuXG4gIHByb2Nlc3Nvci5kYXRhID0gZGF0YVxuXG4gIC8vIExvY2suXG4gIHByb2Nlc3Nvci5mcmVlemUgPSBmcmVlemVcblxuICAvLyBQbHVnaW5zLlxuICBwcm9jZXNzb3IuYXR0YWNoZXJzID0gYXR0YWNoZXJzXG4gIHByb2Nlc3Nvci51c2UgPSB1c2VcblxuICAvLyBBUEkuXG4gIHByb2Nlc3Nvci5wYXJzZSA9IHBhcnNlXG4gIHByb2Nlc3Nvci5zdHJpbmdpZnkgPSBzdHJpbmdpZnlcbiAgcHJvY2Vzc29yLnJ1biA9IHJ1blxuICBwcm9jZXNzb3IucnVuU3luYyA9IHJ1blN5bmNcbiAgcHJvY2Vzc29yLnByb2Nlc3MgPSBwcm9jZXNzXG4gIHByb2Nlc3Nvci5wcm9jZXNzU3luYyA9IHByb2Nlc3NTeW5jXG5cbiAgLy8gRXhwb3NlLlxuICByZXR1cm4gcHJvY2Vzc29yXG5cbiAgLy8gQ3JlYXRlIGEgbmV3IHByb2Nlc3NvciBiYXNlZCBvbiB0aGUgcHJvY2Vzc29yIGluIHRoZSBjdXJyZW50IHNjb3BlLlxuICBmdW5jdGlvbiBwcm9jZXNzb3IoKSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gdW5pZmllZCgpXG4gICAgdmFyIGxlbmd0aCA9IGF0dGFjaGVycy5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnVzZS5hcHBseShudWxsLCBhdHRhY2hlcnNbaW5kZXhdKVxuICAgIH1cblxuICAgIGRlc3RpbmF0aW9uLmRhdGEoZXh0ZW5kKHRydWUsIHt9LCBuYW1lc3BhY2UpKVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG4gIH1cblxuICAvLyBGcmVlemU6IHVzZWQgdG8gc2lnbmFsIGEgcHJvY2Vzc29yIHRoYXQgaGFzIGZpbmlzaGVkIGNvbmZpZ3VyYXRpb24uXG4gIC8vXG4gIC8vIEZvciBleGFtcGxlLCB0YWtlIHVuaWZpZWQgaXRzZWxmOiBpdOKAmXMgZnJvemVuLlxuICAvLyBQbHVnaW5zIHNob3VsZCBub3QgYmUgYWRkZWQgdG8gaXQuXG4gIC8vIFJhdGhlciwgaXQgc2hvdWxkIGJlIGV4dGVuZGVkLCBieSBpbnZva2luZyBpdCwgYmVmb3JlIG1vZGlmeWluZyBpdC5cbiAgLy9cbiAgLy8gSW4gZXNzZW5jZSwgYWx3YXlzIGludm9rZSB0aGlzIHdoZW4gZXhwb3J0aW5nIGEgcHJvY2Vzc29yLlxuICBmdW5jdGlvbiBmcmVlemUoKSB7XG4gICAgdmFyIHZhbHVlc1xuICAgIHZhciBwbHVnaW5cbiAgICB2YXIgb3B0aW9uc1xuICAgIHZhciB0cmFuc2Zvcm1lclxuXG4gICAgaWYgKGZyb3plbikge1xuICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgIH1cblxuICAgIHdoaWxlICgrK2ZyZWV6ZUluZGV4IDwgYXR0YWNoZXJzLmxlbmd0aCkge1xuICAgICAgdmFsdWVzID0gYXR0YWNoZXJzW2ZyZWV6ZUluZGV4XVxuICAgICAgcGx1Z2luID0gdmFsdWVzWzBdXG4gICAgICBvcHRpb25zID0gdmFsdWVzWzFdXG4gICAgICB0cmFuc2Zvcm1lciA9IG51bGxcblxuICAgICAgaWYgKG9wdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHZhbHVlc1sxXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICB0cmFuc2Zvcm1lciA9IHBsdWdpbi5hcHBseShwcm9jZXNzb3IsIHZhbHVlcy5zbGljZSgxKSlcblxuICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0cmFuc2Zvcm1lcnMudXNlKHRyYW5zZm9ybWVyKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZyb3plbiA9IHRydWVcbiAgICBmcmVlemVJbmRleCA9IEluZmluaXR5XG5cbiAgICByZXR1cm4gcHJvY2Vzc29yXG4gIH1cblxuICAvLyBEYXRhIG1hbmFnZW1lbnQuXG4gIC8vIEdldHRlciAvIHNldHRlciBmb3IgcHJvY2Vzc29yLXNwZWNpZmljIGluZm9ybXRpb24uXG4gIGZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gU2V0IGBrZXlgLlxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCBmcm96ZW4pXG5cbiAgICAgICAgbmFtZXNwYWNlW2tleV0gPSB2YWx1ZVxuXG4gICAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICAgIH1cblxuICAgICAgLy8gR2V0IGBrZXlgLlxuICAgICAgcmV0dXJuIChvd24uY2FsbChuYW1lc3BhY2UsIGtleSkgJiYgbmFtZXNwYWNlW2tleV0pIHx8IG51bGxcbiAgICB9XG5cbiAgICAvLyBTZXQgc3BhY2UuXG4gICAgaWYgKGtleSkge1xuICAgICAgYXNzZXJ0VW5mcm96ZW4oJ2RhdGEnLCBmcm96ZW4pXG4gICAgICBuYW1lc3BhY2UgPSBrZXlcbiAgICAgIHJldHVybiBwcm9jZXNzb3JcbiAgICB9XG5cbiAgICAvLyBHZXQgc3BhY2UuXG4gICAgcmV0dXJuIG5hbWVzcGFjZVxuICB9XG5cbiAgLy8gUGx1Z2luIG1hbmFnZW1lbnQuXG4gIC8vXG4gIC8vIFBhc3MgaXQ6XG4gIC8vICogICBhbiBhdHRhY2hlciBhbmQgb3B0aW9ucyxcbiAgLy8gKiAgIGEgcHJlc2V0LFxuICAvLyAqICAgYSBsaXN0IG9mIHByZXNldHMsIGF0dGFjaGVycywgYW5kIGFyZ3VtZW50cyAobGlzdCBvZiBhdHRhY2hlcnMgYW5kXG4gIC8vICAgICBvcHRpb25zKS5cbiAgZnVuY3Rpb24gdXNlKHZhbHVlKSB7XG4gICAgdmFyIHNldHRpbmdzXG5cbiAgICBhc3NlcnRVbmZyb3plbigndXNlJywgZnJvemVuKVxuXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEVtcHR5LlxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhZGRQbHVnaW4uYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgICAgIGFkZExpc3QodmFsdWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdXNhYmxlIHZhbHVlLCBub3QgYCcgKyB2YWx1ZSArICdgJylcbiAgICB9XG5cbiAgICBpZiAoc2V0dGluZ3MpIHtcbiAgICAgIG5hbWVzcGFjZS5zZXR0aW5ncyA9IGV4dGVuZChuYW1lc3BhY2Uuc2V0dGluZ3MgfHwge30sIHNldHRpbmdzKVxuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzb3JcblxuICAgIGZ1bmN0aW9uIGFkZFByZXNldChyZXN1bHQpIHtcbiAgICAgIGFkZExpc3QocmVzdWx0LnBsdWdpbnMpXG5cbiAgICAgIGlmIChyZXN1bHQuc2V0dGluZ3MpIHtcbiAgICAgICAgc2V0dGluZ3MgPSBleHRlbmQoc2V0dGluZ3MgfHwge30sIHJlc3VsdC5zZXR0aW5ncylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYWRkUGx1Z2luKHZhbHVlKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmICgnbGVuZ3RoJyBpbiB2YWx1ZSkge1xuICAgICAgICAgIGFkZFBsdWdpbi5hcHBseShudWxsLCB2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRQcmVzZXQodmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdXNhYmxlIHZhbHVlLCBub3QgYCcgKyB2YWx1ZSArICdgJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRMaXN0KHBsdWdpbnMpIHtcbiAgICAgIHZhciBsZW5ndGhcbiAgICAgIHZhciBpbmRleFxuXG4gICAgICBpZiAocGx1Z2lucyA9PT0gbnVsbCB8fCBwbHVnaW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gRW1wdHkuXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBwbHVnaW5zKSB7XG4gICAgICAgIGxlbmd0aCA9IHBsdWdpbnMubGVuZ3RoXG4gICAgICAgIGluZGV4ID0gLTFcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFkZChwbHVnaW5zW2luZGV4XSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIGxpc3Qgb2YgcGx1Z2lucywgbm90IGAnICsgcGx1Z2lucyArICdgJylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRQbHVnaW4ocGx1Z2luLCB2YWx1ZSkge1xuICAgICAgdmFyIGVudHJ5ID0gZmluZChwbHVnaW4pXG5cbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICBpZiAocGxhaW4oZW50cnlbMV0pICYmIHBsYWluKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gZXh0ZW5kKGVudHJ5WzFdLCB2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIGVudHJ5WzFdID0gdmFsdWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dGFjaGVycy5wdXNoKHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kKHBsdWdpbikge1xuICAgIHZhciBsZW5ndGggPSBhdHRhY2hlcnMubGVuZ3RoXG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgZW50cnlcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBlbnRyeSA9IGF0dGFjaGVyc1tpbmRleF1cblxuICAgICAgaWYgKGVudHJ5WzBdID09PSBwbHVnaW4pIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUGFyc2UgYSBmaWxlIChpbiBzdHJpbmcgb3IgdmZpbGUgcmVwcmVzZW50YXRpb24pIGludG8gYSB1bmlzdCBub2RlIHVzaW5nXG4gIC8vIHRoZSBgUGFyc2VyYCBvbiB0aGUgcHJvY2Vzc29yLlxuICBmdW5jdGlvbiBwYXJzZShkb2MpIHtcbiAgICB2YXIgZmlsZSA9IHZmaWxlKGRvYylcbiAgICB2YXIgUGFyc2VyXG5cbiAgICBmcmVlemUoKVxuICAgIFBhcnNlciA9IHByb2Nlc3Nvci5QYXJzZXJcbiAgICBhc3NlcnRQYXJzZXIoJ3BhcnNlJywgUGFyc2VyKVxuXG4gICAgaWYgKG5ld2FibGUoUGFyc2VyLCAncGFyc2UnKSkge1xuICAgICAgcmV0dXJuIG5ldyBQYXJzZXIoU3RyaW5nKGZpbGUpLCBmaWxlKS5wYXJzZSgpXG4gICAgfVxuXG4gICAgcmV0dXJuIFBhcnNlcihTdHJpbmcoZmlsZSksIGZpbGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICB9XG5cbiAgLy8gUnVuIHRyYW5zZm9ybXMgb24gYSB1bmlzdCBub2RlIHJlcHJlc2VudGF0aW9uIG9mIGEgZmlsZSAoaW4gc3RyaW5nIG9yXG4gIC8vIHZmaWxlIHJlcHJlc2VudGF0aW9uKSwgYXN5bmMuXG4gIGZ1bmN0aW9uIHJ1bihub2RlLCBmaWxlLCBjYikge1xuICAgIGFzc2VydE5vZGUobm9kZSlcbiAgICBmcmVlemUoKVxuXG4gICAgaWYgKCFjYiAmJiB0eXBlb2YgZmlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2IgPSBmaWxlXG4gICAgICBmaWxlID0gbnVsbFxuICAgIH1cblxuICAgIGlmICghY2IpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShleGVjdXRvcilcbiAgICB9XG5cbiAgICBleGVjdXRvcihudWxsLCBjYilcblxuICAgIGZ1bmN0aW9uIGV4ZWN1dG9yKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdHJhbnNmb3JtZXJzLnJ1bihub2RlLCB2ZmlsZShmaWxlKSwgZG9uZSlcblxuICAgICAgZnVuY3Rpb24gZG9uZShlcnIsIHRyZWUsIGZpbGUpIHtcbiAgICAgICAgdHJlZSA9IHRyZWUgfHwgbm9kZVxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZSh0cmVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKG51bGwsIHRyZWUsIGZpbGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSdW4gdHJhbnNmb3JtcyBvbiBhIHVuaXN0IG5vZGUgcmVwcmVzZW50YXRpb24gb2YgYSBmaWxlIChpbiBzdHJpbmcgb3JcbiAgLy8gdmZpbGUgcmVwcmVzZW50YXRpb24pLCBzeW5jLlxuICBmdW5jdGlvbiBydW5TeW5jKG5vZGUsIGZpbGUpIHtcbiAgICB2YXIgY29tcGxldGUgPSBmYWxzZVxuICAgIHZhciByZXN1bHRcblxuICAgIHJ1bihub2RlLCBmaWxlLCBkb25lKVxuXG4gICAgYXNzZXJ0RG9uZSgncnVuU3luYycsICdydW4nLCBjb21wbGV0ZSlcblxuICAgIHJldHVybiByZXN1bHRcblxuICAgIGZ1bmN0aW9uIGRvbmUoZXJyLCB0cmVlKSB7XG4gICAgICBjb21wbGV0ZSA9IHRydWVcbiAgICAgIGJhaWwoZXJyKVxuICAgICAgcmVzdWx0ID0gdHJlZVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0cmluZ2lmeSBhIHVuaXN0IG5vZGUgcmVwcmVzZW50YXRpb24gb2YgYSBmaWxlIChpbiBzdHJpbmcgb3IgdmZpbGVcbiAgLy8gcmVwcmVzZW50YXRpb24pIGludG8gYSBzdHJpbmcgdXNpbmcgdGhlIGBDb21waWxlcmAgb24gdGhlIHByb2Nlc3Nvci5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5KG5vZGUsIGRvYykge1xuICAgIHZhciBmaWxlID0gdmZpbGUoZG9jKVxuICAgIHZhciBDb21waWxlclxuXG4gICAgZnJlZXplKClcbiAgICBDb21waWxlciA9IHByb2Nlc3Nvci5Db21waWxlclxuICAgIGFzc2VydENvbXBpbGVyKCdzdHJpbmdpZnknLCBDb21waWxlcilcbiAgICBhc3NlcnROb2RlKG5vZGUpXG5cbiAgICBpZiAobmV3YWJsZShDb21waWxlciwgJ2NvbXBpbGUnKSkge1xuICAgICAgcmV0dXJuIG5ldyBDb21waWxlcihub2RlLCBmaWxlKS5jb21waWxlKClcbiAgICB9XG5cbiAgICByZXR1cm4gQ29tcGlsZXIobm9kZSwgZmlsZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuZXctY2FwXG4gIH1cblxuICAvLyBQYXJzZSBhIGZpbGUgKGluIHN0cmluZyBvciB2ZmlsZSByZXByZXNlbnRhdGlvbikgaW50byBhIHVuaXN0IG5vZGUgdXNpbmdcbiAgLy8gdGhlIGBQYXJzZXJgIG9uIHRoZSBwcm9jZXNzb3IsIHRoZW4gcnVuIHRyYW5zZm9ybXMgb24gdGhhdCBub2RlLCBhbmRcbiAgLy8gY29tcGlsZSB0aGUgcmVzdWx0aW5nIG5vZGUgdXNpbmcgdGhlIGBDb21waWxlcmAgb24gdGhlIHByb2Nlc3NvciwgYW5kXG4gIC8vIHN0b3JlIHRoYXQgcmVzdWx0IG9uIHRoZSB2ZmlsZS5cbiAgZnVuY3Rpb24gcHJvY2Vzcyhkb2MsIGNiKSB7XG4gICAgZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3MnLCBwcm9jZXNzb3IuUGFyc2VyKVxuICAgIGFzc2VydENvbXBpbGVyKCdwcm9jZXNzJywgcHJvY2Vzc29yLkNvbXBpbGVyKVxuXG4gICAgaWYgKCFjYikge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGV4ZWN1dG9yKVxuICAgIH1cblxuICAgIGV4ZWN1dG9yKG51bGwsIGNiKVxuXG4gICAgZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZmlsZSA9IHZmaWxlKGRvYylcblxuICAgICAgcGlwZWxpbmUucnVuKHByb2Nlc3Nvciwge2ZpbGU6IGZpbGV9LCBkb25lKVxuXG4gICAgICBmdW5jdGlvbiBkb25lKGVycikge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIGlmIChyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZShmaWxlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKG51bGwsIGZpbGUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBQcm9jZXNzIHRoZSBnaXZlbiBkb2N1bWVudCAoaW4gc3RyaW5nIG9yIHZmaWxlIHJlcHJlc2VudGF0aW9uKSwgc3luYy5cbiAgZnVuY3Rpb24gcHJvY2Vzc1N5bmMoZG9jKSB7XG4gICAgdmFyIGNvbXBsZXRlID0gZmFsc2VcbiAgICB2YXIgZmlsZVxuXG4gICAgZnJlZXplKClcbiAgICBhc3NlcnRQYXJzZXIoJ3Byb2Nlc3NTeW5jJywgcHJvY2Vzc29yLlBhcnNlcilcbiAgICBhc3NlcnRDb21waWxlcigncHJvY2Vzc1N5bmMnLCBwcm9jZXNzb3IuQ29tcGlsZXIpXG4gICAgZmlsZSA9IHZmaWxlKGRvYylcblxuICAgIHByb2Nlc3MoZmlsZSwgZG9uZSlcblxuICAgIGFzc2VydERvbmUoJ3Byb2Nlc3NTeW5jJywgJ3Byb2Nlc3MnLCBjb21wbGV0ZSlcblxuICAgIHJldHVybiBmaWxlXG5cbiAgICBmdW5jdGlvbiBkb25lKGVycikge1xuICAgICAgY29tcGxldGUgPSB0cnVlXG4gICAgICBiYWlsKGVycilcbiAgICB9XG4gIH1cbn1cblxuLy8gQ2hlY2sgaWYgYHZhbHVlYCBpcyBhIGNvbnN0cnVjdG9yLlxuZnVuY3Rpb24gbmV3YWJsZSh2YWx1ZSwgbmFtZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHZhbHVlLnByb3RvdHlwZSAmJlxuICAgIC8vIEEgZnVuY3Rpb24gd2l0aCBrZXlzIGluIGl0cyBwcm90b3R5cGUgaXMgcHJvYmFibHkgYSBjb25zdHJ1Y3Rvci5cbiAgICAvLyBDbGFzc2Vz4oCZIHByb3RvdHlwZSBtZXRob2RzIGFyZSBub3QgZW51bWVyYWJsZSwgc28gd2UgY2hlY2sgaWYgc29tZSB2YWx1ZVxuICAgIC8vIGV4aXN0cyBpbiB0aGUgcHJvdG90eXBlLlxuICAgIChrZXlzKHZhbHVlLnByb3RvdHlwZSkgfHwgbmFtZSBpbiB2YWx1ZS5wcm90b3R5cGUpXG4gIClcbn1cblxuLy8gQ2hlY2sgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3Qgd2l0aCBrZXlzLlxuZnVuY3Rpb24ga2V5cyh2YWx1ZSkge1xuICB2YXIga2V5XG4gIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG4vLyBBc3NlcnQgYSBwYXJzZXIgaXMgYXZhaWxhYmxlLlxuZnVuY3Rpb24gYXNzZXJ0UGFyc2VyKG5hbWUsIFBhcnNlcikge1xuICBpZiAodHlwZW9mIFBhcnNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGAnICsgbmFtZSArICdgIHdpdGhvdXQgYFBhcnNlcmAnKVxuICB9XG59XG5cbi8vIEFzc2VydCBhIGNvbXBpbGVyIGlzIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIGFzc2VydENvbXBpbGVyKG5hbWUsIENvbXBpbGVyKSB7XG4gIGlmICh0eXBlb2YgQ29tcGlsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBgJyArIG5hbWUgKyAnYCB3aXRob3V0IGBDb21waWxlcmAnKVxuICB9XG59XG5cbi8vIEFzc2VydCB0aGUgcHJvY2Vzc29yIGlzIG5vdCBmcm96ZW4uXG5mdW5jdGlvbiBhc3NlcnRVbmZyb3plbihuYW1lLCBmcm96ZW4pIHtcbiAgaWYgKGZyb3plbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdDYW5ub3QgaW52b2tlIGAnICtcbiAgICAgICAgbmFtZSArXG4gICAgICAgICdgIG9uIGEgZnJvemVuIHByb2Nlc3Nvci5cXG5DcmVhdGUgYSBuZXcgcHJvY2Vzc29yIGZpcnN0LCBieSBpbnZva2luZyBpdDogdXNlIGBwcm9jZXNzb3IoKWAgaW5zdGVhZCBvZiBgcHJvY2Vzc29yYC4nXG4gICAgKVxuICB9XG59XG5cbi8vIEFzc2VydCBgbm9kZWAgaXMgYSB1bmlzdCBub2RlLlxuZnVuY3Rpb24gYXNzZXJ0Tm9kZShub2RlKSB7XG4gIGlmICghbm9kZSB8fCB0eXBlb2Ygbm9kZS50eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9kZSwgZ290IGAnICsgbm9kZSArICdgJylcbiAgfVxufVxuXG4vLyBBc3NlcnQgdGhhdCBgY29tcGxldGVgIGlzIGB0cnVlYC5cbmZ1bmN0aW9uIGFzc2VydERvbmUobmFtZSwgYXN5bmNOYW1lLCBjb21wbGV0ZSkge1xuICBpZiAoIWNvbXBsZXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2AnICsgbmFtZSArICdgIGZpbmlzaGVkIGFzeW5jLiBVc2UgYCcgKyBhc3luY05hbWUgKyAnYCBpbnN0ZWFkJ1xuICAgIClcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmdcblxuLy8gR2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgYSBub2RlLlxuLy8gUHJlZmVyIHRoZSBub2Rl4oCZcyBwbGFpbi10ZXh0IGZpZWxkcywgb3RoZXJ3aXNlIHNlcmlhbGl6ZSBpdHMgY2hpbGRyZW4sXG4vLyBhbmQgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGFycmF5LCBzZXJpYWxpemUgdGhlIG5vZGVzIGluIGl0LlxuZnVuY3Rpb24gdG9TdHJpbmcobm9kZSkge1xuICByZXR1cm4gKFxuICAgIChub2RlICYmXG4gICAgICAobm9kZS52YWx1ZSB8fFxuICAgICAgICBub2RlLmFsdCB8fFxuICAgICAgICBub2RlLnRpdGxlIHx8XG4gICAgICAgICgnY2hpbGRyZW4nIGluIG5vZGUgJiYgYWxsKG5vZGUuY2hpbGRyZW4pKSB8fFxuICAgICAgICAoJ2xlbmd0aCcgaW4gbm9kZSAmJiBhbGwobm9kZSkpKSkgfHxcbiAgICAnJ1xuICApXG59XG5cbmZ1bmN0aW9uIGFsbCh2YWx1ZXMpIHtcbiAgdmFyIHJlc3VsdCA9IFtdXG4gIHZhciBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IHRvU3RyaW5nKHZhbHVlc1tpbmRleF0pXG4gIH1cblxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ25cbiIsIm1vZHVsZS5leHBvcnRzID0ge30uaGFzT3duUHJvcGVydHlcbiIsIm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplSWRlbnRpZmllclxuXG5mdW5jdGlvbiBub3JtYWxpemVJZGVudGlmaWVyKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWVcbiAgICAgIC8vIENvbGxhcHNlIE1hcmtkb3duIHdoaXRlc3BhY2UuXG4gICAgICAucmVwbGFjZSgvW1xcdFxcblxcciBdKy9nLCAnICcpXG4gICAgICAvLyBUcmltLlxuICAgICAgLnJlcGxhY2UoL14gfCAkL2csICcnKVxuICAgICAgLy8gU29tZSBjaGFyYWN0ZXJzIGFyZSBjb25zaWRlcmVkIOKAnHVwcGVyY2FzZeKAnSwgYnV0IGlmIHRoZWlyIGxvd2VyY2FzZVxuICAgICAgLy8gY291bnRlcnBhcnQgaXMgdXBwZXJjYXNlZCB3aWxsIHJlc3VsdCBpbiBhIGRpZmZlcmVudCB1cHBlcmNhc2VcbiAgICAgIC8vIGNoYXJhY3Rlci5cbiAgICAgIC8vIEhlbmNlLCB0byBnZXQgdGhhdCBmb3JtLCB3ZSBwZXJmb3JtIGJvdGggbG93ZXItIGFuZCB1cHBlcmNhc2UuXG4gICAgICAvLyBVcHBlciBjYXNlIG1ha2VzIHN1cmUga2V5cyB3aWxsIG5vdCBpbnRlcmFjdCB3aXRoIGRlZmF1bHQgcHJvdG90eXBhbFxuICAgICAgLy8gbWV0aG9kczogbm8gb2JqZWN0IG1ldGhvZCBpcyB1cHBlcmNhc2UuXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnRvVXBwZXJDYXNlKClcbiAgKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHNhZmVGcm9tSW50XG5cbnZhciBmcm9tQ2hhckNvZGUgPSByZXF1aXJlKCcuLi9jb25zdGFudC9mcm9tLWNoYXItY29kZScpXG5cbmZ1bmN0aW9uIHNhZmVGcm9tSW50KHZhbHVlLCBiYXNlKSB7XG4gIHZhciBjb2RlID0gcGFyc2VJbnQodmFsdWUsIGJhc2UpXG5cbiAgaWYgKFxuICAgIC8vIEMwIGV4Y2VwdCBmb3IgSFQsIExGLCBGRiwgQ1IsIHNwYWNlXG4gICAgY29kZSA8IDkgfHxcbiAgICBjb2RlID09PSAxMSB8fFxuICAgIChjb2RlID4gMTMgJiYgY29kZSA8IDMyKSB8fFxuICAgIC8vIENvbnRyb2wgY2hhcmFjdGVyIChERUwpIG9mIHRoZSBiYXNpYyBibG9jayBhbmQgQzEgY29udHJvbHMuXG4gICAgKGNvZGUgPiAxMjYgJiYgY29kZSA8IDE2MCkgfHxcbiAgICAvLyBMb25lIGhpZ2ggc3Vycm9nYXRlcyBhbmQgbG93IHN1cnJvZ2F0ZXMuXG4gICAgKGNvZGUgPiA1NTI5NSAmJiBjb2RlIDwgNTczNDQpIHx8XG4gICAgLy8gTm9uY2hhcmFjdGVycy5cbiAgICAoY29kZSA+IDY0OTc1ICYmIGNvZGUgPCA2NTAwOCkgfHxcbiAgICAoY29kZSAmIDY1NTM1KSA9PT0gNjU1MzUgfHxcbiAgICAoY29kZSAmIDY1NTM1KSA9PT0gNjU1MzQgfHxcbiAgICAvLyBPdXQgb2YgcmFuZ2VcbiAgICBjb2RlID4gMTExNDExMVxuICApIHtcbiAgICByZXR1cm4gJ1xcdUZGRkQnXG4gIH1cblxuICByZXR1cm4gZnJvbUNoYXJDb2RlKGNvZGUpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG1hcmtkb3duTGluZUVuZGluZ1xuXG5mdW5jdGlvbiBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkge1xuICByZXR1cm4gY29kZSA8IC0yXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG1hcmtkb3duU3BhY2VcblxuZnVuY3Rpb24gbWFya2Rvd25TcGFjZShjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSAtMiB8fCBjb2RlID09PSAtMSB8fCBjb2RlID09PSAzMlxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTcGFjZVxuXG52YXIgbWFya2Rvd25TcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1zcGFjZScpXG5cbmZ1bmN0aW9uIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIG9rLCB0eXBlLCBtYXgpIHtcbiAgdmFyIGxpbWl0ID0gbWF4ID8gbWF4IC0gMSA6IEluZmluaXR5XG4gIHZhciBzaXplXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgICBzaXplID0gMFxuICAgICAgcmV0dXJuIHByZWZpeChjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlZml4KGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSAmJiBzaXplKysgPCBsaW1pdCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gcHJlZml4XG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSBpbml0aWFsaXplQ29udGVudFxuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcblxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi4vdG9rZW5pemUvZmFjdG9yeS1zcGFjZScpXG5cbmZ1bmN0aW9uIGluaXRpYWxpemVDb250ZW50KGVmZmVjdHMpIHtcbiAgdmFyIGNvbnRlbnRTdGFydCA9IGVmZmVjdHMuYXR0ZW1wdChcbiAgICB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmNvbnRlbnRJbml0aWFsLFxuICAgIGFmdGVyQ29udGVudFN0YXJ0Q29uc3RydWN0LFxuICAgIHBhcmFncmFwaEluaXRpYWxcbiAgKVxuXG4gIHZhciBwcmV2aW91c1xuXG4gIHJldHVybiBjb250ZW50U3RhcnRcblxuICBmdW5jdGlvbiBhZnRlckNvbnRlbnRTdGFydENvbnN0cnVjdChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgY29udGVudFN0YXJ0LCAnbGluZVByZWZpeCcpXG4gIH1cblxuICBmdW5jdGlvbiBwYXJhZ3JhcGhJbml0aWFsKGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdwYXJhZ3JhcGgnKVxuICAgIHJldHVybiBsaW5lU3RhcnQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVTdGFydChjb2RlKSB7XG4gICAgdmFyIHRva2VuID0gZWZmZWN0cy5lbnRlcignY2h1bmtUZXh0Jywge1xuICAgICAgY29udGVudFR5cGU6ICd0ZXh0JyxcbiAgICAgIHByZXZpb3VzOiBwcmV2aW91c1xuICAgIH0pXG5cbiAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgIHByZXZpb3VzLm5leHQgPSB0b2tlblxuICAgIH1cblxuICAgIHByZXZpb3VzID0gdG9rZW5cblxuICAgIHJldHVybiBkYXRhKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBkYXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1RleHQnKVxuICAgICAgZWZmZWN0cy5leGl0KCdwYXJhZ3JhcGgnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2h1bmtUZXh0JylcbiAgICAgIHJldHVybiBsaW5lU3RhcnRcbiAgICB9XG5cbiAgICAvLyBEYXRhLlxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZUJsYW5rTGluZVxuZXhwb3J0cy5wYXJ0aWFsID0gdHJ1ZVxuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcblxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi9mYWN0b3J5LXNwYWNlJylcblxuZnVuY3Rpb24gdG9rZW5pemVCbGFua0xpbmUoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgYWZ0ZXJXaGl0ZXNwYWNlLCAnbGluZVByZWZpeCcpXG5cbiAgZnVuY3Rpb24gYWZ0ZXJXaGl0ZXNwYWNlKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkgPyBvayhjb2RlKSA6IG5vayhjb2RlKVxuICB9XG59XG4iLCJleHBvcnRzLnRva2VuaXplID0gaW5pdGlhbGl6ZURvY3VtZW50XG5cbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxuXG52YXIgY3JlYXRlU3BhY2UgPSByZXF1aXJlKCcuLi90b2tlbml6ZS9mYWN0b3J5LXNwYWNlJylcbnZhciBibGFuayA9IHJlcXVpcmUoJy4uL3Rva2VuaXplL3BhcnRpYWwtYmxhbmstbGluZScpXG5cbnZhciBjb250YWluZXIgPSB7dG9rZW5pemU6IHRva2VuaXplQ29udGFpbmVyfVxudmFyIGxhenlGbG93ID0ge3Rva2VuaXplOiB0b2tlbml6ZUxhenlGbG93fVxuXG5mdW5jdGlvbiBpbml0aWFsaXplRG9jdW1lbnQoZWZmZWN0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHN0YWNrID0gW11cbiAgdmFyIGNvbnRpbnVlZCA9IDBcbiAgdmFyIGluc3BlY3RSZXN1bHRcbiAgdmFyIGNoaWxkRmxvd1xuICB2YXIgY2hpbGRUb2tlblxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29udGludWVkIDwgc3RhY2subGVuZ3RoKSB7XG4gICAgICBzZWxmLmNvbnRhaW5lclN0YXRlID0gc3RhY2tbY29udGludWVkXVsxXVxuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgICAgc3RhY2tbY29udGludWVkXVswXS5jb250aW51YXRpb24sXG4gICAgICAgIGRvY3VtZW50Q29udGludWUsXG4gICAgICAgIGRvY3VtZW50Q29udGludWVkXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGRvY3VtZW50Q29udGludWVkKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBkb2N1bWVudENvbnRpbnVlKGNvZGUpIHtcbiAgICBjb250aW51ZWQrK1xuICAgIHJldHVybiBzdGFydChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gZG9jdW1lbnRDb250aW51ZWQoY29kZSkge1xuICAgIC8vIElmIHdl4oCZcmUgaW4gYSBjb25jcmV0ZSBjb25zdHJ1Y3QgKHN1Y2ggYXMgd2hlbiBleHBlY3RpbmcgYW5vdGhlciBsaW5lIG9mXG4gICAgLy8gSFRNTCwgb3Igd2UgcmVzdWx0ZWQgaW4gbGF6eSBjb250ZW50KSwgd2UgY2FuIGltbWVkaWF0ZWx5IHN0YXJ0IGZsb3cuXG4gICAgaWYgKGluc3BlY3RSZXN1bHQgJiYgaW5zcGVjdFJlc3VsdC5mbG93Q29udGludWUpIHtcbiAgICAgIHJldHVybiBmbG93U3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBzZWxmLmludGVycnVwdCA9XG4gICAgICBjaGlsZEZsb3cgJiZcbiAgICAgIGNoaWxkRmxvdy5jdXJyZW50Q29uc3RydWN0ICYmXG4gICAgICBjaGlsZEZsb3cuY3VycmVudENvbnN0cnVjdC5pbnRlcnJ1cHRpYmxlXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZSA9IHt9XG4gICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChjb250YWluZXIsIGNvbnRhaW5lckNvbnRpbnVlLCBmbG93U3RhcnQpKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250YWluZXJDb250aW51ZShjb2RlKSB7XG4gICAgc3RhY2sucHVzaChbc2VsZi5jdXJyZW50Q29uc3RydWN0LCBzZWxmLmNvbnRhaW5lclN0YXRlXSlcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIGRvY3VtZW50Q29udGludWVkKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBmbG93U3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBleGl0Q29udGFpbmVycygwLCB0cnVlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBjaGlsZEZsb3cgPSBjaGlsZEZsb3cgfHwgc2VsZi5wYXJzZXIuZmxvdyhzZWxmLm5vdygpKVxuXG4gICAgZWZmZWN0cy5lbnRlcignY2h1bmtGbG93Jywge1xuICAgICAgY29udGVudFR5cGU6ICdmbG93JyxcbiAgICAgIHByZXZpb3VzOiBjaGlsZFRva2VuLFxuICAgICAgX3Rva2VuaXplcjogY2hpbGRGbG93XG4gICAgfSlcblxuICAgIHJldHVybiBmbG93Q29udGludWUoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsb3dDb250aW51ZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlRmxvdyhlZmZlY3RzLmV4aXQoJ2NodW5rRmxvdycpKVxuICAgICAgcmV0dXJuIGZsb3dTdGFydChjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgY29udGludWVGbG93KGVmZmVjdHMuZXhpdCgnY2h1bmtGbG93JykpXG4gICAgICByZXR1cm4gZWZmZWN0cy5jaGVjayhcbiAgICAgICAge3Rva2VuaXplOiB0b2tlbml6ZUluc3BlY3QsIHBhcnRpYWw6IHRydWV9LFxuICAgICAgICBkb2N1bWVudEFmdGVyUGVla1xuICAgICAgKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBmbG93Q29udGludWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvY3VtZW50QWZ0ZXJQZWVrKGNvZGUpIHtcbiAgICBleGl0Q29udGFpbmVycyhcbiAgICAgIGluc3BlY3RSZXN1bHQuY29udGludWVkLFxuICAgICAgaW5zcGVjdFJlc3VsdCAmJiBpbnNwZWN0UmVzdWx0LmZsb3dFbmRcbiAgICApXG5cbiAgICBjb250aW51ZWQgPSAwXG4gICAgcmV0dXJuIHN0YXJ0KGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250aW51ZUZsb3codG9rZW4pIHtcbiAgICBpZiAoY2hpbGRUb2tlbikgY2hpbGRUb2tlbi5uZXh0ID0gdG9rZW5cbiAgICBjaGlsZFRva2VuID0gdG9rZW5cbiAgICBjaGlsZEZsb3cubGF6eSA9IGluc3BlY3RSZXN1bHQgJiYgaW5zcGVjdFJlc3VsdC5sYXp5XG4gICAgY2hpbGRGbG93LmRlZmluZVNraXAodG9rZW4uc3RhcnQpXG4gICAgY2hpbGRGbG93LndyaXRlKHNlbGYuc2xpY2VTdHJlYW0odG9rZW4pKVxuICB9XG5cbiAgZnVuY3Rpb24gZXhpdENvbnRhaW5lcnMoc2l6ZSwgZW5kKSB7XG4gICAgdmFyIGluZGV4ID0gc3RhY2subGVuZ3RoXG5cbiAgICAvLyBDbG9zZSB0aGUgZmxvdy5cbiAgICBpZiAoY2hpbGRGbG93ICYmIGVuZCkge1xuICAgICAgY2hpbGRGbG93LndyaXRlKFtudWxsXSlcbiAgICAgIGNoaWxkVG9rZW4gPSBjaGlsZEZsb3cgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICAvLyBFeGl0IG9wZW4gY29udGFpbmVycy5cbiAgICB3aGlsZSAoaW5kZXgtLSA+IHNpemUpIHtcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUgPSBzdGFja1tpbmRleF1bMV1cbiAgICAgIHN0YWNrW2luZGV4XVswXS5leGl0LmNhbGwoc2VsZiwgZWZmZWN0cylcbiAgICB9XG5cbiAgICBzdGFjay5sZW5ndGggPSBzaXplXG4gIH1cblxuICBmdW5jdGlvbiB0b2tlbml6ZUluc3BlY3QoZWZmZWN0cywgb2spIHtcbiAgICB2YXIgc3ViY29udGludWVkID0gMFxuXG4gICAgaW5zcGVjdFJlc3VsdCA9IHt9XG5cbiAgICByZXR1cm4gaW5zcGVjdFN0YXJ0XG5cbiAgICBmdW5jdGlvbiBpbnNwZWN0U3RhcnQoY29kZSkge1xuICAgICAgaWYgKHN1YmNvbnRpbnVlZCA8IHN0YWNrLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmNvbnRhaW5lclN0YXRlID0gc3RhY2tbc3ViY29udGludWVkXVsxXVxuICAgICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICAgIHN0YWNrW3N1YmNvbnRpbnVlZF1bMF0uY29udGludWF0aW9uLFxuICAgICAgICAgIGluc3BlY3RDb250aW51ZSxcbiAgICAgICAgICBpbnNwZWN0TGVzc1xuICAgICAgICApKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdl4oCZcmUgY29udGludWVkIGJ1dCBpbiBhIGNvbmNyZXRlIGZsb3csIHdlIGNhbuKAmXQgaGF2ZSBtb3JlXG4gICAgICAvLyBjb250YWluZXJzLlxuICAgICAgaWYgKGNoaWxkRmxvdy5jdXJyZW50Q29uc3RydWN0ICYmIGNoaWxkRmxvdy5jdXJyZW50Q29uc3RydWN0LmNvbmNyZXRlKSB7XG4gICAgICAgIGluc3BlY3RSZXN1bHQuZmxvd0NvbnRpbnVlID0gdHJ1ZVxuICAgICAgICByZXR1cm4gaW5zcGVjdERvbmUoY29kZSlcbiAgICAgIH1cblxuICAgICAgc2VsZi5pbnRlcnJ1cHQgPVxuICAgICAgICBjaGlsZEZsb3cuY3VycmVudENvbnN0cnVjdCAmJiBjaGlsZEZsb3cuY3VycmVudENvbnN0cnVjdC5pbnRlcnJ1cHRpYmxlXG4gICAgICBzZWxmLmNvbnRhaW5lclN0YXRlID0ge31cbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoY29udGFpbmVyLCBpbnNwZWN0Rmxvd0VuZCwgaW5zcGVjdERvbmUpKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdENvbnRpbnVlKGNvZGUpIHtcbiAgICAgIHN1YmNvbnRpbnVlZCsrXG4gICAgICByZXR1cm4gc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93XG4gICAgICAgID8gaW5zcGVjdEZsb3dFbmQoY29kZSlcbiAgICAgICAgOiBpbnNwZWN0U3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNwZWN0TGVzcyhjb2RlKSB7XG4gICAgICBpZiAoY2hpbGRGbG93LmN1cnJlbnRDb25zdHJ1Y3QgJiYgY2hpbGRGbG93LmN1cnJlbnRDb25zdHJ1Y3QubGF6eSkge1xuICAgICAgICAvLyBNYXliZSBhbm90aGVyIGNvbnRhaW5lcj9cbiAgICAgICAgc2VsZi5jb250YWluZXJTdGF0ZSA9IHt9XG4gICAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGluc3BlY3RGbG93RW5kLFxuICAgICAgICAgIC8vIE1heWJlIGZsb3csIG9yIGEgYmxhbmsgbGluZT9cbiAgICAgICAgICBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgICAgICBsYXp5RmxvdyxcbiAgICAgICAgICAgIGluc3BlY3RGbG93RW5kLFxuICAgICAgICAgICAgZWZmZWN0cy5jaGVjayhibGFuaywgaW5zcGVjdEZsb3dFbmQsIGluc3BlY3RMYXp5KVxuICAgICAgICAgIClcbiAgICAgICAgKShjb2RlKVxuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2Ugd2XigJlyZSBpbnRlcnJ1cHRpbmcuXG4gICAgICByZXR1cm4gaW5zcGVjdEZsb3dFbmQoY29kZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNwZWN0TGF6eShjb2RlKSB7XG4gICAgICAvLyBBY3QgYXMgaWYgYWxsIGNvbnRhaW5lcnMgYXJlIGNvbnRpbnVlZC5cbiAgICAgIHN1YmNvbnRpbnVlZCA9IHN0YWNrLmxlbmd0aFxuICAgICAgaW5zcGVjdFJlc3VsdC5sYXp5ID0gdHJ1ZVxuICAgICAgaW5zcGVjdFJlc3VsdC5mbG93Q29udGludWUgPSB0cnVlXG4gICAgICByZXR1cm4gaW5zcGVjdERvbmUoY29kZSlcbiAgICB9XG5cbiAgICAvLyBXZeKAmXJlIGRvbmUgd2l0aCBmbG93IGlmIHdlIGhhdmUgbW9yZSBjb250YWluZXJzLCBvciBhbiBpbnRlcnJ1cHRpb24uXG4gICAgZnVuY3Rpb24gaW5zcGVjdEZsb3dFbmQoY29kZSkge1xuICAgICAgaW5zcGVjdFJlc3VsdC5mbG93RW5kID0gdHJ1ZVxuICAgICAgcmV0dXJuIGluc3BlY3REb25lKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdERvbmUoY29kZSkge1xuICAgICAgaW5zcGVjdFJlc3VsdC5jb250aW51ZWQgPSBzdWJjb250aW51ZWRcbiAgICAgIHNlbGYuaW50ZXJydXB0ID0gc2VsZi5jb250YWluZXJTdGF0ZSA9IHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplQ29udGFpbmVyKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIGNyZWF0ZVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgZWZmZWN0cy5hdHRlbXB0KHRoaXMucGFyc2VyLmNvbnN0cnVjdHMuZG9jdW1lbnQsIG9rLCBub2spLFxuICAgICdsaW5lUHJlZml4JyxcbiAgICA0XG4gIClcbn1cblxuZnVuY3Rpb24gdG9rZW5pemVMYXp5RmxvdyhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBjcmVhdGVTcGFjZShcbiAgICBlZmZlY3RzLFxuICAgIGVmZmVjdHMubGF6eSh0aGlzLnBhcnNlci5jb25zdHJ1Y3RzLmZsb3csIG9rLCBub2spLFxuICAgICdsaW5lUHJlZml4JyxcbiAgICA0XG4gIClcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gY2h1bmtlZFNwbGljZVxuXG52YXIgdjhNYXhTYWZlQ2h1bmtTaXplID0gMTAwMDBcblxuLy8gYEFycmF5I3NwbGljZWAgdGFrZXMgYWxsIGl0ZW1zIHRvIGJlIGluc2VydGVkIGFzIGluZGl2aWR1YWwgYXJndW1lbnQgd2hpY2hcbi8vIGNhdXNlcyBhIHN0YWNrIG92ZXJmbG93IGluIFY4IHdoZW4gdHJ5aW5nIHRvIGluc2VydCAxMDBrIGl0ZW1zIGZvciBpbnN0YW5jZS5cbmZ1bmN0aW9uIGNodW5rZWRTcGxpY2UobGlzdCwgc3RhcnQsIHJlbW92ZSwgaXRlbXMpIHtcbiAgdmFyIGVuZCA9IGxpc3QubGVuZ3RoXG4gIHZhciBjaHVua1N0YXJ0ID0gMFxuICB2YXIgcmVzdWx0XG4gIHZhciBwYXJhbWV0ZXJzXG5cbiAgLy8gTWFrZSBzdGFydCBiZXR3ZWVuIHplcm8gYW5kIGBlbmRgIChpbmNsdWRlZCkuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IC1zdGFydCA+IGVuZCA/IDAgOiBlbmQgKyBzdGFydFxuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gc3RhcnQgPiBlbmQgPyBlbmQgOiBzdGFydFxuICB9XG5cbiAgcmVtb3ZlID0gcmVtb3ZlID4gMCA/IHJlbW92ZSA6IDBcblxuICAvLyBObyBuZWVkIHRvIGNodW5rIHRoZSBpdGVtcyBpZiB0aGVyZeKAmXMgb25seSBhIGNvdXBsZSAoMTBrKSBpdGVtcy5cbiAgaWYgKGl0ZW1zLmxlbmd0aCA8IHY4TWF4U2FmZUNodW5rU2l6ZSkge1xuICAgIHBhcmFtZXRlcnMgPSBBcnJheS5mcm9tKGl0ZW1zKVxuICAgIHBhcmFtZXRlcnMudW5zaGlmdChzdGFydCwgcmVtb3ZlKVxuICAgIHJldHVybiBbXS5zcGxpY2UuYXBwbHkobGlzdCwgcGFyYW1ldGVycylcbiAgfVxuXG4gIC8vIERlbGV0ZSBgcmVtb3ZlYCBpdGVtcyBzdGFydGluZyBmcm9tIGBzdGFydGBcbiAgcmVzdWx0ID0gW10uc3BsaWNlLmFwcGx5KGxpc3QsIFtzdGFydCwgcmVtb3ZlXSlcblxuICAvLyBJbnNlcnQgdGhlIGl0ZW1zIGluIGNodW5rcyB0byBub3QgY2F1c2Ugc3RhY2sgb3ZlcmZsb3dzLlxuICB3aGlsZSAoY2h1bmtTdGFydCA8IGl0ZW1zLmxlbmd0aCkge1xuICAgIHBhcmFtZXRlcnMgPSBpdGVtcy5zbGljZShjaHVua1N0YXJ0LCBjaHVua1N0YXJ0ICsgdjhNYXhTYWZlQ2h1bmtTaXplKVxuICAgIHBhcmFtZXRlcnMudW5zaGlmdChzdGFydCwgMClcbiAgICA7W10uc3BsaWNlLmFwcGx5KGxpc3QsIHBhcmFtZXRlcnMpXG5cbiAgICBjaHVua1N0YXJ0ICs9IHY4TWF4U2FmZUNodW5rU2l6ZVxuICAgIHN0YXJ0ICs9IHY4TWF4U2FmZUNodW5rU2l6ZVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93XG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9jb25zdGFudC9hc3NpZ24nKVxuXG5mdW5jdGlvbiBzaGFsbG93KG9iamVjdCkge1xuICByZXR1cm4gYXNzaWduKHt9LCBvYmplY3QpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHN1YnRva2VuaXplXG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9jb25zdGFudC9hc3NpZ24nKVxuXG52YXIgY2h1bmtlZFNwbGljZSA9IHJlcXVpcmUoJy4vY2h1bmtlZC1zcGxpY2UnKVxudmFyIHNoYWxsb3cgPSByZXF1aXJlKCcuL3NoYWxsb3cnKVxuXG5mdW5jdGlvbiBzdWJ0b2tlbml6ZShldmVudHMpIHtcbiAgdmFyIGp1bXBzID0ge31cbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGV2ZW50XG4gIHZhciBsaW5lSW5kZXhcbiAgdmFyIG90aGVySW5kZXhcbiAgdmFyIG90aGVyRXZlbnRcbiAgdmFyIHBhcmFtZXRlcnNcbiAgdmFyIHN1YmV2ZW50c1xuICB2YXIgbW9yZVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgIHdoaWxlIChpbmRleCBpbiBqdW1wcykge1xuICAgICAgaW5kZXggPSBqdW1wc1tpbmRleF1cbiAgICB9XG5cbiAgICBldmVudCA9IGV2ZW50c1tpbmRleF1cblxuICAgIC8vIEFkZCBhIGhvb2sgZm9yIHRoZSBHRk0gdGFza2xpc3QgZXh0ZW5zaW9uLCB3aGljaCBuZWVkcyB0byBrbm93IGlmIHRleHRcbiAgICAvLyBpcyBpbiB0aGUgZmlyc3QgY29udGVudCBvZiBhIGxpc3QgaXRlbS5cbiAgICBpZiAoXG4gICAgICBpbmRleCAmJlxuICAgICAgZXZlbnRbMV0udHlwZSA9PT0gJ2NodW5rRmxvdycgJiZcbiAgICAgIGV2ZW50c1tpbmRleCAtIDFdWzFdLnR5cGUgPT09ICdsaXN0SXRlbVByZWZpeCdcbiAgICApIHtcbiAgICAgIHN1YmV2ZW50cyA9IGV2ZW50WzFdLl90b2tlbml6ZXIuZXZlbnRzXG4gICAgICBvdGhlckluZGV4ID0gMFxuXG4gICAgICBpZiAoXG4gICAgICAgIG90aGVySW5kZXggPCBzdWJldmVudHMubGVuZ3RoICYmXG4gICAgICAgIHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS50eXBlID09PSAnbGluZUVuZGluZ0JsYW5rJ1xuICAgICAgKSB7XG4gICAgICAgIG90aGVySW5kZXggKz0gMlxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG90aGVySW5kZXggPCBzdWJldmVudHMubGVuZ3RoICYmXG4gICAgICAgIHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS50eXBlID09PSAnY29udGVudCdcbiAgICAgICkge1xuICAgICAgICB3aGlsZSAoKytvdGhlckluZGV4IDwgc3ViZXZlbnRzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChzdWJldmVudHNbb3RoZXJJbmRleF1bMV0udHlwZSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdWJldmVudHNbb3RoZXJJbmRleF1bMV0udHlwZSA9PT0gJ2NodW5rVGV4dCcpIHtcbiAgICAgICAgICAgIHN1YmV2ZW50c1tvdGhlckluZGV4XVsxXS5pc0luRmlyc3RDb250ZW50T2ZMaXN0SXRlbSA9IHRydWVcbiAgICAgICAgICAgIG90aGVySW5kZXgrK1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEVudGVyLlxuICAgIGlmIChldmVudFswXSA9PT0gJ2VudGVyJykge1xuICAgICAgaWYgKGV2ZW50WzFdLmNvbnRlbnRUeXBlKSB7XG4gICAgICAgIGFzc2lnbihqdW1wcywgc3ViY29udGVudChldmVudHMsIGluZGV4KSlcbiAgICAgICAgaW5kZXggPSBqdW1wc1tpbmRleF1cbiAgICAgICAgbW9yZSA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRXhpdC5cbiAgICBlbHNlIGlmIChldmVudFsxXS5fY29udGFpbmVyIHx8IGV2ZW50WzFdLl9tb3ZlUHJldmlvdXNMaW5lRW5kaW5ncykge1xuICAgICAgb3RoZXJJbmRleCA9IGluZGV4XG4gICAgICBsaW5lSW5kZXggPSB1bmRlZmluZWRcblxuICAgICAgd2hpbGUgKG90aGVySW5kZXgtLSkge1xuICAgICAgICBvdGhlckV2ZW50ID0gZXZlbnRzW290aGVySW5kZXhdXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIG90aGVyRXZlbnRbMV0udHlwZSA9PT0gJ2xpbmVFbmRpbmcnIHx8XG4gICAgICAgICAgb3RoZXJFdmVudFsxXS50eXBlID09PSAnbGluZUVuZGluZ0JsYW5rJ1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAob3RoZXJFdmVudFswXSA9PT0gJ2VudGVyJykge1xuICAgICAgICAgICAgaWYgKGxpbmVJbmRleCkge1xuICAgICAgICAgICAgICBldmVudHNbbGluZUluZGV4XVsxXS50eXBlID0gJ2xpbmVFbmRpbmdCbGFuaydcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb3RoZXJFdmVudFsxXS50eXBlID0gJ2xpbmVFbmRpbmcnXG4gICAgICAgICAgICBsaW5lSW5kZXggPSBvdGhlckluZGV4XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxpbmVJbmRleCkge1xuICAgICAgICAvLyBGaXggcG9zaXRpb24uXG4gICAgICAgIGV2ZW50WzFdLmVuZCA9IHNoYWxsb3coZXZlbnRzW2xpbmVJbmRleF1bMV0uc3RhcnQpXG5cbiAgICAgICAgLy8gU3dpdGNoIGNvbnRhaW5lciBleGl0IHcvIGxpbmUgZW5kaW5ncy5cbiAgICAgICAgcGFyYW1ldGVycyA9IGV2ZW50cy5zbGljZShsaW5lSW5kZXgsIGluZGV4KVxuICAgICAgICBwYXJhbWV0ZXJzLnVuc2hpZnQoZXZlbnQpXG4gICAgICAgIGNodW5rZWRTcGxpY2UoZXZlbnRzLCBsaW5lSW5kZXgsIGluZGV4IC0gbGluZUluZGV4ICsgMSwgcGFyYW1ldGVycylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gIW1vcmVcbn1cblxuZnVuY3Rpb24gc3ViY29udGVudChldmVudHMsIGV2ZW50SW5kZXgpIHtcbiAgdmFyIHRva2VuID0gZXZlbnRzW2V2ZW50SW5kZXhdWzFdXG4gIHZhciBjb250ZXh0ID0gZXZlbnRzW2V2ZW50SW5kZXhdWzJdXG4gIHZhciBzdGFydFBvc2l0aW9uID0gZXZlbnRJbmRleCAtIDFcbiAgdmFyIHN0YXJ0UG9zaXRpb25zID0gW11cbiAgdmFyIHRva2VuaXplciA9XG4gICAgdG9rZW4uX3Rva2VuaXplciB8fCBjb250ZXh0LnBhcnNlclt0b2tlbi5jb250ZW50VHlwZV0odG9rZW4uc3RhcnQpXG4gIHZhciBjaGlsZEV2ZW50cyA9IHRva2VuaXplci5ldmVudHNcbiAgdmFyIGp1bXBzID0gW11cbiAgdmFyIGdhcHMgPSB7fVxuICB2YXIgc3RyZWFtXG4gIHZhciBwcmV2aW91c1xuICB2YXIgaW5kZXhcbiAgdmFyIGVudGVyZWRcbiAgdmFyIGVuZFxuICB2YXIgYWRqdXN0XG5cbiAgLy8gTG9vcCBmb3J3YXJkIHRocm91Z2ggdGhlIGxpbmtlZCB0b2tlbnMgdG8gcGFzcyB0aGVtIGluIG9yZGVyIHRvIHRoZVxuICAvLyBzdWJ0b2tlbml6ZXIuXG4gIHdoaWxlICh0b2tlbikge1xuICAgIC8vIEZpbmQgdGhlIHBvc2l0aW9uIG9mIHRoZSBldmVudCBmb3IgdGhpcyB0b2tlbi5cbiAgICB3aGlsZSAoZXZlbnRzWysrc3RhcnRQb3NpdGlvbl1bMV0gIT09IHRva2VuKSB7XG4gICAgICAvLyBFbXB0eS5cbiAgICB9XG5cbiAgICBzdGFydFBvc2l0aW9ucy5wdXNoKHN0YXJ0UG9zaXRpb24pXG5cbiAgICBpZiAoIXRva2VuLl90b2tlbml6ZXIpIHtcbiAgICAgIHN0cmVhbSA9IGNvbnRleHQuc2xpY2VTdHJlYW0odG9rZW4pXG5cbiAgICAgIGlmICghdG9rZW4ubmV4dCkge1xuICAgICAgICBzdHJlYW0ucHVzaChudWxsKVxuICAgICAgfVxuXG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgdG9rZW5pemVyLmRlZmluZVNraXAodG9rZW4uc3RhcnQpXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5pc0luRmlyc3RDb250ZW50T2ZMaXN0SXRlbSkge1xuICAgICAgICB0b2tlbml6ZXIuX2dmbVRhc2tsaXN0Rmlyc3RDb250ZW50T2ZMaXN0SXRlbSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgdG9rZW5pemVyLndyaXRlKHN0cmVhbSlcblxuICAgICAgaWYgKHRva2VuLmlzSW5GaXJzdENvbnRlbnRPZkxpc3RJdGVtKSB7XG4gICAgICAgIHRva2VuaXplci5fZ2ZtVGFza2xpc3RGaXJzdENvbnRlbnRPZkxpc3RJdGVtID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW5yYXZlbCB0aGUgbmV4dCB0b2tlbi5cbiAgICBwcmV2aW91cyA9IHRva2VuXG4gICAgdG9rZW4gPSB0b2tlbi5uZXh0XG4gIH1cblxuICAvLyBOb3csIGxvb3AgYmFjayB0aHJvdWdoIGFsbCBldmVudHMgKGFuZCBsaW5rZWQgdG9rZW5zKSwgdG8gZmlndXJlIG91dCB3aGljaFxuICAvLyBwYXJ0cyBiZWxvbmcgd2hlcmUuXG4gIHRva2VuID0gcHJldmlvdXNcbiAgaW5kZXggPSBjaGlsZEV2ZW50cy5sZW5ndGhcblxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIC8vIE1ha2Ugc3VyZSB3ZeKAmXZlIGF0IGxlYXN0IHNlZW4gc29tZXRoaW5nIChmaW5hbCBlb2wgaXMgcGFydCBvZiB0aGUgbGFzdFxuICAgIC8vIHRva2VuKS5cbiAgICBpZiAoY2hpbGRFdmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInKSB7XG4gICAgICBlbnRlcmVkID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBGaW5kIGEgdm9pZCB0b2tlbiB0aGF0IGluY2x1ZGVzIGEgYnJlYWsuXG4gICAgICBlbnRlcmVkICYmXG4gICAgICBjaGlsZEV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gY2hpbGRFdmVudHNbaW5kZXggLSAxXVsxXS50eXBlICYmXG4gICAgICBjaGlsZEV2ZW50c1tpbmRleF1bMV0uc3RhcnQubGluZSAhPT0gY2hpbGRFdmVudHNbaW5kZXhdWzFdLmVuZC5saW5lXG4gICAgKSB7XG4gICAgICBhZGQoY2hpbGRFdmVudHMuc2xpY2UoaW5kZXggKyAxLCBlbmQpKVxuXG4gICAgICAvLyBIZWxwIEdDLlxuICAgICAgdG9rZW4uX3Rva2VuaXplciA9IHRva2VuLm5leHQgPSB1bmRlZmluZWRcbiAgICAgIHRva2VuID0gdG9rZW4ucHJldmlvdXNcbiAgICAgIGVuZCA9IGluZGV4ICsgMVxuICAgIH1cbiAgfVxuXG4gIC8vIEhlbHAgR0MuXG4gIHRva2VuaXplci5ldmVudHMgPSB0b2tlbi5fdG9rZW5pemVyID0gdG9rZW4ubmV4dCA9IHVuZGVmaW5lZFxuXG4gIC8vIERvIGhlYWQ6XG4gIGFkZChjaGlsZEV2ZW50cy5zbGljZSgwLCBlbmQpKVxuXG4gIGluZGV4ID0gLTFcbiAgYWRqdXN0ID0gMFxuXG4gIHdoaWxlICgrK2luZGV4IDwganVtcHMubGVuZ3RoKSB7XG4gICAgZ2Fwc1thZGp1c3QgKyBqdW1wc1tpbmRleF1bMF1dID0gYWRqdXN0ICsganVtcHNbaW5kZXhdWzFdXG4gICAgYWRqdXN0ICs9IGp1bXBzW2luZGV4XVsxXSAtIGp1bXBzW2luZGV4XVswXSAtIDFcbiAgfVxuXG4gIHJldHVybiBnYXBzXG5cbiAgZnVuY3Rpb24gYWRkKHNsaWNlKSB7XG4gICAgdmFyIHN0YXJ0ID0gc3RhcnRQb3NpdGlvbnMucG9wKClcbiAgICBqdW1wcy51bnNoaWZ0KFtzdGFydCwgc3RhcnQgKyBzbGljZS5sZW5ndGggLSAxXSlcbiAgICBjaHVua2VkU3BsaWNlKGV2ZW50cywgc3RhcnQsIDIsIHNsaWNlKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHNpemVDaHVua3NcblxuLy8gTWVhc3VyZSB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlciBjb2RlcyBpbiBjaHVua3MuXG4vLyBDb3VudHMgdGFicyBiYXNlZCBvbiB0aGVpciBleHBhbmRlZCBzaXplLCBhbmQgQ1IrTEYgYXMgb25lIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHNpemVDaHVua3MoY2h1bmtzKSB7XG4gIHZhciBpbmRleCA9IC0xXG4gIHZhciBzaXplID0gMFxuXG4gIHdoaWxlICgrK2luZGV4IDwgY2h1bmtzLmxlbmd0aCkge1xuICAgIHNpemUgKz0gdHlwZW9mIGNodW5rc1tpbmRleF0gPT09ICdzdHJpbmcnID8gY2h1bmtzW2luZGV4XS5sZW5ndGggOiAxXG4gIH1cblxuICByZXR1cm4gc2l6ZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwcmVmaXhTaXplXG5cbnZhciBzaXplQ2h1bmtzID0gcmVxdWlyZSgnLi9zaXplLWNodW5rcycpXG5cbmZ1bmN0aW9uIHByZWZpeFNpemUoZXZlbnRzLCB0eXBlKSB7XG4gIHZhciB0YWlsID0gZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAxXVxuICBpZiAoIXRhaWwgfHwgdGFpbFsxXS50eXBlICE9PSB0eXBlKSByZXR1cm4gMFxuICByZXR1cm4gc2l6ZUNodW5rcyh0YWlsWzJdLnNsaWNlU3RyZWFtKHRhaWxbMV0pKVxufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplQ29udGVudFxuZXhwb3J0cy5yZXNvbHZlID0gcmVzb2x2ZUNvbnRlbnRcbmV4cG9ydHMuaW50ZXJydXB0aWJsZSA9IHRydWVcbmV4cG9ydHMubGF6eSA9IHRydWVcblxudmFyIG1hcmtkb3duTGluZUVuZGluZyA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZycpXG5cbnZhciBzdWJ0b2tlbml6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvc3VidG9rZW5pemUnKVxudmFyIHByZWZpeFNpemUgPSByZXF1aXJlKCcuLi91dGlsL3ByZWZpeC1zaXplJylcbnZhciBjcmVhdGVTcGFjZSA9IHJlcXVpcmUoJy4vZmFjdG9yeS1zcGFjZScpXG5cbnZhciBsb29rYWhlYWRDb25zdHJ1Y3QgPSB7dG9rZW5pemU6IHRva2VuaXplTG9va2FoZWFkQ29uc3RydWN0LCBwYXJ0aWFsOiB0cnVlfVxuXG4vLyBDb250ZW50IGlzIHRyYW5zcGFyZW50OiBpdOKAmXMgcGFyc2VkIHJpZ2h0IG5vdy4gVGhhdCB3YXksIGRlZmluaXRpb25zIGFyZSBhbHNvXG4vLyBwYXJzZWQgcmlnaHQgbm93OiBiZWZvcmUgdGV4dCBpbiBwYXJhZ3JhcGhzIChzcGVjaWZpY2FsbHksIG1lZGlhKSBhcmUgcGFyc2VkLlxuZnVuY3Rpb24gcmVzb2x2ZUNvbnRlbnQoZXZlbnRzKSB7XG4gIHN1YnRva2VuaXplKGV2ZW50cylcbiAgcmV0dXJuIGV2ZW50c1xufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUNvbnRlbnQoZWZmZWN0cywgb2spIHtcbiAgdmFyIHByZXZpb3VzXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2NvbnRlbnQnKVxuICAgIHByZXZpb3VzID0gZWZmZWN0cy5lbnRlcignY2h1bmtDb250ZW50Jywge1xuICAgICAgY29udGVudFR5cGU6ICdjb250ZW50J1xuICAgIH0pXG5cbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb250ZW50RW5kKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICAgIGxvb2thaGVhZENvbnN0cnVjdCxcbiAgICAgICAgY29udGVudENvbnRpbnVlLFxuICAgICAgICBjb250ZW50RW5kXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gRGF0YS5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGVudEVuZChjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdjaHVua0NvbnRlbnQnKVxuICAgIGVmZmVjdHMuZXhpdCgnY29udGVudCcpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250ZW50Q29udGludWUoY29kZSkge1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnY2h1bmtDb250ZW50JylcbiAgICBwcmV2aW91cyA9IHByZXZpb3VzLm5leHQgPSBlZmZlY3RzLmVudGVyKCdjaHVua0NvbnRlbnQnLCB7XG4gICAgICBjb250ZW50VHlwZTogJ2NvbnRlbnQnLFxuICAgICAgcHJldmlvdXM6IHByZXZpb3VzXG4gICAgfSlcblxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9rZW5pemVMb29rYWhlYWRDb25zdHJ1Y3QoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRMb29rYWhlYWRcblxuICBmdW5jdGlvbiBzdGFydExvb2thaGVhZChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgcHJlZml4ZWQsICdsaW5lUHJlZml4JylcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZpeGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAocHJlZml4U2l6ZShzZWxmLmV2ZW50cywgJ2xpbmVQcmVmaXgnKSA8IDQpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmludGVycnVwdChzZWxmLnBhcnNlci5jb25zdHJ1Y3RzLmZsb3csIG5vaywgb2spKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSBpbml0aWFsaXplRmxvd1xuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcblxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi4vdG9rZW5pemUvZmFjdG9yeS1zcGFjZScpXG52YXIgYmxhbmsgPSByZXF1aXJlKCcuLi90b2tlbml6ZS9wYXJ0aWFsLWJsYW5rLWxpbmUnKVxudmFyIGNvbnRlbnQgPSByZXF1aXJlKCcuLi90b2tlbml6ZS9jb250ZW50JylcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUZsb3coZWZmZWN0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGluaXRpYWwgPSBlZmZlY3RzLmF0dGVtcHQoXG4gICAgLy8gVHJ5IHRvIHBhcnNlIGEgYmxhbmsgbGluZS5cbiAgICBibGFuayxcbiAgICBhdEJsYW5rRW5kaW5nLFxuICAgIC8vIFRyeSB0byBwYXJzZSBpbml0aWFsIGZsb3cgKGVzc2VudGlhbGx5LCBvbmx5IGNvZGUpLlxuICAgIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgIHRoaXMucGFyc2VyLmNvbnN0cnVjdHMuZmxvd0luaXRpYWwsXG4gICAgICBhZnRlckNvbnN0cnVjdCxcbiAgICAgIGNyZWF0ZVNwYWNlKFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICAgICAgdGhpcy5wYXJzZXIuY29uc3RydWN0cy5mbG93LFxuICAgICAgICAgIGFmdGVyQ29uc3RydWN0LFxuICAgICAgICAgIGVmZmVjdHMuYXR0ZW1wdChjb250ZW50LCBhZnRlckNvbnN0cnVjdClcbiAgICAgICAgKSxcbiAgICAgICAgJ2xpbmVQcmVmaXgnXG4gICAgICApXG4gICAgKVxuICApXG5cbiAgcmV0dXJuIGluaXRpYWxcblxuICBmdW5jdGlvbiBhdEJsYW5rRW5kaW5nKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nQmxhbmsnKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZ0JsYW5rJylcbiAgICBzZWxmLmN1cnJlbnRDb25zdHJ1Y3QgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gaW5pdGlhbFxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJDb25zdHJ1Y3QoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgc2VsZi5jdXJyZW50Q29uc3RydWN0ID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIGluaXRpYWxcbiAgfVxufVxuIiwiZXhwb3J0cy50ZXh0ID0gaW5pdGlhbGl6ZUZhY3RvcnkoJ3RleHQnKVxuZXhwb3J0cy5zdHJpbmcgPSBpbml0aWFsaXplRmFjdG9yeSgnc3RyaW5nJylcbmV4cG9ydHMucmVzb2x2ZXIgPSB7cmVzb2x2ZUFsbDogcmVzb2x2ZXIoKX1cblxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2NvbnN0YW50L2Fzc2lnbicpXG5cbnZhciBzaGFsbG93ID0gcmVxdWlyZSgnLi4vdXRpbC9zaGFsbG93JylcblxuZnVuY3Rpb24gaW5pdGlhbGl6ZUZhY3RvcnkoZmllbGQpIHtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbml6ZTogaW5pdGlhbGl6ZVRleHQsXG4gICAgcmVzb2x2ZUFsbDogcmVzb2x2ZXIoZmllbGQgPT09ICd0ZXh0JyA/IHJlc29sdmVBbGxMaW5lU3VmZml4ZXMgOiB1bmRlZmluZWQpXG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplVGV4dChlZmZlY3RzKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgdmFyIGNvbnN0cnVjdHMgPSB0aGlzLnBhcnNlci5jb25zdHJ1Y3RzW2ZpZWxkXVxuICAgIHZhciB0ZXh0ID0gZWZmZWN0cy5hdHRlbXB0KGNvbnN0cnVjdHMsIHN0YXJ0LCBub3RUZXh0KVxuXG4gICAgcmV0dXJuIHN0YXJ0XG5cbiAgICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgICByZXR1cm4gYXRCcmVhayhjb2RlKSA/IHRleHQoY29kZSkgOiBub3RUZXh0KGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm90VGV4dChjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2RhdGEnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgICAgaWYgKGF0QnJlYWsoY29kZSkpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCdkYXRhJylcbiAgICAgICAgcmV0dXJuIHRleHQoY29kZSlcbiAgICAgIH1cblxuICAgICAgLy8gRGF0YS5cbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdEJyZWFrKGNvZGUpIHtcbiAgICAgIHZhciBsaXN0ID0gY29uc3RydWN0c1tjb2RlXVxuICAgICAgdmFyIGluZGV4ID0gLTFcblxuICAgICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsaXN0Lmxlbmd0aCkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFsaXN0W2luZGV4XS5wcmV2aW91cyB8fFxuICAgICAgICAgICAgbGlzdFtpbmRleF0ucHJldmlvdXMuY2FsbChzZWxmLCBzZWxmLnByZXZpb3VzKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZXIoZXh0cmFSZXNvbHZlcikge1xuICByZXR1cm4gcmVzb2x2ZUFsbFRleHRcblxuICBmdW5jdGlvbiByZXNvbHZlQWxsVGV4dChldmVudHMsIGNvbnRleHQpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBlbnRlclxuXG4gICAgLy8gQSByYXRoZXIgYm9yaW5nIGNvbXB1dGF0aW9uICh0byBtZXJnZSBhZGphY2VudCBgZGF0YWAgZXZlbnRzKSB3aGljaFxuICAgIC8vIGltcHJvdmVzIG1tIHBlcmZvcm1hbmNlIGJ5IDI5JS5cbiAgICB3aGlsZSAoKytpbmRleCA8PSBldmVudHMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZXZlbnRzW2luZGV4XSAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdkYXRhJykge1xuICAgICAgICAgIGVudGVyID0gaW5kZXhcbiAgICAgICAgICBpbmRleCsrXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWV2ZW50c1tpbmRleF0gfHwgZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSAnZGF0YScpIHtcbiAgICAgICAgLy8gRG9u4oCZdCBkbyBhbnl0aGluZyBpZiB0aGVyZSBpcyBvbmUgZGF0YSB0b2tlbi5cbiAgICAgICAgaWYgKGluZGV4ICE9PSBlbnRlciArIDIpIHtcbiAgICAgICAgICBldmVudHNbZW50ZXJdWzFdLmVuZCA9IGV2ZW50c1tpbmRleCAtIDFdWzFdLmVuZFxuICAgICAgICAgIGV2ZW50cy5zcGxpY2UoZW50ZXIgKyAyLCBpbmRleCAtIGVudGVyIC0gMilcbiAgICAgICAgICBpbmRleCA9IGVudGVyICsgMlxuICAgICAgICB9XG5cbiAgICAgICAgZW50ZXIgPSB1bmRlZmluZWRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXh0cmFSZXNvbHZlciA/IGV4dHJhUmVzb2x2ZXIoZXZlbnRzLCBjb250ZXh0KSA6IGV2ZW50c1xuICB9XG59XG5cbi8vIEEgcmF0aGVyIHVnbHkgc2V0IG9mIGluc3RydWN0aW9ucyB3aGljaCBhZ2FpbiBsb29rcyBhdCBjaHVua3MgaW4gdGhlIGlucHV0XG4vLyBzdHJlYW0uXG4vLyBUaGUgcmVhc29uIHRvIGRvIHRoaXMgaGVyZSBpcyB0aGF0IGl0IGlzICptdWNoKiBmYXN0ZXIgdG8gcGFyc2UgaW4gcmV2ZXJzZS5cbi8vIEFuZCB0aGF0IHdlIGNhbuKAmXQgaG9vayBpbnRvIGBudWxsYCB0byBzcGxpdCB0aGUgbGluZSBzdWZmaXggYmVmb3JlIGFuIEVPRi5cbi8vIFRvIGRvOiBmaWd1cmUgb3V0IGlmIHdlIGNhbiBtYWtlIHRoaXMgaW50byBhIGNsZWFuIHV0aWxpdHksIG9yIGV2ZW4gaW4gY29yZS5cbi8vIEFzIGl0IHdpbGwgYmUgdXNlZnVsIGZvciBHRk1zIGxpdGVyYWwgYXV0b2xpbmsgZXh0ZW5zaW9uIChhbmQgbWF5YmUgZXZlblxuLy8gdGFibGVzPylcbmZ1bmN0aW9uIHJlc29sdmVBbGxMaW5lU3VmZml4ZXMoZXZlbnRzLCBjb250ZXh0KSB7XG4gIHZhciBldmVudEluZGV4ID0gLTFcbiAgdmFyIGNodW5rc1xuICB2YXIgZGF0YVxuICB2YXIgY2h1bmtcbiAgdmFyIGluZGV4XG4gIHZhciBidWZmZXJJbmRleFxuICB2YXIgc2l6ZVxuICB2YXIgdGFic1xuICB2YXIgdG9rZW5cblxuICB3aGlsZSAoKytldmVudEluZGV4IDw9IGV2ZW50cy5sZW5ndGgpIHtcbiAgICBpZiAoXG4gICAgICAoZXZlbnRJbmRleCA9PT0gZXZlbnRzLmxlbmd0aCB8fFxuICAgICAgICBldmVudHNbZXZlbnRJbmRleF1bMV0udHlwZSA9PT0gJ2xpbmVFbmRpbmcnKSAmJlxuICAgICAgZXZlbnRzW2V2ZW50SW5kZXggLSAxXVsxXS50eXBlID09PSAnZGF0YSdcbiAgICApIHtcbiAgICAgIGRhdGEgPSBldmVudHNbZXZlbnRJbmRleCAtIDFdWzFdXG4gICAgICBjaHVua3MgPSBjb250ZXh0LnNsaWNlU3RyZWFtKGRhdGEpXG4gICAgICBpbmRleCA9IGNodW5rcy5sZW5ndGhcbiAgICAgIGJ1ZmZlckluZGV4ID0gLTFcbiAgICAgIHNpemUgPSAwXG4gICAgICB0YWJzID0gdW5kZWZpbmVkXG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGNodW5rID0gY2h1bmtzW2luZGV4XVxuXG4gICAgICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYnVmZmVySW5kZXggPSBjaHVuay5sZW5ndGhcblxuICAgICAgICAgIHdoaWxlIChjaHVuay5jaGFyQ29kZUF0KGJ1ZmZlckluZGV4IC0gMSkgPT09IDMyKSB7XG4gICAgICAgICAgICBzaXplKytcbiAgICAgICAgICAgIGJ1ZmZlckluZGV4LS1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYnVmZmVySW5kZXgpIGJyZWFrXG4gICAgICAgICAgYnVmZmVySW5kZXggPSAtMVxuICAgICAgICB9XG4gICAgICAgIC8vIE51bWJlclxuICAgICAgICBlbHNlIGlmIChjaHVuayA9PT0gLTIpIHtcbiAgICAgICAgICB0YWJzID0gdHJ1ZVxuICAgICAgICAgIHNpemUrK1xuICAgICAgICB9IGVsc2UgaWYgKGNodW5rID09PSAtMSkge1xuICAgICAgICAgIC8vIEVtcHR5XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVwbGFjZW1lbnQgY2hhcmFjdGVyLCBleGl0LlxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplKSB7XG4gICAgICAgIHRva2VuID0ge1xuICAgICAgICAgIHR5cGU6XG4gICAgICAgICAgICBldmVudEluZGV4ID09PSBldmVudHMubGVuZ3RoIHx8IHRhYnMgfHwgc2l6ZSA8IDJcbiAgICAgICAgICAgICAgPyAnbGluZVN1ZmZpeCdcbiAgICAgICAgICAgICAgOiAnaGFyZEJyZWFrVHJhaWxpbmcnLFxuXG4gICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgIGxpbmU6IGRhdGEuZW5kLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IGRhdGEuZW5kLmNvbHVtbiAtIHNpemUsXG4gICAgICAgICAgICBvZmZzZXQ6IGRhdGEuZW5kLm9mZnNldCAtIHNpemUsXG4gICAgICAgICAgICBfaW5kZXg6IGRhdGEuc3RhcnQuX2luZGV4ICsgaW5kZXgsXG4gICAgICAgICAgICBfYnVmZmVySW5kZXg6IGluZGV4XG4gICAgICAgICAgICAgID8gYnVmZmVySW5kZXhcbiAgICAgICAgICAgICAgOiBkYXRhLnN0YXJ0Ll9idWZmZXJJbmRleCArIGJ1ZmZlckluZGV4XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGVuZDogc2hhbGxvdyhkYXRhLmVuZClcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuZW5kID0gc2hhbGxvdyh0b2tlbi5zdGFydClcblxuICAgICAgICBpZiAoZGF0YS5zdGFydC5vZmZzZXQgPT09IGRhdGEuZW5kLm9mZnNldCkge1xuICAgICAgICAgIGFzc2lnbihkYXRhLCB0b2tlbilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudHMuc3BsaWNlKFxuICAgICAgICAgICAgZXZlbnRJbmRleCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBbJ2VudGVyJywgdG9rZW4sIGNvbnRleHRdLFxuICAgICAgICAgICAgWydleGl0JywgdG9rZW4sIGNvbnRleHRdXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgZXZlbnRJbmRleCArPSAyXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZXZlbnRJbmRleCsrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlXG5cbmZ1bmN0aW9uIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkge1xuICByZXR1cm4gY29kZSA8IDAgfHwgY29kZSA9PT0gMzJcbn1cbiIsIi8vIFRoaXMgbW9kdWxlIGlzIGdlbmVyYXRlZCBieSBgc2NyaXB0L2AuXG4vL1xuLy8gQ29tbW9uTWFyayBoYW5kbGVzIGF0dGVudGlvbiAoZW1waGFzaXMsIHN0cm9uZykgbWFya2VycyBiYXNlZCBvbiB3aGF0IGNvbWVzXG4vLyBiZWZvcmUgb3IgYWZ0ZXIgdGhlbS5cbi8vIE9uZSBzdWNoIGRpZmZlcmVuY2UgaXMgaWYgdGhvc2UgY2hhcmFjdGVycyBhcmUgVW5pY29kZSBwdW5jdHVhdGlvbi5cbi8vIFRoaXMgc2NyaXB0IGlzIGdlbmVyYXRlZCBmcm9tIHRoZSBVbmljb2RlIGRhdGEuXG5tb2R1bGUuZXhwb3J0cyA9IC9bIS1cXC86LUBcXFstYFxcey1+XFx4QTFcXHhBN1xceEFCXFx4QjZcXHhCN1xceEJCXFx4QkZcXHUwMzdFXFx1MDM4N1xcdTA1NUEtXFx1MDU1RlxcdTA1ODlcXHUwNThBXFx1MDVCRVxcdTA1QzBcXHUwNUMzXFx1MDVDNlxcdTA1RjNcXHUwNUY0XFx1MDYwOVxcdTA2MEFcXHUwNjBDXFx1MDYwRFxcdTA2MUJcXHUwNjFFXFx1MDYxRlxcdTA2NkEtXFx1MDY2RFxcdTA2RDRcXHUwNzAwLVxcdTA3MERcXHUwN0Y3LVxcdTA3RjlcXHUwODMwLVxcdTA4M0VcXHUwODVFXFx1MDk2NFxcdTA5NjVcXHUwOTcwXFx1MDlGRFxcdTBBNzZcXHUwQUYwXFx1MEM3N1xcdTBDODRcXHUwREY0XFx1MEU0RlxcdTBFNUFcXHUwRTVCXFx1MEYwNC1cXHUwRjEyXFx1MEYxNFxcdTBGM0EtXFx1MEYzRFxcdTBGODVcXHUwRkQwLVxcdTBGRDRcXHUwRkQ5XFx1MEZEQVxcdTEwNEEtXFx1MTA0RlxcdTEwRkJcXHUxMzYwLVxcdTEzNjhcXHUxNDAwXFx1MTY2RVxcdTE2OUJcXHUxNjlDXFx1MTZFQi1cXHUxNkVEXFx1MTczNVxcdTE3MzZcXHUxN0Q0LVxcdTE3RDZcXHUxN0Q4LVxcdTE3REFcXHUxODAwLVxcdTE4MEFcXHUxOTQ0XFx1MTk0NVxcdTFBMUVcXHUxQTFGXFx1MUFBMC1cXHUxQUE2XFx1MUFBOC1cXHUxQUFEXFx1MUI1QS1cXHUxQjYwXFx1MUJGQy1cXHUxQkZGXFx1MUMzQi1cXHUxQzNGXFx1MUM3RVxcdTFDN0ZcXHUxQ0MwLVxcdTFDQzdcXHUxQ0QzXFx1MjAxMC1cXHUyMDI3XFx1MjAzMC1cXHUyMDQzXFx1MjA0NS1cXHUyMDUxXFx1MjA1My1cXHUyMDVFXFx1MjA3RFxcdTIwN0VcXHUyMDhEXFx1MjA4RVxcdTIzMDgtXFx1MjMwQlxcdTIzMjlcXHUyMzJBXFx1Mjc2OC1cXHUyNzc1XFx1MjdDNVxcdTI3QzZcXHUyN0U2LVxcdTI3RUZcXHUyOTgzLVxcdTI5OThcXHUyOUQ4LVxcdTI5REJcXHUyOUZDXFx1MjlGRFxcdTJDRjktXFx1MkNGQ1xcdTJDRkVcXHUyQ0ZGXFx1MkQ3MFxcdTJFMDAtXFx1MkUyRVxcdTJFMzAtXFx1MkU0RlxcdTJFNTJcXHUzMDAxLVxcdTMwMDNcXHUzMDA4LVxcdTMwMTFcXHUzMDE0LVxcdTMwMUZcXHUzMDMwXFx1MzAzRFxcdTMwQTBcXHUzMEZCXFx1QTRGRVxcdUE0RkZcXHVBNjBELVxcdUE2MEZcXHVBNjczXFx1QTY3RVxcdUE2RjItXFx1QTZGN1xcdUE4NzQtXFx1QTg3N1xcdUE4Q0VcXHVBOENGXFx1QThGOC1cXHVBOEZBXFx1QThGQ1xcdUE5MkVcXHVBOTJGXFx1QTk1RlxcdUE5QzEtXFx1QTlDRFxcdUE5REVcXHVBOURGXFx1QUE1Qy1cXHVBQTVGXFx1QUFERVxcdUFBREZcXHVBQUYwXFx1QUFGMVxcdUFCRUJcXHVGRDNFXFx1RkQzRlxcdUZFMTAtXFx1RkUxOVxcdUZFMzAtXFx1RkU1MlxcdUZFNTQtXFx1RkU2MVxcdUZFNjNcXHVGRTY4XFx1RkU2QVxcdUZFNkJcXHVGRjAxLVxcdUZGMDNcXHVGRjA1LVxcdUZGMEFcXHVGRjBDLVxcdUZGMEZcXHVGRjFBXFx1RkYxQlxcdUZGMUZcXHVGRjIwXFx1RkYzQi1cXHVGRjNEXFx1RkYzRlxcdUZGNUJcXHVGRjVEXFx1RkY1Ri1cXHVGRjY1XS9cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVnZXhDaGVja1xuXG52YXIgZnJvbUNoYXJDb2RlID0gcmVxdWlyZSgnLi4vY29uc3RhbnQvZnJvbS1jaGFyLWNvZGUnKVxuXG5mdW5jdGlvbiByZWdleENoZWNrKHJlZ2V4KSB7XG4gIHJldHVybiBjaGVja1xuICBmdW5jdGlvbiBjaGVjayhjb2RlKSB7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoZnJvbUNoYXJDb2RlKGNvZGUpKVxuICB9XG59XG4iLCJ2YXIgdW5pY29kZVB1bmN0dWF0aW9uID0gcmVxdWlyZSgnLi4vY29uc3RhbnQvdW5pY29kZS1wdW5jdHVhdGlvbi1yZWdleCcpXG52YXIgY2hlY2sgPSByZXF1aXJlKCcuLi91dGlsL3JlZ2V4LWNoZWNrJylcblxuLy8gU2l6ZSBub3RlOiByZW1vdmluZyBBU0NJSSBmcm9tIHRoZSByZWdleCBhbmQgdXNpbmcgYGFzY2lpLXB1bmN0dWF0aW9uYCBoZXJlXG4vLyBJbiBmYWN0IGFkZHMgdG8gdGhlIGJ1bmRsZSBzaXplLlxubW9kdWxlLmV4cG9ydHMgPSBjaGVjayh1bmljb2RlUHVuY3R1YXRpb24pXG4iLCJ2YXIgY2hlY2sgPSByZXF1aXJlKCcuLi91dGlsL3JlZ2V4LWNoZWNrJylcblxubW9kdWxlLmV4cG9ydHMgPSBjaGVjaygvXFxzLylcbiIsIm1vZHVsZS5leHBvcnRzID0gY2xhc3NpZnlDaGFyYWN0ZXJcblxudmFyIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmctb3Itc3BhY2UnKVxudmFyIHVuaWNvZGVQdW5jdHVhdGlvbiA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci91bmljb2RlLXB1bmN0dWF0aW9uJylcbnZhciB1bmljb2RlV2hpdGVzcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci91bmljb2RlLXdoaXRlc3BhY2UnKVxuXG4vLyBDbGFzc2lmeSB3aGV0aGVyIGEgY2hhcmFjdGVyIGlzIHVuaWNvZGUgd2hpdGVzcGFjZSwgdW5pY29kZSBwdW5jdHVhdGlvbiwgb3Jcbi8vIGFueXRoaW5nIGVsc2UuXG4vLyBVc2VkIGZvciBhdHRlbnRpb24gKGVtcGhhc2lzLCBzdHJvbmcpLCB3aG9zZSBzZXF1ZW5jZXMgY2FuIG9wZW4gb3IgY2xvc2Vcbi8vIGJhc2VkIG9uIHRoZSBjbGFzcyBvZiBzdXJyb3VuZGluZyBjaGFyYWN0ZXJzLlxuZnVuY3Rpb24gY2xhc3NpZnlDaGFyYWN0ZXIoY29kZSkge1xuICBpZiAoXG4gICAgY29kZSA9PT0gbnVsbCB8fFxuICAgIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkgfHxcbiAgICB1bmljb2RlV2hpdGVzcGFjZShjb2RlKVxuICApIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgaWYgKHVuaWNvZGVQdW5jdHVhdGlvbihjb2RlKSkge1xuICAgIHJldHVybiAyXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gbW92ZVBvaW50XG5cbi8vIE5vdGUhIGBtb3ZlYCBvbmx5IHdvcmtzIGluc2lkZSBsaW5lcyEgSXTigJlzIG5vdCBwb3NzaWJsZSB0byBtb3ZlIHBhc3Qgb3RoZXJcbi8vIGNodW5rcyAocmVwbGFjZW1lbnQgY2hhcmFjdGVycywgdGFicywgb3IgbGluZSBlbmRpbmdzKS5cbmZ1bmN0aW9uIG1vdmVQb2ludChwb2ludCwgb2Zmc2V0KSB7XG4gIHBvaW50LmNvbHVtbiArPSBvZmZzZXRcbiAgcG9pbnQub2Zmc2V0ICs9IG9mZnNldFxuICBwb2ludC5fYnVmZmVySW5kZXggKz0gb2Zmc2V0XG4gIHJldHVybiBwb2ludFxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlQWxsXG5cbmZ1bmN0aW9uIHJlc29sdmVBbGwoY29uc3RydWN0cywgZXZlbnRzLCBjb250ZXh0KSB7XG4gIHZhciBjYWxsZWQgPSBbXVxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgcmVzb2x2ZVxuXG4gIHdoaWxlICgrK2luZGV4IDwgY29uc3RydWN0cy5sZW5ndGgpIHtcbiAgICByZXNvbHZlID0gY29uc3RydWN0c1tpbmRleF0ucmVzb2x2ZUFsbFxuXG4gICAgaWYgKHJlc29sdmUgJiYgY2FsbGVkLmluZGV4T2YocmVzb2x2ZSkgPCAwKSB7XG4gICAgICBldmVudHMgPSByZXNvbHZlKGV2ZW50cywgY29udGV4dClcbiAgICAgIGNhbGxlZC5wdXNoKHJlc29sdmUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplQXR0ZW50aW9uXG5leHBvcnRzLnJlc29sdmVBbGwgPSByZXNvbHZlQWxsQXR0ZW50aW9uXG5cbnZhciBzaGFsbG93ID0gcmVxdWlyZSgnLi4vdXRpbC9zaGFsbG93JylcbnZhciBjaHVua2VkU3BsaWNlID0gcmVxdWlyZSgnLi4vdXRpbC9jaHVua2VkLXNwbGljZScpXG52YXIgY2xhc3NpZnlDaGFyYWN0ZXIgPSByZXF1aXJlKCcuLi91dGlsL2NsYXNzaWZ5LWNoYXJhY3RlcicpXG52YXIgbW92ZVBvaW50ID0gcmVxdWlyZSgnLi4vdXRpbC9tb3ZlLXBvaW50JylcbnZhciByZXNvbHZlQWxsID0gcmVxdWlyZSgnLi4vdXRpbC9yZXNvbHZlLWFsbCcpXG5cbi8vIFRha2UgYWxsIGV2ZW50cyBhbmQgcmVzb2x2ZSBhdHRlbnRpb24gdG8gZW1waGFzaXMgb3Igc3Ryb25nLlxuZnVuY3Rpb24gcmVzb2x2ZUFsbEF0dGVudGlvbihldmVudHMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIG9wZW5cbiAgdmFyIGdyb3VwXG4gIHZhciB0ZXh0XG4gIHZhciBvcGVuaW5nU2VxdWVuY2VcbiAgdmFyIGNsb3NpbmdTZXF1ZW5jZVxuICB2YXIgdXNlXG4gIHZhciBuZXh0RXZlbnRzXG4gIHZhciBvZmZzZXRcblxuICAvLyBXYWxrIHRocm91Z2ggYWxsIGV2ZW50cy5cbiAgLy9cbiAgLy8gTm90ZTogcGVyZm9ybWFuY2Ugb2YgdGhpcyBpcyBmaW5lIG9uIGFuIG1iIG9mIG5vcm1hbCBtYXJrZG93biwgYnV0IGl04oCZc1xuICAvLyBhIGJvdHRsZW5lY2sgZm9yIG1hbGljaW91cyBzdHVmZi5cbiAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgLy8gRmluZCBhIHRva2VuIHRoYXQgY2FuIGNsb3NlLlxuICAgIGlmIChcbiAgICAgIGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiZcbiAgICAgIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJyAmJlxuICAgICAgZXZlbnRzW2luZGV4XVsxXS5fY2xvc2VcbiAgICApIHtcbiAgICAgIG9wZW4gPSBpbmRleFxuXG4gICAgICAvLyBOb3cgd2FsayBiYWNrIHRvIGZpbmQgYW4gb3BlbmVyLlxuICAgICAgd2hpbGUgKG9wZW4tLSkge1xuICAgICAgICAvLyBGaW5kIGEgdG9rZW4gdGhhdCBjYW4gb3BlbiB0aGUgY2xvc2VyLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgZXZlbnRzW29wZW5dWzBdID09PSAnZXhpdCcgJiZcbiAgICAgICAgICBldmVudHNbb3Blbl1bMV0udHlwZSA9PT0gJ2F0dGVudGlvblNlcXVlbmNlJyAmJlxuICAgICAgICAgIGV2ZW50c1tvcGVuXVsxXS5fb3BlbiAmJlxuICAgICAgICAgIC8vIElmIHRoZSBtYXJrZXJzIGFyZSB0aGUgc2FtZTpcbiAgICAgICAgICBjb250ZXh0LnNsaWNlU2VyaWFsaXplKGV2ZW50c1tvcGVuXVsxXSkuY2hhckNvZGVBdCgwKSA9PT1cbiAgICAgICAgICAgIGNvbnRleHQuc2xpY2VTZXJpYWxpemUoZXZlbnRzW2luZGV4XVsxXSkuY2hhckNvZGVBdCgwKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBJZiB0aGUgb3BlbmluZyBjYW4gY2xvc2Ugb3IgdGhlIGNsb3NpbmcgY2FuIG9wZW4sXG4gICAgICAgICAgLy8gYW5kIHRoZSBjbG9zZSBzaXplICppcyBub3QqIGEgbXVsdGlwbGUgb2YgdGhyZWUsXG4gICAgICAgICAgLy8gYnV0IHRoZSBzdW0gb2YgdGhlIG9wZW5pbmcgYW5kIGNsb3Npbmcgc2l6ZSAqaXMqIG11bHRpcGxlIG9mIHRocmVlLFxuICAgICAgICAgIC8vIHRoZW4gZG9u4oCZdCBtYXRjaC5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAoZXZlbnRzW29wZW5dWzFdLl9jbG9zZSB8fCBldmVudHNbaW5kZXhdWzFdLl9vcGVuKSAmJlxuICAgICAgICAgICAgKGV2ZW50c1tpbmRleF1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0KSAlIDMgJiZcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgIChldmVudHNbb3Blbl1bMV0uZW5kLm9mZnNldCAtXG4gICAgICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLnN0YXJ0Lm9mZnNldCArXG4gICAgICAgICAgICAgICAgZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC1cbiAgICAgICAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCkgJVxuICAgICAgICAgICAgICAzXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE51bWJlciBvZiBtYXJrZXJzIHRvIHVzZSBmcm9tIHRoZSBzZXF1ZW5jZS5cbiAgICAgICAgICB1c2UgPVxuICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0ID4gMSAmJlxuICAgICAgICAgICAgZXZlbnRzW2luZGV4XVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW2luZGV4XVsxXS5zdGFydC5vZmZzZXQgPiAxXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgICAgICAgIG9wZW5pbmdTZXF1ZW5jZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyAnc3Ryb25nU2VxdWVuY2UnIDogJ2VtcGhhc2lzU2VxdWVuY2UnLFxuICAgICAgICAgICAgc3RhcnQ6IG1vdmVQb2ludChzaGFsbG93KGV2ZW50c1tvcGVuXVsxXS5lbmQpLCAtdXNlKSxcbiAgICAgICAgICAgIGVuZDogc2hhbGxvdyhldmVudHNbb3Blbl1bMV0uZW5kKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNsb3NpbmdTZXF1ZW5jZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyAnc3Ryb25nU2VxdWVuY2UnIDogJ2VtcGhhc2lzU2VxdWVuY2UnLFxuICAgICAgICAgICAgc3RhcnQ6IHNoYWxsb3coZXZlbnRzW2luZGV4XVsxXS5zdGFydCksXG4gICAgICAgICAgICBlbmQ6IG1vdmVQb2ludChzaGFsbG93KGV2ZW50c1tpbmRleF1bMV0uc3RhcnQpLCB1c2UpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGV4dCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHVzZSA+IDEgPyAnc3Ryb25nVGV4dCcgOiAnZW1waGFzaXNUZXh0JyxcbiAgICAgICAgICAgIHN0YXJ0OiBzaGFsbG93KGV2ZW50c1tvcGVuXVsxXS5lbmQpLFxuICAgICAgICAgICAgZW5kOiBzaGFsbG93KGV2ZW50c1tpbmRleF1bMV0uc3RhcnQpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZ3JvdXAgPSB7XG4gICAgICAgICAgICB0eXBlOiB1c2UgPiAxID8gJ3N0cm9uZycgOiAnZW1waGFzaXMnLFxuICAgICAgICAgICAgc3RhcnQ6IHNoYWxsb3cob3BlbmluZ1NlcXVlbmNlLnN0YXJ0KSxcbiAgICAgICAgICAgIGVuZDogc2hhbGxvdyhjbG9zaW5nU2VxdWVuY2UuZW5kKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGV2ZW50c1tvcGVuXVsxXS5lbmQgPSBzaGFsbG93KG9wZW5pbmdTZXF1ZW5jZS5zdGFydClcbiAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLnN0YXJ0ID0gc2hhbGxvdyhjbG9zaW5nU2VxdWVuY2UuZW5kKVxuXG4gICAgICAgICAgbmV4dEV2ZW50cyA9IFtdXG5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbW9yZSBtYXJrZXJzIGluIHRoZSBvcGVuaW5nLCBhZGQgdGhlbSBiZWZvcmUuXG4gICAgICAgICAgaWYgKGV2ZW50c1tvcGVuXVsxXS5lbmQub2Zmc2V0IC0gZXZlbnRzW29wZW5dWzFdLnN0YXJ0Lm9mZnNldCkge1xuICAgICAgICAgICAgY2h1bmtlZFNwbGljZShuZXh0RXZlbnRzLCBuZXh0RXZlbnRzLmxlbmd0aCwgMCwgW1xuICAgICAgICAgICAgICBbJ2VudGVyJywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XSxcbiAgICAgICAgICAgICAgWydleGl0JywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBPcGVuaW5nLlxuICAgICAgICAgIGNodW5rZWRTcGxpY2UobmV4dEV2ZW50cywgbmV4dEV2ZW50cy5sZW5ndGgsIDAsIFtcbiAgICAgICAgICAgIFsnZW50ZXInLCBncm91cCwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgb3BlbmluZ1NlcXVlbmNlLCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZXhpdCcsIG9wZW5pbmdTZXF1ZW5jZSwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgdGV4dCwgY29udGV4dF1cbiAgICAgICAgICBdKVxuXG4gICAgICAgICAgLy8gQmV0d2Vlbi5cbiAgICAgICAgICBjaHVua2VkU3BsaWNlKFxuICAgICAgICAgICAgbmV4dEV2ZW50cyxcbiAgICAgICAgICAgIG5leHRFdmVudHMubGVuZ3RoLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIHJlc29sdmVBbGwoXG4gICAgICAgICAgICAgIGNvbnRleHQucGFyc2VyLmNvbnN0cnVjdHMuaW5zaWRlU3Bhbi5udWxsLFxuICAgICAgICAgICAgICBldmVudHMuc2xpY2Uob3BlbiArIDEsIGluZGV4KSxcbiAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcblxuICAgICAgICAgIC8vIENsb3NpbmcuXG4gICAgICAgICAgY2h1bmtlZFNwbGljZShuZXh0RXZlbnRzLCBuZXh0RXZlbnRzLmxlbmd0aCwgMCwgW1xuICAgICAgICAgICAgWydleGl0JywgdGV4dCwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2VudGVyJywgY2xvc2luZ1NlcXVlbmNlLCBjb250ZXh0XSxcbiAgICAgICAgICAgIFsnZXhpdCcsIGNsb3NpbmdTZXF1ZW5jZSwgY29udGV4dF0sXG4gICAgICAgICAgICBbJ2V4aXQnLCBncm91cCwgY29udGV4dF1cbiAgICAgICAgICBdKVxuXG4gICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgbWFya2VycyBpbiB0aGUgY2xvc2luZywgYWRkIHRoZW0gYWZ0ZXIuXG4gICAgICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0uZW5kLm9mZnNldCAtIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQub2Zmc2V0KSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAyXG4gICAgICAgICAgICBjaHVua2VkU3BsaWNlKG5leHRFdmVudHMsIG5leHRFdmVudHMubGVuZ3RoLCAwLCBbXG4gICAgICAgICAgICAgIFsnZW50ZXInLCBldmVudHNbaW5kZXhdWzFdLCBjb250ZXh0XSxcbiAgICAgICAgICAgICAgWydleGl0JywgZXZlbnRzW2luZGV4XVsxXSwgY29udGV4dF1cbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCA9IDBcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjaHVua2VkU3BsaWNlKGV2ZW50cywgb3BlbiAtIDEsIGluZGV4IC0gb3BlbiArIDMsIG5leHRFdmVudHMpXG5cbiAgICAgICAgICBpbmRleCA9IG9wZW4gKyBuZXh0RXZlbnRzLmxlbmd0aCAtIG9mZnNldCAtIDJcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmVtb3ZlIHJlbWFpbmluZyBzZXF1ZW5jZXMuXG4gIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGV2ZW50cy5sZW5ndGgpIHtcbiAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnYXR0ZW50aW9uU2VxdWVuY2UnKSB7XG4gICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgPSAnZGF0YSdcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG5cbmZ1bmN0aW9uIHRva2VuaXplQXR0ZW50aW9uKGVmZmVjdHMsIG9rKSB7XG4gIHZhciBiZWZvcmUgPSBjbGFzc2lmeUNoYXJhY3Rlcih0aGlzLnByZXZpb3VzKVxuICB2YXIgbWFya2VyXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2F0dGVudGlvblNlcXVlbmNlJylcbiAgICBtYXJrZXIgPSBjb2RlXG4gICAgcmV0dXJuIHNlcXVlbmNlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBzZXF1ZW5jZShjb2RlKSB7XG4gICAgdmFyIHRva2VuXG4gICAgdmFyIGFmdGVyXG4gICAgdmFyIG9wZW5cbiAgICB2YXIgY2xvc2VcblxuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHNlcXVlbmNlXG4gICAgfVxuXG4gICAgdG9rZW4gPSBlZmZlY3RzLmV4aXQoJ2F0dGVudGlvblNlcXVlbmNlJylcbiAgICBhZnRlciA9IGNsYXNzaWZ5Q2hhcmFjdGVyKGNvZGUpXG4gICAgb3BlbiA9ICFhZnRlciB8fCAoYWZ0ZXIgPT09IDIgJiYgYmVmb3JlKVxuICAgIGNsb3NlID0gIWJlZm9yZSB8fCAoYmVmb3JlID09PSAyICYmIGFmdGVyKVxuICAgIHRva2VuLl9vcGVuID0gbWFya2VyID09PSA0MiA/IG9wZW4gOiBvcGVuICYmIChiZWZvcmUgfHwgIWNsb3NlKVxuICAgIHRva2VuLl9jbG9zZSA9IG1hcmtlciA9PT0gNDIgPyBjbG9zZSA6IGNsb3NlICYmIChhZnRlciB8fCAhb3BlbilcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplQXR4SGVhZGluZ1xuZXhwb3J0cy5yZXNvbHZlID0gcmVzb2x2ZUF0eEhlYWRpbmdcblxudmFyIG1hcmtkb3duTGluZUVuZGluZyA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZycpXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZy1vci1zcGFjZScpXG52YXIgbWFya2Rvd25TcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1zcGFjZScpXG5cbnZhciBjaHVua2VkU3BsaWNlID0gcmVxdWlyZSgnLi4vdXRpbC9jaHVua2VkLXNwbGljZScpXG52YXIgY3JlYXRlU3BhY2UgPSByZXF1aXJlKCcuL2ZhY3Rvcnktc3BhY2UnKVxuXG5mdW5jdGlvbiByZXNvbHZlQXR4SGVhZGluZyhldmVudHMsIGNvbnRleHQpIHtcbiAgdmFyIGNvbnRlbnRFbmQgPSBldmVudHMubGVuZ3RoIC0gMlxuICB2YXIgY29udGVudFN0YXJ0ID0gM1xuICB2YXIgY29udGVudFxuICB2YXIgdGV4dFxuXG4gIC8vIFByZWZpeCB3aGl0ZXNwYWNlLCBwYXJ0IG9mIHRoZSBvcGVuaW5nLlxuICBpZiAoZXZlbnRzW2NvbnRlbnRTdGFydF1bMV0udHlwZSA9PT0gJ3doaXRlc3BhY2UnKSB7XG4gICAgY29udGVudFN0YXJ0ICs9IDJcbiAgfVxuXG4gIC8vIFN1ZmZpeCB3aGl0ZXNwYWNlLCBwYXJ0IG9mIHRoZSBjbG9zaW5nLlxuICBpZiAoXG4gICAgY29udGVudEVuZCAtIDIgPiBjb250ZW50U3RhcnQgJiZcbiAgICBldmVudHNbY29udGVudEVuZF1bMV0udHlwZSA9PT0gJ3doaXRlc3BhY2UnXG4gICkge1xuICAgIGNvbnRlbnRFbmQgLT0gMlxuICB9XG5cbiAgaWYgKFxuICAgIGV2ZW50c1tjb250ZW50RW5kXVsxXS50eXBlID09PSAnYXR4SGVhZGluZ1NlcXVlbmNlJyAmJlxuICAgIChjb250ZW50U3RhcnQgPT09IGNvbnRlbnRFbmQgLSAxIHx8XG4gICAgICAoY29udGVudEVuZCAtIDQgPiBjb250ZW50U3RhcnQgJiZcbiAgICAgICAgZXZlbnRzW2NvbnRlbnRFbmQgLSAyXVsxXS50eXBlID09PSAnd2hpdGVzcGFjZScpKVxuICApIHtcbiAgICBjb250ZW50RW5kIC09IGNvbnRlbnRTdGFydCArIDEgPT09IGNvbnRlbnRFbmQgPyAyIDogNFxuICB9XG5cbiAgaWYgKGNvbnRlbnRFbmQgPiBjb250ZW50U3RhcnQpIHtcbiAgICBjb250ZW50ID0ge1xuICAgICAgdHlwZTogJ2F0eEhlYWRpbmdUZXh0JyxcbiAgICAgIHN0YXJ0OiBldmVudHNbY29udGVudFN0YXJ0XVsxXS5zdGFydCxcbiAgICAgIGVuZDogZXZlbnRzW2NvbnRlbnRFbmRdWzFdLmVuZFxuICAgIH1cblxuICAgIHRleHQgPSB7XG4gICAgICB0eXBlOiAnY2h1bmtUZXh0JyxcbiAgICAgIHN0YXJ0OiBldmVudHNbY29udGVudFN0YXJ0XVsxXS5zdGFydCxcbiAgICAgIGVuZDogZXZlbnRzW2NvbnRlbnRFbmRdWzFdLmVuZCxcbiAgICAgIGNvbnRlbnRUeXBlOiAndGV4dCdcbiAgICB9XG5cbiAgICBjaHVua2VkU3BsaWNlKGV2ZW50cywgY29udGVudFN0YXJ0LCBjb250ZW50RW5kIC0gY29udGVudFN0YXJ0ICsgMSwgW1xuICAgICAgWydlbnRlcicsIGNvbnRlbnQsIGNvbnRleHRdLFxuICAgICAgWydlbnRlcicsIHRleHQsIGNvbnRleHRdLFxuICAgICAgWydleGl0JywgdGV4dCwgY29udGV4dF0sXG4gICAgICBbJ2V4aXQnLCBjb250ZW50LCBjb250ZXh0XVxuICAgIF0pXG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG5cbmZ1bmN0aW9uIHRva2VuaXplQXR4SGVhZGluZyhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgc2l6ZSA9IDBcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignYXR4SGVhZGluZycpXG4gICAgZWZmZWN0cy5lbnRlcignYXR4SGVhZGluZ1NlcXVlbmNlJylcbiAgICByZXR1cm4gZmVuY2VPcGVuSW5zaWRlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBmZW5jZU9wZW5JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzNSAmJiBzaXplKysgPCA2KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBmZW5jZU9wZW5JbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2F0eEhlYWRpbmdTZXF1ZW5jZScpXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayhjb2RlKSA6IGhlYWRpbmdCcmVhayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGhlYWRpbmdCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDM1KSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdhdHhIZWFkaW5nU2VxdWVuY2UnKVxuICAgICAgcmV0dXJuIHNlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2F0eEhlYWRpbmcnKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTcGFjZShlZmZlY3RzLCBoZWFkaW5nQnJlYWssICd3aGl0ZXNwYWNlJykoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdhdHhIZWFkaW5nVGV4dCcpXG4gICAgcmV0dXJuIGRhdGEoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcXVlbmNlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHNlcXVlbmNlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdhdHhIZWFkaW5nU2VxdWVuY2UnKVxuICAgIHJldHVybiBoZWFkaW5nQnJlYWsoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRhdGEoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IDM1IHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnYXR4SGVhZGluZ1RleHQnKVxuICAgICAgcmV0dXJuIGhlYWRpbmdCcmVhayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBkYXRhXG4gIH1cbn1cbiIsInZhciBjaGVjayA9IHJlcXVpcmUoJy4uL3V0aWwvcmVnZXgtY2hlY2snKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrKC9bQS1aYS16XS8pXG4iLCJ2YXIgY2hlY2sgPSByZXF1aXJlKCcuLi91dGlsL3JlZ2V4LWNoZWNrJylcblxubW9kdWxlLmV4cG9ydHMgPSBjaGVjaygvW1xcZEEtWmEtel0vKVxuIiwidmFyIGNoZWNrID0gcmVxdWlyZSgnLi4vdXRpbC9yZWdleC1jaGVjaycpXG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2soL1sjLScqK1xcLS05PT9BLVpeLX5dLylcbiIsIm1vZHVsZS5leHBvcnRzID0gYXNjaWlDb250cm9sXG5cbi8vIE5vdGU6IEVPRiBpcyBzZWVuIGFzIEFTQ0lJIGNvbnRyb2wgaGVyZSwgYmVjYXVzZSBgbnVsbCA8IDMyID09IHRydWVgLlxuZnVuY3Rpb24gYXNjaWlDb250cm9sKGNvZGUpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBTcGVjaWFsIHdoaXRlc3BhY2UgY29kZXMgKHdoaWNoIGhhdmUgbmVnYXRpdmUgdmFsdWVzKSwgQzAgYW5kIENvbnRyb2xcbiAgICAvLyBjaGFyYWN0ZXIgREVMXG4gICAgY29kZSA8IDMyIHx8IGNvZGUgPT09IDEyN1xuICApXG59XG4iLCJleHBvcnRzLnRva2VuaXplID0gdG9rZW5pemVBdXRvbGlua1xuXG52YXIgYXNjaWlBbHBoYSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9hc2NpaS1hbHBoYScpXG52YXIgYXNjaWlBbHBoYW51bWVyaWMgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvYXNjaWktYWxwaGFudW1lcmljJylcbnZhciBhc2NpaUF0ZXh0ID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL2FzY2lpLWF0ZXh0JylcbnZhciBhc2NpaUNvbnRyb2wgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvYXNjaWktY29udHJvbCcpXG5cbmZ1bmN0aW9uIHRva2VuaXplQXV0b2xpbmsoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2l6ZVxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdhdXRvbGluaycpXG4gICAgZWZmZWN0cy5lbnRlcignYXV0b2xpbmtNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnYXV0b2xpbmtNYXJrZXInKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2F1dG9saW5rUHJvdG9jb2wnKVxuICAgIHJldHVybiBvcGVuXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplID0gMVxuICAgICAgcmV0dXJuIHNjaGVtZU9yRW1haWxBdGV4dFxuICAgIH1cblxuICAgIHJldHVybiBhc2NpaUF0ZXh0KGNvZGUpID8gZW1haWxBdGV4dChjb2RlKSA6IG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gc2NoZW1lT3JFbWFpbEF0ZXh0KGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gNDMgfHwgY29kZSA9PT0gNDUgfHwgY29kZSA9PT0gNDYgfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSlcbiAgICAgID8gc2NoZW1lSW5zaWRlT3JFbWFpbEF0ZXh0KGNvZGUpXG4gICAgICA6IGVtYWlsQXRleHQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjaGVtZUluc2lkZU9yRW1haWxBdGV4dChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDU4KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB1cmxJbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAoY29kZSA9PT0gNDMgfHwgY29kZSA9PT0gNDUgfHwgY29kZSA9PT0gNDYgfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpICYmXG4gICAgICBzaXplKysgPCAzMlxuICAgICkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2NoZW1lSW5zaWRlT3JFbWFpbEF0ZXh0XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtYWlsQXRleHQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHVybEluc2lkZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2F1dG9saW5rUHJvdG9jb2wnKVxuICAgICAgcmV0dXJuIGVuZChjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSAzMiB8fCBjb2RlID09PSA2MCB8fCBhc2NpaUNvbnRyb2woY29kZSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gdXJsSW5zaWRlXG4gIH1cblxuICBmdW5jdGlvbiBlbWFpbEF0ZXh0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZSA9IDBcbiAgICAgIHJldHVybiBlbWFpbEF0U2lnbk9yRG90XG4gICAgfVxuXG4gICAgaWYgKGFzY2lpQXRleHQoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGVtYWlsQXRleHRcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBlbWFpbEF0U2lnbk9yRG90KGNvZGUpIHtcbiAgICByZXR1cm4gYXNjaWlBbHBoYW51bWVyaWMoY29kZSkgPyBlbWFpbExhYmVsKGNvZGUpIDogbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBlbWFpbExhYmVsKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDYpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZSA9IDBcbiAgICAgIHJldHVybiBlbWFpbEF0U2lnbk9yRG90XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDYyKSB7XG4gICAgICAvLyBFeGl0LCB0aGVuIGNoYW5nZSB0aGUgdHlwZS5cbiAgICAgIGVmZmVjdHMuZXhpdCgnYXV0b2xpbmtQcm90b2NvbCcpLnR5cGUgPSAnYXV0b2xpbmtFbWFpbCdcbiAgICAgIHJldHVybiBlbmQoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gZW1haWxWYWx1ZShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gZW1haWxWYWx1ZShjb2RlKSB7XG4gICAgaWYgKChjb2RlID09PSA0NSB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkgJiYgc2l6ZSsrIDwgNjMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvZGUgPT09IDQ1ID8gZW1haWxWYWx1ZSA6IGVtYWlsTGFiZWxcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBlbmQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2F1dG9saW5rTWFya2VyJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2F1dG9saW5rTWFya2VyJylcbiAgICBlZmZlY3RzLmV4aXQoJ2F1dG9saW5rJylcbiAgICByZXR1cm4gb2tcbiAgfVxufVxuIiwidmFyIGNoZWNrID0gcmVxdWlyZSgnLi4vdXRpbC9yZWdleC1jaGVjaycpXG5cbm1vZHVsZS5leHBvcnRzID0gY2hlY2soL1xcZC8pXG4iLCJleHBvcnRzLnRva2VuaXplID0gdG9rZW5pemVUaGVtYXRpY0JyZWFrXG5cbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxudmFyIG1hcmtkb3duU3BhY2UgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tc3BhY2UnKVxuXG52YXIgY3JlYXRlU3BhY2UgPSByZXF1aXJlKCcuL2ZhY3Rvcnktc3BhY2UnKVxuXG5mdW5jdGlvbiB0b2tlbml6ZVRoZW1hdGljQnJlYWsoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2l6ZSA9IDBcbiAgdmFyIG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCd0aGVtYXRpY0JyZWFrJylcbiAgICBtYXJrZXIgPSBjb2RlXG4gICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0QnJlYWsoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3RoZW1hdGljQnJlYWtTZXF1ZW5jZScpXG4gICAgICByZXR1cm4gc2VxdWVuY2UoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGF0QnJlYWssICd3aGl0ZXNwYWNlJykoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoc2l6ZSA8IDMgfHwgKGNvZGUgIT09IG51bGwgJiYgIW1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQoJ3RoZW1hdGljQnJlYWsnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gc2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZSsrXG4gICAgICByZXR1cm4gc2VxdWVuY2VcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQoJ3RoZW1hdGljQnJlYWtTZXF1ZW5jZScpXG4gICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgfVxufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplTGlzdFN0YXJ0XG5leHBvcnRzLmNvbnRpbnVhdGlvbiA9IHt0b2tlbml6ZTogdG9rZW5pemVMaXN0Q29udGludWF0aW9ufVxuZXhwb3J0cy5leGl0ID0gdG9rZW5pemVMaXN0RW5kXG5cbnZhciBtYXJrZG93blNwYWNlID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLXNwYWNlJylcbnZhciBhc2NpaURpZ2l0ID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL2FzY2lpLWRpZ2l0JylcblxudmFyIHByZWZpeFNpemUgPSByZXF1aXJlKCcuLi91dGlsL3ByZWZpeC1zaXplJylcbnZhciBzaXplQ2h1bmtzID0gcmVxdWlyZSgnLi4vdXRpbC9zaXplLWNodW5rcycpXG52YXIgdGhlbWF0aWNCcmVhayA9IHJlcXVpcmUoJy4vdGhlbWF0aWMtYnJlYWsnKVxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi9mYWN0b3J5LXNwYWNlJylcbnZhciBibGFuayA9IHJlcXVpcmUoJy4vcGFydGlhbC1ibGFuay1saW5lJylcblxuZnVuY3Rpb24gdG9rZW5pemVMaXN0U3RhcnQoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGluaXRpYWxTaXplID0gcHJlZml4U2l6ZShzZWxmLmV2ZW50cywgJ2xpbmVQcmVmaXgnKVxuICB2YXIgdmFsdWVTaXplXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChcbiAgICAgIChjb2RlID09PSA0MiB8fCBjb2RlID09PSA0MyB8fCBjb2RlID09PSA0NSkgJiZcbiAgICAgICghc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIgfHwgY29kZSA9PT0gc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIpXG4gICAgKSB7XG4gICAgICByZXR1cm4gY29kZSA9PT0gNDIgfHwgY29kZSA9PT0gNDVcbiAgICAgICAgPyBlZmZlY3RzLmNoZWNrKHRoZW1hdGljQnJlYWssIG5vaywgdW5vcmRlcmVkKShjb2RlKVxuICAgICAgICA6IHVub3JkZXJlZChjb2RlKVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGFzY2lpRGlnaXQoY29kZSkgJiZcbiAgICAgICghc2VsZi5jb250YWluZXJTdGF0ZS50eXBlIHx8IHNlbGYuY29udGFpbmVyU3RhdGUudHlwZSA9PT0gJ2xpc3RPcmRlcmVkJylcbiAgICApIHtcbiAgICAgIHJldHVybiBvcmRlcmVkKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gdW5vcmRlcmVkKGNvZGUpIHtcbiAgICBpZiAoIXNlbGYuY29udGFpbmVyU3RhdGUudHlwZSkge1xuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS50eXBlID0gJ2xpc3RVbm9yZGVyZWQnXG4gICAgICBlZmZlY3RzLmVudGVyKHNlbGYuY29udGFpbmVyU3RhdGUudHlwZSwge19jb250YWluZXI6IHRydWV9KVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpc3RJdGVtUHJlZml4JylcbiAgICByZXR1cm4gYXRNYXJrZXIoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9yZGVyZWQoY29kZSkge1xuICAgIGlmIChzZWxmLmNvbnRhaW5lclN0YXRlLnR5cGUgfHwgIXNlbGYuaW50ZXJydXB0IHx8IGNvZGUgPT09IDQ5KSB7XG4gICAgICBpZiAoIXNlbGYuY29udGFpbmVyU3RhdGUudHlwZSkge1xuICAgICAgICBzZWxmLmNvbnRhaW5lclN0YXRlLnR5cGUgPSAnbGlzdE9yZGVyZWQnXG4gICAgICAgIGVmZmVjdHMuZW50ZXIoc2VsZi5jb250YWluZXJTdGF0ZS50eXBlLCB7X2NvbnRhaW5lcjogdHJ1ZX0pXG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpc3RJdGVtUHJlZml4JylcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpc3RJdGVtVmFsdWUnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICB2YWx1ZVNpemUgPSAxXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBhZnRlclZhbHVlIDogaW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlEaWdpdChjb2RlKSAmJiArK3ZhbHVlU2l6ZSA8IDEwKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbnNpZGVcbiAgICB9XG5cbiAgICByZXR1cm4gYWZ0ZXJWYWx1ZShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJWYWx1ZShjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdsaXN0SXRlbVZhbHVlJylcblxuICAgIHJldHVybiBjb2RlID09PSA0MSB8fCBjb2RlID09PSA0NiA/IGF0TWFya2VyKGNvZGUpIDogbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhdE1hcmtlcihjb2RlKSB7XG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIgPSBzZWxmLmNvbnRhaW5lclN0YXRlLm1hcmtlciB8fCBjb2RlXG5cbiAgICBpZiAoY29kZSA9PT0gc2VsZi5jb250YWluZXJTdGF0ZS5tYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpc3RJdGVtTWFya2VyJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaXN0SXRlbU1hcmtlcicpXG4gICAgICByZXR1cm4gZWZmZWN0cy5jaGVjayhcbiAgICAgICAgYmxhbmssXG4gICAgICAgIC8vIENhbuKAmXQgYmUgZW1wdHkgd2hlbiBpbnRlcnJ1cHRpbmcuXG4gICAgICAgIHNlbGYuaW50ZXJydXB0ID8gbm9rIDogb25CbGFuayxcbiAgICAgICAgZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICAgIHt0b2tlbml6ZTogdG9rZW5pemVMaXN0SXRlbVByZWZpeFdoaXRlc3BhY2UsIHBhcnRpYWw6IHRydWV9LFxuICAgICAgICAgIGVuZE9mUHJlZml4LFxuICAgICAgICAgIG90aGVyUHJlZml4XG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBvbkJsYW5rKGNvZGUpIHtcbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLmluaXRpYWxCbGFua0xpbmUgPSB0cnVlXG4gICAgaW5pdGlhbFNpemUrK1xuICAgIHJldHVybiBlbmRPZlByZWZpeChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gb3RoZXJQcmVmaXgoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdsaXN0SXRlbVByZWZpeFdoaXRlc3BhY2UnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpc3RJdGVtUHJlZml4V2hpdGVzcGFjZScpXG4gICAgICByZXR1cm4gZW5kT2ZQcmVmaXhcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBlbmRPZlByZWZpeChjb2RlKSB7XG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5zaXplID1cbiAgICAgIGluaXRpYWxTaXplICsgc2l6ZUNodW5rcyhzZWxmLnNsaWNlU3RyZWFtKGVmZmVjdHMuZXhpdCgnbGlzdEl0ZW1QcmVmaXgnKSkpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9rZW5pemVMaXN0Q29udGludWF0aW9uKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgc2VsZi5jb250YWluZXJTdGF0ZS5fY2xvc2VGbG93ID0gdW5kZWZpbmVkXG5cbiAgcmV0dXJuIGVmZmVjdHMuY2hlY2soYmxhbmssIG9uQmxhbmssIG5vdEJsYW5rKVxuXG4gIGZ1bmN0aW9uIG9uQmxhbmsoY29kZSkge1xuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgPVxuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5mdXJ0aGVyQmxhbmtMaW5lcyB8fFxuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5pbml0aWFsQmxhbmtMaW5lXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBub3RCbGFuayhjb2RlKSB7XG4gICAgaWYgKHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgfHwgIW1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIHNlbGYuY29udGFpbmVyU3RhdGUuZnVydGhlckJsYW5rTGluZXMgPSBzZWxmLmNvbnRhaW5lclN0YXRlLmluaXRpYWxCbGFua0xpbmUgPSB1bmRlZmluZWRcbiAgICAgIHJldHVybiBub3RJbkN1cnJlbnRJdGVtKGNvZGUpXG4gICAgfVxuXG4gICAgc2VsZi5jb250YWluZXJTdGF0ZS5mdXJ0aGVyQmxhbmtMaW5lcyA9IHNlbGYuY29udGFpbmVyU3RhdGUuaW5pdGlhbEJsYW5rTGluZSA9IHVuZGVmaW5lZFxuICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoXG4gICAgICB7dG9rZW5pemU6IHRva2VuaXplSW5kZW50LCBwYXJ0aWFsOiB0cnVlfSxcbiAgICAgIG9rLFxuICAgICAgbm90SW5DdXJyZW50SXRlbVxuICAgICkoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdEluQ3VycmVudEl0ZW0oY29kZSkge1xuICAgIC8vIFdoaWxlIHdlIGRvIGNvbnRpbnVlLCB3ZSBzaWduYWwgdGhhdCB0aGUgZmxvdyBzaG91bGQgYmUgY2xvc2VkLlxuICAgIHNlbGYuY29udGFpbmVyU3RhdGUuX2Nsb3NlRmxvdyA9IHRydWVcbiAgICAvLyBBcyB3ZeKAmXJlIGNsb3NpbmcgZmxvdywgd2XigJlyZSBubyBsb25nZXIgaW50ZXJydXB0aW5nXG4gICAgc2VsZi5pbnRlcnJ1cHQgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gY3JlYXRlU3BhY2UoXG4gICAgICBlZmZlY3RzLFxuICAgICAgZWZmZWN0cy5hdHRlbXB0KGV4cG9ydHMsIG9rLCBub2spLFxuICAgICAgJ2xpbmVQcmVmaXgnLFxuICAgICAgNFxuICAgICkoY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUluZGVudChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBjcmVhdGVTcGFjZShcbiAgICBlZmZlY3RzLFxuICAgIGFmdGVyUHJlZml4LFxuICAgICdsaXN0SXRlbUluZGVudCcsXG5cbiAgICBzZWxmLmNvbnRhaW5lclN0YXRlLnNpemUgKyAxXG4gIClcblxuICBmdW5jdGlvbiBhZnRlclByZWZpeChjb2RlKSB7XG4gICAgcmV0dXJuIHByZWZpeFNpemUoc2VsZi5ldmVudHMsICdsaXN0SXRlbUluZGVudCcpID09PVxuICAgICAgc2VsZi5jb250YWluZXJTdGF0ZS5zaXplXG4gICAgICA/IG9rKGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplTGlzdEVuZChlZmZlY3RzKSB7XG4gIGVmZmVjdHMuZXhpdCh0aGlzLmNvbnRhaW5lclN0YXRlLnR5cGUpXG59XG5cbmZ1bmN0aW9uIHRva2VuaXplTGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIGNyZWF0ZVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgYWZ0ZXJQcmVmaXgsXG4gICAgJ2xpc3RJdGVtUHJlZml4V2hpdGVzcGFjZScsXG5cbiAgICA0ICsgMVxuICApXG5cbiAgZnVuY3Rpb24gYWZ0ZXJQcmVmaXgoY29kZSkge1xuICAgIHJldHVybiBtYXJrZG93blNwYWNlKGNvZGUpIHx8XG4gICAgICAhcHJlZml4U2l6ZShzZWxmLmV2ZW50cywgJ2xpc3RJdGVtUHJlZml4V2hpdGVzcGFjZScpXG4gICAgICA/IG5vayhjb2RlKVxuICAgICAgOiBvayhjb2RlKVxuICB9XG59XG4iLCJleHBvcnRzLnRva2VuaXplID0gdG9rZW5pemVCbG9ja1F1b3RlU3RhcnRcbmV4cG9ydHMuY29udGludWF0aW9uID0ge3Rva2VuaXplOiB0b2tlbml6ZUJsb2NrUXVvdGVDb250aW51YXRpb259XG5leHBvcnRzLmV4aXQgPSBleGl0XG5cbnZhciBtYXJrZG93blNwYWNlID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLXNwYWNlJylcblxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi9mYWN0b3J5LXNwYWNlJylcblxuZnVuY3Rpb24gdG9rZW5pemVCbG9ja1F1b3RlU3RhcnQoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyKSB7XG4gICAgICBpZiAoIXNlbGYuY29udGFpbmVyU3RhdGUub3Blbikge1xuICAgICAgICBlZmZlY3RzLmVudGVyKCdibG9ja1F1b3RlJywge19jb250YWluZXI6IHRydWV9KVxuICAgICAgICBzZWxmLmNvbnRhaW5lclN0YXRlLm9wZW4gPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2Jsb2NrUXVvdGVQcmVmaXgnKVxuICAgICAgZWZmZWN0cy5lbnRlcignYmxvY2tRdW90ZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnYmxvY2tRdW90ZU1hcmtlcicpXG4gICAgICByZXR1cm4gYWZ0ZXJcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2Jsb2NrUXVvdGVQcmVmaXhXaGl0ZXNwYWNlJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZScpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2Jsb2NrUXVvdGVQcmVmaXgnKVxuICAgICAgcmV0dXJuIG9rXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdibG9ja1F1b3RlUHJlZml4JylcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUJsb2NrUXVvdGVDb250aW51YXRpb24oZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gY3JlYXRlU3BhY2UoXG4gICAgZWZmZWN0cyxcbiAgICBlZmZlY3RzLmF0dGVtcHQoZXhwb3J0cywgb2ssIG5vayksXG4gICAgJ2xpbmVQcmVmaXgnLFxuICAgIDRcbiAgKVxufVxuXG5mdW5jdGlvbiBleGl0KGVmZmVjdHMpIHtcbiAgZWZmZWN0cy5leGl0KCdibG9ja1F1b3RlJylcbn1cbiIsInZhciBjaGVjayA9IHJlcXVpcmUoJy4uL3V0aWwvcmVnZXgtY2hlY2snKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrKC9bIS0vOi1AWy1gey1+XS8pXG4iLCJleHBvcnRzLnRva2VuaXplID0gdG9rZW5pemVDaGFyYWN0ZXJFc2NhcGVcblxudmFyIGFzY2lpUHVuY3R1YXRpb24gPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvYXNjaWktcHVuY3R1YXRpb24nKVxuXG5mdW5jdGlvbiB0b2tlbml6ZUNoYXJhY3RlckVzY2FwZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdjaGFyYWN0ZXJFc2NhcGUnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2VzY2FwZU1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdlc2NhcGVNYXJrZXInKVxuICAgIHJldHVybiBvcGVuXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlQdW5jdHVhdGlvbihjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignY2hhcmFjdGVyRXNjYXBlVmFsdWUnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NoYXJhY3RlckVzY2FwZVZhbHVlJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2hhcmFjdGVyRXNjYXBlJylcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBjaGFyYWN0ZXJFbnRpdGllcyA9IHJlcXVpcmUoJ2NoYXJhY3Rlci1lbnRpdGllcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlRW50aXR5XG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHkoY2hhcmFjdGVycykge1xuICByZXR1cm4gb3duLmNhbGwoY2hhcmFjdGVyRW50aXRpZXMsIGNoYXJhY3RlcnMpXG4gICAgPyBjaGFyYWN0ZXJFbnRpdGllc1tjaGFyYWN0ZXJzXVxuICAgIDogZmFsc2Vcbn1cbiIsInZhciBjaGVjayA9IHJlcXVpcmUoJy4uL3V0aWwvcmVnZXgtY2hlY2snKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrKC9bXFxkQS1GYS1mXS8pXG4iLCJleHBvcnRzLnRva2VuaXplID0gdG9rZW5pemVDaGFyYWN0ZXJSZWZlcmVuY2VcblxudmFyIGRlY29kZSA9IHJlcXVpcmUoJ3BhcnNlLWVudGl0aWVzL2RlY29kZS1lbnRpdHknKVxudmFyIGFzY2lpQWxwaGFudW1lcmljID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL2FzY2lpLWFscGhhbnVtZXJpYycpXG52YXIgYXNjaWlEaWdpdCA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9hc2NpaS1kaWdpdCcpXG52YXIgYXNjaWlIZXhEaWdpdCA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9hc2NpaS1oZXgtZGlnaXQnKVxuXG5mdW5jdGlvbiB0b2tlbml6ZUNoYXJhY3RlclJlZmVyZW5jZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgc2l6ZSA9IDBcbiAgdmFyIG1heFxuICB2YXIgdGVzdFxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdjaGFyYWN0ZXJSZWZlcmVuY2UnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXInKVxuICAgIHJldHVybiBvcGVuXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMzUpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWMnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWMnKVxuICAgICAgcmV0dXJuIG51bWVyaWNcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZScpXG4gICAgbWF4ID0gMzFcbiAgICB0ZXN0ID0gYXNjaWlBbHBoYW51bWVyaWNcbiAgICByZXR1cm4gdmFsdWUoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG51bWVyaWMoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA4OCB8fCBjb2RlID09PSAxMjApIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdjaGFyYWN0ZXJSZWZlcmVuY2VNYXJrZXJIZXhhZGVjaW1hbCcpXG4gICAgICBlZmZlY3RzLmVudGVyKCdjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZScpXG4gICAgICBtYXggPSA2XG4gICAgICB0ZXN0ID0gYXNjaWlIZXhEaWdpdFxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWUnKVxuICAgIG1heCA9IDdcbiAgICB0ZXN0ID0gYXNjaWlEaWdpdFxuICAgIHJldHVybiB2YWx1ZShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWUoY29kZSkge1xuICAgIHZhciB0b2tlblxuXG4gICAgaWYgKGNvZGUgPT09IDU5ICYmIHNpemUpIHtcbiAgICAgIHRva2VuID0gZWZmZWN0cy5leGl0KCdjaGFyYWN0ZXJSZWZlcmVuY2VWYWx1ZScpXG5cbiAgICAgIGlmICh0ZXN0ID09PSBhc2NpaUFscGhhbnVtZXJpYyAmJiAhZGVjb2RlKHNlbGYuc2xpY2VTZXJpYWxpemUodG9rZW4pKSkge1xuICAgICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2NoYXJhY3RlclJlZmVyZW5jZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnY2hhcmFjdGVyUmVmZXJlbmNlJylcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIGlmICh0ZXN0KGNvZGUpICYmIHNpemUrKyA8IG1heCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZUNvZGVGZW5jZWRcbmV4cG9ydHMuY29uY3JldGUgPSB0cnVlXG5cbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxudmFyIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmctb3Itc3BhY2UnKVxuXG52YXIgcHJlZml4U2l6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvcHJlZml4LXNpemUnKVxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi9mYWN0b3J5LXNwYWNlJylcblxuZnVuY3Rpb24gdG9rZW5pemVDb2RlRmVuY2VkKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBpbml0aWFsUHJlZml4ID0gcHJlZml4U2l6ZSh0aGlzLmV2ZW50cywgJ2xpbmVQcmVmaXgnKVxuICB2YXIgc2l6ZU9wZW4gPSAwXG4gIHZhciBtYXJrZXJcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignY29kZUZlbmNlZCcpXG4gICAgZWZmZWN0cy5lbnRlcignY29kZUZlbmNlZEZlbmNlJylcbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlRmVuY2VkRmVuY2VTZXF1ZW5jZScpXG4gICAgbWFya2VyID0gY29kZVxuICAgIHJldHVybiBzZXF1ZW5jZU9wZW4oY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcXVlbmNlT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplT3BlbisrXG4gICAgICByZXR1cm4gc2VxdWVuY2VPcGVuXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdjb2RlRmVuY2VkRmVuY2VTZXF1ZW5jZScpXG4gICAgcmV0dXJuIHNpemVPcGVuIDwgM1xuICAgICAgPyBub2soY29kZSlcbiAgICAgIDogY3JlYXRlU3BhY2UoZWZmZWN0cywgaW5mb09wZW4sICd3aGl0ZXNwYWNlJykoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGluZm9PcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBvcGVuQWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlRmVuY2VkRmVuY2VJbmZvJylcbiAgICBlZmZlY3RzLmVudGVyKCdjaHVua1N0cmluZycsIHtjb250ZW50VHlwZTogJ3N0cmluZyd9KVxuICAgIHJldHVybiBpbmZvKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBpbmZvKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rU3RyaW5nJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnY29kZUZlbmNlZEZlbmNlSW5mbycpXG4gICAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgaW5mb0FmdGVyLCAnd2hpdGVzcGFjZScpKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDk2ICYmIGNvZGUgPT09IG1hcmtlcikgcmV0dXJuIG5vayhjb2RlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBpbmZvXG4gIH1cblxuICBmdW5jdGlvbiBpbmZvQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIG9wZW5BZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVGZW5jZWRGZW5jZU1ldGEnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2NodW5rU3RyaW5nJywge2NvbnRlbnRUeXBlOiAnc3RyaW5nJ30pXG4gICAgcmV0dXJuIG1ldGEoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ldGEoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NvZGVGZW5jZWRGZW5jZU1ldGEnKVxuICAgICAgcmV0dXJuIG9wZW5BZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5NiAmJiBjb2RlID09PSBtYXJrZXIpIHJldHVybiBub2soY29kZSlcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gbWV0YVxuICB9XG5cbiAgZnVuY3Rpb24gb3BlbkFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2NvZGVGZW5jZWRGZW5jZScpXG4gICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2soY29kZSkgOiBjb250ZW50KGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250ZW50KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICB7dG9rZW5pemU6IHRva2VuaXplQ2xvc2luZ0ZlbmNlLCBwYXJ0aWFsOiB0cnVlfSxcbiAgICAgICAgYWZ0ZXIsXG4gICAgICAgIGluaXRpYWxQcmVmaXhcbiAgICAgICAgICA/IGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGNvbnRlbnQsICdsaW5lUHJlZml4JywgaW5pdGlhbFByZWZpeCArIDEpXG4gICAgICAgICAgOiBjb250ZW50XG4gICAgICApXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignY29kZUZsb3dWYWx1ZScpXG4gICAgcmV0dXJuIGNvbnRlbnRDb250aW51ZShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGVudENvbnRpbnVlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnY29kZUZsb3dWYWx1ZScpXG4gICAgICByZXR1cm4gY29udGVudChjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb250ZW50Q29udGludWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2NvZGVGZW5jZWQnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5pemVDbG9zaW5nRmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICAgIHZhciBzaXplID0gMFxuXG4gICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGNsb3NpbmdQcmVmaXhBZnRlciwgJ2xpbmVQcmVmaXgnLCA0KVxuXG4gICAgZnVuY3Rpb24gY2xvc2luZ1ByZWZpeEFmdGVyKGNvZGUpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVGZW5jZWRGZW5jZScpXG4gICAgICBlZmZlY3RzLmVudGVyKCdjb2RlRmVuY2VkRmVuY2VTZXF1ZW5jZScpXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICAgIHNpemUrK1xuICAgICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlXG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplIDwgc2l6ZU9wZW4pIHJldHVybiBub2soY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnY29kZUZlbmNlZEZlbmNlU2VxdWVuY2UnKVxuICAgICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGNsb3NpbmdTZXF1ZW5jZUVuZCwgJ3doaXRlc3BhY2UnKShjb2RlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NpbmdTZXF1ZW5jZUVuZChjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCdjb2RlRmVuY2VkRmVuY2UnKVxuICAgICAgICByZXR1cm4gb2soY29kZSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplQ29kZUluZGVudGVkXG5leHBvcnRzLnJlc29sdmUgPSByZXNvbHZlQ29kZUluZGVudGVkXG5cbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxuXG52YXIgY2h1bmtlZFNwbGljZSA9IHJlcXVpcmUoJy4uL3V0aWwvY2h1bmtlZC1zcGxpY2UnKVxudmFyIHByZWZpeFNpemUgPSByZXF1aXJlKCcuLi91dGlsL3ByZWZpeC1zaXplJylcbnZhciBjcmVhdGVTcGFjZSA9IHJlcXVpcmUoJy4vZmFjdG9yeS1zcGFjZScpXG5cbnZhciBjb250aW51ZWRJbmRlbnQgPSB7dG9rZW5pemU6IHRva2VuaXplQ29udGludWVkSW5kZW50LCBwYXJ0aWFsOiB0cnVlfVxuXG5mdW5jdGlvbiByZXNvbHZlQ29kZUluZGVudGVkKGV2ZW50cywgY29udGV4dCkge1xuICB2YXIgY29kZSA9IHtcbiAgICB0eXBlOiAnY29kZUluZGVudGVkJyxcbiAgICBzdGFydDogZXZlbnRzWzBdWzFdLnN0YXJ0LFxuICAgIGVuZDogZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAxXVsxXS5lbmRcbiAgfVxuXG4gIGNodW5rZWRTcGxpY2UoZXZlbnRzLCAwLCAwLCBbWydlbnRlcicsIGNvZGUsIGNvbnRleHRdXSlcbiAgY2h1bmtlZFNwbGljZShldmVudHMsIGV2ZW50cy5sZW5ndGgsIDAsIFtbJ2V4aXQnLCBjb2RlLCBjb250ZXh0XV0pXG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVJbmRlbnRlZChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBjcmVhdGVTcGFjZShcbiAgICBlZmZlY3RzLFxuICAgIGFmdGVySW5pdGlhbCxcbiAgICAnbGluZVByZWZpeCcsXG5cbiAgICA0ICsgMVxuICApXG5cbiAgZnVuY3Rpb24gYWZ0ZXJJbml0aWFsKGNvZGUpIHtcbiAgICAvLyBGbG93IGNoZWNrcyBibGFuayBsaW5lcyBmaXJzdCwgc28gd2UgZG9u4oCZdCBoYXZlIEVPTC9FT0YuXG5cbiAgICBpZiAocHJlZml4U2l6ZShzZWxmLmV2ZW50cywgJ2xpbmVQcmVmaXgnKSA8IDQpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlRmxvd1ZhbHVlJylcbiAgICByZXR1cm4gY29udGVudChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJQcmVmaXgoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KGNvbnRpbnVlZEluZGVudCwgYWZ0ZXJQcmVmaXgsIG9rKShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVGbG93VmFsdWUnKVxuICAgIHJldHVybiBjb250ZW50KGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250ZW50KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnY29kZUZsb3dWYWx1ZScpXG4gICAgICByZXR1cm4gYWZ0ZXJQcmVmaXgoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29udGVudFxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplQ29udGludWVkSW5kZW50KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIGNyZWF0ZVNwYWNlKFxuICAgIGVmZmVjdHMsXG4gICAgYWZ0ZXJQcmVmaXgsXG4gICAgJ2xpbmVQcmVmaXgnLFxuXG4gICAgNCArIDFcbiAgKVxuXG4gIGZ1bmN0aW9uIGFmdGVyUHJlZml4KGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcblxuICAgICAgcmV0dXJuIGNyZWF0ZVNwYWNlKFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBhZnRlclByZWZpeCxcbiAgICAgICAgJ2xpbmVQcmVmaXgnLFxuXG4gICAgICAgIDQgKyAxXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHByZWZpeFNpemUoc2VsZi5ldmVudHMsICdsaW5lUHJlZml4JykgPCA0ID8gbm9rKGNvZGUpIDogb2soY29kZSlcbiAgfVxufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplQ29kZVRleHRcbmV4cG9ydHMucmVzb2x2ZSA9IHJlc29sdmVDb2RlVGV4dFxuZXhwb3J0cy5wcmV2aW91cyA9IHByZXZpb3VzXG5cbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxuXG5mdW5jdGlvbiByZXNvbHZlQ29kZVRleHQoZXZlbnRzKSB7XG4gIHZhciB0YWlsRXhpdEluZGV4ID0gZXZlbnRzLmxlbmd0aCAtIDRcbiAgdmFyIGhlYWRFbnRlckluZGV4ID0gM1xuICB2YXIgaW5kZXhcbiAgdmFyIGVudGVyXG5cbiAgLy8gSWYgd2Ugc3RhcnQgYW5kIGVuZCB3aXRoIGFuIEVPTCBvciBhIHNwYWNlLlxuICBpZiAoXG4gICAgKGV2ZW50c1toZWFkRW50ZXJJbmRleF1bMV0udHlwZSA9PT0gJ2xpbmVFbmRpbmcnIHx8XG4gICAgICBldmVudHNbaGVhZEVudGVySW5kZXhdWzFdLnR5cGUgPT09ICdzcGFjZScpICYmXG4gICAgKGV2ZW50c1t0YWlsRXhpdEluZGV4XVsxXS50eXBlID09PSAnbGluZUVuZGluZycgfHxcbiAgICAgIGV2ZW50c1t0YWlsRXhpdEluZGV4XVsxXS50eXBlID09PSAnc3BhY2UnKVxuICApIHtcbiAgICBpbmRleCA9IGhlYWRFbnRlckluZGV4XG5cbiAgICAvLyBBbmQgd2UgaGF2ZSBkYXRhLlxuICAgIHdoaWxlICgrK2luZGV4IDwgdGFpbEV4aXRJbmRleCkge1xuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2NvZGVUZXh0RGF0YScpIHtcbiAgICAgICAgLy8gVGhlbiB3ZSBoYXZlIHBhZGRpbmcuXG4gICAgICAgIGV2ZW50c1t0YWlsRXhpdEluZGV4XVsxXS50eXBlID0gZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID1cbiAgICAgICAgICAnY29kZVRleHRQYWRkaW5nJ1xuXG4gICAgICAgIGhlYWRFbnRlckluZGV4ICs9IDJcbiAgICAgICAgdGFpbEV4aXRJbmRleCAtPSAyXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTWVyZ2UgYWRqYWNlbnQgc3BhY2VzIGFuZCBkYXRhLlxuICBpbmRleCA9IGhlYWRFbnRlckluZGV4IC0gMVxuICB0YWlsRXhpdEluZGV4KytcblxuICB3aGlsZSAoKytpbmRleCA8PSB0YWlsRXhpdEluZGV4KSB7XG4gICAgaWYgKGVudGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpbmRleCAhPT0gdGFpbEV4aXRJbmRleCAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgIT09ICdsaW5lRW5kaW5nJykge1xuICAgICAgICBlbnRlciA9IGluZGV4XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGluZGV4ID09PSB0YWlsRXhpdEluZGV4IHx8XG4gICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdsaW5lRW5kaW5nJ1xuICAgICkge1xuICAgICAgZXZlbnRzW2VudGVyXVsxXS50eXBlID0gJ2NvZGVUZXh0RGF0YSdcblxuICAgICAgaWYgKGluZGV4ICE9PSBlbnRlciArIDIpIHtcbiAgICAgICAgZXZlbnRzW2VudGVyXVsxXS5lbmQgPSBldmVudHNbaW5kZXggLSAxXVsxXS5lbmRcbiAgICAgICAgZXZlbnRzLnNwbGljZShlbnRlciArIDIsIGluZGV4IC0gZW50ZXIgLSAyKVxuICAgICAgICB0YWlsRXhpdEluZGV4IC09IGluZGV4IC0gZW50ZXIgLSAyXG4gICAgICAgIGluZGV4ID0gZW50ZXIgKyAyXG4gICAgICB9XG5cbiAgICAgIGVudGVyID0gdW5kZWZpbmVkXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG5mdW5jdGlvbiBwcmV2aW91cyhjb2RlKSB7XG4gIC8vIElmIHRoZXJlIGlzIGEgcHJldmlvdXMgY29kZSwgdGhlcmUgd2lsbCBhbHdheXMgYmUgYSB0YWlsLlxuICByZXR1cm4gKFxuICAgIGNvZGUgIT09IDk2IHx8XG4gICAgdGhpcy5ldmVudHNbdGhpcy5ldmVudHMubGVuZ3RoIC0gMV1bMV0udHlwZSA9PT0gJ2NoYXJhY3RlckVzY2FwZSdcbiAgKVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUNvZGVUZXh0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBzaXplT3BlbiA9IDBcbiAgdmFyIHNpemVcbiAgdmFyIHRva2VuXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2NvZGVUZXh0JylcbiAgICBlZmZlY3RzLmVudGVyKCdjb2RlVGV4dFNlcXVlbmNlJylcbiAgICByZXR1cm4gb3BlbmluZ1NlcXVlbmNlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuaW5nU2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA5Nikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplT3BlbisrXG4gICAgICByZXR1cm4gb3BlbmluZ1NlcXVlbmNlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdjb2RlVGV4dFNlcXVlbmNlJylcbiAgICByZXR1cm4gZ2FwKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBnYXAoY29kZSkge1xuICAgIC8vIEVPRi5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIC8vIENsb3NpbmcgZmVuY2U/XG4gICAgLy8gQ291bGQgYWxzbyBiZSBkYXRhLlxuICAgIGlmIChjb2RlID09PSA5Nikge1xuICAgICAgdG9rZW4gPSBlZmZlY3RzLmVudGVyKCdjb2RlVGV4dFNlcXVlbmNlJylcbiAgICAgIHNpemUgPSAwXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gVGFicyBkb27igJl0IHdvcmssIGFuZCB2aXJ0dWFsIHNwYWNlcyBkb27igJl0IG1ha2Ugc2Vuc2UuXG4gICAgaWYgKGNvZGUgPT09IDMyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdzcGFjZScpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnc3BhY2UnKVxuICAgICAgcmV0dXJuIGdhcFxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgcmV0dXJuIGdhcFxuICAgIH1cblxuICAgIC8vIERhdGEuXG4gICAgZWZmZWN0cy5lbnRlcignY29kZVRleHREYXRhJylcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG5cbiAgLy8gSW4gY29kZS5cbiAgZnVuY3Rpb24gZGF0YShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gMzIgfHxcbiAgICAgIGNvZGUgPT09IDk2IHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnY29kZVRleHREYXRhJylcbiAgICAgIHJldHVybiBnYXAoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgLy8gQ2xvc2luZyBmZW5jZS5cbiAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlKGNvZGUpIHtcbiAgICAvLyBNb3JlLlxuICAgIGlmIChjb2RlID09PSA5Nikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplKytcbiAgICAgIHJldHVybiBjbG9zaW5nU2VxdWVuY2VcbiAgICB9XG5cbiAgICAvLyBEb25lIVxuICAgIGlmIChzaXplID09PSBzaXplT3Blbikge1xuICAgICAgZWZmZWN0cy5leGl0KCdjb2RlVGV4dFNlcXVlbmNlJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnY29kZVRleHQnKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gTW9yZSBvciBsZXNzIGFjY2VudHM6IG1hcmsgYXMgZGF0YS5cbiAgICB0b2tlbi50eXBlID0gJ2NvZGVUZXh0RGF0YSdcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlc3RpbmF0aW9uXG5cbnZhciBhc2NpaUNvbnRyb2wgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvYXNjaWktY29udHJvbCcpXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZy1vci1zcGFjZScpXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbmZ1bmN0aW9uIGNyZWF0ZURlc3RpbmF0aW9uKFxuICBlZmZlY3RzLFxuICBvayxcbiAgbm9rLFxuICB0eXBlLFxuICBsaXRlcmFsVHlwZSxcbiAgbGl0ZXJhbE1hcmtlclR5cGUsXG4gIHJhd1R5cGUsXG4gIHN0cmluZ1R5cGUsXG4gIG1heFxuKSB7XG4gIHZhciBsaW1pdCA9IG1heCB8fCBJbmZpbml0eVxuICB2YXIgYmFsYW5jZSA9IDBcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYwKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKGxpdGVyYWxUeXBlKVxuICAgICAgZWZmZWN0cy5lbnRlcihsaXRlcmFsTWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KGxpdGVyYWxNYXJrZXJUeXBlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uRW5jbG9zZWRCZWZvcmVcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlDb250cm9sKGNvZGUpKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlKVxuICAgIGVmZmVjdHMuZW50ZXIocmF3VHlwZSlcbiAgICBlZmZlY3RzLmVudGVyKHN0cmluZ1R5cGUpXG4gICAgZWZmZWN0cy5lbnRlcignY2h1bmtTdHJpbmcnLCB7Y29udGVudFR5cGU6ICdzdHJpbmcnfSlcbiAgICByZXR1cm4gZGVzdGluYXRpb25SYXcoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uRW5jbG9zZWRCZWZvcmUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5lbnRlcihsaXRlcmFsTWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KGxpdGVyYWxNYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KGxpdGVyYWxUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKHN0cmluZ1R5cGUpXG4gICAgZWZmZWN0cy5lbnRlcignY2h1bmtTdHJpbmcnLCB7Y29udGVudFR5cGU6ICdzdHJpbmcnfSlcbiAgICByZXR1cm4gZGVzdGluYXRpb25FbmNsb3NlZChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdGluYXRpb25FbmNsb3NlZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYyKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rU3RyaW5nJylcbiAgICAgIGVmZmVjdHMuZXhpdChzdHJpbmdUeXBlKVxuICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uRW5jbG9zZWRCZWZvcmUoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSA2MCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29kZSA9PT0gOTIgPyBkZXN0aW5hdGlvbkVuY2xvc2VkRXNjYXBlIDogZGVzdGluYXRpb25FbmNsb3NlZFxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdGluYXRpb25FbmNsb3NlZEVzY2FwZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYwIHx8IGNvZGUgPT09IDYyIHx8IGNvZGUgPT09IDkyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBkZXN0aW5hdGlvbkVuY2xvc2VkXG4gICAgfVxuXG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uRW5jbG9zZWQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3RpbmF0aW9uUmF3KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDApIHtcbiAgICAgIGlmICgrK2JhbGFuY2UgPiBsaW1pdCkgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVzdGluYXRpb25SYXdcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNDEpIHtcbiAgICAgIGlmICghYmFsYW5jZS0tKSB7XG4gICAgICAgIGVmZmVjdHMuZXhpdCgnY2h1bmtTdHJpbmcnKVxuICAgICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSlcbiAgICAgICAgZWZmZWN0cy5leGl0KHJhd1R5cGUpXG4gICAgICAgIGVmZmVjdHMuZXhpdCh0eXBlKVxuICAgICAgICByZXR1cm4gb2soY29kZSlcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVzdGluYXRpb25SYXdcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSB7XG4gICAgICBpZiAoYmFsYW5jZSkgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICBlZmZlY3RzLmV4aXQoc3RyaW5nVHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdChyYXdUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlDb250cm9sKGNvZGUpKSByZXR1cm4gbm9rKGNvZGUpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvZGUgPT09IDkyID8gZGVzdGluYXRpb25SYXdFc2NhcGUgOiBkZXN0aW5hdGlvblJhd1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdGluYXRpb25SYXdFc2NhcGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0MCB8fCBjb2RlID09PSA0MSB8fCBjb2RlID09PSA5Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVzdGluYXRpb25SYXdcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdGluYXRpb25SYXcoY29kZSlcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVMYWJlbFxuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcbnZhciBtYXJrZG93blNwYWNlID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLXNwYWNlJylcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbmZ1bmN0aW9uIGNyZWF0ZUxhYmVsKGVmZmVjdHMsIG9rLCBub2ssIHR5cGUsIG1hcmtlclR5cGUsIHN0cmluZ1R5cGUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBzaXplID0gMFxuICB2YXIgZGF0YVxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuZW50ZXIoc3RyaW5nVHlwZSlcbiAgICByZXR1cm4gYXRCcmVha1xuICB9XG5cbiAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gOTEgfHxcbiAgICAgIChjb2RlID09PSA5MyAmJiAhZGF0YSkgfHxcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gZm9vdG5vdGVzLiAqL1xuICAgICAgKGNvZGUgPT09IDk0ICYmXG4gICAgICAgICFzaXplICYmXG4gICAgICAgICdfaGlkZGVuRm9vdG5vdGVTdXBwb3J0JyBpbiBzZWxmLnBhcnNlci5jb25zdHJ1Y3RzKSB8fFxuICAgICAgc2l6ZSA+IDk5OVxuICAgICkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5Mykge1xuICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICAgIHJldHVybiBhdEJyZWFrXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignY2h1bmtTdHJpbmcnLCB7Y29udGVudFR5cGU6ICdzdHJpbmcnfSlcbiAgICByZXR1cm4gbGFiZWwoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhYmVsKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIHx8XG4gICAgICBjb2RlID09PSA5MSB8fFxuICAgICAgY29kZSA9PT0gOTMgfHxcbiAgICAgIG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSB8fFxuICAgICAgc2l6ZSsrID4gOTk5XG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rU3RyaW5nJylcbiAgICAgIHJldHVybiBhdEJyZWFrKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZGF0YSA9IGRhdGEgfHwgIW1hcmtkb3duU3BhY2UoY29kZSlcbiAgICByZXR1cm4gY29kZSA9PT0gOTIgPyBsYWJlbEVzY2FwZSA6IGxhYmVsXG4gIH1cblxuICBmdW5jdGlvbiBsYWJlbEVzY2FwZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDkxIHx8IGNvZGUgPT09IDkyIHx8IGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemUrK1xuICAgICAgcmV0dXJuIGxhYmVsXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsKGNvZGUpXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gY3JlYXRlV2hpdGVzcGFjZVxuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcbnZhciBtYXJrZG93blNwYWNlID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLXNwYWNlJylcblxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi9mYWN0b3J5LXNwYWNlJylcblxuZnVuY3Rpb24gY3JlYXRlV2hpdGVzcGFjZShlZmZlY3RzLCBvaykge1xuICB2YXIgc2VlblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgICBzZWVuID0gdHJ1ZVxuICAgICAgcmV0dXJuIHN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVTcGFjZShcbiAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIHNlZW4gPyAnbGluZVByZWZpeCcgOiAnbGluZVN1ZmZpeCdcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVUaXRsZVxuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcblxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi9mYWN0b3J5LXNwYWNlJylcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbmZ1bmN0aW9uIGNyZWF0ZVRpdGxlKGVmZmVjdHMsIG9rLCBub2ssIHR5cGUsIG1hcmtlclR5cGUsIHN0cmluZ1R5cGUpIHtcbiAgdmFyIG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgIG1hcmtlciA9IGNvZGUgPT09IDQwID8gNDEgOiBjb2RlXG4gICAgcmV0dXJuIGF0Rmlyc3RUaXRsZUJyZWFrXG4gIH1cblxuICBmdW5jdGlvbiBhdEZpcnN0VGl0bGVCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQobWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdCh0eXBlKVxuICAgICAgcmV0dXJuIG9rXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcihzdHJpbmdUeXBlKVxuICAgIHJldHVybiBhdFRpdGxlQnJlYWsoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0VGl0bGVCcmVhayhjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICByZXR1cm4gYXRGaXJzdFRpdGxlQnJlYWsobWFya2VyKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gTm90ZTogYmxhbmsgbGluZXMgY2Fu4oCZdCBleGlzdCBpbiBjb250ZW50LlxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGF0VGl0bGVCcmVhaywgJ2xpbmVQcmVmaXgnKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2NodW5rU3RyaW5nJywge2NvbnRlbnRUeXBlOiAnc3RyaW5nJ30pXG4gICAgcmV0dXJuIHRpdGxlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0aXRsZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlciB8fCBjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICByZXR1cm4gYXRUaXRsZUJyZWFrKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvZGUgPT09IDkyID8gdGl0bGVFc2NhcGUgOiB0aXRsZVxuICB9XG5cbiAgZnVuY3Rpb24gdGl0bGVFc2NhcGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIgfHwgY29kZSA9PT0gOTIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRpdGxlXG4gICAgfVxuXG4gICAgcmV0dXJuIHRpdGxlKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZURlZmluaXRpb25cblxudmFyIG1hcmtkb3duTGluZUVuZGluZyA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZycpXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZy1vci1zcGFjZScpXG52YXIgbm9ybWFsaXplSWRlbnRpZmllciA9IHJlcXVpcmUoJy4uL3V0aWwvbm9ybWFsaXplLWlkZW50aWZpZXInKVxuXG52YXIgY3JlYXRlRGVzdGluYXRpb24gPSByZXF1aXJlKCcuL2ZhY3RvcnktZGVzdGluYXRpb24nKVxudmFyIGNyZWF0ZUxhYmVsID0gcmVxdWlyZSgnLi9mYWN0b3J5LWxhYmVsJylcbnZhciBjcmVhdGVTcGFjZSA9IHJlcXVpcmUoJy4vZmFjdG9yeS1zcGFjZScpXG52YXIgY3JlYXRlV2hpdGVzcGFjZSA9IHJlcXVpcmUoJy4vZmFjdG9yeS13aGl0ZXNwYWNlJylcbnZhciBjcmVhdGVUaXRsZSA9IHJlcXVpcmUoJy4vZmFjdG9yeS10aXRsZScpXG5cbmZ1bmN0aW9uIHRva2VuaXplRGVmaW5pdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgZGVzdGluYXRpb25BZnRlciA9IGVmZmVjdHMuYXR0ZW1wdChcbiAgICB7dG9rZW5pemU6IHRva2VuaXplVGl0bGUsIHBhcnRpYWw6IHRydWV9LFxuICAgIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGFmdGVyLCAnd2hpdGVzcGFjZScpLFxuICAgIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGFmdGVyLCAnd2hpdGVzcGFjZScpXG4gIClcblxuICB2YXIgaWRlbnRpZmllclxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdkZWZpbml0aW9uJylcbiAgICByZXR1cm4gY3JlYXRlTGFiZWwuY2FsbChcbiAgICAgIHNlbGYsXG4gICAgICBlZmZlY3RzLFxuICAgICAgbGFiZWxBZnRlcixcbiAgICAgIG5vayxcbiAgICAgICdkZWZpbml0aW9uTGFiZWwnLFxuICAgICAgJ2RlZmluaXRpb25MYWJlbE1hcmtlcicsXG4gICAgICAnZGVmaW5pdGlvbkxhYmVsU3RyaW5nJ1xuICAgICkoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhYmVsQWZ0ZXIoY29kZSkge1xuICAgIGlkZW50aWZpZXIgPSBub3JtYWxpemVJZGVudGlmaWVyKFxuICAgICAgc2VsZi5zbGljZVNlcmlhbGl6ZShzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVsxXSkuc2xpY2UoMSwgLTEpXG4gICAgKVxuXG4gICAgaWYgKGNvZGUgPT09IDU4KSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdkZWZpbml0aW9uTWFya2VyJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdkZWZpbml0aW9uTWFya2VyJylcblxuICAgICAgLy8gTm90ZTogYmxhbmsgbGluZXMgY2Fu4oCZdCBleGlzdCBpbiBjb250ZW50LlxuICAgICAgcmV0dXJuIGNyZWF0ZVdoaXRlc3BhY2UoXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIGNyZWF0ZURlc3RpbmF0aW9uKFxuICAgICAgICAgIGVmZmVjdHMsXG4gICAgICAgICAgZGVzdGluYXRpb25BZnRlcixcbiAgICAgICAgICBub2ssXG4gICAgICAgICAgJ2RlZmluaXRpb25EZXN0aW5hdGlvbicsXG4gICAgICAgICAgJ2RlZmluaXRpb25EZXN0aW5hdGlvbkxpdGVyYWwnLFxuICAgICAgICAgICdkZWZpbml0aW9uRGVzdGluYXRpb25MaXRlcmFsTWFya2VyJyxcbiAgICAgICAgICAnZGVmaW5pdGlvbkRlc3RpbmF0aW9uUmF3JyxcbiAgICAgICAgICAnZGVmaW5pdGlvbkRlc3RpbmF0aW9uU3RyaW5nJ1xuICAgICAgICApXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdkZWZpbml0aW9uJylcblxuICAgICAgaWYgKHNlbGYucGFyc2VyLmRlZmluZWQuaW5kZXhPZihpZGVudGlmaWVyKSA8IDApIHtcbiAgICAgICAgc2VsZi5wYXJzZXIuZGVmaW5lZC5wdXNoKGlkZW50aWZpZXIpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZVRpdGxlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIHJldHVybiBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgICA/IGNyZWF0ZVdoaXRlc3BhY2UoZWZmZWN0cywgYmVmb3JlKShjb2RlKVxuICAgICAgOiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDM0IHx8IGNvZGUgPT09IDM5IHx8IGNvZGUgPT09IDQwKSB7XG4gICAgICByZXR1cm4gY3JlYXRlVGl0bGUoXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGFmdGVyLCAnd2hpdGVzcGFjZScpLFxuICAgICAgICBub2ssXG4gICAgICAgICdkZWZpbml0aW9uVGl0bGUnLFxuICAgICAgICAnZGVmaW5pdGlvblRpdGxlTWFya2VyJyxcbiAgICAgICAgJ2RlZmluaXRpb25UaXRsZVN0cmluZydcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpID8gb2soY29kZSkgOiBub2soY29kZSlcbiAgfVxufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplSGFyZEJyZWFrRXNjYXBlXG5cbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxuXG5mdW5jdGlvbiB0b2tlbml6ZUhhcmRCcmVha0VzY2FwZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdoYXJkQnJlYWtFc2NhcGUnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2VzY2FwZU1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnZXNjYXBlTWFya2VyJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnaGFyZEJyZWFrRXNjYXBlJylcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIiwiLy8gVGhpcyBtb2R1bGUgaXMgY29waWVkIGZyb20gPGh0dHBzOi8vc3BlYy5jb21tb25tYXJrLm9yZy8wLjI5LyNodG1sLWJsb2Nrcz4uXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2FkZHJlc3MnLFxuICAnYXJ0aWNsZScsXG4gICdhc2lkZScsXG4gICdiYXNlJyxcbiAgJ2Jhc2Vmb250JyxcbiAgJ2Jsb2NrcXVvdGUnLFxuICAnYm9keScsXG4gICdjYXB0aW9uJyxcbiAgJ2NlbnRlcicsXG4gICdjb2wnLFxuICAnY29sZ3JvdXAnLFxuICAnZGQnLFxuICAnZGV0YWlscycsXG4gICdkaWFsb2cnLFxuICAnZGlyJyxcbiAgJ2RpdicsXG4gICdkbCcsXG4gICdkdCcsXG4gICdmaWVsZHNldCcsXG4gICdmaWdjYXB0aW9uJyxcbiAgJ2ZpZ3VyZScsXG4gICdmb290ZXInLFxuICAnZm9ybScsXG4gICdmcmFtZScsXG4gICdmcmFtZXNldCcsXG4gICdoMScsXG4gICdoMicsXG4gICdoMycsXG4gICdoNCcsXG4gICdoNScsXG4gICdoNicsXG4gICdoZWFkJyxcbiAgJ2hlYWRlcicsXG4gICdocicsXG4gICdodG1sJyxcbiAgJ2lmcmFtZScsXG4gICdsZWdlbmQnLFxuICAnbGknLFxuICAnbGluaycsXG4gICdtYWluJyxcbiAgJ21lbnUnLFxuICAnbWVudWl0ZW0nLFxuICAnbmF2JyxcbiAgJ25vZnJhbWVzJyxcbiAgJ29sJyxcbiAgJ29wdGdyb3VwJyxcbiAgJ29wdGlvbicsXG4gICdwJyxcbiAgJ3BhcmFtJyxcbiAgJ3NlY3Rpb24nLFxuICAnc291cmNlJyxcbiAgJ3N1bW1hcnknLFxuICAndGFibGUnLFxuICAndGJvZHknLFxuICAndGQnLFxuICAndGZvb3QnLFxuICAndGgnLFxuICAndGhlYWQnLFxuICAndGl0bGUnLFxuICAndHInLFxuICAndHJhY2snLFxuICAndWwnXG5dXG4iLCIvLyBUaGlzIG1vZHVsZSBpcyBjb3BpZWQgZnJvbSA8aHR0cHM6Ly9zcGVjLmNvbW1vbm1hcmsub3JnLzAuMjkvI2h0bWwtYmxvY2tzPi5cbm1vZHVsZS5leHBvcnRzID0gWydwcmUnLCAnc2NyaXB0JywgJ3N0eWxlJ11cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZUh0bWxcbmV4cG9ydHMucmVzb2x2ZVRvID0gcmVzb2x2ZVRvSHRtbFxuZXhwb3J0cy5jb25jcmV0ZSA9IHRydWVcblxudmFyIGFzY2lpQWxwaGEgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvYXNjaWktYWxwaGEnKVxudmFyIGFzY2lpQWxwaGFudW1lcmljID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL2FzY2lpLWFscGhhbnVtZXJpYycpXG5cbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxudmFyIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmctb3Itc3BhY2UnKVxudmFyIG1hcmtkb3duU3BhY2UgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvbWFya2Rvd24tc3BhY2UnKVxuXG52YXIgZnJvbUNoYXJDb2RlID0gcmVxdWlyZSgnLi4vY29uc3RhbnQvZnJvbS1jaGFyLWNvZGUnKVxudmFyIGJhc2ljcyA9IHJlcXVpcmUoJy4uL2NvbnN0YW50L2h0bWwtYmxvY2stbmFtZXMnKVxudmFyIHJhd3MgPSByZXF1aXJlKCcuLi9jb25zdGFudC9odG1sLXJhdy1uYW1lcycpXG5cbnZhciBibGFuayA9IHJlcXVpcmUoJy4vcGFydGlhbC1ibGFuay1saW5lJylcblxudmFyIG5leHRCbGFuayA9IHt0b2tlbml6ZTogdG9rZW5pemVOZXh0QmxhbmssIHBhcnRpYWw6IHRydWV9XG5cbmZ1bmN0aW9uIHJlc29sdmVUb0h0bWwoZXZlbnRzKSB7XG4gIHZhciBpbmRleCA9IGV2ZW50cy5sZW5ndGhcblxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInICYmIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2h0bWxGbG93Jykge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoaW5kZXggPiAxICYmIGV2ZW50c1tpbmRleCAtIDJdWzFdLnR5cGUgPT09ICdsaW5lUHJlZml4Jykge1xuICAgIC8vIEFkZCB0aGUgcHJlZml4IHN0YXJ0IHRvIHRoZSBIVE1MIHRva2VuLlxuICAgIGV2ZW50c1tpbmRleF1bMV0uc3RhcnQgPSBldmVudHNbaW5kZXggLSAyXVsxXS5zdGFydFxuICAgIC8vIEFkZCB0aGUgcHJlZml4IHN0YXJ0IHRvIHRoZSBIVE1MIGxpbmUgdG9rZW4uXG4gICAgZXZlbnRzW2luZGV4ICsgMV1bMV0uc3RhcnQgPSBldmVudHNbaW5kZXggLSAyXVsxXS5zdGFydFxuICAgIC8vIFJlbW92ZSB0aGUgbGluZSBwcmVmaXguXG4gICAgZXZlbnRzLnNwbGljZShpbmRleCAtIDIsIDIpXG4gIH1cblxuICByZXR1cm4gZXZlbnRzXG59XG5cbmZ1bmN0aW9uIHRva2VuaXplSHRtbChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIga2luZFxuICB2YXIgc3RhcnRUYWdcbiAgdmFyIGJ1ZmZlclxuICB2YXIgaW5kZXhcbiAgdmFyIG1hcmtlclxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdodG1sRmxvdycpXG4gICAgZWZmZWN0cy5lbnRlcignaHRtbEZsb3dEYXRhJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gb3BlblxuICB9XG5cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDMzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBkZWNsYXJhdGlvblN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZVN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDYzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGtpbmQgPSAzXG4gICAgICAvLyBXaGlsZSB3ZeKAmXJlIGluIGFuIGluc3RydWN0aW9uIGluc3RlYWQgb2YgYSBkZWNsYXJhdGlvbiwgd2XigJlyZSBvbiBhIGA/YFxuICAgICAgLy8gcmlnaHQgbm93LCBzbyB3ZSBkbyBuZWVkIHRvIHNlYXJjaCBmb3IgYD5gLCBzaW1pbGFyIHRvIGRlY2xhcmF0aW9ucy5cbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rIDogY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgPSBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgIHN0YXJ0VGFnID0gdHJ1ZVxuICAgICAgcmV0dXJuIHRhZ05hbWVcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBkZWNsYXJhdGlvblN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAga2luZCA9IDJcbiAgICAgIHJldHVybiBjb21tZW50T3Blbkluc2lkZVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5MSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBraW5kID0gNVxuICAgICAgYnVmZmVyID0gJ0NEQVRBWydcbiAgICAgIGluZGV4ID0gMFxuICAgICAgcmV0dXJuIGNkYXRhT3Blbkluc2lkZVxuICAgIH1cblxuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGtpbmQgPSA0XG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWVudE9wZW5JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayA6IGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY2RhdGFPcGVuSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gYnVmZmVyLmNoYXJDb2RlQXQoaW5kZXgrKykpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluZGV4ID09PSBidWZmZXIubGVuZ3RoXG4gICAgICAgID8gc2VsZi5pbnRlcnJ1cHRcbiAgICAgICAgICA/IG9rXG4gICAgICAgICAgOiBjb250aW51YXRpb25cbiAgICAgICAgOiBjZGF0YU9wZW5JbnNpZGVcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWdDbG9zZVN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBidWZmZXIgPSBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgIHJldHVybiB0YWdOYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gdGFnTmFtZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gNDcgfHxcbiAgICAgIGNvZGUgPT09IDYyIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICBpZiAoY29kZSAhPT0gNDcgJiYgc3RhcnRUYWcgJiYgcmF3cy5pbmRleE9mKGJ1ZmZlci50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICAgIGtpbmQgPSAxXG4gICAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rKGNvZGUpIDogY29udGludWF0aW9uKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIGlmIChiYXNpY3MuaW5kZXhPZihidWZmZXIudG9Mb3dlckNhc2UoKSkgPiAtMSkge1xuICAgICAgICBraW5kID0gNlxuXG4gICAgICAgIGlmIChjb2RlID09PSA0Nykge1xuICAgICAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgICAgIHJldHVybiBiYXNpY1NlbGZDbG9zaW5nXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VsZi5pbnRlcnJ1cHQgPyBvayhjb2RlKSA6IGNvbnRpbnVhdGlvbihjb2RlKVxuICAgICAgfVxuXG4gICAgICBraW5kID0gN1xuICAgICAgLy8gRG8gbm90IHN1cHBvcnQgY29tcGxldGUgSFRNTCB3aGVuIGludGVycnVwdGluZy5cbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdFxuICAgICAgICA/IG5vayhjb2RlKVxuICAgICAgICA6IHN0YXJ0VGFnXG4gICAgICAgID8gY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlKGNvZGUpXG4gICAgICAgIDogY29tcGxldGVDbG9zaW5nVGFnQWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNDUgfHwgYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgYnVmZmVyICs9IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ05hbWVcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBiYXNpY1NlbGZDbG9zaW5nKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHNlbGYuaW50ZXJydXB0ID8gb2sgOiBjb250aW51YXRpb25cbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb21wbGV0ZUNsb3NpbmdUYWdBZnRlcihjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQ2xvc2luZ1RhZ0FmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBsZXRlRW5kKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVCZWZvcmUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0Nykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVFbmRcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNTggfHwgY29kZSA9PT0gOTUgfHwgYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZUJlZm9yZVxuICAgIH1cblxuICAgIHJldHVybiBjb21wbGV0ZUVuZChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVOYW1lKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSA0NSB8fFxuICAgICAgY29kZSA9PT0gNDYgfHxcbiAgICAgIGNvZGUgPT09IDU4IHx8XG4gICAgICBjb2RlID09PSA5NSB8fFxuICAgICAgYXNjaWlBbHBoYW51bWVyaWMoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlTmFtZVxuICAgIH1cblxuICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVBZnRlcihjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2MSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVBZnRlclxuICAgIH1cblxuICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZU5hbWVCZWZvcmUoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVCZWZvcmUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IG51bGwgfHxcbiAgICAgIGNvZGUgPT09IDYwIHx8XG4gICAgICBjb2RlID09PSA2MSB8fFxuICAgICAgY29kZSA9PT0gNjIgfHxcbiAgICAgIGNvZGUgPT09IDk2XG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDM0IHx8IGNvZGUgPT09IDM5KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIG1hcmtlciA9IGNvZGVcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duU3BhY2UoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbXBsZXRlQXR0cmlidXRlVmFsdWVCZWZvcmVcbiAgICB9XG5cbiAgICBtYXJrZXIgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbWFya2VyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXJcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVF1b3RlZFxuICB9XG5cbiAgZnVuY3Rpb24gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIHx8XG4gICAgICBjb2RlID09PSAzNCB8fFxuICAgICAgY29kZSA9PT0gMzkgfHxcbiAgICAgIGNvZGUgPT09IDYwIHx8XG4gICAgICBjb2RlID09PSA2MSB8fFxuICAgICAgY29kZSA9PT0gNjIgfHxcbiAgICAgIGNvZGUgPT09IDk2IHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVWYWx1ZVVucXVvdGVkXG4gIH1cblxuICBmdW5jdGlvbiBjb21wbGV0ZUF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA0NyB8fCBjb2RlID09PSA2MiB8fCBtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVBdHRyaWJ1dGVOYW1lQmVmb3JlKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29tcGxldGVFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29tcGxldGVBZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlQWZ0ZXIoY29kZSkge1xuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21wbGV0ZUFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpXG4gICAgICA/IGNvbnRpbnVhdGlvbihjb2RlKVxuICAgICAgOiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1ICYmIGtpbmQgPT09IDIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkNvbW1lbnRJbnNpZGVcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNjAgJiYga2luZCA9PT0gMSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29udGludWF0aW9uUmF3VGFnT3BlblxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA2MiAmJiBraW5kID09PSA0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25DbG9zZVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA2MyAmJiBraW5kID09PSAzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25EZWNsYXJhdGlvbkluc2lkZVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5MyAmJiBraW5kID09PSA1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25DaGFyYWN0ZXJEYXRhSW5zaWRlXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSAmJiAoa2luZCA9PT0gNiB8fCBraW5kID09PSA3KSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICAgIG5leHRCbGFuayxcbiAgICAgICAgY29udGludWF0aW9uQ2xvc2UsXG4gICAgICAgIGNvbnRpbnVhdGlvbkF0TGluZUVuZGluZ1xuICAgICAgKShjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb250aW51YXRpb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnRpbnVhdGlvbkF0TGluZUVuZGluZyhjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdodG1sRmxvd0RhdGEnKVxuICAgIHJldHVybiBodG1sQ29udGludWVTdGFydChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gaHRtbENvbnRpbnVlU3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZG9uZShjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgcmV0dXJuIGh0bWxDb250aW51ZVN0YXJ0XG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignaHRtbEZsb3dEYXRhJylcbiAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250aW51YXRpb25Db21tZW50SW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGludWF0aW9uUmF3VGFnT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGJ1ZmZlciA9ICcnXG4gICAgICByZXR1cm4gY29udGludWF0aW9uUmF3RW5kVGFnXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGludWF0aW9uUmF3RW5kVGFnKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjIgJiYgcmF3cy5pbmRleE9mKGJ1ZmZlci50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25DbG9zZVxuICAgIH1cblxuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpICYmIGJ1ZmZlci5sZW5ndGggPCA2KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGJ1ZmZlciArPSBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgIHJldHVybiBjb250aW51YXRpb25SYXdFbmRUYWdcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250aW51YXRpb25DaGFyYWN0ZXJEYXRhSW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbnRpbnVhdGlvbkRlY2xhcmF0aW9uSW5zaWRlXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRpbnVhdGlvbihjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGludWF0aW9uRGVjbGFyYXRpb25JbnNpZGUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY29udGludWF0aW9uQ2xvc2VcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGludWF0aW9uKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250aW51YXRpb25DbG9zZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2h0bWxGbG93RGF0YScpXG4gICAgICByZXR1cm4gZG9uZShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb250aW51YXRpb25DbG9zZVxuICB9XG5cbiAgZnVuY3Rpb24gZG9uZShjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdodG1sRmxvdycpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9rZW5pemVOZXh0QmxhbmsoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCdodG1sRmxvd0RhdGEnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmdCbGFuaycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nQmxhbmsnKVxuICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoYmxhbmssIG9rLCBub2spXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZUh0bWxcblxudmFyIG1hcmtkb3duTGluZUVuZGluZyA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZycpXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZy1vci1zcGFjZScpXG52YXIgbWFya2Rvd25TcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1zcGFjZScpXG52YXIgYXNjaWlBbHBoYSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9hc2NpaS1hbHBoYScpXG52YXIgYXNjaWlBbHBoYW51bWVyaWMgPSByZXF1aXJlKCcuLi9jaGFyYWN0ZXIvYXNjaWktYWxwaGFudW1lcmljJylcblxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnLi9mYWN0b3J5LXNwYWNlJylcblxuZnVuY3Rpb24gdG9rZW5pemVIdG1sKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIG1hcmtlclxuICB2YXIgYnVmZmVyXG4gIHZhciBpbmRleFxuICB2YXIgcmV0dXJuU3RhdGVcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignaHRtbFRleHQnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2h0bWxUZXh0RGF0YScpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIG9wZW5cbiAgfVxuXG4gIGZ1bmN0aW9uIG9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzMykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVjbGFyYXRpb25PcGVuXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ3KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZVN0YXJ0XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDYzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbnN0cnVjdGlvblxuICAgIH1cblxuICAgIGlmIChhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gZGVjbGFyYXRpb25PcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbW1lbnRPcGVuXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDkxKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGJ1ZmZlciA9ICdDREFUQVsnXG4gICAgICBpbmRleCA9IDBcbiAgICAgIHJldHVybiBjZGF0YU9wZW5cbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZGVjbGFyYXRpb25cbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb21tZW50T3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21tZW50U3RhcnRcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb21tZW50U3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IDYyKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21tZW50U3RhcnREYXNoXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbW1lbnQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1lbnRTdGFydERhc2goY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IDYyKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbW1lbnQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1lbnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjb21tZW50Q2xvc2VcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IGNvbW1lbnRcbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gY29tbWVudFxuICB9XG5cbiAgZnVuY3Rpb24gY29tbWVudENsb3NlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGVuZFxuICAgIH1cblxuICAgIHJldHVybiBjb21tZW50KGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjZGF0YU9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSBidWZmZXIuY2hhckNvZGVBdChpbmRleCsrKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5kZXggPT09IGJ1ZmZlci5sZW5ndGggPyBjZGF0YSA6IGNkYXRhT3BlblxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNkYXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5Mykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY2RhdGFDbG9zZVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjZGF0YVxuICB9XG5cbiAgZnVuY3Rpb24gY2RhdGFDbG9zZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBjZGF0YUVuZFxuICAgIH1cblxuICAgIHJldHVybiBjZGF0YShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY2RhdGFFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgcmV0dXJuIGVuZChjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA5Mykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY2RhdGFFbmRcbiAgICB9XG5cbiAgICByZXR1cm4gY2RhdGEoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY2xhcmF0aW9uKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSA2Mikge1xuICAgICAgcmV0dXJuIGVuZChjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gZGVjbGFyYXRpb25cbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gZGVjbGFyYXRpb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGluc3RydWN0aW9uKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA2Mykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25DbG9zZVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gaW5zdHJ1Y3Rpb25cbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25cbiAgfVxuXG4gIGZ1bmN0aW9uIGluc3RydWN0aW9uQ2xvc2UoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSA2MiA/IGVuZChjb2RlKSA6IGluc3RydWN0aW9uKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWdDbG9zZVN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnQ2xvc2VcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWdDbG9zZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1IHx8IGFzY2lpQWxwaGFudW1lcmljKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdDbG9zZVxuICAgIH1cblxuICAgIHJldHVybiB0YWdDbG9zZUJldHdlZW4oY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhZ0Nsb3NlQmV0d2Vlbihjb2RlKSB7XG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgcmV0dXJuU3RhdGUgPSB0YWdDbG9zZUJldHdlZW5cbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnQ2xvc2VCZXR3ZWVuXG4gICAgfVxuXG4gICAgcmV0dXJuIGVuZChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gdGFnT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1IHx8IGFzY2lpQWxwaGFudW1lcmljKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ3IHx8IGNvZGUgPT09IDYyIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiB0YWdPcGVuQmV0d2Vlbihjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhZ09wZW5CZXR3ZWVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDcpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGVuZFxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSA1OCB8fCBjb2RlID09PSA5NSB8fCBhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlTmFtZVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkJldHdlZW5cbiAgICAgIHJldHVybiBhdExpbmVFbmRpbmcoY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlbkJldHdlZW5cbiAgICB9XG5cbiAgICByZXR1cm4gZW5kKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlTmFtZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gNDUgfHxcbiAgICAgIGNvZGUgPT09IDQ2IHx8XG4gICAgICBjb2RlID09PSA1OCB8fFxuICAgICAgY29kZSA9PT0gOTUgfHxcbiAgICAgIGFzY2lpQWxwaGFudW1lcmljKGNvZGUpXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlTmFtZVxuICAgIH1cblxuICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNjEpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkF0dHJpYnV0ZU5hbWVBZnRlclxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlTmFtZUFmdGVyXG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZ09wZW5CZXR3ZWVuKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlVmFsdWVCZWZvcmUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IG51bGwgfHxcbiAgICAgIGNvZGUgPT09IDYwIHx8XG4gICAgICBjb2RlID09PSA2MSB8fFxuICAgICAgY29kZSA9PT0gNjIgfHxcbiAgICAgIGNvZGUgPT09IDk2XG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDM0IHx8IGNvZGUgPT09IDM5KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIG1hcmtlciA9IGNvZGVcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVRdW90ZWRcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICByZXR1cm5TdGF0ZSA9IHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZUJlZm9yZVxuICAgICAgcmV0dXJuIGF0TGluZUVuZGluZyhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVCZWZvcmVcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBtYXJrZXIgPSB1bmRlZmluZWRcbiAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlVW5xdW90ZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVF1b3RlZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXJcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVyblN0YXRlID0gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkXG4gICAgICByZXR1cm4gYXRMaW5lRW5kaW5nKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIHRhZ09wZW5BdHRyaWJ1dGVWYWx1ZVF1b3RlZFxuICB9XG5cbiAgZnVuY3Rpb24gdGFnT3BlbkF0dHJpYnV0ZVZhbHVlUXVvdGVkQWZ0ZXIoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2MiB8fCBjb2RlID09PSA0NyB8fCBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gdGFnT3BlbkJldHdlZW4oY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWdPcGVuQXR0cmlidXRlVmFsdWVVbnF1b3RlZChjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCB8fFxuICAgICAgY29kZSA9PT0gMzQgfHxcbiAgICAgIGNvZGUgPT09IDM5IHx8XG4gICAgICBjb2RlID09PSA2MCB8fFxuICAgICAgY29kZSA9PT0gNjEgfHxcbiAgICAgIGNvZGUgPT09IDk2XG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDYyIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiB0YWdPcGVuQmV0d2Vlbihjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiB0YWdPcGVuQXR0cmlidXRlVmFsdWVVbnF1b3RlZFxuICB9XG5cbiAgLy8gV2UgY2Fu4oCZdCBoYXZlIGJsYW5rIGxpbmVzIGluIGNvbnRlbnQsIHNvIG5vIG5lZWQgdG8gd29ycnkgYWJvdXQgZW1wdHlcbiAgLy8gdG9rZW5zLlxuICBmdW5jdGlvbiBhdExpbmVFbmRpbmcoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCgnaHRtbFRleHREYXRhJylcbiAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgIHJldHVybiBjcmVhdGVTcGFjZShlZmZlY3RzLCBhZnRlclByZWZpeCwgJ2xpbmVQcmVmaXgnLCA0KVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJQcmVmaXgoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2h0bWxUZXh0RGF0YScpXG4gICAgcmV0dXJuIHJldHVyblN0YXRlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBlbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSA2Mikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2h0bWxUZXh0RGF0YScpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2h0bWxUZXh0JylcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIiwiZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplTGFiZWxFbmRcbmV4cG9ydHMucmVzb2x2ZVRvID0gcmVzb2x2ZVRvTGFiZWxFbmRcbmV4cG9ydHMucmVzb2x2ZUFsbCA9IHJlc29sdmVBbGxMYWJlbEVuZFxuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZy1vci1zcGFjZScpXG5cbnZhciBub3JtYWxpemVJZGVudGlmaWVyID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUtaWRlbnRpZmllcicpXG52YXIgY2h1bmtlZFNwbGljZSA9IHJlcXVpcmUoJy4uL3V0aWwvY2h1bmtlZC1zcGxpY2UnKVxudmFyIHJlc29sdmVBbGwgPSByZXF1aXJlKCcuLi91dGlsL3Jlc29sdmUtYWxsJylcbnZhciBzaGFsbG93ID0gcmVxdWlyZSgnLi4vdXRpbC9zaGFsbG93JylcbnZhciBjcmVhdGVEZXN0aW5hdGlvbiA9IHJlcXVpcmUoJy4vZmFjdG9yeS1kZXN0aW5hdGlvbicpXG52YXIgY3JlYXRlTGFiZWwgPSByZXF1aXJlKCcuL2ZhY3RvcnktbGFiZWwnKVxudmFyIGNyZWF0ZVdoaXRlc3BhY2UgPSByZXF1aXJlKCcuL2ZhY3Rvcnktd2hpdGVzcGFjZScpXG52YXIgY3JlYXRlVGl0bGUgPSByZXF1aXJlKCcuL2ZhY3RvcnktdGl0bGUnKVxuXG52YXIgcmVzb3VyY2UgPSB7dG9rZW5pemU6IHRva2VuaXplUmVzb3VyY2V9XG52YXIgZnVsbFJlZmVyZW5jZSA9IHt0b2tlbml6ZTogdG9rZW5pemVGdWxsUmVmZXJlbmNlfVxudmFyIGNvbGxhcHNlZFJlZmVyZW5jZSA9IHt0b2tlbml6ZTogdG9rZW5pemVDb2xsYXBzZWRSZWZlcmVuY2V9XG5cbmZ1bmN0aW9uIHJlc29sdmVBbGxMYWJlbEVuZChldmVudHMpIHtcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIHRva2VuXG5cbiAgd2hpbGUgKCsraW5kZXggPCBldmVudHMubGVuZ3RoKSB7XG4gICAgdG9rZW4gPSBldmVudHNbaW5kZXhdWzFdXG5cbiAgICBpZiAoXG4gICAgICAhdG9rZW4uX3VzZWQgJiZcbiAgICAgICh0b2tlbi50eXBlID09PSAnbGFiZWxJbWFnZScgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2xhYmVsTGluaycgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ2xhYmVsRW5kJylcbiAgICApIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgbWFya2VyLlxuICAgICAgZXZlbnRzLnNwbGljZShpbmRleCArIDEsIHRva2VuLnR5cGUgPT09ICdsYWJlbEltYWdlJyA/IDQgOiAyKVxuICAgICAgdG9rZW4udHlwZSA9ICdkYXRhJ1xuICAgICAgaW5kZXgrK1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRvTGFiZWxFbmQoZXZlbnRzLCBjb250ZXh0KSB7XG4gIHZhciBpbmRleCA9IGV2ZW50cy5sZW5ndGhcbiAgdmFyIG9mZnNldCA9IDBcbiAgdmFyIGdyb3VwXG4gIHZhciBsYWJlbFxuICB2YXIgdGV4dFxuICB2YXIgdG9rZW5cbiAgdmFyIG9wZW5cbiAgdmFyIGNsb3NlXG4gIHZhciBtZWRpYVxuXG4gIC8vIEZpbmQgYW4gb3BlbmluZy5cbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB0b2tlbiA9IGV2ZW50c1tpbmRleF1bMV1cblxuICAgIGlmIChvcGVuKSB7XG4gICAgICAvLyBJZiB3ZSBzZWUgYW5vdGhlciBsaW5rLCBvciBpbmFjdGl2ZSBsaW5rIGxhYmVsLCB3ZeKAmXZlIGJlZW4gaGVyZSBiZWZvcmUuXG4gICAgICBpZiAoXG4gICAgICAgIHRva2VuLnR5cGUgPT09ICdsaW5rJyB8fFxuICAgICAgICAodG9rZW4udHlwZSA9PT0gJ2xhYmVsTGluaycgJiYgdG9rZW4uX2luYWN0aXZlKVxuICAgICAgKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIC8vIE1hcmsgb3RoZXIgbGluayBvcGVuaW5ncyBhcyBpbmFjdGl2ZSwgYXMgd2UgY2Fu4oCZdCBoYXZlIGxpbmtzIGluXG4gICAgICAvLyBsaW5rcy5cbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInICYmIHRva2VuLnR5cGUgPT09ICdsYWJlbExpbmsnKSB7XG4gICAgICAgIHRva2VuLl9pbmFjdGl2ZSA9IHRydWVcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNsb3NlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicgJiZcbiAgICAgICAgKHRva2VuLnR5cGUgPT09ICdsYWJlbEltYWdlJyB8fCB0b2tlbi50eXBlID09PSAnbGFiZWxMaW5rJykgJiZcbiAgICAgICAgIXRva2VuLl9iYWxhbmNlZFxuICAgICAgKSB7XG4gICAgICAgIG9wZW4gPSBpbmRleFxuXG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnbGFiZWxMaW5rJykge1xuICAgICAgICAgIG9mZnNldCA9IDJcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnbGFiZWxFbmQnKSB7XG4gICAgICBjbG9zZSA9IGluZGV4XG4gICAgfVxuICB9XG5cbiAgZ3JvdXAgPSB7XG4gICAgdHlwZTogZXZlbnRzW29wZW5dWzFdLnR5cGUgPT09ICdsYWJlbExpbmsnID8gJ2xpbmsnIDogJ2ltYWdlJyxcbiAgICBzdGFydDogc2hhbGxvdyhldmVudHNbb3Blbl1bMV0uc3RhcnQpLFxuICAgIGVuZDogc2hhbGxvdyhldmVudHNbZXZlbnRzLmxlbmd0aCAtIDFdWzFdLmVuZClcbiAgfVxuXG4gIGxhYmVsID0ge1xuICAgIHR5cGU6ICdsYWJlbCcsXG4gICAgc3RhcnQ6IHNoYWxsb3coZXZlbnRzW29wZW5dWzFdLnN0YXJ0KSxcbiAgICBlbmQ6IHNoYWxsb3coZXZlbnRzW2Nsb3NlXVsxXS5lbmQpXG4gIH1cblxuICB0ZXh0ID0ge1xuICAgIHR5cGU6ICdsYWJlbFRleHQnLFxuICAgIHN0YXJ0OiBzaGFsbG93KGV2ZW50c1tvcGVuICsgb2Zmc2V0ICsgMl1bMV0uZW5kKSxcbiAgICBlbmQ6IHNoYWxsb3coZXZlbnRzW2Nsb3NlIC0gMl1bMV0uc3RhcnQpXG4gIH1cblxuICBtZWRpYSA9IFtcbiAgICBbJ2VudGVyJywgZ3JvdXAsIGNvbnRleHRdLFxuICAgIFsnZW50ZXInLCBsYWJlbCwgY29udGV4dF1cbiAgXVxuXG4gIC8vIE9wZW5pbmcgbWFya2VyLlxuICBjaHVua2VkU3BsaWNlKFxuICAgIG1lZGlhLFxuICAgIG1lZGlhLmxlbmd0aCxcbiAgICAwLFxuICAgIGV2ZW50cy5zbGljZShvcGVuICsgMSwgb3BlbiArIG9mZnNldCArIDMpXG4gIClcblxuICAvLyBUZXh0IG9wZW4uXG4gIGNodW5rZWRTcGxpY2UobWVkaWEsIG1lZGlhLmxlbmd0aCwgMCwgW1snZW50ZXInLCB0ZXh0LCBjb250ZXh0XV0pXG5cbiAgLy8gQmV0d2Vlbi5cbiAgY2h1bmtlZFNwbGljZShcbiAgICBtZWRpYSxcbiAgICBtZWRpYS5sZW5ndGgsXG4gICAgMCxcbiAgICByZXNvbHZlQWxsKFxuICAgICAgY29udGV4dC5wYXJzZXIuY29uc3RydWN0cy5pbnNpZGVTcGFuLm51bGwsXG4gICAgICBldmVudHMuc2xpY2Uob3BlbiArIG9mZnNldCArIDQsIGNsb3NlIC0gMyksXG4gICAgICBjb250ZXh0XG4gICAgKVxuICApXG5cbiAgLy8gVGV4dCBjbG9zZSwgbWFya2VyIGNsb3NlLCBsYWJlbCBjbG9zZS5cbiAgY2h1bmtlZFNwbGljZShtZWRpYSwgbWVkaWEubGVuZ3RoLCAwLCBbXG4gICAgWydleGl0JywgdGV4dCwgY29udGV4dF0sXG4gICAgZXZlbnRzW2Nsb3NlIC0gMl0sXG4gICAgZXZlbnRzW2Nsb3NlIC0gMV0sXG4gICAgWydleGl0JywgbGFiZWwsIGNvbnRleHRdXG4gIF0pXG5cbiAgLy8gUmVmZXJlbmNlLCByZXNvdXJjZSwgb3Igc28uXG4gIGNodW5rZWRTcGxpY2UobWVkaWEsIG1lZGlhLmxlbmd0aCwgMCwgZXZlbnRzLnNsaWNlKGNsb3NlICsgMSkpXG5cbiAgLy8gTWVkaWEgY2xvc2UuXG4gIGNodW5rZWRTcGxpY2UobWVkaWEsIG1lZGlhLmxlbmd0aCwgMCwgW1snZXhpdCcsIGdyb3VwLCBjb250ZXh0XV0pXG5cbiAgY2h1bmtlZFNwbGljZShldmVudHMsIG9wZW4sIGV2ZW50cy5sZW5ndGgsIG1lZGlhKVxuXG4gIHJldHVybiBldmVudHNcbn1cblxuZnVuY3Rpb24gdG9rZW5pemVMYWJlbEVuZChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaW5kZXggPSBzZWxmLmV2ZW50cy5sZW5ndGhcbiAgdmFyIGxhYmVsU3RhcnRcbiAgdmFyIGRlZmluZWRcblxuICAvLyBGaW5kIGFuIG9wZW5pbmcuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKFxuICAgICAgKHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnbGFiZWxJbWFnZScgfHxcbiAgICAgICAgc2VsZi5ldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdsYWJlbExpbmsnKSAmJlxuICAgICAgIXNlbGYuZXZlbnRzW2luZGV4XVsxXS5fYmFsYW5jZWRcbiAgICApIHtcbiAgICAgIGxhYmVsU3RhcnQgPSBzZWxmLmV2ZW50c1tpbmRleF1bMV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmICghbGFiZWxTdGFydCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIC8vIEl04oCZcyBhIGJhbGFuY2VkIGJyYWNrZXQsIGJ1dCBjb250YWlucyBhIGxpbmsuXG4gICAgaWYgKGxhYmVsU3RhcnQuX2luYWN0aXZlKSByZXR1cm4gYmFsYW5jZWQoY29kZSlcbiAgICBkZWZpbmVkID1cbiAgICAgIHNlbGYucGFyc2VyLmRlZmluZWQuaW5kZXhPZihcbiAgICAgICAgbm9ybWFsaXplSWRlbnRpZmllcihcbiAgICAgICAgICBzZWxmLnNsaWNlU2VyaWFsaXplKHtzdGFydDogbGFiZWxTdGFydC5lbmQsIGVuZDogc2VsZi5ub3coKX0pXG4gICAgICAgIClcbiAgICAgICkgPiAtMVxuICAgIGVmZmVjdHMuZW50ZXIoJ2xhYmVsRW5kJylcbiAgICBlZmZlY3RzLmVudGVyKCdsYWJlbE1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsYWJlbE1hcmtlcicpXG4gICAgZWZmZWN0cy5leGl0KCdsYWJlbEVuZCcpXG4gICAgcmV0dXJuIGFmdGVyTGFiZWxFbmRcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyTGFiZWxFbmQoY29kZSkge1xuICAgIC8vIFJlc291cmNlOiBgW2FzZF0oZmdoKWAuXG4gICAgaWYgKGNvZGUgPT09IDQwKSB7XG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KHJlc291cmNlLCBvaywgZGVmaW5lZCA/IG9rIDogYmFsYW5jZWQpKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gQ29sbGFwc2VkIChgW2FzZF1bXWApIG9yIGZ1bGwgKGBbYXNkXVtmZ2hdYCkgcmVmZXJlbmNlP1xuICAgIGlmIChjb2RlID09PSA5MSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgICAgZnVsbFJlZmVyZW5jZSxcbiAgICAgICAgb2ssXG4gICAgICAgIGRlZmluZWQgPyBlZmZlY3RzLmF0dGVtcHQoY29sbGFwc2VkUmVmZXJlbmNlLCBvaywgYmFsYW5jZWQpIDogYmFsYW5jZWRcbiAgICAgICkoY29kZSlcbiAgICB9XG5cbiAgICAvLyBTaG9ydGN1dCByZWZlcmVuY2U6IGBbYXNkXWA/XG4gICAgcmV0dXJuIGRlZmluZWQgPyBvayhjb2RlKSA6IGJhbGFuY2VkKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBiYWxhbmNlZChjb2RlKSB7XG4gICAgbGFiZWxTdGFydC5fYmFsYW5jZWQgPSB0cnVlXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplUmVzb3VyY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcigncmVzb3VyY2UnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ3Jlc291cmNlTWFya2VyJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ3Jlc291cmNlTWFya2VyJylcbiAgICByZXR1cm4gY3JlYXRlV2hpdGVzcGFjZShlZmZlY3RzLCBvcGVuKVxuICB9XG5cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQxKSB7XG4gICAgICByZXR1cm4gZW5kKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZURlc3RpbmF0aW9uKFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGRlc3RpbmF0aW9uQWZ0ZXIsXG4gICAgICBub2ssXG4gICAgICAncmVzb3VyY2VEZXN0aW5hdGlvbicsXG4gICAgICAncmVzb3VyY2VEZXN0aW5hdGlvbkxpdGVyYWwnLFxuICAgICAgJ3Jlc291cmNlRGVzdGluYXRpb25MaXRlcmFsTWFya2VyJyxcbiAgICAgICdyZXNvdXJjZURlc3RpbmF0aW9uUmF3JyxcbiAgICAgICdyZXNvdXJjZURlc3RpbmF0aW9uU3RyaW5nJyxcbiAgICAgIDNcbiAgICApKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBkZXN0aW5hdGlvbkFmdGVyKGNvZGUpIHtcbiAgICByZXR1cm4gbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKVxuICAgICAgPyBjcmVhdGVXaGl0ZXNwYWNlKGVmZmVjdHMsIGJldHdlZW4pKGNvZGUpXG4gICAgICA6IGVuZChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYmV0d2Vlbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDM0IHx8IGNvZGUgPT09IDM5IHx8IGNvZGUgPT09IDQwKSB7XG4gICAgICByZXR1cm4gY3JlYXRlVGl0bGUoXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIGNyZWF0ZVdoaXRlc3BhY2UoZWZmZWN0cywgZW5kKSxcbiAgICAgICAgbm9rLFxuICAgICAgICAncmVzb3VyY2VUaXRsZScsXG4gICAgICAgICdyZXNvdXJjZVRpdGxlTWFya2VyJyxcbiAgICAgICAgJ3Jlc291cmNlVGl0bGVTdHJpbmcnXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVuZChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gZW5kKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gNDEpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3Jlc291cmNlTWFya2VyJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdyZXNvdXJjZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3Jlc291cmNlJylcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUZ1bGxSZWZlcmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUxhYmVsLmNhbGwoXG4gICAgICBzZWxmLFxuICAgICAgZWZmZWN0cyxcbiAgICAgIGFmdGVyTGFiZWwsXG4gICAgICBub2ssXG4gICAgICAncmVmZXJlbmNlJyxcbiAgICAgICdyZWZlcmVuY2VNYXJrZXInLFxuICAgICAgJ3JlZmVyZW5jZVN0cmluZydcbiAgICApKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlckxhYmVsKGNvZGUpIHtcbiAgICByZXR1cm4gc2VsZi5wYXJzZXIuZGVmaW5lZC5pbmRleE9mKFxuICAgICAgbm9ybWFsaXplSWRlbnRpZmllcihcbiAgICAgICAgc2VsZi5zbGljZVNlcmlhbGl6ZShzZWxmLmV2ZW50c1tzZWxmLmV2ZW50cy5sZW5ndGggLSAxXVsxXSkuc2xpY2UoMSwgLTEpXG4gICAgICApXG4gICAgKSA8IDBcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IG9rKGNvZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9rZW5pemVDb2xsYXBzZWRSZWZlcmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcigncmVmZXJlbmNlJylcbiAgICBlZmZlY3RzLmVudGVyKCdyZWZlcmVuY2VNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgncmVmZXJlbmNlTWFya2VyJylcbiAgICByZXR1cm4gb3BlblxuICB9XG5cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDkzKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdyZWZlcmVuY2VNYXJrZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3JlZmVyZW5jZU1hcmtlcicpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3JlZmVyZW5jZScpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZWxhYmVsSW1hZ2VcbmV4cG9ydHMucmVzb2x2ZUFsbCA9IHJlcXVpcmUoJy4vbGFiZWwtZW5kJykucmVzb2x2ZUFsbFxuXG5mdW5jdGlvbiB0b2tlbml6ZWxhYmVsSW1hZ2UoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignbGFiZWxJbWFnZScpXG4gICAgZWZmZWN0cy5lbnRlcignbGFiZWxJbWFnZU1hcmtlcicpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsYWJlbEltYWdlTWFya2VyJylcbiAgICByZXR1cm4gb3BlblxuICB9XG5cbiAgZnVuY3Rpb24gb3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDkxKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdsYWJlbE1hcmtlcicpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGFiZWxNYXJrZXInKVxuICAgICAgZWZmZWN0cy5leGl0KCdsYWJlbEltYWdlJylcbiAgICAgIHJldHVybiBhZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtIGZvb3Rub3Rlcy4gKi9cbiAgICByZXR1cm4gY29kZSA9PT0gOTQgJiYgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHNcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IG9rKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZWxhYmVsTGlua1xuZXhwb3J0cy5yZXNvbHZlQWxsID0gcmVxdWlyZSgnLi9sYWJlbC1lbmQnKS5yZXNvbHZlQWxsXG5cbmZ1bmN0aW9uIHRva2VuaXplbGFiZWxMaW5rKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ2xhYmVsTGluaycpXG4gICAgZWZmZWN0cy5lbnRlcignbGFiZWxNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnbGFiZWxNYXJrZXInKVxuICAgIGVmZmVjdHMuZXhpdCgnbGFiZWxMaW5rJylcbiAgICByZXR1cm4gYWZ0ZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtIGZvb3Rub3Rlcy4gKi9cbiAgICByZXR1cm4gY29kZSA9PT0gOTQgJiYgJ19oaWRkZW5Gb290bm90ZVN1cHBvcnQnIGluIHNlbGYucGFyc2VyLmNvbnN0cnVjdHNcbiAgICAgID8gbm9rKGNvZGUpXG4gICAgICA6IG9rKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZVNldGV4dFVuZGVybGluZVxuZXhwb3J0cy5yZXNvbHZlVG8gPSByZXNvbHZlVG9TZXRleHRVbmRlcmxpbmVcblxudmFyIG1hcmtkb3duTGluZUVuZGluZyA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZycpXG5cbnZhciBzaGFsbG93ID0gcmVxdWlyZSgnLi4vdXRpbC9zaGFsbG93JylcbnZhciBjcmVhdGVTcGFjZSA9IHJlcXVpcmUoJy4vZmFjdG9yeS1zcGFjZScpXG5cbmZ1bmN0aW9uIHJlc29sdmVUb1NldGV4dFVuZGVybGluZShldmVudHMsIGNvbnRleHQpIHtcbiAgdmFyIGluZGV4ID0gZXZlbnRzLmxlbmd0aFxuICB2YXIgY29udGVudFxuICB2YXIgdGV4dFxuICB2YXIgZGVmaW5pdGlvblxuICB2YXIgaGVhZGluZ1xuXG4gIC8vIEZpbmQgdGhlIG9wZW5pbmcgb2YgdGhlIGNvbnRlbnQuXG4gIC8vIEl04oCZbGwgYWx3YXlzIGV4aXN0OiB3ZSBkb27igJl0IHRva2VuaXplIGlmIGl0IGlzbuKAmXQgdGhlcmUuXG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgaWYgKGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcicpIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdjb250ZW50Jykge1xuICAgICAgICBjb250ZW50ID0gaW5kZXhcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgdGV4dCA9IGluZGV4XG4gICAgICB9XG4gICAgfVxuICAgIC8vIEV4aXRcbiAgICBlbHNlIHtcbiAgICAgIGlmIChldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdjb250ZW50Jykge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGNvbnRlbnQgZW5kIChpZiBuZWVkZWQgd2XigJlsbCBhZGQgaXQgbGF0ZXIpXG4gICAgICAgIGV2ZW50cy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICB9XG5cbiAgICAgIGlmICghZGVmaW5pdGlvbiAmJiBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdkZWZpbml0aW9uJykge1xuICAgICAgICBkZWZpbml0aW9uID0gaW5kZXhcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoZWFkaW5nID0ge1xuICAgIHR5cGU6ICdzZXRleHRIZWFkaW5nJyxcbiAgICBzdGFydDogc2hhbGxvdyhldmVudHNbdGV4dF1bMV0uc3RhcnQpLFxuICAgIGVuZDogc2hhbGxvdyhldmVudHNbZXZlbnRzLmxlbmd0aCAtIDFdWzFdLmVuZClcbiAgfVxuXG4gIC8vIENoYW5nZSB0aGUgcGFyYWdyYXBoIHRvIHNldGV4dCBoZWFkaW5nIHRleHQuXG4gIGV2ZW50c1t0ZXh0XVsxXS50eXBlID0gJ3NldGV4dEhlYWRpbmdUZXh0J1xuXG4gIC8vIElmIHdlIGhhdmUgZGVmaW5pdGlvbnMgaW4gdGhlIGNvbnRlbnQsIHdl4oCZbGwga2VlcCBvbiBoYXZpbmcgY29udGVudCxcbiAgLy8gYnV0IHdlIG5lZWQgbW92ZSBpdC5cbiAgaWYgKGRlZmluaXRpb24pIHtcbiAgICBldmVudHMuc3BsaWNlKHRleHQsIDAsIFsnZW50ZXInLCBoZWFkaW5nLCBjb250ZXh0XSlcbiAgICBldmVudHMuc3BsaWNlKGRlZmluaXRpb24gKyAxLCAwLCBbJ2V4aXQnLCBldmVudHNbY29udGVudF1bMV0sIGNvbnRleHRdKVxuICAgIGV2ZW50c1tjb250ZW50XVsxXS5lbmQgPSBzaGFsbG93KGV2ZW50c1tkZWZpbml0aW9uXVsxXS5lbmQpXG4gIH0gZWxzZSB7XG4gICAgZXZlbnRzW2NvbnRlbnRdWzFdID0gaGVhZGluZ1xuICB9XG5cbiAgLy8gQWRkIHRoZSBoZWFkaW5nIGV4aXQgYXQgdGhlIGVuZC5cbiAgZXZlbnRzLnB1c2goWydleGl0JywgaGVhZGluZywgY29udGV4dF0pXG5cbiAgcmV0dXJuIGV2ZW50c1xufVxuXG5mdW5jdGlvbiB0b2tlbml6ZVNldGV4dFVuZGVybGluZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaW5kZXggPSBzZWxmLmV2ZW50cy5sZW5ndGhcbiAgdmFyIG1hcmtlclxuICB2YXIgcGFyYWdyYXBoXG5cbiAgLy8gRmluZCBhbiBvcGVuaW5nLlxuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIC8vIFNraXAgZW50ZXIvZXhpdCBvZiBsaW5lIGVuZGluZywgbGluZSBwcmVmaXgsIGFuZCBjb250ZW50LlxuICAgIC8vIFdlIGNhbiBub3cgZWl0aGVyIGhhdmUgYSBkZWZpbml0aW9uIG9yIGEgcGFyYWdyYXBoLlxuICAgIGlmIChcbiAgICAgIHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSAnbGluZUVuZGluZycgJiZcbiAgICAgIHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSAnbGluZVByZWZpeCcgJiZcbiAgICAgIHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSAnY29udGVudCdcbiAgICApIHtcbiAgICAgIHBhcmFncmFwaCA9IHNlbGYuZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAncGFyYWdyYXBoJ1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKCFzZWxmLmxhenkgJiYgKHNlbGYuaW50ZXJydXB0IHx8IHBhcmFncmFwaCkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3NldGV4dEhlYWRpbmdMaW5lJylcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3NldGV4dEhlYWRpbmdMaW5lU2VxdWVuY2UnKVxuICAgICAgbWFya2VyID0gY29kZVxuICAgICAgcmV0dXJuIGNsb3NpbmdTZXF1ZW5jZShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NpbmdTZXF1ZW5jZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlJylcbiAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgY2xvc2luZ1NlcXVlbmNlRW5kLCAnbGluZVN1ZmZpeCcpKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2VFbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdzZXRleHRIZWFkaW5nTGluZScpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cbn1cbiIsImV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZVdoaXRlc3BhY2VcblxudmFyIG1hcmtkb3duTGluZUVuZGluZyA9IHJlcXVpcmUoJy4uL2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZycpXG5cbnZhciBjcmVhdGVTcGFjZSA9IHJlcXVpcmUoJy4vZmFjdG9yeS1zcGFjZScpXG5cbmZ1bmN0aW9uIHRva2VuaXplV2hpdGVzcGFjZShlZmZlY3RzLCBvaykge1xuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgb2ssICdsaW5lUHJlZml4JylcbiAgfVxufVxuIiwidmFyIGF0dGVudGlvbiA9IHJlcXVpcmUoJy4vdG9rZW5pemUvYXR0ZW50aW9uJylcbnZhciBoZWFkaW5nQXR4ID0gcmVxdWlyZSgnLi90b2tlbml6ZS9oZWFkaW5nLWF0eCcpXG52YXIgYXV0b2xpbmsgPSByZXF1aXJlKCcuL3Rva2VuaXplL2F1dG9saW5rJylcbnZhciBsaXN0ID0gcmVxdWlyZSgnLi90b2tlbml6ZS9saXN0JylcbnZhciBibG9ja1F1b3RlID0gcmVxdWlyZSgnLi90b2tlbml6ZS9ibG9jay1xdW90ZScpXG52YXIgY2hhcmFjdGVyRXNjYXBlID0gcmVxdWlyZSgnLi90b2tlbml6ZS9jaGFyYWN0ZXItZXNjYXBlJylcbnZhciBjaGFyYWN0ZXJSZWZlcmVuY2UgPSByZXF1aXJlKCcuL3Rva2VuaXplL2NoYXJhY3Rlci1yZWZlcmVuY2UnKVxudmFyIGNvZGVGZW5jZWQgPSByZXF1aXJlKCcuL3Rva2VuaXplL2NvZGUtZmVuY2VkJylcbnZhciBjb2RlSW5kZW50ZWQgPSByZXF1aXJlKCcuL3Rva2VuaXplL2NvZGUtaW5kZW50ZWQnKVxudmFyIGNvZGVUZXh0ID0gcmVxdWlyZSgnLi90b2tlbml6ZS9jb2RlLXRleHQnKVxudmFyIGRlZmluaXRpb24gPSByZXF1aXJlKCcuL3Rva2VuaXplL2RlZmluaXRpb24nKVxudmFyIGhhcmRCcmVha0VzY2FwZSA9IHJlcXVpcmUoJy4vdG9rZW5pemUvaGFyZC1icmVhay1lc2NhcGUnKVxudmFyIGh0bWxGbG93ID0gcmVxdWlyZSgnLi90b2tlbml6ZS9odG1sLWZsb3cnKVxudmFyIGh0bWxUZXh0ID0gcmVxdWlyZSgnLi90b2tlbml6ZS9odG1sLXRleHQnKVxudmFyIGxhYmVsRW5kID0gcmVxdWlyZSgnLi90b2tlbml6ZS9sYWJlbC1lbmQnKVxudmFyIGxhYmVsSW1hZ2UgPSByZXF1aXJlKCcuL3Rva2VuaXplL2xhYmVsLXN0YXJ0LWltYWdlJylcbnZhciBsYWJlbExpbmsgPSByZXF1aXJlKCcuL3Rva2VuaXplL2xhYmVsLXN0YXJ0LWxpbmsnKVxudmFyIHNldGV4dFVuZGVybGluZSA9IHJlcXVpcmUoJy4vdG9rZW5pemUvc2V0ZXh0LXVuZGVybGluZScpXG52YXIgdGhlbWF0aWNCcmVhayA9IHJlcXVpcmUoJy4vdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsnKVxudmFyIGxpbmVFbmRpbmcgPSByZXF1aXJlKCcuL3Rva2VuaXplL2xpbmUtZW5kaW5nJylcbnZhciByZXNvbHZlVGV4dCA9IHJlcXVpcmUoJy4vaW5pdGlhbGl6ZS90ZXh0JykucmVzb2x2ZXJcblxuZXhwb3J0cy5kb2N1bWVudCA9IHtcbiAgNDI6IGxpc3QsIC8vIEFzdGVyaXNrXG4gIDQzOiBsaXN0LCAvLyBQbHVzIHNpZ25cbiAgNDU6IGxpc3QsIC8vIERhc2hcbiAgNDg6IGxpc3QsIC8vIDBcbiAgNDk6IGxpc3QsIC8vIDFcbiAgNTA6IGxpc3QsIC8vIDJcbiAgNTE6IGxpc3QsIC8vIDNcbiAgNTI6IGxpc3QsIC8vIDRcbiAgNTM6IGxpc3QsIC8vIDVcbiAgNTQ6IGxpc3QsIC8vIDZcbiAgNTU6IGxpc3QsIC8vIDdcbiAgNTY6IGxpc3QsIC8vIDhcbiAgNTc6IGxpc3QsIC8vIDlcbiAgNjI6IGJsb2NrUXVvdGUgLy8gR3JlYXRlciB0aGFuXG59XG5cbmV4cG9ydHMuY29udGVudEluaXRpYWwgPSB7XG4gIDkxOiBkZWZpbml0aW9uIC8vIExlZnQgc3F1YXJlIGJyYWNrZXRcbn1cblxuZXhwb3J0cy5mbG93SW5pdGlhbCA9IHtcbiAgJy0yJzogY29kZUluZGVudGVkLCAvLyBIb3Jpem9udGFsIHRhYlxuICAnLTEnOiBjb2RlSW5kZW50ZWQsIC8vIFZpcnR1YWwgc3BhY2VcbiAgMzI6IGNvZGVJbmRlbnRlZCAvLyBTcGFjZVxufVxuXG5leHBvcnRzLmZsb3cgPSB7XG4gIDM1OiBoZWFkaW5nQXR4LCAvLyBOdW1iZXIgc2lnblxuICA0MjogdGhlbWF0aWNCcmVhaywgLy8gQXN0ZXJpc2tcbiAgNDU6IFtzZXRleHRVbmRlcmxpbmUsIHRoZW1hdGljQnJlYWtdLCAvLyBEYXNoXG4gIDYwOiBodG1sRmxvdywgLy8gTGVzcyB0aGFuXG4gIDYxOiBzZXRleHRVbmRlcmxpbmUsIC8vIEVxdWFscyB0b1xuICA5NTogdGhlbWF0aWNCcmVhaywgLy8gVW5kZXJzY29yZVxuICA5NjogY29kZUZlbmNlZCwgLy8gR3JhdmUgYWNjZW50XG4gIDEyNjogY29kZUZlbmNlZCAvLyBUaWxkZVxufVxuXG5leHBvcnRzLnN0cmluZyA9IHtcbiAgMzg6IGNoYXJhY3RlclJlZmVyZW5jZSwgLy8gQW1wZXJzYW5kXG4gIDkyOiBjaGFyYWN0ZXJFc2NhcGUgLy8gQmFja3NsYXNoXG59XG5cbmV4cG9ydHMudGV4dCA9IHtcbiAgJy01JzogbGluZUVuZGluZywgLy8gQ2FycmlhZ2UgcmV0dXJuXG4gICctNCc6IGxpbmVFbmRpbmcsIC8vIExpbmUgZmVlZFxuICAnLTMnOiBsaW5lRW5kaW5nLCAvLyBDYXJyaWFnZSByZXR1cm4gKyBsaW5lIGZlZWRcbiAgMzM6IGxhYmVsSW1hZ2UsIC8vIEV4Y2xhbWF0aW9uIG1hcmtcbiAgMzg6IGNoYXJhY3RlclJlZmVyZW5jZSwgLy8gQW1wZXJzYW5kXG4gIDQyOiBhdHRlbnRpb24sIC8vIEFzdGVyaXNrXG4gIDYwOiBbYXV0b2xpbmssIGh0bWxUZXh0XSwgLy8gTGVzcyB0aGFuXG4gIDkxOiBsYWJlbExpbmssIC8vIExlZnQgc3F1YXJlIGJyYWNrZXRcbiAgOTI6IFtoYXJkQnJlYWtFc2NhcGUsIGNoYXJhY3RlckVzY2FwZV0sIC8vIEJhY2tzbGFzaFxuICA5MzogbGFiZWxFbmQsIC8vIFJpZ2h0IHNxdWFyZSBicmFja2V0XG4gIDk1OiBhdHRlbnRpb24sIC8vIFVuZGVyc2NvcmVcbiAgOTY6IGNvZGVUZXh0IC8vIEdyYXZlIGFjY2VudFxufVxuXG5leHBvcnRzLmluc2lkZVNwYW4gPSB7XG4gIG51bGw6IFthdHRlbnRpb24sIHJlc29sdmVUZXh0XVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBzZXJpYWxpemVDaHVua3NcblxudmFyIGZyb21DaGFyQ29kZSA9IHJlcXVpcmUoJy4uL2NvbnN0YW50L2Zyb20tY2hhci1jb2RlJylcblxuZnVuY3Rpb24gc2VyaWFsaXplQ2h1bmtzKGNodW5rcykge1xuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIGNodW5rXG4gIHZhciB2YWx1ZVxuICB2YXIgYXRUYWJcblxuICB3aGlsZSAoKytpbmRleCA8IGNodW5rcy5sZW5ndGgpIHtcbiAgICBjaHVuayA9IGNodW5rc1tpbmRleF1cblxuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IGNodW5rXG4gICAgfSBlbHNlIGlmIChjaHVuayA9PT0gLTUpIHtcbiAgICAgIHZhbHVlID0gJ1xccidcbiAgICB9IGVsc2UgaWYgKGNodW5rID09PSAtNCkge1xuICAgICAgdmFsdWUgPSAnXFxuJ1xuICAgIH0gZWxzZSBpZiAoY2h1bmsgPT09IC0zKSB7XG4gICAgICB2YWx1ZSA9ICdcXHInICsgJ1xcbidcbiAgICB9IGVsc2UgaWYgKGNodW5rID09PSAtMikge1xuICAgICAgdmFsdWUgPSAnXFx0J1xuICAgIH0gZWxzZSBpZiAoY2h1bmsgPT09IC0xKSB7XG4gICAgICBpZiAoYXRUYWIpIGNvbnRpbnVlXG4gICAgICB2YWx1ZSA9ICcgJ1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDdXJyZW50bHkgb25seSByZXBsYWNlbWVudCBjaGFyYWN0ZXIuXG4gICAgICB2YWx1ZSA9IGZyb21DaGFyQ29kZShjaHVuaylcbiAgICB9XG5cbiAgICBhdFRhYiA9IGNodW5rID09PSAtMlxuICAgIHJlc3VsdC5wdXNoKHZhbHVlKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBzbGljZUNodW5rc1xuXG5mdW5jdGlvbiBzbGljZUNodW5rcyhjaHVua3MsIHRva2VuKSB7XG4gIHZhciBzdGFydEluZGV4ID0gdG9rZW4uc3RhcnQuX2luZGV4XG4gIHZhciBzdGFydEJ1ZmZlckluZGV4ID0gdG9rZW4uc3RhcnQuX2J1ZmZlckluZGV4XG4gIHZhciBlbmRJbmRleCA9IHRva2VuLmVuZC5faW5kZXhcbiAgdmFyIGVuZEJ1ZmZlckluZGV4ID0gdG9rZW4uZW5kLl9idWZmZXJJbmRleFxuICB2YXIgdmlld1xuXG4gIGlmIChzdGFydEluZGV4ID09PSBlbmRJbmRleCkge1xuICAgIHZpZXcgPSBbY2h1bmtzW3N0YXJ0SW5kZXhdLnNsaWNlKHN0YXJ0QnVmZmVySW5kZXgsIGVuZEJ1ZmZlckluZGV4KV1cbiAgfSBlbHNlIHtcbiAgICB2aWV3ID0gY2h1bmtzLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KVxuXG4gICAgaWYgKHN0YXJ0QnVmZmVySW5kZXggPiAtMSkge1xuICAgICAgdmlld1swXSA9IHZpZXdbMF0uc2xpY2Uoc3RhcnRCdWZmZXJJbmRleClcbiAgICB9XG5cbiAgICBpZiAoZW5kQnVmZmVySW5kZXggPiAwKSB7XG4gICAgICB2aWV3LnB1c2goY2h1bmtzW2VuZEluZGV4XS5zbGljZSgwLCBlbmRCdWZmZXJJbmRleCkpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZpZXdcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gbWluaWZsYXRcblxuZnVuY3Rpb24gbWluaWZsYXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWRcbiAgICA/IFtdXG4gICAgOiAnbGVuZ3RoJyBpbiB2YWx1ZVxuICAgID8gdmFsdWVcbiAgICA6IFt2YWx1ZV1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gY3JlYXRlVG9rZW5pemVyXG5cbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuLi9jb25zdGFudC9hc3NpZ24nKVxuXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnLi4vY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcbnZhciBjaHVua2VkU3BsaWNlID0gcmVxdWlyZSgnLi9jaHVua2VkLXNwbGljZScpXG52YXIgc2hhbGxvdyA9IHJlcXVpcmUoJy4vc2hhbGxvdycpXG52YXIgc2VyaWFsaXplQ2h1bmtzID0gcmVxdWlyZSgnLi9zZXJpYWxpemUtY2h1bmtzJylcbnZhciBzbGljZUNodW5rcyA9IHJlcXVpcmUoJy4vc2xpY2UtY2h1bmtzJylcbnZhciByZXNvbHZlQWxsID0gcmVxdWlyZSgnLi9yZXNvbHZlLWFsbCcpXG52YXIgbWluaWZsYXQgPSByZXF1aXJlKCcuL21pbmlmbGF0JylcblxuLy8gQ3JlYXRlIGEgdG9rZW5pemVyLlxuLy8gVG9rZW5pemVycyBkZWFsIHdpdGggb25lIHR5cGUgb2YgZGF0YSAoZS5nLiwgY29udGFpbmVycywgZmxvdywgdGV4dCkuXG4vLyBUaGUgcGFyc2VyIGlzIHRoZSBvYmplY3QgZGVhbGluZyB3aXRoIGl0IGFsbC5cbi8vIGBpbml0aWFsaXplYCB3b3JrcyBsaWtlIG90aGVyIGNvbnN0cnVjdHMsIGV4Y2VwdCB0aGF0IG9ubHkgaXRzIGB0b2tlbml6ZWBcbi8vIGZ1bmN0aW9uIGlzIHVzZWQsIGluIHdoaWNoIGNhc2UgaXQgZG9lc27igJl0IHJlY2VpdmUgYW4gYG9rYCBvciBgbm9rYC5cbi8vIGBmcm9tYCBjYW4gYmUgZ2l2ZW4gdG8gc2V0IHRoZSBwb2ludCBiZWZvcmUgdGhlIGZpcnN0IGNoYXJhY3RlciwgYWx0aG91Z2hcbi8vIHdoZW4gZnVydGhlciBsaW5lcyBhcmUgaW5kZW50ZWQsIHRoZXkgbXVzdCBiZSBzZXQgd2l0aCBgZGVmaW5lU2tpcGAuXG5mdW5jdGlvbiBjcmVhdGVUb2tlbml6ZXIocGFyc2VyLCBpbml0aWFsaXplLCBmcm9tKSB7XG4gIHZhciBwb2ludCA9IGZyb20gPyBzaGFsbG93KGZyb20pIDoge2xpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwfVxuICB2YXIgY29sdW1uU3RhcnQgPSB7fVxuICB2YXIgcmVzb2x2ZUFsbENvbnN0cnVjdHMgPSBbXVxuICB2YXIgY2h1bmtzID0gW11cbiAgdmFyIHN0YWNrID0gW11cbiAgdmFyIGNvbnN1bWVkID0gdHJ1ZVxuXG4gIC8vIFRvb2xzIHVzZWQgZm9yIHRva2VuaXppbmcuXG4gIHZhciBlZmZlY3RzID0ge1xuICAgIGNvbnN1bWU6IGNvbnN1bWUsXG4gICAgZW50ZXI6IGVudGVyLFxuICAgIGV4aXQ6IGV4aXQsXG4gICAgYXR0ZW1wdDogY29uc3RydWN0RmFjdG9yeShvbnN1Y2Nlc3NmdWxjb25zdHJ1Y3QpLFxuICAgIGNoZWNrOiBjb25zdHJ1Y3RGYWN0b3J5KG9uc3VjY2Vzc2Z1bGNoZWNrKSxcbiAgICBpbnRlcnJ1cHQ6IGNvbnN0cnVjdEZhY3Rvcnkob25zdWNjZXNzZnVsY2hlY2ssIHtpbnRlcnJ1cHQ6IHRydWV9KSxcbiAgICBsYXp5OiBjb25zdHJ1Y3RGYWN0b3J5KG9uc3VjY2Vzc2Z1bGNoZWNrLCB7bGF6eTogdHJ1ZX0pXG4gIH1cblxuICAvLyBTdGF0ZSBhbmQgdG9vbHMgZm9yIHJlc29sdmluZyBhbmQgc2VyaWFsaXppbmcuXG4gIHZhciBjb250ZXh0ID0ge1xuICAgIHByZXZpb3VzOiBudWxsLFxuICAgIGV2ZW50czogW10sXG4gICAgcGFyc2VyOiBwYXJzZXIsXG4gICAgc2xpY2VTdHJlYW06IHNsaWNlU3RyZWFtLFxuICAgIHNsaWNlU2VyaWFsaXplOiBzbGljZVNlcmlhbGl6ZSxcbiAgICBub3c6IG5vdyxcbiAgICBkZWZpbmVTa2lwOiBza2lwLFxuICAgIHdyaXRlOiB3cml0ZVxuICB9XG5cbiAgLy8gVGhlIHN0YXRlIGZ1bmN0aW9uLlxuICB2YXIgc3RhdGUgPSBpbml0aWFsaXplLnRva2VuaXplLmNhbGwoY29udGV4dCwgZWZmZWN0cylcblxuICAvLyBUcmFjayB3aGljaCBjaGFyYWN0ZXIgd2UgZXhwZWN0IHRvIGJlIGNvbnN1bWVkLCB0byBjYXRjaCBidWdzLlxuICB2YXIgZXhwZWN0ZWRDb2RlXG5cbiAgaWYgKGluaXRpYWxpemUucmVzb2x2ZUFsbCkge1xuICAgIHJlc29sdmVBbGxDb25zdHJ1Y3RzLnB1c2goaW5pdGlhbGl6ZSlcbiAgfVxuXG4gIC8vIFN0b3JlIHdoZXJlIHdlIGFyZSBpbiB0aGUgaW5wdXQgc3RyZWFtLlxuICBwb2ludC5faW5kZXggPSAwXG4gIHBvaW50Ll9idWZmZXJJbmRleCA9IC0xXG5cbiAgcmV0dXJuIGNvbnRleHRcblxuICBmdW5jdGlvbiB3cml0ZShzbGljZSkge1xuICAgIGNodW5rZWRTcGxpY2UoY2h1bmtzLCBjaHVua3MubGVuZ3RoLCAwLCBzbGljZSlcblxuICAgIG1haW4oKVxuXG4gICAgLy8gRXhpdCBpZiB3ZeKAmXJlIG5vdCBkb25lLCByZXNvbHZlIG1pZ2h0IGNoYW5nZSBzdHVmZi5cbiAgICBpZiAoY2h1bmtzW2NodW5rcy5sZW5ndGggLSAxXSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgYWRkUmVzdWx0KGluaXRpYWxpemUsIDApXG5cbiAgICAvLyBPdGhlcndpc2UsIHJlc29sdmUsIGFuZCBleGl0LlxuICAgIGNvbnRleHQuZXZlbnRzID0gcmVzb2x2ZUFsbChyZXNvbHZlQWxsQ29uc3RydWN0cywgY29udGV4dC5ldmVudHMsIGNvbnRleHQpXG5cbiAgICByZXR1cm4gY29udGV4dC5ldmVudHNcbiAgfVxuXG4gIC8vXG4gIC8vIFRvb2xzLlxuICAvL1xuXG4gIGZ1bmN0aW9uIHNsaWNlU2VyaWFsaXplKHRva2VuKSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZUNodW5rcyhzbGljZVN0cmVhbSh0b2tlbikpXG4gIH1cblxuICBmdW5jdGlvbiBzbGljZVN0cmVhbSh0b2tlbikge1xuICAgIHJldHVybiBzbGljZUNodW5rcyhjaHVua3MsIHRva2VuKVxuICB9XG5cbiAgZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBzaGFsbG93KHBvaW50KVxuICB9XG5cbiAgZnVuY3Rpb24gc2tpcCh2YWx1ZSkge1xuICAgIGNvbHVtblN0YXJ0W3ZhbHVlLmxpbmVdID0gdmFsdWUuY29sdW1uXG4gICAgYWNjb3VudEZvclBvdGVudGlhbFNraXAoKVxuICB9XG5cbiAgLy9cbiAgLy8gU3RhdGUgbWFuYWdlbWVudC5cbiAgLy9cblxuICAvLyBNYWluIGxvb3AgKG5vdGUgdGhhdCBgX2luZGV4YCBhbmQgYF9idWZmZXJJbmRleGAgaW4gYHBvaW50YCBhcmUgbW9kaWZpZWQgYnlcbiAgLy8gYGNvbnN1bWVgKS5cbiAgLy8gSGVyZSBpcyB3aGVyZSB3ZSB3YWxrIHRocm91Z2ggdGhlIGNodW5rcywgd2hpY2ggZWl0aGVyIGluY2x1ZGUgc3RyaW5ncyBvZlxuICAvLyBzZXZlcmFsIGNoYXJhY3RlcnMsIG9yIG51bWVyaWNhbCBjaGFyYWN0ZXIgY29kZXMuXG4gIC8vIFRoZSByZWFzb24gdG8gZG8gdGhpcyBpbiBhIGxvb3AgaW5zdGVhZCBvZiBhIGNhbGwgaXMgc28gdGhlIHN0YWNrIGNhblxuICAvLyBkcmFpbi5cbiAgZnVuY3Rpb24gbWFpbigpIHtcbiAgICB2YXIgY2h1bmtJbmRleFxuICAgIHZhciBjaHVua1xuXG4gICAgd2hpbGUgKHBvaW50Ll9pbmRleCA8IGNodW5rcy5sZW5ndGgpIHtcbiAgICAgIGNodW5rID0gY2h1bmtzW3BvaW50Ll9pbmRleF1cblxuICAgICAgLy8gSWYgd2XigJlyZSBpbiBhIGJ1ZmZlciBjaHVuaywgbG9vcCB0aHJvdWdoIGl0LlxuICAgICAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY2h1bmtJbmRleCA9IHBvaW50Ll9pbmRleFxuXG4gICAgICAgIGlmIChwb2ludC5fYnVmZmVySW5kZXggPCAwKSB7XG4gICAgICAgICAgcG9pbnQuX2J1ZmZlckluZGV4ID0gMFxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgIHBvaW50Ll9pbmRleCA9PT0gY2h1bmtJbmRleCAmJlxuICAgICAgICAgIHBvaW50Ll9idWZmZXJJbmRleCA8IGNodW5rLmxlbmd0aFxuICAgICAgICApIHtcbiAgICAgICAgICBnbyhjaHVuay5jaGFyQ29kZUF0KHBvaW50Ll9idWZmZXJJbmRleCkpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdvKGNodW5rKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIERlYWwgd2l0aCBvbmUgY29kZS5cbiAgZnVuY3Rpb24gZ28oY29kZSkge1xuICAgIGNvbnN1bWVkID0gdW5kZWZpbmVkXG5cbiAgICBleHBlY3RlZENvZGUgPSBjb2RlXG4gICAgc3RhdGUgPSBzdGF0ZShjb2RlKVxuICB9XG5cbiAgLy8gTW92ZSBhIGNoYXJhY3RlciBmb3J3YXJkLlxuICBmdW5jdGlvbiBjb25zdW1lKGNvZGUpIHtcbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBwb2ludC5saW5lKytcbiAgICAgIHBvaW50LmNvbHVtbiA9IDFcbiAgICAgIHBvaW50Lm9mZnNldCArPSBjb2RlID09PSAtMyA/IDIgOiAxXG4gICAgICBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpXG4gICAgfSBlbHNlIGlmIChjb2RlICE9PSAtMSkge1xuICAgICAgcG9pbnQuY29sdW1uKytcbiAgICAgIHBvaW50Lm9mZnNldCsrXG4gICAgfVxuXG4gICAgLy8gTm90IGluIGEgc3RyaW5nIGNodW5rLlxuICAgIGlmIChwb2ludC5fYnVmZmVySW5kZXggPCAwKSB7XG4gICAgICBwb2ludC5faW5kZXgrK1xuICAgIH0gZWxzZSB7XG4gICAgICBwb2ludC5fYnVmZmVySW5kZXgrK1xuXG4gICAgICAvLyBBdCBlbmQgb2Ygc3RyaW5nIGNodW5rLlxuICAgICAgaWYgKHBvaW50Ll9idWZmZXJJbmRleCA9PT0gY2h1bmtzW3BvaW50Ll9pbmRleF0ubGVuZ3RoKSB7XG4gICAgICAgIHBvaW50Ll9idWZmZXJJbmRleCA9IC0xXG4gICAgICAgIHBvaW50Ll9pbmRleCsrXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRXhwb3NlIHRoZSBwcmV2aW91cyBjaGFyYWN0ZXIuXG4gICAgY29udGV4dC5wcmV2aW91cyA9IGNvZGVcblxuICAgIC8vIE1hcmsgYXMgY29uc3VtZWQuXG4gICAgY29uc3VtZWQgPSB0cnVlXG4gIH1cblxuICAvLyBTdGFydCBhIHRva2VuLlxuICBmdW5jdGlvbiBlbnRlcih0eXBlLCBmaWVsZHMpIHtcbiAgICB2YXIgdG9rZW4gPSBmaWVsZHMgfHwge31cbiAgICB0b2tlbi50eXBlID0gdHlwZVxuICAgIHRva2VuLnN0YXJ0ID0gbm93KClcblxuICAgIGNvbnRleHQuZXZlbnRzLnB1c2goWydlbnRlcicsIHRva2VuLCBjb250ZXh0XSlcblxuICAgIHN0YWNrLnB1c2godG9rZW4pXG5cbiAgICByZXR1cm4gdG9rZW5cbiAgfVxuXG4gIC8vIFN0b3AgYSB0b2tlbi5cbiAgZnVuY3Rpb24gZXhpdCh0eXBlKSB7XG4gICAgdmFyIHRva2VuID0gc3RhY2sucG9wKClcbiAgICB0b2tlbi5lbmQgPSBub3coKVxuXG4gICAgY29udGV4dC5ldmVudHMucHVzaChbJ2V4aXQnLCB0b2tlbiwgY29udGV4dF0pXG5cbiAgICByZXR1cm4gdG9rZW5cbiAgfVxuXG4gIC8vIFVzZSByZXN1bHRzLlxuICBmdW5jdGlvbiBvbnN1Y2Nlc3NmdWxjb25zdHJ1Y3QoY29uc3RydWN0LCBpbmZvKSB7XG4gICAgYWRkUmVzdWx0KGNvbnN0cnVjdCwgaW5mby5mcm9tKVxuICB9XG5cbiAgLy8gRGlzY2FyZCByZXN1bHRzLlxuICBmdW5jdGlvbiBvbnN1Y2Nlc3NmdWxjaGVjayhjb25zdHJ1Y3QsIGluZm8pIHtcbiAgICBpbmZvLnJlc3RvcmUoKVxuICB9XG5cbiAgLy8gRmFjdG9yeSB0byBhdHRlbXB0L2NoZWNrL2ludGVycnVwdC5cbiAgZnVuY3Rpb24gY29uc3RydWN0RmFjdG9yeShvbnJldHVybiwgZmllbGRzKSB7XG4gICAgcmV0dXJuIGhvb2tcblxuICAgIC8vIEhhbmRsZSBlaXRoZXIgYW4gb2JqZWN0IG1hcHBpbmcgY29kZXMgdG8gY29uc3RydWN0cywgYSBsaXN0IG9mXG4gICAgLy8gY29uc3RydWN0cywgb3IgYSBzaW5nbGUgY29uc3RydWN0LlxuICAgIGZ1bmN0aW9uIGhvb2soY29uc3RydWN0cywgcmV0dXJuU3RhdGUsIGJvZ3VzU3RhdGUpIHtcbiAgICAgIHZhciBsaXN0T2ZDb25zdHJ1Y3RzXG4gICAgICB2YXIgY29uc3RydWN0SW5kZXhcbiAgICAgIHZhciBjdXJyZW50Q29uc3RydWN0XG4gICAgICB2YXIgaW5mb1xuXG4gICAgICByZXR1cm4gY29uc3RydWN0cy50b2tlbml6ZSB8fCAnbGVuZ3RoJyBpbiBjb25zdHJ1Y3RzXG4gICAgICAgID8gaGFuZGxlTGlzdE9mQ29uc3RydWN0cyhtaW5pZmxhdChjb25zdHJ1Y3RzKSlcbiAgICAgICAgOiBoYW5kbGVNYXBPZkNvbnN0cnVjdHNcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlTWFwT2ZDb25zdHJ1Y3RzKGNvZGUpIHtcbiAgICAgICAgaWYgKGNvZGUgaW4gY29uc3RydWN0cyB8fCBudWxsIGluIGNvbnN0cnVjdHMpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlTGlzdE9mQ29uc3RydWN0cyhcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gYG51bGxgIGlzIHVzZWQgYnkgc29tZSBleHRlbnNpb25zICovXG4gICAgICAgICAgICBjb25zdHJ1Y3RzLm51bGxcbiAgICAgICAgICAgICAgPyBtaW5pZmxhdChjb25zdHJ1Y3RzW2NvZGVdKS5jb25jYXQobWluaWZsYXQoY29uc3RydWN0cy5udWxsKSlcbiAgICAgICAgICAgICAgOiBjb25zdHJ1Y3RzW2NvZGVdXG4gICAgICAgICAgKShjb2RlKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvZ3VzU3RhdGUoY29kZSlcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlTGlzdE9mQ29uc3RydWN0cyhsaXN0KSB7XG4gICAgICAgIGxpc3RPZkNvbnN0cnVjdHMgPSBsaXN0XG4gICAgICAgIGNvbnN0cnVjdEluZGV4ID0gMFxuICAgICAgICByZXR1cm4gaGFuZGxlQ29uc3RydWN0KGxpc3RbY29uc3RydWN0SW5kZXhdKVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVDb25zdHJ1Y3QoY29uc3RydWN0KSB7XG4gICAgICAgIHJldHVybiBzdGFydFxuXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgICAgICAvLyBUbyBkbzogbm90IG5lZGUgdG8gc3RvcmUgaWYgdGhlcmUgaXMgbm8gYm9ndXMgc3RhdGUsIHByb2JhYmx5P1xuICAgICAgICAgIC8vIEN1cnJlbnRseSBkb2VzbuKAmXQgd29yayBiZWNhdXNlIGBpbnNwZWN0YCBpbiBkb2N1bWVudCBkb2VzIGEgY2hlY2tcbiAgICAgICAgICAvLyB3L28gYSBib2d1cywgd2hpY2ggZG9lc27igJl0IG1ha2Ugc2Vuc2UuIEJ1dCBpdCBkb2VzIHNlZW0gdG8gaGVscCBwZXJmXG4gICAgICAgICAgLy8gYnkgbm90IHN0b3JpbmcuXG4gICAgICAgICAgaW5mbyA9IHN0b3JlKClcbiAgICAgICAgICBjdXJyZW50Q29uc3RydWN0ID0gY29uc3RydWN0XG5cbiAgICAgICAgICBpZiAoIWNvbnN0cnVjdC5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRDb25zdHJ1Y3QgPSBjb25zdHJ1Y3RcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29uc3RydWN0LnRva2VuaXplLmNhbGwoXG4gICAgICAgICAgICBmaWVsZHMgPyBhc3NpZ24oe30sIGNvbnRleHQsIGZpZWxkcykgOiBjb250ZXh0LFxuICAgICAgICAgICAgZWZmZWN0cyxcbiAgICAgICAgICAgIG9rLFxuICAgICAgICAgICAgbm9rXG4gICAgICAgICAgKShjb2RlKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9rKGNvZGUpIHtcbiAgICAgICAgY29uc3VtZWQgPSB0cnVlXG4gICAgICAgIG9ucmV0dXJuKGN1cnJlbnRDb25zdHJ1Y3QsIGluZm8pXG4gICAgICAgIHJldHVybiByZXR1cm5TdGF0ZVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub2soY29kZSkge1xuICAgICAgICBjb25zdW1lZCA9IHRydWVcbiAgICAgICAgaW5mby5yZXN0b3JlKClcblxuICAgICAgICBpZiAoKytjb25zdHJ1Y3RJbmRleCA8IGxpc3RPZkNvbnN0cnVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUNvbnN0cnVjdChsaXN0T2ZDb25zdHJ1Y3RzW2NvbnN0cnVjdEluZGV4XSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib2d1c1N0YXRlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkUmVzdWx0KGNvbnN0cnVjdCwgZnJvbSkge1xuICAgIGlmIChjb25zdHJ1Y3QucmVzb2x2ZUFsbCAmJiByZXNvbHZlQWxsQ29uc3RydWN0cy5pbmRleE9mKGNvbnN0cnVjdCkgPCAwKSB7XG4gICAgICByZXNvbHZlQWxsQ29uc3RydWN0cy5wdXNoKGNvbnN0cnVjdClcbiAgICB9XG5cbiAgICBpZiAoY29uc3RydWN0LnJlc29sdmUpIHtcbiAgICAgIGNodW5rZWRTcGxpY2UoXG4gICAgICAgIGNvbnRleHQuZXZlbnRzLFxuICAgICAgICBmcm9tLFxuICAgICAgICBjb250ZXh0LmV2ZW50cy5sZW5ndGggLSBmcm9tLFxuICAgICAgICBjb25zdHJ1Y3QucmVzb2x2ZShjb250ZXh0LmV2ZW50cy5zbGljZShmcm9tKSwgY29udGV4dClcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoY29uc3RydWN0LnJlc29sdmVUbykge1xuICAgICAgY29udGV4dC5ldmVudHMgPSBjb25zdHJ1Y3QucmVzb2x2ZVRvKGNvbnRleHQuZXZlbnRzLCBjb250ZXh0KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3JlKCkge1xuICAgIHZhciBzdGFydFBvaW50ID0gbm93KClcbiAgICB2YXIgc3RhcnRQcmV2aW91cyA9IGNvbnRleHQucHJldmlvdXNcbiAgICB2YXIgc3RhcnRDdXJyZW50Q29uc3RydWN0ID0gY29udGV4dC5jdXJyZW50Q29uc3RydWN0XG4gICAgdmFyIHN0YXJ0RXZlbnRzSW5kZXggPSBjb250ZXh0LmV2ZW50cy5sZW5ndGhcbiAgICB2YXIgc3RhcnRTdGFjayA9IEFycmF5LmZyb20oc3RhY2spXG5cbiAgICByZXR1cm4ge3Jlc3RvcmU6IHJlc3RvcmUsIGZyb206IHN0YXJ0RXZlbnRzSW5kZXh9XG5cbiAgICBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgICAgcG9pbnQgPSBzdGFydFBvaW50XG4gICAgICBjb250ZXh0LnByZXZpb3VzID0gc3RhcnRQcmV2aW91c1xuICAgICAgY29udGV4dC5jdXJyZW50Q29uc3RydWN0ID0gc3RhcnRDdXJyZW50Q29uc3RydWN0XG4gICAgICBjb250ZXh0LmV2ZW50cy5sZW5ndGggPSBzdGFydEV2ZW50c0luZGV4XG4gICAgICBzdGFjayA9IHN0YXJ0U3RhY2tcbiAgICAgIGFjY291bnRGb3JQb3RlbnRpYWxTa2lwKClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhY2NvdW50Rm9yUG90ZW50aWFsU2tpcCgpIHtcbiAgICBpZiAocG9pbnQubGluZSBpbiBjb2x1bW5TdGFydCAmJiBwb2ludC5jb2x1bW4gPCAyKSB7XG4gICAgICBwb2ludC5jb2x1bW4gPSBjb2x1bW5TdGFydFtwb2ludC5saW5lXVxuICAgICAgcG9pbnQub2Zmc2V0ICs9IGNvbHVtblN0YXJ0W3BvaW50LmxpbmVdIC0gMVxuICAgIH1cbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBjb21iaW5lRXh0ZW5zaW9uc1xuXG52YXIgb3duID0gcmVxdWlyZSgnLi4vY29uc3RhbnQvaGFzLW93bi1wcm9wZXJ0eScpXG52YXIgbWluaWZsYXQgPSByZXF1aXJlKCcuL21pbmlmbGF0JylcbnZhciBjaHVua2VkU3BsaWNlID0gcmVxdWlyZSgnLi9jaHVua2VkLXNwbGljZScpXG5cbi8vIENvbWJpbmUgc2V2ZXJhbCBzeW50YXggZXh0ZW5zaW9ucyBpbnRvIG9uZS5cbmZ1bmN0aW9uIGNvbWJpbmVFeHRlbnNpb25zKGV4dGVuc2lvbnMpIHtcbiAgdmFyIGFsbCA9IHt9XG4gIHZhciBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBleHRlbnNpb25zLmxlbmd0aCkge1xuICAgIGV4dGVuc2lvbihhbGwsIGV4dGVuc2lvbnNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIGFsbFxufVxuXG5mdW5jdGlvbiBleHRlbnNpb24oYWxsLCBleHRlbnNpb24pIHtcbiAgdmFyIGhvb2tcbiAgdmFyIGxlZnRcbiAgdmFyIHJpZ2h0XG4gIHZhciBjb2RlXG5cbiAgZm9yIChob29rIGluIGV4dGVuc2lvbikge1xuICAgIGxlZnQgPSBvd24uY2FsbChhbGwsIGhvb2spID8gYWxsW2hvb2tdIDogKGFsbFtob29rXSA9IHt9KVxuICAgIHJpZ2h0ID0gZXh0ZW5zaW9uW2hvb2tdXG5cbiAgICBmb3IgKGNvZGUgaW4gcmlnaHQpIHtcbiAgICAgIGxlZnRbY29kZV0gPSBjb25zdHJ1Y3RzKFxuICAgICAgICBtaW5pZmxhdChyaWdodFtjb2RlXSksXG4gICAgICAgIG93bi5jYWxsKGxlZnQsIGNvZGUpID8gbGVmdFtjb2RlXSA6IFtdXG4gICAgICApXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdHMobGlzdCwgZXhpc3RpbmcpIHtcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGJlZm9yZSA9IFtdXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsaXN0Lmxlbmd0aCkge1xuICAgIDsobGlzdFtpbmRleF0uYWRkID09PSAnYWZ0ZXInID8gZXhpc3RpbmcgOiBiZWZvcmUpLnB1c2gobGlzdFtpbmRleF0pXG4gIH1cblxuICBjaHVua2VkU3BsaWNlKGV4aXN0aW5nLCAwLCAwLCBiZWZvcmUpXG4gIHJldHVybiBleGlzdGluZ1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVQYXJzZXJcblxudmFyIGluaXRpYWxpemVDb250ZW50ID0gcmVxdWlyZSgnLi9pbml0aWFsaXplL2NvbnRlbnQnKVxudmFyIGluaXRpYWxpemVEb2N1bWVudCA9IHJlcXVpcmUoJy4vaW5pdGlhbGl6ZS9kb2N1bWVudCcpXG52YXIgaW5pdGlhbGl6ZUZsb3cgPSByZXF1aXJlKCcuL2luaXRpYWxpemUvZmxvdycpXG52YXIgaW5pdGlhbGl6ZVRleHQgPSByZXF1aXJlKCcuL2luaXRpYWxpemUvdGV4dCcpXG52YXIgY29uc3RydWN0cyA9IHJlcXVpcmUoJy4vY29uc3RydWN0cycpXG52YXIgY3JlYXRlVG9rZW5pemVyID0gcmVxdWlyZSgnLi91dGlsL2NyZWF0ZS10b2tlbml6ZXInKVxudmFyIGNvbWJpbmVFeHRlbnNpb25zID0gcmVxdWlyZSgnLi91dGlsL2NvbWJpbmUtZXh0ZW5zaW9ucycpXG52YXIgbWluaWZsYXQgPSByZXF1aXJlKCcuL3V0aWwvbWluaWZsYXQnKVxuXG5mdW5jdGlvbiBjcmVhdGVQYXJzZXIob3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBwYXJzZXIgPSB7XG4gICAgZGVmaW5lZDogW10sXG4gICAgY29uc3RydWN0czogY29tYmluZUV4dGVuc2lvbnMoXG4gICAgICBbY29uc3RydWN0c10uY29uY2F0KG1pbmlmbGF0KHNldHRpbmdzLmV4dGVuc2lvbnMpKVxuICAgICksXG5cbiAgICBjb250ZW50OiBjcmVhdGUoaW5pdGlhbGl6ZUNvbnRlbnQpLFxuICAgIGRvY3VtZW50OiBjcmVhdGUoaW5pdGlhbGl6ZURvY3VtZW50KSxcbiAgICBmbG93OiBjcmVhdGUoaW5pdGlhbGl6ZUZsb3cpLFxuICAgIHN0cmluZzogY3JlYXRlKGluaXRpYWxpemVUZXh0LnN0cmluZyksXG4gICAgdGV4dDogY3JlYXRlKGluaXRpYWxpemVUZXh0LnRleHQpXG4gIH1cblxuICByZXR1cm4gcGFyc2VyXG5cbiAgZnVuY3Rpb24gY3JlYXRlKGluaXRpYWxpemVyKSB7XG4gICAgcmV0dXJuIGNyZWF0b3JcbiAgICBmdW5jdGlvbiBjcmVhdG9yKGZyb20pIHtcbiAgICAgIHJldHVybiBjcmVhdGVUb2tlbml6ZXIocGFyc2VyLCBpbml0aWFsaXplciwgZnJvbSlcbiAgICB9XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcHJlcHJvY2Vzc29yXG5cbnZhciBzZWFyY2ggPSAvW1xcMFxcdFxcblxccl0vZ1xuXG5mdW5jdGlvbiBwcmVwcm9jZXNzb3IoKSB7XG4gIHZhciBzdGFydCA9IHRydWVcbiAgdmFyIGNvbHVtbiA9IDFcbiAgdmFyIGJ1ZmZlciA9ICcnXG4gIHZhciBhdENhcnJpYWdlUmV0dXJuXG5cbiAgcmV0dXJuIHByZXByb2Nlc3NcblxuICBmdW5jdGlvbiBwcmVwcm9jZXNzKHZhbHVlLCBlbmNvZGluZywgZW5kKSB7XG4gICAgdmFyIGNodW5rcyA9IFtdXG4gICAgdmFyIG1hdGNoXG4gICAgdmFyIG5leHRcbiAgICB2YXIgc3RhcnRQb3NpdGlvblxuICAgIHZhciBlbmRQb3NpdGlvblxuICAgIHZhciBjb2RlXG5cbiAgICB2YWx1ZSA9IGJ1ZmZlciArIHZhbHVlLnRvU3RyaW5nKGVuY29kaW5nKVxuICAgIHN0YXJ0UG9zaXRpb24gPSAwXG4gICAgYnVmZmVyID0gJydcblxuICAgIGlmIChzdGFydCkge1xuICAgICAgaWYgKHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDY1Mjc5KSB7XG4gICAgICAgIHN0YXJ0UG9zaXRpb24rK1xuICAgICAgfVxuXG4gICAgICBzdGFydCA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIHdoaWxlIChzdGFydFBvc2l0aW9uIDwgdmFsdWUubGVuZ3RoKSB7XG4gICAgICBzZWFyY2gubGFzdEluZGV4ID0gc3RhcnRQb3NpdGlvblxuICAgICAgbWF0Y2ggPSBzZWFyY2guZXhlYyh2YWx1ZSlcbiAgICAgIGVuZFBvc2l0aW9uID0gbWF0Y2ggPyBtYXRjaC5pbmRleCA6IHZhbHVlLmxlbmd0aFxuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kUG9zaXRpb24pXG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgYnVmZmVyID0gdmFsdWUuc2xpY2Uoc3RhcnRQb3NpdGlvbilcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvZGUgPT09IDEwICYmIHN0YXJ0UG9zaXRpb24gPT09IGVuZFBvc2l0aW9uICYmIGF0Q2FycmlhZ2VSZXR1cm4pIHtcbiAgICAgICAgY2h1bmtzLnB1c2goLTMpXG4gICAgICAgIGF0Q2FycmlhZ2VSZXR1cm4gPSB1bmRlZmluZWRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChhdENhcnJpYWdlUmV0dXJuKSB7XG4gICAgICAgICAgY2h1bmtzLnB1c2goLTUpXG4gICAgICAgICAgYXRDYXJyaWFnZVJldHVybiA9IHVuZGVmaW5lZFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXJ0UG9zaXRpb24gPCBlbmRQb3NpdGlvbikge1xuICAgICAgICAgIGNodW5rcy5wdXNoKHZhbHVlLnNsaWNlKHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uKSlcbiAgICAgICAgICBjb2x1bW4gKz0gZW5kUG9zaXRpb24gLSBzdGFydFBvc2l0aW9uXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29kZSA9PT0gMCkge1xuICAgICAgICAgIGNodW5rcy5wdXNoKDY1NTMzKVxuICAgICAgICAgIGNvbHVtbisrXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gOSkge1xuICAgICAgICAgIG5leHQgPSBNYXRoLmNlaWwoY29sdW1uIC8gNCkgKiA0XG4gICAgICAgICAgY2h1bmtzLnB1c2goLTIpXG4gICAgICAgICAgd2hpbGUgKGNvbHVtbisrIDwgbmV4dCkgY2h1bmtzLnB1c2goLTEpXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMTApIHtcbiAgICAgICAgICBjaHVua3MucHVzaCgtNClcbiAgICAgICAgICBjb2x1bW4gPSAxXG4gICAgICAgIH1cbiAgICAgICAgLy8gTXVzdCBiZSBjYXJyaWFnZSByZXR1cm4uXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGF0Q2FycmlhZ2VSZXR1cm4gPSB0cnVlXG4gICAgICAgICAgY29sdW1uID0gMVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0YXJ0UG9zaXRpb24gPSBlbmRQb3NpdGlvbiArIDFcbiAgICB9XG5cbiAgICBpZiAoZW5kKSB7XG4gICAgICBpZiAoYXRDYXJyaWFnZVJldHVybikgY2h1bmtzLnB1c2goLTUpXG4gICAgICBpZiAoYnVmZmVyKSBjaHVua3MucHVzaChidWZmZXIpXG4gICAgICBjaHVua3MucHVzaChudWxsKVxuICAgIH1cblxuICAgIHJldHVybiBjaHVua3NcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwb3N0cHJvY2Vzc1xuXG52YXIgc3VidG9rZW5pemUgPSByZXF1aXJlKCcuL3V0aWwvc3VidG9rZW5pemUnKVxuXG5mdW5jdGlvbiBwb3N0cHJvY2VzcyhldmVudHMpIHtcbiAgd2hpbGUgKCFzdWJ0b2tlbml6ZShldmVudHMpKSB7XG4gICAgLy8gRW1wdHlcbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyb21NYXJrZG93blxuXG4vLyBUaGVzZSB0aHJlZSBhcmUgY29tcGlsZWQgYXdheSBpbiB0aGUgYGRpc3QvYFxuXG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCdtZGFzdC11dGlsLXRvLXN0cmluZycpXG52YXIgYXNzaWduID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvY29uc3RhbnQvYXNzaWduJylcbnZhciBvd24gPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC9jb25zdGFudC9oYXMtb3duLXByb3BlcnR5JylcbnZhciBub3JtYWxpemVJZGVudGlmaWVyID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvdXRpbC9ub3JtYWxpemUtaWRlbnRpZmllcicpXG52YXIgc2FmZUZyb21JbnQgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC91dGlsL3NhZmUtZnJvbS1pbnQnKVxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3BhcnNlJylcbnZhciBwcmVwcm9jZXNzb3IgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC9wcmVwcm9jZXNzJylcbnZhciBwb3N0cHJvY2VzcyA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3Bvc3Rwcm9jZXNzJylcbnZhciBkZWNvZGUgPSByZXF1aXJlKCdwYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5JylcbnZhciBzdHJpbmdpZnlQb3NpdGlvbiA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtc3RyaW5naWZ5LXBvc2l0aW9uJylcblxuZnVuY3Rpb24gZnJvbU1hcmtkb3duKHZhbHVlLCBlbmNvZGluZywgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgIG9wdGlvbnMgPSBlbmNvZGluZ1xuICAgIGVuY29kaW5nID0gdW5kZWZpbmVkXG4gIH1cblxuICByZXR1cm4gY29tcGlsZXIob3B0aW9ucykoXG4gICAgcG9zdHByb2Nlc3MoXG4gICAgICBwYXJzZXIob3B0aW9ucykuZG9jdW1lbnQoKS53cml0ZShwcmVwcm9jZXNzb3IoKSh2YWx1ZSwgZW5jb2RpbmcsIHRydWUpKVxuICAgIClcbiAgKVxufVxuXG4vLyBOb3RlIHRoaXMgY29tcGlsZXIgb25seSB1bmRlcnN0YW5kIGNvbXBsZXRlIGJ1ZmZlcmluZywgbm90IHN0cmVhbWluZy5cbmZ1bmN0aW9uIGNvbXBpbGVyKG9wdGlvbnMpIHtcbiAgdmFyIHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgY29uZmlnID0gY29uZmlndXJlKFxuICAgIHtcbiAgICAgIGNhbkNvbnRhaW5Fb2xzOiBbXG4gICAgICAgICdlbXBoYXNpcycsXG4gICAgICAgICdmcmFnbWVudCcsXG4gICAgICAgICdoZWFkaW5nJyxcbiAgICAgICAgJ3BhcmFncmFwaCcsXG4gICAgICAgICdzdHJvbmcnXG4gICAgICBdLFxuXG4gICAgICBlbnRlcjoge1xuICAgICAgICBhdXRvbGluazogb3BlbmVyKGxpbmspLFxuICAgICAgICBhdXRvbGlua1Byb3RvY29sOiBvbmVudGVyZGF0YSxcbiAgICAgICAgYXV0b2xpbmtFbWFpbDogb25lbnRlcmRhdGEsXG4gICAgICAgIGF0eEhlYWRpbmc6IG9wZW5lcihoZWFkaW5nKSxcbiAgICAgICAgYmxvY2tRdW90ZTogb3BlbmVyKGJsb2NrUXVvdGUpLFxuICAgICAgICBjaGFyYWN0ZXJFc2NhcGU6IG9uZW50ZXJkYXRhLFxuICAgICAgICBjaGFyYWN0ZXJSZWZlcmVuY2U6IG9uZW50ZXJkYXRhLFxuICAgICAgICBjb2RlRmVuY2VkOiBvcGVuZXIoY29kZUZsb3cpLFxuICAgICAgICBjb2RlRmVuY2VkRmVuY2VJbmZvOiBidWZmZXIsXG4gICAgICAgIGNvZGVGZW5jZWRGZW5jZU1ldGE6IGJ1ZmZlcixcbiAgICAgICAgY29kZUluZGVudGVkOiBvcGVuZXIoY29kZUZsb3csIGJ1ZmZlciksXG4gICAgICAgIGNvZGVUZXh0OiBvcGVuZXIoY29kZVRleHQsIGJ1ZmZlciksXG4gICAgICAgIGNvZGVUZXh0RGF0YTogb25lbnRlcmRhdGEsXG4gICAgICAgIGRhdGE6IG9uZW50ZXJkYXRhLFxuICAgICAgICBjb2RlRmxvd1ZhbHVlOiBvbmVudGVyZGF0YSxcbiAgICAgICAgZGVmaW5pdGlvbjogb3BlbmVyKGRlZmluaXRpb24pLFxuICAgICAgICBkZWZpbml0aW9uRGVzdGluYXRpb25TdHJpbmc6IGJ1ZmZlcixcbiAgICAgICAgZGVmaW5pdGlvbkxhYmVsU3RyaW5nOiBidWZmZXIsXG4gICAgICAgIGRlZmluaXRpb25UaXRsZVN0cmluZzogYnVmZmVyLFxuICAgICAgICBlbXBoYXNpczogb3BlbmVyKGVtcGhhc2lzKSxcbiAgICAgICAgaGFyZEJyZWFrRXNjYXBlOiBvcGVuZXIoaGFyZEJyZWFrKSxcbiAgICAgICAgaGFyZEJyZWFrVHJhaWxpbmc6IG9wZW5lcihoYXJkQnJlYWspLFxuICAgICAgICBodG1sRmxvdzogb3BlbmVyKGh0bWwsIGJ1ZmZlciksXG4gICAgICAgIGh0bWxGbG93RGF0YTogb25lbnRlcmRhdGEsXG4gICAgICAgIGh0bWxUZXh0OiBvcGVuZXIoaHRtbCwgYnVmZmVyKSxcbiAgICAgICAgaHRtbFRleHREYXRhOiBvbmVudGVyZGF0YSxcbiAgICAgICAgaW1hZ2U6IG9wZW5lcihpbWFnZSksXG4gICAgICAgIGxhYmVsOiBidWZmZXIsXG4gICAgICAgIGxpbms6IG9wZW5lcihsaW5rKSxcbiAgICAgICAgbGlzdEl0ZW06IG9wZW5lcihsaXN0SXRlbSksXG4gICAgICAgIGxpc3RJdGVtVmFsdWU6IG9uZW50ZXJsaXN0aXRlbXZhbHVlLFxuICAgICAgICBsaXN0T3JkZXJlZDogb3BlbmVyKGxpc3QsIG9uZW50ZXJsaXN0b3JkZXJlZCksXG4gICAgICAgIGxpc3RVbm9yZGVyZWQ6IG9wZW5lcihsaXN0KSxcbiAgICAgICAgcGFyYWdyYXBoOiBvcGVuZXIocGFyYWdyYXBoKSxcbiAgICAgICAgcmVmZXJlbmNlOiBvbmVudGVycmVmZXJlbmNlLFxuICAgICAgICByZWZlcmVuY2VTdHJpbmc6IGJ1ZmZlcixcbiAgICAgICAgcmVzb3VyY2VEZXN0aW5hdGlvblN0cmluZzogYnVmZmVyLFxuICAgICAgICByZXNvdXJjZVRpdGxlU3RyaW5nOiBidWZmZXIsXG4gICAgICAgIHNldGV4dEhlYWRpbmc6IG9wZW5lcihoZWFkaW5nKSxcbiAgICAgICAgc3Ryb25nOiBvcGVuZXIoc3Ryb25nKSxcbiAgICAgICAgdGhlbWF0aWNCcmVhazogb3BlbmVyKHRoZW1hdGljQnJlYWspXG4gICAgICB9LFxuXG4gICAgICBleGl0OiB7XG4gICAgICAgIGF0eEhlYWRpbmc6IGNsb3NlcigpLFxuICAgICAgICBhdHhIZWFkaW5nU2VxdWVuY2U6IG9uZXhpdGF0eGhlYWRpbmdzZXF1ZW5jZSxcbiAgICAgICAgYXV0b2xpbms6IGNsb3NlcigpLFxuICAgICAgICBhdXRvbGlua0VtYWlsOiBvbmV4aXRhdXRvbGlua2VtYWlsLFxuICAgICAgICBhdXRvbGlua1Byb3RvY29sOiBvbmV4aXRhdXRvbGlua3Byb3RvY29sLFxuICAgICAgICBibG9ja1F1b3RlOiBjbG9zZXIoKSxcbiAgICAgICAgY2hhcmFjdGVyRXNjYXBlVmFsdWU6IG9uZXhpdGRhdGEsXG4gICAgICAgIGNoYXJhY3RlclJlZmVyZW5jZU1hcmtlckhleGFkZWNpbWFsOiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2VtYXJrZXIsXG4gICAgICAgIGNoYXJhY3RlclJlZmVyZW5jZU1hcmtlck51bWVyaWM6IG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZW1hcmtlcixcbiAgICAgICAgY2hhcmFjdGVyUmVmZXJlbmNlVmFsdWU6IG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZXZhbHVlLFxuICAgICAgICBjb2RlRmVuY2VkOiBjbG9zZXIob25leGl0Y29kZWZlbmNlZCksXG4gICAgICAgIGNvZGVGZW5jZWRGZW5jZTogb25leGl0Y29kZWZlbmNlZGZlbmNlLFxuICAgICAgICBjb2RlRmVuY2VkRmVuY2VJbmZvOiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VpbmZvLFxuICAgICAgICBjb2RlRmVuY2VkRmVuY2VNZXRhOiBvbmV4aXRjb2RlZmVuY2VkZmVuY2VtZXRhLFxuICAgICAgICBjb2RlRmxvd1ZhbHVlOiBvbmV4aXRkYXRhLFxuICAgICAgICBjb2RlSW5kZW50ZWQ6IGNsb3NlcihvbmV4aXRjb2RlaW5kZW50ZWQpLFxuICAgICAgICBjb2RlVGV4dDogY2xvc2VyKG9uZXhpdGNvZGV0ZXh0KSxcbiAgICAgICAgY29kZVRleHREYXRhOiBvbmV4aXRkYXRhLFxuICAgICAgICBkYXRhOiBvbmV4aXRkYXRhLFxuICAgICAgICBkZWZpbml0aW9uOiBjbG9zZXIoKSxcbiAgICAgICAgZGVmaW5pdGlvbkRlc3RpbmF0aW9uU3RyaW5nOiBvbmV4aXRkZWZpbml0aW9uZGVzdGluYXRpb25zdHJpbmcsXG4gICAgICAgIGRlZmluaXRpb25MYWJlbFN0cmluZzogb25leGl0ZGVmaW5pdGlvbmxhYmVsc3RyaW5nLFxuICAgICAgICBkZWZpbml0aW9uVGl0bGVTdHJpbmc6IG9uZXhpdGRlZmluaXRpb250aXRsZXN0cmluZyxcbiAgICAgICAgZW1waGFzaXM6IGNsb3NlcigpLFxuICAgICAgICBoYXJkQnJlYWtFc2NhcGU6IGNsb3NlcihvbmV4aXRoYXJkYnJlYWspLFxuICAgICAgICBoYXJkQnJlYWtUcmFpbGluZzogY2xvc2VyKG9uZXhpdGhhcmRicmVhayksXG4gICAgICAgIGh0bWxGbG93OiBjbG9zZXIob25leGl0aHRtbGZsb3cpLFxuICAgICAgICBodG1sRmxvd0RhdGE6IG9uZXhpdGRhdGEsXG4gICAgICAgIGh0bWxUZXh0OiBjbG9zZXIob25leGl0aHRtbHRleHQpLFxuICAgICAgICBodG1sVGV4dERhdGE6IG9uZXhpdGRhdGEsXG4gICAgICAgIGltYWdlOiBjbG9zZXIob25leGl0aW1hZ2UpLFxuICAgICAgICBsYWJlbDogb25leGl0bGFiZWwsXG4gICAgICAgIGxhYmVsVGV4dDogb25leGl0bGFiZWx0ZXh0LFxuICAgICAgICBsaW5lRW5kaW5nOiBvbmV4aXRsaW5lZW5kaW5nLFxuICAgICAgICBsaW5rOiBjbG9zZXIob25leGl0bGluayksXG4gICAgICAgIGxpc3RJdGVtOiBjbG9zZXIoKSxcbiAgICAgICAgbGlzdE9yZGVyZWQ6IGNsb3NlcigpLFxuICAgICAgICBsaXN0VW5vcmRlcmVkOiBjbG9zZXIoKSxcbiAgICAgICAgcGFyYWdyYXBoOiBjbG9zZXIoKSxcbiAgICAgICAgcmVmZXJlbmNlU3RyaW5nOiBvbmV4aXRyZWZlcmVuY2VzdHJpbmcsXG4gICAgICAgIHJlc291cmNlRGVzdGluYXRpb25TdHJpbmc6IG9uZXhpdHJlc291cmNlZGVzdGluYXRpb25zdHJpbmcsXG4gICAgICAgIHJlc291cmNlVGl0bGVTdHJpbmc6IG9uZXhpdHJlc291cmNldGl0bGVzdHJpbmcsXG4gICAgICAgIHJlc291cmNlOiBvbmV4aXRyZXNvdXJjZSxcbiAgICAgICAgc2V0ZXh0SGVhZGluZzogY2xvc2VyKG9uZXhpdHNldGV4dGhlYWRpbmcpLFxuICAgICAgICBzZXRleHRIZWFkaW5nTGluZVNlcXVlbmNlOiBvbmV4aXRzZXRleHRoZWFkaW5nbGluZXNlcXVlbmNlLFxuICAgICAgICBzZXRleHRIZWFkaW5nVGV4dDogb25leGl0c2V0ZXh0aGVhZGluZ3RleHQsXG4gICAgICAgIHN0cm9uZzogY2xvc2VyKCksXG4gICAgICAgIHRoZW1hdGljQnJlYWs6IGNsb3NlcigpXG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldHRpbmdzLm1kYXN0RXh0ZW5zaW9ucyB8fCBbXVxuICApXG5cbiAgdmFyIGRhdGEgPSB7fVxuXG4gIHJldHVybiBjb21waWxlXG5cbiAgZnVuY3Rpb24gY29tcGlsZShldmVudHMpIHtcbiAgICB2YXIgc3RhY2sgPSBbe3R5cGU6ICdyb290JywgY2hpbGRyZW46IFtdfV1cbiAgICB2YXIgdG9rZW5TdGFjayA9IFtdXG4gICAgdmFyIGxpc3RTdGFjayA9IFtdXG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgaGFuZGxlclxuICAgIHZhciBsaXN0U3RhcnRcblxuICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgc3RhY2s6IHN0YWNrLFxuICAgICAgdG9rZW5TdGFjazogdG9rZW5TdGFjayxcbiAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgZW50ZXI6IGVudGVyLFxuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgcmVzdW1lOiByZXN1bWUsXG4gICAgICBzZXREYXRhOiBzZXREYXRhLFxuICAgICAgZ2V0RGF0YTogZ2V0RGF0YVxuICAgIH1cblxuICAgIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgLy8gV2UgcHJlcHJvY2VzcyBsaXN0cyB0byBhZGQgYGxpc3RJdGVtYCB0b2tlbnMsIGFuZCB0byBpbmZlciB3aGV0aGVyXG4gICAgICAvLyBpdGVtcyB0aGUgbGlzdCBpdHNlbGYgYXJlIHNwcmVhZCBvdXQuXG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ2xpc3RPcmRlcmVkJyB8fFxuICAgICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgPT09ICdsaXN0VW5vcmRlcmVkJ1xuICAgICAgKSB7XG4gICAgICAgIGlmIChldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgbGlzdFN0YWNrLnB1c2goaW5kZXgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGlzdFN0YXJ0ID0gbGlzdFN0YWNrLnBvcChpbmRleClcbiAgICAgICAgICBpbmRleCA9IHByZXBhcmVMaXN0KGV2ZW50cywgbGlzdFN0YXJ0LCBpbmRleClcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGluZGV4ID0gLTFcblxuICAgIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgaGFuZGxlciA9IGNvbmZpZ1tldmVudHNbaW5kZXhdWzBdXVxuXG4gICAgICBpZiAob3duLmNhbGwoaGFuZGxlciwgZXZlbnRzW2luZGV4XVsxXS50eXBlKSkge1xuICAgICAgICBoYW5kbGVyW2V2ZW50c1tpbmRleF1bMV0udHlwZV0uY2FsbChcbiAgICAgICAgICBhc3NpZ24oe3NsaWNlU2VyaWFsaXplOiBldmVudHNbaW5kZXhdWzJdLnNsaWNlU2VyaWFsaXplfSwgY29udGV4dCksXG4gICAgICAgICAgZXZlbnRzW2luZGV4XVsxXVxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRva2VuU3RhY2subGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgY2xvc2UgZG9jdW1lbnQsIGEgdG9rZW4gKGAnICtcbiAgICAgICAgICB0b2tlblN0YWNrW3Rva2VuU3RhY2subGVuZ3RoIC0gMV0udHlwZSArXG4gICAgICAgICAgJ2AsICcgK1xuICAgICAgICAgIHN0cmluZ2lmeVBvc2l0aW9uKHtcbiAgICAgICAgICAgIHN0YXJ0OiB0b2tlblN0YWNrW3Rva2VuU3RhY2subGVuZ3RoIC0gMV0uc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHRva2VuU3RhY2tbdG9rZW5TdGFjay5sZW5ndGggLSAxXS5lbmRcbiAgICAgICAgICB9KSArXG4gICAgICAgICAgJykgaXMgc3RpbGwgb3BlbidcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBGaWd1cmUgb3V0IGByb290YCBwb3NpdGlvbi5cbiAgICBzdGFja1swXS5wb3NpdGlvbiA9IHtcbiAgICAgIHN0YXJ0OiBwb2ludChcbiAgICAgICAgZXZlbnRzLmxlbmd0aCA/IGV2ZW50c1swXVsxXS5zdGFydCA6IHtsaW5lOiAxLCBjb2x1bW46IDEsIG9mZnNldDogMH1cbiAgICAgICksXG5cbiAgICAgIGVuZDogcG9pbnQoXG4gICAgICAgIGV2ZW50cy5sZW5ndGhcbiAgICAgICAgICA/IGV2ZW50c1tldmVudHMubGVuZ3RoIC0gMl1bMV0uZW5kXG4gICAgICAgICAgOiB7bGluZTogMSwgY29sdW1uOiAxLCBvZmZzZXQ6IDB9XG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YWNrWzBdXG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlTGlzdChldmVudHMsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBzdGFydCAtIDFcbiAgICB2YXIgY29udGFpbmVyQmFsYW5jZSA9IC0xXG4gICAgdmFyIGxpc3RTcHJlYWQgPSBmYWxzZVxuICAgIHZhciBsaXN0SXRlbVxuICAgIHZhciB0YWlsSW5kZXhcbiAgICB2YXIgbGluZUluZGV4XG4gICAgdmFyIHRhaWxFdmVudFxuICAgIHZhciBldmVudFxuICAgIHZhciBmaXJzdEJsYW5rTGluZUluZGV4XG4gICAgdmFyIGF0TWFya2VyXG5cbiAgICB3aGlsZSAoKytpbmRleCA8PSBsZW5ndGgpIHtcbiAgICAgIGV2ZW50ID0gZXZlbnRzW2luZGV4XVxuXG4gICAgICBpZiAoXG4gICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdsaXN0VW5vcmRlcmVkJyB8fFxuICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGlzdE9yZGVyZWQnIHx8XG4gICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdibG9ja1F1b3RlJ1xuICAgICAgKSB7XG4gICAgICAgIGlmIChldmVudFswXSA9PT0gJ2VudGVyJykge1xuICAgICAgICAgIGNvbnRhaW5lckJhbGFuY2UrK1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRhaW5lckJhbGFuY2UtLVxuICAgICAgICB9XG5cbiAgICAgICAgYXRNYXJrZXIgPSB1bmRlZmluZWRcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnRbMV0udHlwZSA9PT0gJ2xpbmVFbmRpbmdCbGFuaycpIHtcbiAgICAgICAgaWYgKGV2ZW50WzBdID09PSAnZW50ZXInKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgbGlzdEl0ZW0gJiZcbiAgICAgICAgICAgICFhdE1hcmtlciAmJlxuICAgICAgICAgICAgIWNvbnRhaW5lckJhbGFuY2UgJiZcbiAgICAgICAgICAgICFmaXJzdEJsYW5rTGluZUluZGV4XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBmaXJzdEJsYW5rTGluZUluZGV4ID0gaW5kZXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdE1hcmtlciA9IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGluZVByZWZpeCcgfHxcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RJdGVtVmFsdWUnIHx8XG4gICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdsaXN0SXRlbU1hcmtlcicgfHxcbiAgICAgICAgZXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RJdGVtUHJlZml4JyB8fFxuICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGlzdEl0ZW1QcmVmaXhXaGl0ZXNwYWNlJ1xuICAgICAgKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXRNYXJrZXIgPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICAoIWNvbnRhaW5lckJhbGFuY2UgJiZcbiAgICAgICAgICBldmVudFswXSA9PT0gJ2VudGVyJyAmJlxuICAgICAgICAgIGV2ZW50WzFdLnR5cGUgPT09ICdsaXN0SXRlbVByZWZpeCcpIHx8XG4gICAgICAgIChjb250YWluZXJCYWxhbmNlID09PSAtMSAmJlxuICAgICAgICAgIGV2ZW50WzBdID09PSAnZXhpdCcgJiZcbiAgICAgICAgICAoZXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RVbm9yZGVyZWQnIHx8XG4gICAgICAgICAgICBldmVudFsxXS50eXBlID09PSAnbGlzdE9yZGVyZWQnKSlcbiAgICAgICkge1xuICAgICAgICBpZiAobGlzdEl0ZW0pIHtcbiAgICAgICAgICB0YWlsSW5kZXggPSBpbmRleFxuICAgICAgICAgIGxpbmVJbmRleCA9IHVuZGVmaW5lZFxuXG4gICAgICAgICAgd2hpbGUgKHRhaWxJbmRleC0tKSB7XG4gICAgICAgICAgICB0YWlsRXZlbnQgPSBldmVudHNbdGFpbEluZGV4XVxuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSAnbGluZUVuZGluZycgfHxcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09ICdsaW5lRW5kaW5nQmxhbmsnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKHRhaWxFdmVudFswXSA9PT0gJ2V4aXQnKSBjb250aW51ZVxuXG4gICAgICAgICAgICAgIGlmIChsaW5lSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBldmVudHNbbGluZUluZGV4XVsxXS50eXBlID0gJ2xpbmVFbmRpbmdCbGFuaydcbiAgICAgICAgICAgICAgICBsaXN0U3ByZWFkID0gdHJ1ZVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPSAnbGluZUVuZGluZydcbiAgICAgICAgICAgICAgbGluZUluZGV4ID0gdGFpbEluZGV4XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICB0YWlsRXZlbnRbMV0udHlwZSA9PT0gJ2xpbmVQcmVmaXgnIHx8XG4gICAgICAgICAgICAgIHRhaWxFdmVudFsxXS50eXBlID09PSAnYmxvY2tRdW90ZVByZWZpeCcgfHxcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09ICdibG9ja1F1b3RlUHJlZml4V2hpdGVzcGFjZScgfHxcbiAgICAgICAgICAgICAgdGFpbEV2ZW50WzFdLnR5cGUgPT09ICdibG9ja1F1b3RlTWFya2VyJyB8fFxuICAgICAgICAgICAgICB0YWlsRXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RJdGVtSW5kZW50J1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIEVtcHR5XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGZpcnN0QmxhbmtMaW5lSW5kZXggJiZcbiAgICAgICAgICAgICghbGluZUluZGV4IHx8IGZpcnN0QmxhbmtMaW5lSW5kZXggPCBsaW5lSW5kZXgpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBsaXN0SXRlbS5fc3ByZWFkID0gdHJ1ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEZpeCBwb3NpdGlvbi5cbiAgICAgICAgICBsaXN0SXRlbS5lbmQgPSBwb2ludChcbiAgICAgICAgICAgIGxpbmVJbmRleCA/IGV2ZW50c1tsaW5lSW5kZXhdWzFdLnN0YXJ0IDogZXZlbnRbMV0uZW5kXG4gICAgICAgICAgKVxuXG4gICAgICAgICAgZXZlbnRzLnNwbGljZShsaW5lSW5kZXggfHwgaW5kZXgsIDAsIFsnZXhpdCcsIGxpc3RJdGVtLCBldmVudFsyXV0pXG4gICAgICAgICAgaW5kZXgrK1xuICAgICAgICAgIGxlbmd0aCsrXG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgbGlzdCBpdGVtLlxuICAgICAgICBpZiAoZXZlbnRbMV0udHlwZSA9PT0gJ2xpc3RJdGVtUHJlZml4Jykge1xuICAgICAgICAgIGxpc3RJdGVtID0ge1xuICAgICAgICAgICAgdHlwZTogJ2xpc3RJdGVtJyxcbiAgICAgICAgICAgIF9zcHJlYWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3RhcnQ6IHBvaW50KGV2ZW50WzFdLnN0YXJ0KVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGV2ZW50cy5zcGxpY2UoaW5kZXgsIDAsIFsnZW50ZXInLCBsaXN0SXRlbSwgZXZlbnRbMl1dKVxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgICBsZW5ndGgrK1xuICAgICAgICAgIGZpcnN0QmxhbmtMaW5lSW5kZXggPSB1bmRlZmluZWRcbiAgICAgICAgICBhdE1hcmtlciA9IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGV2ZW50c1tzdGFydF1bMV0uX3NwcmVhZCA9IGxpc3RTcHJlYWRcbiAgICByZXR1cm4gbGVuZ3RoXG4gIH1cblxuICBmdW5jdGlvbiBzZXREYXRhKGtleSwgdmFsdWUpIHtcbiAgICBkYXRhW2tleV0gPSB2YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGF0YShrZXkpIHtcbiAgICByZXR1cm4gZGF0YVtrZXldXG4gIH1cblxuICBmdW5jdGlvbiBwb2ludChkKSB7XG4gICAgcmV0dXJuIHtsaW5lOiBkLmxpbmUsIGNvbHVtbjogZC5jb2x1bW4sIG9mZnNldDogZC5vZmZzZXR9XG4gIH1cblxuICBmdW5jdGlvbiBvcGVuZXIoY3JlYXRlLCBhbmQpIHtcbiAgICByZXR1cm4gb3BlblxuXG4gICAgZnVuY3Rpb24gb3Blbih0b2tlbikge1xuICAgICAgZW50ZXIuY2FsbCh0aGlzLCBjcmVhdGUodG9rZW4pLCB0b2tlbilcbiAgICAgIGlmIChhbmQpIGFuZC5jYWxsKHRoaXMsIHRva2VuKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1ZmZlcigpIHtcbiAgICB0aGlzLnN0YWNrLnB1c2goe3R5cGU6ICdmcmFnbWVudCcsIGNoaWxkcmVuOiBbXX0pXG4gIH1cblxuICBmdW5jdGlvbiBlbnRlcihub2RlLCB0b2tlbikge1xuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5jaGlsZHJlbi5wdXNoKG5vZGUpXG4gICAgdGhpcy5zdGFjay5wdXNoKG5vZGUpXG4gICAgdGhpcy50b2tlblN0YWNrLnB1c2godG9rZW4pXG4gICAgbm9kZS5wb3NpdGlvbiA9IHtzdGFydDogcG9pbnQodG9rZW4uc3RhcnQpfVxuICAgIHJldHVybiBub2RlXG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZXIoYW5kKSB7XG4gICAgcmV0dXJuIGNsb3NlXG5cbiAgICBmdW5jdGlvbiBjbG9zZSh0b2tlbikge1xuICAgICAgaWYgKGFuZCkgYW5kLmNhbGwodGhpcywgdG9rZW4pXG4gICAgICBleGl0LmNhbGwodGhpcywgdG9rZW4pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZXhpdCh0b2tlbikge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFjay5wb3AoKVxuICAgIHZhciBvcGVuID0gdGhpcy50b2tlblN0YWNrLnBvcCgpXG5cbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBjbG9zZSBgJyArXG4gICAgICAgICAgdG9rZW4udHlwZSArXG4gICAgICAgICAgJ2AgKCcgK1xuICAgICAgICAgIHN0cmluZ2lmeVBvc2l0aW9uKHtzdGFydDogdG9rZW4uc3RhcnQsIGVuZDogdG9rZW4uZW5kfSkgK1xuICAgICAgICAgICcpOiBpdOKAmXMgbm90IG9wZW4nXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChvcGVuLnR5cGUgIT09IHRva2VuLnR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCBjbG9zZSBgJyArXG4gICAgICAgICAgdG9rZW4udHlwZSArXG4gICAgICAgICAgJ2AgKCcgK1xuICAgICAgICAgIHN0cmluZ2lmeVBvc2l0aW9uKHtzdGFydDogdG9rZW4uc3RhcnQsIGVuZDogdG9rZW4uZW5kfSkgK1xuICAgICAgICAgICcpOiBhIGRpZmZlcmVudCB0b2tlbiAoYCcgK1xuICAgICAgICAgIG9wZW4udHlwZSArXG4gICAgICAgICAgJ2AsICcgK1xuICAgICAgICAgIHN0cmluZ2lmeVBvc2l0aW9uKHtzdGFydDogb3Blbi5zdGFydCwgZW5kOiBvcGVuLmVuZH0pICtcbiAgICAgICAgICAnKSBpcyBvcGVuJ1xuICAgICAgKVxuICAgIH1cblxuICAgIG5vZGUucG9zaXRpb24uZW5kID0gcG9pbnQodG9rZW4uZW5kKVxuICAgIHJldHVybiBub2RlXG4gIH1cblxuICBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHRoaXMuc3RhY2sucG9wKCkpXG4gIH1cblxuICAvL1xuICAvLyBIYW5kbGVycy5cbiAgLy9cblxuICBmdW5jdGlvbiBvbmVudGVybGlzdG9yZGVyZWQoKSB7XG4gICAgc2V0RGF0YSgnZXhwZWN0aW5nRmlyc3RMaXN0SXRlbVZhbHVlJywgdHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW50ZXJsaXN0aXRlbXZhbHVlKHRva2VuKSB7XG4gICAgaWYgKGdldERhdGEoJ2V4cGVjdGluZ0ZpcnN0TGlzdEl0ZW1WYWx1ZScpKSB7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMl0uc3RhcnQgPSBwYXJzZUludChcbiAgICAgICAgdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbiksXG4gICAgICAgIDEwXG4gICAgICApXG5cbiAgICAgIHNldERhdGEoJ2V4cGVjdGluZ0ZpcnN0TGlzdEl0ZW1WYWx1ZScpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0Y29kZWZlbmNlZGZlbmNlaW5mbygpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0ubGFuZyA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGVmZW5jZWRmZW5jZW1ldGEoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdLm1ldGEgPSBkYXRhXG4gIH1cblxuICBmdW5jdGlvbiBvbmV4aXRjb2RlZmVuY2VkZmVuY2UoKSB7XG4gICAgLy8gRXhpdCBpZiB0aGlzIGlzIHRoZSBjbG9zaW5nIGZlbmNlLlxuICAgIGlmIChnZXREYXRhKCdmbG93Q29kZUluc2lkZScpKSByZXR1cm5cbiAgICB0aGlzLmJ1ZmZlcigpXG4gICAgc2V0RGF0YSgnZmxvd0NvZGVJbnNpZGUnLCB0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0Y29kZWZlbmNlZCgpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0udmFsdWUgPSBkYXRhLnJlcGxhY2UoXG4gICAgICAvXihcXHI/XFxufFxccil8KFxccj9cXG58XFxyKSQvZyxcbiAgICAgICcnXG4gICAgKVxuXG4gICAgc2V0RGF0YSgnZmxvd0NvZGVJbnNpZGUnKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0Y29kZWluZGVudGVkKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGRlZmluaXRpb25sYWJlbHN0cmluZyh0b2tlbikge1xuICAgIC8vIERpc2NhcmQgbGFiZWwsIHVzZSB0aGUgc291cmNlIGNvbnRlbnQgaW5zdGVhZC5cbiAgICB2YXIgbGFiZWwgPSB0aGlzLnJlc3VtZSgpXG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdLmxhYmVsID0gbGFiZWxcbiAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0uaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgICkudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0ZGVmaW5pdGlvbnRpdGxlc3RyaW5nKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS50aXRsZSA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGRlZmluaXRpb25kZXN0aW5hdGlvbnN0cmluZygpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0udXJsID0gZGF0YVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0YXR4aGVhZGluZ3NlcXVlbmNlKHRva2VuKSB7XG4gICAgaWYgKCF0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0uZGVwdGgpIHtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5kZXB0aCA9IHRoaXMuc2xpY2VTZXJpYWxpemUoXG4gICAgICAgIHRva2VuXG4gICAgICApLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdHNldGV4dGhlYWRpbmd0ZXh0KCkge1xuICAgIHNldERhdGEoJ3NldGV4dEhlYWRpbmdTbHVycExpbmVFbmRpbmcnLCB0cnVlKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0c2V0ZXh0aGVhZGluZ2xpbmVzZXF1ZW5jZSh0b2tlbikge1xuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5kZXB0aCA9XG4gICAgICB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKS5jaGFyQ29kZUF0KDApID09PSA2MSA/IDEgOiAyXG4gIH1cblxuICBmdW5jdGlvbiBvbmV4aXRzZXRleHRoZWFkaW5nKCkge1xuICAgIHNldERhdGEoJ3NldGV4dEhlYWRpbmdTbHVycExpbmVFbmRpbmcnKVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbnRlcmRhdGEodG9rZW4pIHtcbiAgICB2YXIgc2libGluZ3MgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0uY2hpbGRyZW5cbiAgICB2YXIgdGFpbCA9IHNpYmxpbmdzW3NpYmxpbmdzLmxlbmd0aCAtIDFdXG5cbiAgICBpZiAoIXRhaWwgfHwgdGFpbC50eXBlICE9PSAndGV4dCcpIHtcbiAgICAgIC8vIEFkZCBhIG5ldyB0ZXh0IG5vZGUuXG4gICAgICB0YWlsID0gdGV4dCgpXG4gICAgICB0YWlsLnBvc2l0aW9uID0ge3N0YXJ0OiBwb2ludCh0b2tlbi5zdGFydCl9XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0uY2hpbGRyZW4ucHVzaCh0YWlsKVxuICAgIH1cblxuICAgIHRoaXMuc3RhY2sucHVzaCh0YWlsKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0ZGF0YSh0b2tlbikge1xuICAgIHZhciB0YWlsID0gdGhpcy5zdGFjay5wb3AoKVxuICAgIHRhaWwudmFsdWUgKz0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbilcbiAgICB0YWlsLnBvc2l0aW9uLmVuZCA9IHBvaW50KHRva2VuLmVuZClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGxpbmVlbmRpbmcodG9rZW4pIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuXG4gICAgLy8gSWYgd2XigJlyZSBhdCBhIGhhcmQgYnJlYWssIGluY2x1ZGUgdGhlIGxpbmUgZW5kaW5nIGluIHRoZXJlLlxuICAgIGlmIChnZXREYXRhKCdhdEhhcmRCcmVhaycpKSB7XG4gICAgICBjb250ZXh0LmNoaWxkcmVuW2NvbnRleHQuY2hpbGRyZW4ubGVuZ3RoIC0gMV0ucG9zaXRpb24uZW5kID0gcG9pbnQoXG4gICAgICAgIHRva2VuLmVuZFxuICAgICAgKVxuXG4gICAgICBzZXREYXRhKCdhdEhhcmRCcmVhaycpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAhZ2V0RGF0YSgnc2V0ZXh0SGVhZGluZ1NsdXJwTGluZUVuZGluZycpICYmXG4gICAgICBjb25maWcuY2FuQ29udGFpbkVvbHMuaW5kZXhPZihjb250ZXh0LnR5cGUpID4gLTFcbiAgICApIHtcbiAgICAgIG9uZW50ZXJkYXRhLmNhbGwodGhpcywgdG9rZW4pXG4gICAgICBvbmV4aXRkYXRhLmNhbGwodGhpcywgdG9rZW4pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0aGFyZGJyZWFrKCkge1xuICAgIHNldERhdGEoJ2F0SGFyZEJyZWFrJywgdHJ1ZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGh0bWxmbG93KCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGh0bWx0ZXh0KCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGNvZGV0ZXh0KCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5yZXN1bWUoKVxuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGxpbmsoKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cblxuICAgIC8vIFRvIGRvOiBjbGVhbi5cbiAgICBpZiAoZ2V0RGF0YSgnaW5SZWZlcmVuY2UnKSkge1xuICAgICAgY29udGV4dC50eXBlICs9ICdSZWZlcmVuY2UnXG4gICAgICBjb250ZXh0LnJlZmVyZW5jZVR5cGUgPSBnZXREYXRhKCdyZWZlcmVuY2VUeXBlJykgfHwgJ3Nob3J0Y3V0J1xuICAgICAgZGVsZXRlIGNvbnRleHQudXJsXG4gICAgICBkZWxldGUgY29udGV4dC50aXRsZVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgY29udGV4dC5pZGVudGlmaWVyXG4gICAgICBkZWxldGUgY29udGV4dC5sYWJlbFxuICAgICAgZGVsZXRlIGNvbnRleHQucmVmZXJlbmNlVHlwZVxuICAgIH1cblxuICAgIHNldERhdGEoJ3JlZmVyZW5jZVR5cGUnKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0aW1hZ2UoKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV1cblxuICAgIC8vIFRvIGRvOiBjbGVhbi5cbiAgICBpZiAoZ2V0RGF0YSgnaW5SZWZlcmVuY2UnKSkge1xuICAgICAgY29udGV4dC50eXBlICs9ICdSZWZlcmVuY2UnXG4gICAgICBjb250ZXh0LnJlZmVyZW5jZVR5cGUgPSBnZXREYXRhKCdyZWZlcmVuY2VUeXBlJykgfHwgJ3Nob3J0Y3V0J1xuICAgICAgZGVsZXRlIGNvbnRleHQudXJsXG4gICAgICBkZWxldGUgY29udGV4dC50aXRsZVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgY29udGV4dC5pZGVudGlmaWVyXG4gICAgICBkZWxldGUgY29udGV4dC5sYWJlbFxuICAgICAgZGVsZXRlIGNvbnRleHQucmVmZXJlbmNlVHlwZVxuICAgIH1cblxuICAgIHNldERhdGEoJ3JlZmVyZW5jZVR5cGUnKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0bGFiZWx0ZXh0KHRva2VuKSB7XG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDJdLmlkZW50aWZpZXIgPSBub3JtYWxpemVJZGVudGlmaWVyKFxuICAgICAgdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbilcbiAgICApLnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGxhYmVsKCkge1xuICAgIHZhciBmcmFnbWVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXVxuICAgIHZhciB2YWx1ZSA9IHRoaXMucmVzdW1lKClcblxuICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5sYWJlbCA9IHZhbHVlXG5cbiAgICAvLyBBc3N1bWUgYSByZWZlcmVuY2UuXG4gICAgc2V0RGF0YSgnaW5SZWZlcmVuY2UnLCB0cnVlKVxuXG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS50eXBlID09PSAnbGluaycpIHtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5jaGlsZHJlbiA9IGZyYWdtZW50LmNoaWxkcmVuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5hbHQgPSB2YWx1ZVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdHJlc291cmNlZGVzdGluYXRpb25zdHJpbmcoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdLnVybCA9IGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdHJlc291cmNldGl0bGVzdHJpbmcoKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdLnRpdGxlID0gZGF0YVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0cmVzb3VyY2UoKSB7XG4gICAgc2V0RGF0YSgnaW5SZWZlcmVuY2UnKVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbnRlcnJlZmVyZW5jZSgpIHtcbiAgICBzZXREYXRhKCdyZWZlcmVuY2VUeXBlJywgJ2NvbGxhcHNlZCcpXG4gIH1cblxuICBmdW5jdGlvbiBvbmV4aXRyZWZlcmVuY2VzdHJpbmcodG9rZW4pIHtcbiAgICB2YXIgbGFiZWwgPSB0aGlzLnJlc3VtZSgpXG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdLmxhYmVsID0gbGFiZWxcbiAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0uaWRlbnRpZmllciA9IG5vcm1hbGl6ZUlkZW50aWZpZXIoXG4gICAgICB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgICkudG9Mb3dlckNhc2UoKVxuICAgIHNldERhdGEoJ3JlZmVyZW5jZVR5cGUnLCAnZnVsbCcpXG4gIH1cblxuICBmdW5jdGlvbiBvbmV4aXRjaGFyYWN0ZXJyZWZlcmVuY2VtYXJrZXIodG9rZW4pIHtcbiAgICBzZXREYXRhKCdjaGFyYWN0ZXJSZWZlcmVuY2VUeXBlJywgdG9rZW4udHlwZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGNoYXJhY3RlcnJlZmVyZW5jZXZhbHVlKHRva2VuKSB7XG4gICAgdmFyIGRhdGEgPSB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICAgIHZhciB0eXBlID0gZ2V0RGF0YSgnY2hhcmFjdGVyUmVmZXJlbmNlVHlwZScpXG4gICAgdmFyIHZhbHVlXG4gICAgdmFyIHRhaWxcblxuICAgIGlmICh0eXBlKSB7XG4gICAgICB2YWx1ZSA9IHNhZmVGcm9tSW50KFxuICAgICAgICBkYXRhLFxuICAgICAgICB0eXBlID09PSAnY2hhcmFjdGVyUmVmZXJlbmNlTWFya2VyTnVtZXJpYycgPyAxMCA6IDE2XG4gICAgICApXG5cbiAgICAgIHNldERhdGEoJ2NoYXJhY3RlclJlZmVyZW5jZVR5cGUnKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGRlY29kZShkYXRhKVxuICAgIH1cblxuICAgIHRhaWwgPSB0aGlzLnN0YWNrLnBvcCgpXG4gICAgdGFpbC52YWx1ZSArPSB2YWx1ZVxuICAgIHRhaWwucG9zaXRpb24uZW5kID0gcG9pbnQodG9rZW4uZW5kKVxuICB9XG5cbiAgZnVuY3Rpb24gb25leGl0YXV0b2xpbmtwcm90b2NvbCh0b2tlbikge1xuICAgIG9uZXhpdGRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0udXJsID0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbilcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZXhpdGF1dG9saW5rZW1haWwodG9rZW4pIHtcbiAgICBvbmV4aXRkYXRhLmNhbGwodGhpcywgdG9rZW4pXG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdLnVybCA9XG4gICAgICAnbWFpbHRvOicgKyB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxuICB9XG5cbiAgLy9cbiAgLy8gQ3JlYXRlcnMuXG4gIC8vXG5cbiAgZnVuY3Rpb24gYmxvY2tRdW90ZSgpIHtcbiAgICByZXR1cm4ge3R5cGU6ICdibG9ja3F1b3RlJywgY2hpbGRyZW46IFtdfVxuICB9XG5cbiAgZnVuY3Rpb24gY29kZUZsb3coKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAnY29kZScsIGxhbmc6IG51bGwsIG1ldGE6IG51bGwsIHZhbHVlOiAnJ31cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvZGVUZXh0KCkge1xuICAgIHJldHVybiB7dHlwZTogJ2lubGluZUNvZGUnLCB2YWx1ZTogJyd9XG4gIH1cblxuICBmdW5jdGlvbiBkZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZGVmaW5pdGlvbicsXG4gICAgICBpZGVudGlmaWVyOiAnJyxcbiAgICAgIGxhYmVsOiBudWxsLFxuICAgICAgdGl0bGU6IG51bGwsXG4gICAgICB1cmw6ICcnXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1waGFzaXMoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAnZW1waGFzaXMnLCBjaGlsZHJlbjogW119XG4gIH1cblxuICBmdW5jdGlvbiBoZWFkaW5nKCkge1xuICAgIHJldHVybiB7dHlwZTogJ2hlYWRpbmcnLCBkZXB0aDogdW5kZWZpbmVkLCBjaGlsZHJlbjogW119XG4gIH1cblxuICBmdW5jdGlvbiBoYXJkQnJlYWsoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAnYnJlYWsnfVxuICB9XG5cbiAgZnVuY3Rpb24gaHRtbCgpIHtcbiAgICByZXR1cm4ge3R5cGU6ICdodG1sJywgdmFsdWU6ICcnfVxuICB9XG5cbiAgZnVuY3Rpb24gaW1hZ2UoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAnaW1hZ2UnLCB0aXRsZTogbnVsbCwgdXJsOiAnJywgYWx0OiBudWxsfVxuICB9XG5cbiAgZnVuY3Rpb24gbGluaygpIHtcbiAgICByZXR1cm4ge3R5cGU6ICdsaW5rJywgdGl0bGU6IG51bGwsIHVybDogJycsIGNoaWxkcmVuOiBbXX1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3QodG9rZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgb3JkZXJlZDogdG9rZW4udHlwZSA9PT0gJ2xpc3RPcmRlcmVkJyxcbiAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgc3ByZWFkOiB0b2tlbi5fc3ByZWFkLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdEl0ZW0odG9rZW4pIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2xpc3RJdGVtJyxcbiAgICAgIHNwcmVhZDogdG9rZW4uX3NwcmVhZCxcbiAgICAgIGNoZWNrZWQ6IG51bGwsXG4gICAgICBjaGlsZHJlbjogW11cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJhZ3JhcGgoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAncGFyYWdyYXBoJywgY2hpbGRyZW46IFtdfVxuICB9XG5cbiAgZnVuY3Rpb24gc3Ryb25nKCkge1xuICAgIHJldHVybiB7dHlwZTogJ3N0cm9uZycsIGNoaWxkcmVuOiBbXX1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAndGV4dCcsIHZhbHVlOiAnJ31cbiAgfVxuXG4gIGZ1bmN0aW9uIHRoZW1hdGljQnJlYWsoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAndGhlbWF0aWNCcmVhayd9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uZmlndXJlKGNvbmZpZywgZXh0ZW5zaW9ucykge1xuICB2YXIgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgZXh0ZW5zaW9ucy5sZW5ndGgpIHtcbiAgICBleHRlbnNpb24oY29uZmlnLCBleHRlbnNpb25zW2luZGV4XSlcbiAgfVxuXG4gIHJldHVybiBjb25maWdcbn1cblxuZnVuY3Rpb24gZXh0ZW5zaW9uKGNvbmZpZywgZXh0ZW5zaW9uKSB7XG4gIHZhciBrZXlcbiAgdmFyIGxlZnRcblxuICBmb3IgKGtleSBpbiBleHRlbnNpb24pIHtcbiAgICBsZWZ0ID0gb3duLmNhbGwoY29uZmlnLCBrZXkpID8gY29uZmlnW2tleV0gOiAoY29uZmlnW2tleV0gPSB7fSlcblxuICAgIGlmIChrZXkgPT09ICdjYW5Db250YWluRW9scycpIHtcbiAgICAgIGNvbmZpZ1trZXldID0gW10uY29uY2F0KGxlZnQsIGV4dGVuc2lvbltrZXldKVxuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKGxlZnQsIGV4dGVuc2lvbltrZXldKVxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0JylcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlXG5cbnZhciBmcm9tTWFya2Rvd24gPSByZXF1aXJlKCdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nKVxuXG5mdW5jdGlvbiBwYXJzZShvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHRoaXMuUGFyc2VyID0gcGFyc2VcblxuICBmdW5jdGlvbiBwYXJzZShkb2MpIHtcbiAgICByZXR1cm4gZnJvbU1hcmtkb3duKFxuICAgICAgZG9jLFxuICAgICAgT2JqZWN0LmFzc2lnbih7fSwgc2VsZi5kYXRhKCdzZXR0aW5ncycpLCBvcHRpb25zLCB7XG4gICAgICAgIC8vIE5vdGU6IHRoZXNlIG9wdGlvbnMgYXJlIG5vdCBpbiB0aGUgcmVhZG1lLlxuICAgICAgICAvLyBUaGUgZ29hbCBpcyBmb3IgdGhlbSB0byBiZSBzZXQgYnkgcGx1Z2lucyBvbiBgZGF0YWAgaW5zdGVhZCBvZiBiZWluZ1xuICAgICAgICAvLyBwYXNzZWQgYnkgdXNlcnMuXG4gICAgICAgIGV4dGVuc2lvbnM6IHNlbGYuZGF0YSgnbWljcm9tYXJrRXh0ZW5zaW9ucycpIHx8IFtdLFxuICAgICAgICBtZGFzdEV4dGVuc2lvbnM6IHNlbGYuZGF0YSgnZnJvbU1hcmtkb3duRXh0ZW5zaW9ucycpIHx8IFtdXG4gICAgICB9KVxuICAgIClcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZU1hdGhGZW5jZWRcbmV4cG9ydHMuY29uY3JldGUgPSB0cnVlXG5cbnZhciBwcmVmaXhTaXplID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvdXRpbC9wcmVmaXgtc2l6ZScpXG52YXIgY3JlYXRlU3BhY2UgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC90b2tlbml6ZS9mYWN0b3J5LXNwYWNlJylcblxuZnVuY3Rpb24gdG9rZW5pemVNYXRoRmVuY2VkKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBpbml0aWFsUHJlZml4ID0gcHJlZml4U2l6ZSh0aGlzLmV2ZW50cywgJ2xpbmVQcmVmaXgnKVxuICB2YXIgc2l6ZU9wZW4gPSAwXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIGhhbmRsZWQgYnkgbW0gKi9cbiAgICBpZiAoY29kZSAhPT0gMzYpIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgYCRgJylcblxuICAgIGVmZmVjdHMuZW50ZXIoJ21hdGhGbG93JylcbiAgICBlZmZlY3RzLmVudGVyKCdtYXRoRmxvd0ZlbmNlJylcbiAgICBlZmZlY3RzLmVudGVyKCdtYXRoRmxvd0ZlbmNlU2VxdWVuY2UnKVxuICAgIHJldHVybiBzZXF1ZW5jZU9wZW4oY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcXVlbmNlT3Blbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDM2KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemVPcGVuKytcbiAgICAgIHJldHVybiBzZXF1ZW5jZU9wZW5cbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQoJ21hdGhGbG93RmVuY2VTZXF1ZW5jZScpXG4gICAgcmV0dXJuIHNpemVPcGVuIDwgMlxuICAgICAgPyBub2soY29kZSlcbiAgICAgIDogY3JlYXRlU3BhY2UoZWZmZWN0cywgbWV0YU9wZW4sICd3aGl0ZXNwYWNlJykoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG1ldGFPcGVuKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgcmV0dXJuIG9wZW5BZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ21hdGhGbG93RmVuY2VNZXRhJylcbiAgICBlZmZlY3RzLmVudGVyKCdjaHVua1N0cmluZycsIHtjb250ZW50VHlwZTogJ3N0cmluZyd9KVxuICAgIHJldHVybiBtZXRhKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBtZXRhKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1N0cmluZycpXG4gICAgICBlZmZlY3RzLmV4aXQoJ21hdGhGbG93RmVuY2VNZXRhJylcbiAgICAgIHJldHVybiBvcGVuQWZ0ZXIoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gMzYpIHJldHVybiBub2soY29kZSlcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gbWV0YVxuICB9XG5cbiAgZnVuY3Rpb24gb3BlbkFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ21hdGhGbG93RmVuY2UnKVxuICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rKGNvZGUpIDogY29udGVudChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGVudChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBhZnRlcihjb2RlKVxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgICByZXR1cm4gZWZmZWN0cy5hdHRlbXB0KFxuICAgICAgICB7dG9rZW5pemU6IHRva2VuaXplQ2xvc2luZ0ZlbmNlLCBwYXJ0aWFsOiB0cnVlfSxcbiAgICAgICAgYWZ0ZXIsXG4gICAgICAgIGluaXRpYWxQcmVmaXhcbiAgICAgICAgICA/IGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGNvbnRlbnQsICdsaW5lUHJlZml4JywgaW5pdGlhbFByZWZpeCArIDEpXG4gICAgICAgICAgOiBjb250ZW50XG4gICAgICApXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignbWF0aEZsb3dWYWx1ZScpXG4gICAgcmV0dXJuIGNvbnRlbnRDb250aW51ZShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGVudENvbnRpbnVlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgZWZmZWN0cy5leGl0KCdtYXRoRmxvd1ZhbHVlJylcbiAgICAgIHJldHVybiBjb250ZW50KGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGNvbnRlbnRDb250aW51ZVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCgnbWF0aEZsb3cnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5pemVDbG9zaW5nRmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICAgIHZhciBzaXplID0gMFxuXG4gICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGNsb3NpbmdQcmVmaXhBZnRlciwgJ2xpbmVQcmVmaXgnLCA0KVxuXG4gICAgZnVuY3Rpb24gY2xvc2luZ1ByZWZpeEFmdGVyKGNvZGUpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ21hdGhGbG93RmVuY2UnKVxuICAgICAgZWZmZWN0cy5lbnRlcignbWF0aEZsb3dGZW5jZVNlcXVlbmNlJylcbiAgICAgIHJldHVybiBjbG9zaW5nU2VxdWVuY2UoY29kZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zaW5nU2VxdWVuY2UoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IDM2KSB7XG4gICAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgICBzaXplKytcbiAgICAgICAgcmV0dXJuIGNsb3NpbmdTZXF1ZW5jZVxuICAgICAgfVxuXG4gICAgICBpZiAoc2l6ZSA8IHNpemVPcGVuKSByZXR1cm4gbm9rKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ21hdGhGbG93RmVuY2VTZXF1ZW5jZScpXG4gICAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgY2xvc2luZ1NlcXVlbmNlRW5kLCAnd2hpdGVzcGFjZScpKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlRW5kKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPT09IC01IHx8IGNvZGUgPT09IC00IHx8IGNvZGUgPT09IC0zKSB7XG4gICAgICAgIGVmZmVjdHMuZXhpdCgnbWF0aEZsb3dGZW5jZScpXG4gICAgICAgIHJldHVybiBvayhjb2RlKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplTWF0aFRleHRcbmV4cG9ydHMucmVzb2x2ZSA9IHJlc29sdmVNYXRoVGV4dFxuZXhwb3J0cy5wcmV2aW91cyA9IHByZXZpb3VzXG5cbmZ1bmN0aW9uIHJlc29sdmVNYXRoVGV4dChldmVudHMpIHtcbiAgdmFyIHRhaWxFeGl0SW5kZXggPSBldmVudHMubGVuZ3RoIC0gNFxuICB2YXIgaGVhZEVudGVySW5kZXggPSAzXG4gIHZhciBpbmRleFxuICB2YXIgZW50ZXJcblxuICAvLyBJZiB3ZSBzdGFydCBhbmQgZW5kIHdpdGggYW4gRU9MIG9yIGEgc3BhY2UuXG4gIGlmIChcbiAgICAoZXZlbnRzW2hlYWRFbnRlckluZGV4XVsxXS50eXBlID09PSAnbGluZUVuZGluZycgfHxcbiAgICAgIGV2ZW50c1toZWFkRW50ZXJJbmRleF1bMV0udHlwZSA9PT0gJ3NwYWNlJykgJiZcbiAgICAoZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPT09ICdsaW5lRW5kaW5nJyB8fFxuICAgICAgZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPT09ICdzcGFjZScpXG4gICkge1xuICAgIGluZGV4ID0gaGVhZEVudGVySW5kZXhcblxuICAgIC8vIEFuZCB3ZSBoYXZlIGRhdGEuXG4gICAgd2hpbGUgKCsraW5kZXggPCB0YWlsRXhpdEluZGV4KSB7XG4gICAgICBpZiAoZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnbWF0aFRleHREYXRhJykge1xuICAgICAgICAvLyBUaGVuIHdlIGhhdmUgcGFkZGluZy5cbiAgICAgICAgZXZlbnRzW3RhaWxFeGl0SW5kZXhdWzFdLnR5cGUgPSAnbWF0aFRleHRQYWRkaW5nJ1xuICAgICAgICBldmVudHNbaGVhZEVudGVySW5kZXhdWzFdLnR5cGUgPSAnbWF0aFRleHRQYWRkaW5nJ1xuICAgICAgICBoZWFkRW50ZXJJbmRleCArPSAyXG4gICAgICAgIHRhaWxFeGl0SW5kZXggLT0gMlxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE1lcmdlIGFkamFjZW50IHNwYWNlcyBhbmQgZGF0YS5cbiAgaW5kZXggPSBoZWFkRW50ZXJJbmRleCAtIDFcbiAgdGFpbEV4aXRJbmRleCsrXG5cbiAgd2hpbGUgKCsraW5kZXggPD0gdGFpbEV4aXRJbmRleCkge1xuICAgIGlmIChlbnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaW5kZXggIT09IHRhaWxFeGl0SW5kZXggJiYgZXZlbnRzW2luZGV4XVsxXS50eXBlICE9PSAnbGluZUVuZGluZycpIHtcbiAgICAgICAgZW50ZXIgPSBpbmRleFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBpbmRleCA9PT0gdGFpbEV4aXRJbmRleCB8fFxuICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID09PSAnbGluZUVuZGluZydcbiAgICApIHtcbiAgICAgIGV2ZW50c1tlbnRlcl1bMV0udHlwZSA9ICdtYXRoVGV4dERhdGEnXG5cbiAgICAgIGlmIChpbmRleCAhPT0gZW50ZXIgKyAyKSB7XG4gICAgICAgIGV2ZW50c1tlbnRlcl1bMV0uZW5kID0gZXZlbnRzW2luZGV4IC0gMV1bMV0uZW5kXG4gICAgICAgIGV2ZW50cy5zcGxpY2UoZW50ZXIgKyAyLCBpbmRleCAtIGVudGVyIC0gMilcbiAgICAgICAgdGFpbEV4aXRJbmRleCAtPSBpbmRleCAtIGVudGVyIC0gMlxuICAgICAgICBpbmRleCA9IGVudGVyICsgMlxuICAgICAgfVxuXG4gICAgICBlbnRlciA9IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cblxuZnVuY3Rpb24gcHJldmlvdXMoY29kZSkge1xuICAvLyBJZiB0aGVyZSBpcyBhIHByZXZpb3VzIGNvZGUsIHRoZXJlIHdpbGwgYWx3YXlzIGJlIGEgdGFpbC5cbiAgcmV0dXJuIChcbiAgICBjb2RlICE9PSAzNiB8fFxuICAgIHRoaXMuZXZlbnRzW3RoaXMuZXZlbnRzLmxlbmd0aCAtIDFdWzFdLnR5cGUgPT09ICdjaGFyYWN0ZXJFc2NhcGUnXG4gIClcbn1cblxuZnVuY3Rpb24gdG9rZW5pemVNYXRoVGV4dChlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgc2l6ZU9wZW4gPSAwXG4gIHZhciBzaXplXG4gIHZhciB0b2tlblxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBoYW5kbGVkIGJ5IG1tICovXG4gICAgaWYgKGNvZGUgIT09IDM2KSB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGAkYCcpXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBoYW5kbGVkIGJ5IG1tICovXG4gICAgaWYgKCFwcmV2aW91cy5jYWxsKHNlbGYsIHNlbGYucHJldmlvdXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGNvcnJlY3QgcHJldmlvdXMnKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ21hdGhUZXh0JylcbiAgICBlZmZlY3RzLmVudGVyKCdtYXRoVGV4dFNlcXVlbmNlJylcbiAgICByZXR1cm4gb3BlbmluZ1NlcXVlbmNlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBvcGVuaW5nU2VxdWVuY2UoY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzNikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplT3BlbisrXG4gICAgICByZXR1cm4gb3BlbmluZ1NlcXVlbmNlXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCdtYXRoVGV4dFNlcXVlbmNlJylcbiAgICByZXR1cm4gZ2FwKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBnYXAoY29kZSkge1xuICAgIC8vIEVPRi5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIC8vIENsb3NpbmcgZmVuY2U/XG4gICAgLy8gQ291bGQgYWxzbyBiZSBkYXRhLlxuICAgIGlmIChjb2RlID09PSAzNikge1xuICAgICAgdG9rZW4gPSBlZmZlY3RzLmVudGVyKCdtYXRoVGV4dFNlcXVlbmNlJylcbiAgICAgIHNpemUgPSAwXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gVGFicyBkb27igJl0IHdvcmssIGFuZCB2aXJ0dWFsIHNwYWNlcyBkb27igJl0IG1ha2Ugc2Vuc2UuXG4gICAgaWYgKGNvZGUgPT09IDMyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdzcGFjZScpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnc3BhY2UnKVxuICAgICAgcmV0dXJuIGdhcFxuICAgIH1cblxuICAgIGlmIChjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGluZUVuZGluZycpXG4gICAgICByZXR1cm4gZ2FwXG4gICAgfVxuXG4gICAgLy8gRGF0YS5cbiAgICBlZmZlY3RzLmVudGVyKCdtYXRoVGV4dERhdGEnKVxuICAgIHJldHVybiBkYXRhKGNvZGUpXG4gIH1cblxuICAvLyBJbiBjb2RlLlxuICBmdW5jdGlvbiBkYXRhKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIHx8XG4gICAgICBjb2RlID09PSAzMiB8fFxuICAgICAgY29kZSA9PT0gMzYgfHxcbiAgICAgIGNvZGUgPT09IC01IHx8XG4gICAgICBjb2RlID09PSAtNCB8fFxuICAgICAgY29kZSA9PT0gLTNcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnbWF0aFRleHREYXRhJylcbiAgICAgIHJldHVybiBnYXAoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgLy8gQ2xvc2luZyBmZW5jZS5cbiAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlKGNvZGUpIHtcbiAgICAvLyBNb3JlLlxuICAgIGlmIChjb2RlID09PSAzNikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBzaXplKytcbiAgICAgIHJldHVybiBjbG9zaW5nU2VxdWVuY2VcbiAgICB9XG5cbiAgICAvLyBEb25lIVxuICAgIGlmIChzaXplID09PSBzaXplT3Blbikge1xuICAgICAgZWZmZWN0cy5leGl0KCdtYXRoVGV4dFNlcXVlbmNlJylcbiAgICAgIGVmZmVjdHMuZXhpdCgnbWF0aFRleHQnKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gTW9yZSBvciBsZXNzIGFjY2VudHM6IG1hcmsgYXMgZGF0YS5cbiAgICB0b2tlbi50eXBlID0gJ21hdGhUZXh0RGF0YSdcbiAgICByZXR1cm4gZGF0YShjb2RlKVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5mbG93ID0gezM2OiByZXF1aXJlKCcuL3Rva2VuaXplLW1hdGgtZmxvdycpfVxuZXhwb3J0cy50ZXh0ID0gezM2OiByZXF1aXJlKCcuL3Rva2VuaXplLW1hdGgtdGV4dCcpfVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9zeW50YXgnKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuZW50ZXIgPSB7XG4gIG1hdGhGbG93OiBlbnRlck1hdGhGbG93LFxuICBtYXRoRmxvd0ZlbmNlTWV0YTogZW50ZXJNYXRoRmxvd01ldGEsXG4gIG1hdGhUZXh0OiBlbnRlck1hdGhUZXh0XG59XG5leHBvcnRzLmV4aXQgPSB7XG4gIG1hdGhGbG93OiBleGl0TWF0aEZsb3csXG4gIG1hdGhGbG93RmVuY2U6IGV4aXRNYXRoRmxvd0ZlbmNlLFxuICBtYXRoRmxvd0ZlbmNlTWV0YTogZXhpdE1hdGhGbG93TWV0YSxcbiAgbWF0aEZsb3dWYWx1ZTogZXhpdE1hdGhEYXRhLFxuICBtYXRoVGV4dDogZXhpdE1hdGhUZXh0LFxuICBtYXRoVGV4dERhdGE6IGV4aXRNYXRoRGF0YVxufVxuXG5mdW5jdGlvbiBlbnRlck1hdGhGbG93KHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoXG4gICAge1xuICAgICAgdHlwZTogJ21hdGgnLFxuICAgICAgbWV0YTogbnVsbCxcbiAgICAgIHZhbHVlOiAnJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgaE5hbWU6ICdkaXYnLFxuICAgICAgICBoUHJvcGVydGllczoge2NsYXNzTmFtZTogWydtYXRoJywgJ21hdGgtZGlzcGxheSddfSxcbiAgICAgICAgaENoaWxkcmVuOiBbe3R5cGU6ICd0ZXh0JywgdmFsdWU6ICcnfV1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRva2VuXG4gIClcbn1cblxuZnVuY3Rpb24gZW50ZXJNYXRoRmxvd01ldGEoKSB7XG4gIHRoaXMuYnVmZmVyKClcbn1cblxuZnVuY3Rpb24gZXhpdE1hdGhGbG93TWV0YSgpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5tZXRhID0gZGF0YVxufVxuXG5mdW5jdGlvbiBleGl0TWF0aEZsb3dGZW5jZSgpIHtcbiAgLy8gRXhpdCBpZiB0aGlzIGlzIHRoZSBjbG9zaW5nIGZlbmNlLlxuICBpZiAodGhpcy5nZXREYXRhKCdtYXRoRmxvd0luc2lkZScpKSByZXR1cm5cbiAgdGhpcy5idWZmZXIoKVxuICB0aGlzLnNldERhdGEoJ21hdGhGbG93SW5zaWRlJywgdHJ1ZSlcbn1cblxuZnVuY3Rpb24gZXhpdE1hdGhGbG93KHRva2VuKSB7XG4gIHZhciBkYXRhID0gdGhpcy5yZXN1bWUoKS5yZXBsYWNlKC9eKFxccj9cXG58XFxyKXwoXFxyP1xcbnxcXHIpJC9nLCAnJylcbiAgdmFyIG5vZGUgPSB0aGlzLmV4aXQodG9rZW4pXG4gIG5vZGUudmFsdWUgPSBkYXRhXG4gIG5vZGUuZGF0YS5oQ2hpbGRyZW5bMF0udmFsdWUgPSBkYXRhXG4gIHRoaXMuc2V0RGF0YSgnbWF0aEZsb3dJbnNpZGUnKVxufVxuXG5mdW5jdGlvbiBlbnRlck1hdGhUZXh0KHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoXG4gICAge1xuICAgICAgdHlwZTogJ2lubGluZU1hdGgnLFxuICAgICAgdmFsdWU6ICcnLFxuICAgICAgZGF0YToge1xuICAgICAgICBoTmFtZTogJ3NwYW4nLFxuICAgICAgICBoUHJvcGVydGllczoge2NsYXNzTmFtZTogWydtYXRoJywgJ21hdGgtaW5saW5lJ119LFxuICAgICAgICBoQ2hpbGRyZW46IFt7dHlwZTogJ3RleHQnLCB2YWx1ZTogJyd9XVxuICAgICAgfVxuICAgIH0sXG4gICAgdG9rZW5cbiAgKVxuICB0aGlzLmJ1ZmZlcigpXG59XG5cbmZ1bmN0aW9uIGV4aXRNYXRoVGV4dCh0b2tlbikge1xuICB2YXIgZGF0YSA9IHRoaXMucmVzdW1lKClcbiAgdmFyIG5vZGUgPSB0aGlzLmV4aXQodG9rZW4pXG4gIG5vZGUudmFsdWUgPSBkYXRhXG4gIG5vZGUuZGF0YS5oQ2hpbGRyZW5bMF0udmFsdWUgPSBkYXRhXG59XG5cbmZ1bmN0aW9uIGV4aXRNYXRoRGF0YSh0b2tlbikge1xuICB0aGlzLmNvbmZpZy5lbnRlci5kYXRhLmNhbGwodGhpcywgdG9rZW4pXG4gIHRoaXMuY29uZmlnLmV4aXQuZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxufVxuIiwiLyohXG4gKiByZXBlYXQtc3RyaW5nIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9yZXBlYXQtc3RyaW5nPlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE1LCBKb24gU2NobGlua2VydC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogUmVzdWx0cyBjYWNoZVxuICovXG5cbnZhciByZXMgPSAnJztcbnZhciBjYWNoZTtcblxuLyoqXG4gKiBFeHBvc2UgYHJlcGVhdGBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcGVhdDtcblxuLyoqXG4gKiBSZXBlYXQgdGhlIGdpdmVuIGBzdHJpbmdgIHRoZSBzcGVjaWZpZWQgYG51bWJlcmBcbiAqIG9mIHRpbWVzLlxuICpcbiAqICoqRXhhbXBsZToqKlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xuICogcmVwZWF0KCdBJywgNSk7XG4gKiAvLz0+IEFBQUFBXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYHN0cmluZ2AgVGhlIHN0cmluZyB0byByZXBlYXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBgbnVtYmVyYCBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFJlcGVhdGVkIHN0cmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByZXBlYXQoc3RyLCBudW0pIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIC8vIGNvdmVyIGNvbW1vbiwgcXVpY2sgdXNlIGNhc2VzXG4gIGlmIChudW0gPT09IDEpIHJldHVybiBzdHI7XG4gIGlmIChudW0gPT09IDIpIHJldHVybiBzdHIgKyBzdHI7XG5cbiAgdmFyIG1heCA9IHN0ci5sZW5ndGggKiBudW07XG4gIGlmIChjYWNoZSAhPT0gc3RyIHx8IHR5cGVvZiBjYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjYWNoZSA9IHN0cjtcbiAgICByZXMgPSAnJztcbiAgfSBlbHNlIGlmIChyZXMubGVuZ3RoID49IG1heCkge1xuICAgIHJldHVybiByZXMuc3Vic3RyKDAsIG1heCk7XG4gIH1cblxuICB3aGlsZSAobWF4ID4gcmVzLmxlbmd0aCAmJiBudW0gPiAxKSB7XG4gICAgaWYgKG51bSAmIDEpIHtcbiAgICAgIHJlcyArPSBzdHI7XG4gICAgfVxuXG4gICAgbnVtID4+PSAxO1xuICAgIHN0ciArPSBzdHI7XG4gIH1cblxuICByZXMgKz0gc3RyO1xuICByZXMgPSByZXMuc3Vic3RyKDAsIG1heCk7XG4gIHJldHVybiByZXM7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBsb25nZXN0U3RyZWFrXG5cbi8vIEdldCB0aGUgY291bnQgb2YgdGhlIGxvbmdlc3QgcmVwZWF0aW5nIHN0cmVhayBvZiBgY2hhcmFjdGVyYCBpbiBgdmFsdWVgLlxuZnVuY3Rpb24gbG9uZ2VzdFN0cmVhayh2YWx1ZSwgY2hhcmFjdGVyKSB7XG4gIHZhciBjb3VudCA9IDBcbiAgdmFyIG1heGltdW0gPSAwXG4gIHZhciBleHBlY3RlZFxuICB2YXIgaW5kZXhcblxuICBpZiAodHlwZW9mIGNoYXJhY3RlciAhPT0gJ3N0cmluZycgfHwgY2hhcmFjdGVyLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgY2hhcmFjdGVyJylcbiAgfVxuXG4gIHZhbHVlID0gU3RyaW5nKHZhbHVlKVxuICBpbmRleCA9IHZhbHVlLmluZGV4T2YoY2hhcmFjdGVyKVxuICBleHBlY3RlZCA9IGluZGV4XG5cbiAgd2hpbGUgKGluZGV4ICE9PSAtMSkge1xuICAgIGNvdW50KytcblxuICAgIGlmIChpbmRleCA9PT0gZXhwZWN0ZWQpIHtcbiAgICAgIGlmIChjb3VudCA+IG1heGltdW0pIHtcbiAgICAgICAgbWF4aW11bSA9IGNvdW50XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMVxuICAgIH1cblxuICAgIGV4cGVjdGVkID0gaW5kZXggKyAxXG4gICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKGNoYXJhY3RlciwgZXhwZWN0ZWQpXG4gIH1cblxuICByZXR1cm4gbWF4aW11bVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBzYWZlXG5cbmZ1bmN0aW9uIHNhZmUoY29udGV4dCwgaW5wdXQsIGNvbmZpZykge1xuICB2YXIgdmFsdWUgPSAoY29uZmlnLmJlZm9yZSB8fCAnJykgKyAoaW5wdXQgfHwgJycpICsgKGNvbmZpZy5hZnRlciB8fCAnJylcbiAgdmFyIHBvc2l0aW9ucyA9IFtdXG4gIHZhciByZXN1bHQgPSBbXVxuICB2YXIgaW5mb3MgPSB7fVxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgYmVmb3JlXG4gIHZhciBhZnRlclxuICB2YXIgcG9zaXRpb25cbiAgdmFyIHBhdHRlcm5cbiAgdmFyIGV4cHJlc3Npb25cbiAgdmFyIG1hdGNoXG4gIHZhciBzdGFydFxuICB2YXIgZW5kXG5cbiAgd2hpbGUgKCsraW5kZXggPCBjb250ZXh0LnVuc2FmZVBhdHRlcm5zLmxlbmd0aCkge1xuICAgIHBhdHRlcm4gPSBjb250ZXh0LnVuc2FmZVBhdHRlcm5zW2luZGV4XVxuXG4gICAgaWYgKFxuICAgICAgIWluU2NvcGUoY29udGV4dC5zdGFjaywgcGF0dGVybi5pbkNvbnN0cnVjdCwgdHJ1ZSkgfHxcbiAgICAgIGluU2NvcGUoY29udGV4dC5zdGFjaywgcGF0dGVybi5ub3RJbkNvbnN0cnVjdClcbiAgICApIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgZXhwcmVzc2lvbiA9XG4gICAgICBwYXR0ZXJuLl9jb21waWxlZCB8fCAocGF0dGVybi5fY29tcGlsZWQgPSB0b0V4cHJlc3Npb24ocGF0dGVybikpXG5cbiAgICB3aGlsZSAoKG1hdGNoID0gZXhwcmVzc2lvbi5leGVjKHZhbHVlKSkpIHtcbiAgICAgIGJlZm9yZSA9ICdiZWZvcmUnIGluIHBhdHRlcm4gfHwgcGF0dGVybi5hdEJyZWFrXG4gICAgICBhZnRlciA9ICdhZnRlcicgaW4gcGF0dGVyblxuICAgICAgcG9zaXRpb24gPSBtYXRjaC5pbmRleCArIChiZWZvcmUgPyBtYXRjaFsxXS5sZW5ndGggOiAwKVxuXG4gICAgICBpZiAocG9zaXRpb25zLmluZGV4T2YocG9zaXRpb24pID09PSAtMSkge1xuICAgICAgICBwb3NpdGlvbnMucHVzaChwb3NpdGlvbilcbiAgICAgICAgaW5mb3NbcG9zaXRpb25dID0ge2JlZm9yZTogYmVmb3JlLCBhZnRlcjogYWZ0ZXJ9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaW5mb3NbcG9zaXRpb25dLmJlZm9yZSAmJiAhYmVmb3JlKSB7XG4gICAgICAgICAgaW5mb3NbcG9zaXRpb25dLmJlZm9yZSA9IGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mb3NbcG9zaXRpb25dLmFmdGVyICYmICFhZnRlcikge1xuICAgICAgICAgIGluZm9zW3Bvc2l0aW9uXS5hZnRlciA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwb3NpdGlvbnMuc29ydChudW1lcmljYWwpXG5cbiAgc3RhcnQgPSBjb25maWcuYmVmb3JlID8gY29uZmlnLmJlZm9yZS5sZW5ndGggOiAwXG4gIGVuZCA9IHZhbHVlLmxlbmd0aCAtIChjb25maWcuYWZ0ZXIgPyBjb25maWcuYWZ0ZXIubGVuZ3RoIDogMClcbiAgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgcG9zaXRpb25zLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gcG9zaXRpb25zW2luZGV4XVxuXG4gICAgaWYgKFxuICAgICAgLy8gQ2hhcmFjdGVyIGJlZm9yZSBvciBhZnRlciBtYXRjaGVkOlxuICAgICAgcG9zaXRpb24gPCBzdGFydCB8fFxuICAgICAgcG9zaXRpb24gPj0gZW5kXG4gICAgKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIElmIHRoaXMgY2hhcmFjdGVyIGlzIHN1cHBvc2VkIHRvIGJlIGVzY2FwZWQgYmVjYXVzZSBpdCBoYXMgYSBjb25kaXRpb24gb25cbiAgICAvLyB0aGUgbmV4dCBjaGFyYWN0ZXIsIGFuZCB0aGUgbmV4dCBjaGFyYWN0ZXIgaXMgZGVmaW5pdGx5IGJlaW5nIGVzY2FwZWQsXG4gICAgLy8gdGhlbiBza2lwIHRoaXMgZXNjYXBlLlxuICAgIGlmIChcbiAgICAgIHBvc2l0aW9uICsgMSA8IGVuZCAmJlxuICAgICAgcG9zaXRpb25zW2luZGV4ICsgMV0gPT09IHBvc2l0aW9uICsgMSAmJlxuICAgICAgaW5mb3NbcG9zaXRpb25dLmFmdGVyICYmXG4gICAgICAhaW5mb3NbcG9zaXRpb24gKyAxXS5iZWZvcmUgJiZcbiAgICAgICFpbmZvc1twb3NpdGlvbiArIDFdLmFmdGVyXG4gICAgKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChzdGFydCAhPT0gcG9zaXRpb24pIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlLnNsaWNlKHN0YXJ0LCBwb3NpdGlvbikpXG4gICAgfVxuXG4gICAgc3RhcnQgPSBwb3NpdGlvblxuXG4gICAgaWYgKFxuICAgICAgL1shLS86LUBbLWB7LX5dLy50ZXN0KHZhbHVlLmNoYXJBdChwb3NpdGlvbikpICYmXG4gICAgICAoIWNvbmZpZy5lbmNvZGUgfHwgY29uZmlnLmVuY29kZS5pbmRleE9mKHZhbHVlLmNoYXJBdChwb3NpdGlvbikpID09PSAtMSlcbiAgICApIHtcbiAgICAgIC8vIENoYXJhY3RlciBlc2NhcGUuXG4gICAgICByZXN1bHQucHVzaCgnXFxcXCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENoYXJhY3RlciByZWZlcmVuY2UuXG4gICAgICByZXN1bHQucHVzaChcbiAgICAgICAgJyYjeCcgKyB2YWx1ZS5jaGFyQ29kZUF0KHBvc2l0aW9uKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArICc7J1xuICAgICAgKVxuICAgICAgc3RhcnQrK1xuICAgIH1cbiAgfVxuXG4gIHJlc3VsdC5wdXNoKHZhbHVlLnNsaWNlKHN0YXJ0LCBlbmQpKVxuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcbn1cblxuZnVuY3Rpb24gaW5TY29wZShzdGFjaywgbGlzdCwgbm9uZSkge1xuICB2YXIgaW5kZXhcblxuICBpZiAoIWxpc3QpIHtcbiAgICByZXR1cm4gbm9uZVxuICB9XG5cbiAgaWYgKHR5cGVvZiBsaXN0ID09PSAnc3RyaW5nJykge1xuICAgIGxpc3QgPSBbbGlzdF1cbiAgfVxuXG4gIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IGxpc3QubGVuZ3RoKSB7XG4gICAgaWYgKHN0YWNrLmluZGV4T2YobGlzdFtpbmRleF0pICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gdG9FeHByZXNzaW9uKHBhdHRlcm4pIHtcbiAgdmFyIGJlZm9yZSA9IHBhdHRlcm4uYmVmb3JlID8gJyg/OicgKyBwYXR0ZXJuLmJlZm9yZSArICcpJyA6ICcnXG4gIHZhciBhZnRlciA9IHBhdHRlcm4uYWZ0ZXIgPyAnKD86JyArIHBhdHRlcm4uYWZ0ZXIgKyAnKScgOiAnJ1xuXG4gIGlmIChwYXR0ZXJuLmF0QnJlYWspIHtcbiAgICBiZWZvcmUgPSAnW1xcXFxyXFxcXG5dW1xcXFx0IF0qJyArIGJlZm9yZVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAoXG4gICAgKGJlZm9yZSA/ICcoJyArIGJlZm9yZSArICcpJyA6ICcnKSArXG4gICAgICAoL1t8XFxcXHt9KClbXFxdXiQrKj8uLV0vLnRlc3QocGF0dGVybi5jaGFyYWN0ZXIpID8gJ1xcXFwnIDogJycpICtcbiAgICAgIHBhdHRlcm4uY2hhcmFjdGVyICtcbiAgICAgIChhZnRlciB8fCAnJyksXG4gICAgJ2cnXG4gIClcbn1cblxuZnVuY3Rpb24gbnVtZXJpY2FsKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy51bnNhZmUgPSBbXG4gIHtjaGFyYWN0ZXI6ICdcXHInLCBpbkNvbnN0cnVjdDogWydtYXRoRmxvd01ldGEnXX0sXG4gIHtjaGFyYWN0ZXI6ICdcXHInLCBpbkNvbnN0cnVjdDogWydtYXRoRmxvd01ldGEnXX0sXG4gIHtjaGFyYWN0ZXI6ICckJywgaW5Db25zdHJ1Y3Q6IFsnbWF0aEZsb3dNZXRhJywgJ3BocmFzaW5nJ119LFxuICB7YXRCcmVhazogdHJ1ZSwgY2hhcmFjdGVyOiAnJCcsIGFmdGVyOiAnXFxcXCQnfVxuXVxuXG5leHBvcnRzLmhhbmRsZXJzID0ge21hdGg6IG1hdGgsIGlubGluZU1hdGg6IGlubGluZU1hdGh9XG5cbmlubGluZU1hdGgucGVlayA9IGlubGluZU1hdGhQZWVrXG5cbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJylcbnZhciBzdHJlYWsgPSByZXF1aXJlKCdsb25nZXN0LXN0cmVhaycpXG52YXIgc2FmZSA9IHJlcXVpcmUoJ21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL3V0aWwvc2FmZScpXG5cbmZ1bmN0aW9uIG1hdGgobm9kZSwgXywgY29udGV4dCkge1xuICB2YXIgcmF3ID0gbm9kZS52YWx1ZSB8fCAnJ1xuICB2YXIgZmVuY2UgPSByZXBlYXQoJyQnLCBNYXRoLm1heChzdHJlYWsocmF3LCAnJCcpICsgMSwgMikpXG4gIHZhciBleGl0ID0gY29udGV4dC5lbnRlcignbWF0aEZsb3cnKVxuICB2YXIgdmFsdWUgPSBmZW5jZVxuICB2YXIgc3ViZXhpdFxuXG4gIGlmIChub2RlLm1ldGEpIHtcbiAgICBzdWJleGl0ID0gY29udGV4dC5lbnRlcignbWF0aEZsb3dNZXRhJylcbiAgICB2YWx1ZSArPSBzYWZlKGNvbnRleHQsIG5vZGUubWV0YSwge2JlZm9yZTogJyQnLCBhZnRlcjogJyAnLCBlbmNvZGU6IFsnJCddfSlcbiAgICBzdWJleGl0KClcbiAgfVxuXG4gIHZhbHVlICs9ICdcXG4nXG5cbiAgaWYgKHJhdykge1xuICAgIHZhbHVlICs9IHJhdyArICdcXG4nXG4gIH1cblxuICB2YWx1ZSArPSBmZW5jZVxuICBleGl0KClcbiAgcmV0dXJuIHZhbHVlXG59XG5cbmZ1bmN0aW9uIGlubGluZU1hdGgobm9kZSkge1xuICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlIHx8ICcnXG4gIHZhciBzaXplID0gMVxuICB2YXIgcGFkID0gJydcbiAgdmFyIHNlcXVlbmNlXG5cbiAgLy8gSWYgdGhlcmUgaXMgYSBzaW5nbGUgZG9sbGFyIHNpZ24gb24gaXRzIG93biBpbiB0aGUgbWF0aCwgdXNlIGEgZmVuY2Ugb2ZcbiAgLy8gdHdvLlxuICAvLyBJZiB0aGVyZSBhcmUgdHdvIGluIGEgcm93LCB1c2Ugb25lLlxuICB3aGlsZSAoXG4gICAgbmV3IFJlZ0V4cCgnKF58W14kXSknICsgcmVwZWF0KCdcXFxcJCcsIHNpemUpICsgJyhbXiRdfCQpJykudGVzdCh2YWx1ZSlcbiAgKSB7XG4gICAgc2l6ZSsrXG4gIH1cblxuICAvLyBJZiB0aGlzIGlzIG5vdCBqdXN0IHNwYWNlcyBvciBlb2xzICh0YWJzIGRvbuKAmXQgY291bnQpLCBhbmQgZWl0aGVyIHRoZSBmaXJzdFxuICAvLyBvciBsYXN0IGNoYXJhY3RlciBhcmUgYSBzcGFjZSwgZW9sLCBvciBkb2xsYXIgc2lnbiwgdGhlbiBwYWQgd2l0aCBzcGFjZXMuXG4gIGlmIChcbiAgICAvW14gXFxyXFxuXS8udGVzdCh2YWx1ZSkgJiZcbiAgICAoL1sgXFxyXFxuJF0vLnRlc3QodmFsdWUuY2hhckF0KDApKSB8fFxuICAgICAgL1sgXFxyXFxuJF0vLnRlc3QodmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpKSlcbiAgKSB7XG4gICAgcGFkID0gJyAnXG4gIH1cblxuICBzZXF1ZW5jZSA9IHJlcGVhdCgnJCcsIHNpemUpXG4gIHJldHVybiBzZXF1ZW5jZSArIHBhZCArIHZhbHVlICsgcGFkICsgc2VxdWVuY2Vcbn1cblxuZnVuY3Rpb24gaW5saW5lTWF0aFBlZWsoKSB7XG4gIHJldHVybiAnJCdcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc3ludGF4ID0gcmVxdWlyZSgnbWljcm9tYXJrLWV4dGVuc2lvbi1tYXRoJylcbnZhciBmcm9tTWFya2Rvd24gPSByZXF1aXJlKCdtZGFzdC11dGlsLW1hdGgvZnJvbS1tYXJrZG93bicpXG52YXIgdG9NYXJrZG93biA9IHJlcXVpcmUoJ21kYXN0LXV0aWwtbWF0aC90by1tYXJrZG93bicpXG52YXIgd2FybmluZ0lzc3VlZFxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hdGhcblxuZnVuY3Rpb24gbWF0aCgpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLmRhdGEoKVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gb2xkIHJlbWFyay4gKi9cbiAgaWYgKFxuICAgICF3YXJuaW5nSXNzdWVkICYmXG4gICAgKCh0aGlzLlBhcnNlciAmJlxuICAgICAgdGhpcy5QYXJzZXIucHJvdG90eXBlICYmXG4gICAgICB0aGlzLlBhcnNlci5wcm90b3R5cGUuYmxvY2tUb2tlbml6ZXJzKSB8fFxuICAgICAgKHRoaXMuQ29tcGlsZXIgJiZcbiAgICAgICAgdGhpcy5Db21waWxlci5wcm90b3R5cGUgJiZcbiAgICAgICAgdGhpcy5Db21waWxlci5wcm90b3R5cGUudmlzaXRvcnMpKVxuICApIHtcbiAgICB3YXJuaW5nSXNzdWVkID0gdHJ1ZVxuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdbcmVtYXJrLW1hdGhdIFdhcm5pbmc6IHBsZWFzZSB1cGdyYWRlIHRvIHJlbWFyayAxMyB0byB1c2UgdGhpcyBwbHVnaW4nXG4gICAgKVxuICB9XG5cbiAgYWRkKCdtaWNyb21hcmtFeHRlbnNpb25zJywgc3ludGF4KVxuICBhZGQoJ2Zyb21NYXJrZG93bkV4dGVuc2lvbnMnLCBmcm9tTWFya2Rvd24pXG4gIGFkZCgndG9NYXJrZG93bkV4dGVuc2lvbnMnLCB0b01hcmtkb3duKVxuXG4gIGZ1bmN0aW9uIGFkZChmaWVsZCwgdmFsdWUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBvdGhlciBleHRlbnNpb25zLiAqL1xuICAgIGlmIChkYXRhW2ZpZWxkXSkgZGF0YVtmaWVsZF0ucHVzaCh2YWx1ZSlcbiAgICBlbHNlIGRhdGFbZmllbGRdID0gW3ZhbHVlXVxuICB9XG59XG4iLCJ2YXIgYXNjaWlBbHBoYW51bWVyaWMgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvYXNjaWktYWxwaGFudW1lcmljJylcbnZhciBhc2NpaUFscGhhID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL2FzY2lpLWFscGhhJylcblxudmFyIGRvbWFpbiA9IHt0b2tlbml6ZTogdG9rZW5pemVEb21haW59XG52YXIgcGF0aCA9IHt0b2tlbml6ZTogdG9rZW5pemVQYXRofVxudmFyIHB1bmN0dWF0aW9uID0ge3Rva2VuaXplOiB0b2tlbml6ZVB1bmN0dWF0aW9ufVxudmFyIHBhcmVuID0ge3Rva2VuaXplOiB0b2tlbml6ZVBhcmVufVxudmFyIG5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlID0ge3Rva2VuaXplOiB0b2tlbml6ZU5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlfVxuXG52YXIgd3d3QXV0b2xpbmsgPSB7dG9rZW5pemU6IHRva2VuaXplV3d3QXV0b2xpbmssIHByZXZpb3VzOiBwcmV2aW91c31cbnZhciBodHRwQXV0b2xpbmsgPSB7dG9rZW5pemU6IHRva2VuaXplSHR0cEF1dG9saW5rLCBwcmV2aW91czogcHJldmlvdXN9XG52YXIgZW1haWxBdXRvbGluayA9IHt0b2tlbml6ZTogdG9rZW5pemVFbWFpbEF1dG9saW5rLCBwcmV2aW91czogcHJldmlvdXN9XG5cbnZhciB0ZXh0ID0ge31cblxuLy8gRXhwb3J0IGhvb2tlZCBjb25zdHJ1Y3RzLlxuZXhwb3J0cy50ZXh0ID0gdGV4dFxuXG4vLyBgMGBcbnZhciBjb2RlID0gNDhcblxuLy8gV2hpbGUgdGhlIGNvZGUgaXMgc21hbGxlciB0aGFuIGB7YC5cbndoaWxlIChjb2RlIDwgMTIzKSB7XG4gIHRleHRbY29kZV0gPSBlbWFpbEF1dG9saW5rXG4gIGNvZGUrK1xuICAvLyBKdW1wIGZyb20gYDpgIC0+IGBBYFxuICBpZiAoY29kZSA9PT0gNTgpIGNvZGUgPSA2NVxuICAvLyBKdW1wIGZyb20gYFtgIC0+IGBhYFxuICBlbHNlIGlmIChjb2RlID09PSA5MSkgY29kZSA9IDk3XG59XG5cbi8vIGArYFxudGV4dFs0M10gPSBlbWFpbEF1dG9saW5rXG4vLyBgLWBcbnRleHRbNDVdID0gZW1haWxBdXRvbGlua1xuLy8gYC5gXG50ZXh0WzQ2XSA9IGVtYWlsQXV0b2xpbmtcbi8vIGBfYFxudGV4dFs5NV0gPSBlbWFpbEF1dG9saW5rXG4vLyBgaGAuXG50ZXh0WzcyXSA9IFtlbWFpbEF1dG9saW5rLCBodHRwQXV0b2xpbmtdXG50ZXh0WzEwNF0gPSBbZW1haWxBdXRvbGluaywgaHR0cEF1dG9saW5rXVxuLy8gYHdgLlxudGV4dFs4N10gPSBbZW1haWxBdXRvbGluaywgd3d3QXV0b2xpbmtdXG50ZXh0WzExOV0gPSBbZW1haWxBdXRvbGluaywgd3d3QXV0b2xpbmtdXG5cbmZ1bmN0aW9uIHRva2VuaXplRW1haWxBdXRvbGluayhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgaGFzRG90XG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gaG9va3MuICovXG4gICAgaWYgKCFnZm1BdGV4dChjb2RlKSB8fCAhcHJldmlvdXMoc2VsZi5wcmV2aW91cykpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdsaXRlcmFsQXV0b2xpbmsnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpdGVyYWxBdXRvbGlua0VtYWlsJylcbiAgICByZXR1cm4gYXRleHQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0ZXh0KGNvZGUpIHtcbiAgICBpZiAoZ2ZtQXRleHQoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGF0ZXh0XG4gICAgfVxuXG4gICAgLy8gYEBgXG4gICAgaWYgKGNvZGUgPT09IDY0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBsYWJlbFxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGxhYmVsKGNvZGUpIHtcbiAgICAvLyBgLmBcbiAgICBpZiAoY29kZSA9PT0gNDYpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKHB1bmN0dWF0aW9uLCBkb25lLCBkb3RDb250aW51YXRpb24pKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgLy8gYC1gXG4gICAgICBjb2RlID09PSA0NSB8fFxuICAgICAgLy8gYF9gXG4gICAgICBjb2RlID09PSA5NVxuICAgICkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2socHVuY3R1YXRpb24sIG5vaywgZGFzaE9yVW5kZXJzY29yZUNvbnRpbnVhdGlvbikoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoYXNjaWlBbHBoYW51bWVyaWMoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGxhYmVsXG4gICAgfVxuXG4gICAgcmV0dXJuIGRvbmUoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvdENvbnRpbnVhdGlvbihjb2RlKSB7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgaGFzRG90ID0gdHJ1ZVxuICAgIHJldHVybiBsYWJlbFxuICB9XG5cbiAgZnVuY3Rpb24gZGFzaE9yVW5kZXJzY29yZUNvbnRpbnVhdGlvbihjb2RlKSB7XG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGFmdGVyRGFzaE9yVW5kZXJzY29yZVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJEYXNoT3JVbmRlcnNjb3JlKGNvZGUpIHtcbiAgICAvLyBgLmBcbiAgICBpZiAoY29kZSA9PT0gNDYpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKHB1bmN0dWF0aW9uLCBub2ssIGRvdENvbnRpbnVhdGlvbikoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gbGFiZWwoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUoY29kZSkge1xuICAgIGlmIChoYXNEb3QpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGl0ZXJhbEF1dG9saW5rRW1haWwnKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaXRlcmFsQXV0b2xpbmsnKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplV3d3QXV0b2xpbmsoZWZmZWN0cywgb2ssIG5vaykge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBob29rcy4gKi9cbiAgICBpZiAoKGNvZGUgIT09IDg3ICYmIGNvZGUgLSAzMiAhPT0gODcpIHx8ICFwcmV2aW91cyhzZWxmLnByZXZpb3VzKSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpdGVyYWxBdXRvbGluaycpXG4gICAgZWZmZWN0cy5lbnRlcignbGl0ZXJhbEF1dG9saW5rV3d3JylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gdzJcbiAgfVxuXG4gIGZ1bmN0aW9uIHcyKGNvZGUpIHtcbiAgICAvLyBgd2BcbiAgICBpZiAoY29kZSA9PT0gODcgfHwgY29kZSAtIDMyID09PSA4Nykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gdzNcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB3Myhjb2RlKSB7XG4gICAgLy8gYHdgXG4gICAgaWYgKGNvZGUgPT09IDg3IHx8IGNvZGUgLSAzMiA9PT0gODcpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGRvdFxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvdChjb2RlKSB7XG4gICAgLy8gYC5gXG4gICAgaWYgKGNvZGUgPT09IDQ2KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoZG9tYWluLCBlZmZlY3RzLmF0dGVtcHQocGF0aCwgZG9uZSksIG5vaylcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBkb25lKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2xpdGVyYWxBdXRvbGlua1d3dycpXG4gICAgZWZmZWN0cy5leGl0KCdsaXRlcmFsQXV0b2xpbmsnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplSHR0cEF1dG9saW5rKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gaG9va3MuICovXG4gICAgaWYgKChjb2RlICE9PSA3MiAmJiBjb2RlIC0gMzIgIT09IDcyKSB8fCAhcHJldmlvdXMoc2VsZi5wcmV2aW91cykpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCdsaXRlcmFsQXV0b2xpbmsnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpdGVyYWxBdXRvbGlua0h0dHAnKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiB0MVxuICB9XG5cbiAgZnVuY3Rpb24gdDEoY29kZSkge1xuICAgIC8vIGB0YFxuICAgIGlmIChjb2RlID09PSA4NCB8fCBjb2RlIC0gMzIgPT09IDg0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiB0MlxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHQyKGNvZGUpIHtcbiAgICAvLyBgdGBcbiAgICBpZiAoY29kZSA9PT0gODQgfHwgY29kZSAtIDMyID09PSA4NCkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gcFxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHAoY29kZSkge1xuICAgIC8vIGBwYFxuICAgIGlmIChjb2RlID09PSA4MCB8fCBjb2RlIC0gMzIgPT09IDgwKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gcyhjb2RlKSB7XG4gICAgLy8gYHNgXG4gICAgaWYgKGNvZGUgPT09IDgzIHx8IGNvZGUgLSAzMiA9PT0gODMpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGNvbG9uXG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9uKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb2xvbihjb2RlKSB7XG4gICAgLy8gYDpgXG4gICAgaWYgKGNvZGUgPT09IDU4KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzbGFzaDFcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBzbGFzaDEoY29kZSkge1xuICAgIC8vIGAvYFxuICAgIGlmIChjb2RlID09PSA0Nykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gc2xhc2gyXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gc2xhc2gyKGNvZGUpIHtcbiAgICAvLyBgL2BcbiAgICBpZiAoY29kZSA9PT0gNDcpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChkb21haW4sIGVmZmVjdHMuYXR0ZW1wdChwYXRoLCBkb25lKSwgbm9rKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCgnbGl0ZXJhbEF1dG9saW5rSHR0cCcpXG4gICAgZWZmZWN0cy5leGl0KCdsaXRlcmFsQXV0b2xpbmsnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplRG9tYWluKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIGhhc1VuZGVyc2NvcmVJbkxhc3RTZWdtZW50XG4gIHZhciBoYXNVbmRlcnNjb3JlSW5MYXN0TGFzdFNlZ21lbnRcbiAgdmFyIGhhc0RvdFxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdsaXRlcmFsQXV0b2xpbmtEb21haW4nKVxuICAgIHJldHVybiBkb21haW4oY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbWFpbihjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgLy8gYC1gXG4gICAgICBjb2RlID09PSA0NSB8fFxuICAgICAgLy8gYF9gXG4gICAgICBjb2RlID09PSA5NSB8fFxuICAgICAgYXNjaWlBbHBoYW51bWVyaWMoY29kZSlcbiAgICApIHtcbiAgICAgIGlmIChjb2RlID09PSA5NSkge1xuICAgICAgICBoYXNVbmRlcnNjb3JlSW5MYXN0U2VnbWVudCA9IHRydWVcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gZG9tYWluXG4gICAgfVxuXG4gICAgLy8gYC5gXG4gICAgaWYgKGNvZGUgPT09IDQ2KSB7XG4gICAgICByZXR1cm4gZWZmZWN0cy5jaGVjayhwdW5jdHVhdGlvbiwgZG9uZSwgZG90Q29udGludWF0aW9uKShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBkb25lKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBkb3RDb250aW51YXRpb24oY29kZSkge1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGhhc0RvdCA9IHRydWVcbiAgICBoYXNVbmRlcnNjb3JlSW5MYXN0TGFzdFNlZ21lbnQgPSBoYXNVbmRlcnNjb3JlSW5MYXN0U2VnbWVudFxuICAgIGhhc1VuZGVyc2NvcmVJbkxhc3RTZWdtZW50ID0gdW5kZWZpbmVkXG4gICAgcmV0dXJuIGRvbWFpblxuICB9XG5cbiAgZnVuY3Rpb24gZG9uZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgaGFzRG90ICYmXG4gICAgICAhaGFzVW5kZXJzY29yZUluTGFzdExhc3RTZWdtZW50ICYmXG4gICAgICAhaGFzVW5kZXJzY29yZUluTGFzdFNlZ21lbnRcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgnbGl0ZXJhbEF1dG9saW5rRG9tYWluJylcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZVBhdGgoZWZmZWN0cywgb2spIHtcbiAgdmFyIGJhbGFuY2UgPSAwXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIGlmIChwYXRoRW5kKGNvZGUpKSB7XG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAodHJhaWxpbmdQdW5jdHVhdGlvbihjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2socHVuY3R1YXRpb24sIG9rLCBhdFBhdGhTdGFydCkoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gYXRQYXRoU3RhcnQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0UGF0aFN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdsaXRlcmFsQXV0b2xpbmtXd3dQYXRoJylcbiAgICByZXR1cm4gaW5QYXRoKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBpblBhdGgoY29kZSkge1xuICAgIC8vIGAmYFxuICAgIGlmIChjb2RlID09PSAzOCkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2soXG4gICAgICAgIG5hbWVkQ2hhcmFjdGVyUmVmZXJlbmNlLFxuICAgICAgICBhdFBhdGhFbmQsXG4gICAgICAgIGNvbnRpbnVlZFB1bmN0dWF0aW9uXG4gICAgICApKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gYChgXG4gICAgaWYgKGNvZGUgPT09IDQwKSB7XG4gICAgICBiYWxhbmNlKytcbiAgICB9XG5cbiAgICAvLyBgKWBcbiAgICBpZiAoY29kZSA9PT0gNDEpIHtcbiAgICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKHBhcmVuLCBwYXJlbkF0UGF0aEVuZCwgY29udGludWVkUHVuY3R1YXRpb24pKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKHBhdGhFbmQoY29kZSkpIHtcbiAgICAgIHJldHVybiBhdFBhdGhFbmQoY29kZSlcbiAgICB9XG5cbiAgICBpZiAodHJhaWxpbmdQdW5jdHVhdGlvbihjb2RlKSkge1xuICAgICAgcmV0dXJuIGVmZmVjdHMuY2hlY2socHVuY3R1YXRpb24sIGF0UGF0aEVuZCwgY29udGludWVkUHVuY3R1YXRpb24pKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGluUGF0aFxuICB9XG5cbiAgZnVuY3Rpb24gY29udGludWVkUHVuY3R1YXRpb24oY29kZSkge1xuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBpblBhdGhcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcmVuQXRQYXRoRW5kKGNvZGUpIHtcbiAgICBiYWxhbmNlLS1cbiAgICByZXR1cm4gYmFsYW5jZSA8IDAgPyBhdFBhdGhFbmQoY29kZSkgOiBjb250aW51ZWRQdW5jdHVhdGlvbihjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYXRQYXRoRW5kKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2xpdGVyYWxBdXRvbGlua1d3d1BhdGgnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgLy8gQXNzdW1lIGFuIGFtcGVyc2FuZC5cbiAgICBlZmZlY3RzLmVudGVyKCdsaXRlcmFsQXV0b2xpbmtDaGFyYWN0ZXJSZWZlcmVuY2VOYW1lZCcpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIGluc2lkZVxuICB9XG5cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICBpZiAoYXNjaWlBbHBoYShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5zaWRlXG4gICAgfVxuXG4gICAgLy8gYDtgXG4gICAgaWYgKGNvZGUgPT09IDU5KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBhZnRlclxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvLyBJZiB0aGUgbmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZSBpcyBmb2xsb3dlZCBieSB0aGUgZW5kIG9mIHRoZSBwYXRoLCBpdOKAmXNcbiAgICAvLyBub3QgY29udGludWVkIHB1bmN0dWF0aW9uLlxuICAgIGVmZmVjdHMuZXhpdCgnbGl0ZXJhbEF1dG9saW5rQ2hhcmFjdGVyUmVmZXJlbmNlTmFtZWQnKVxuICAgIHJldHVybiBwYXRoRW5kKGNvZGUpID8gb2soY29kZSkgOiBub2soY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZVBhcmVuKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8vIEFzc3VtZSBhIHJpZ2h0IHBhcmVuLlxuICAgIGVmZmVjdHMuZW50ZXIoJ2xpdGVyYWxBdXRvbGlua1BhcmVuJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gYWZ0ZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICAvLyBJZiB0aGUgcHVuY3R1YXRpb24gbWFya2VyIGlzIGZvbGxvd2VkIGJ5IHRoZSBlbmQgb2YgdGhlIHBhdGgsIGl04oCZcyBub3RcbiAgICAvLyBjb250aW51ZWQgcHVuY3R1YXRpb24uXG4gICAgZWZmZWN0cy5leGl0KCdsaXRlcmFsQXV0b2xpbmtQYXJlbicpXG4gICAgcmV0dXJuIHBhdGhFbmQoY29kZSkgfHxcbiAgICAgIC8vIGApYFxuICAgICAgY29kZSA9PT0gNDFcbiAgICAgID8gb2soY29kZSlcbiAgICAgIDogbm9rKGNvZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gdG9rZW5pemVQdW5jdHVhdGlvbihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCdsaXRlcmFsQXV0b2xpbmtQdW5jdHVhdGlvbicpXG4gICAgLy8gQWx3YXlzIGEgdmFsaWQgdHJhaWxpbmcgcHVuY3R1YXRpb24gbWFya2VyLlxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBhZnRlclxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXIoY29kZSkge1xuICAgIC8vIElmIHRoZSBwdW5jdHVhdGlvbiBtYXJrZXIgaXMgZm9sbG93ZWQgYnkgdGhlIGVuZCBvZiB0aGUgcGF0aCwgaXTigJlzIG5vdFxuICAgIC8vIGNvbnRpbnVlZCBwdW5jdHVhdGlvbi5cbiAgICBlZmZlY3RzLmV4aXQoJ2xpdGVyYWxBdXRvbGlua1B1bmN0dWF0aW9uJylcbiAgICByZXR1cm4gcGF0aEVuZChjb2RlKSA/IG9rKGNvZGUpIDogbm9rKGNvZGUpXG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhaWxpbmdQdW5jdHVhdGlvbihjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgLy8gRXhjbGFtYXRpb24gbWFyay5cbiAgICBjb2RlID09PSAzMyB8fFxuICAgIC8vIEFzdGVyaXNrLlxuICAgIGNvZGUgPT09IDQyIHx8XG4gICAgLy8gQ29tbWEuXG4gICAgY29kZSA9PT0gNDQgfHxcbiAgICAvLyBEb3QuXG4gICAgY29kZSA9PT0gNDYgfHxcbiAgICAvLyBDb2xvbi5cbiAgICBjb2RlID09PSA1OCB8fFxuICAgIC8vIFF1ZXN0aW9uIG1hcmsuXG4gICAgY29kZSA9PT0gNjMgfHxcbiAgICAvLyBVbmRlcnNjb3JlLlxuICAgIGNvZGUgPT09IDk1IHx8XG4gICAgLy8gVGlsZGUuXG4gICAgY29kZSA9PT0gMTI2XG4gIClcbn1cblxuZnVuY3Rpb24gcGF0aEVuZChjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgLy8gRU9GLlxuICAgIGNvZGUgPT09IG51bGwgfHxcbiAgICAvLyBDUiwgTEYsIENSTEYsIEhULCBWUy5cbiAgICBjb2RlIDwgMCB8fFxuICAgIC8vIFNwYWNlLlxuICAgIGNvZGUgPT09IDMyIHx8XG4gICAgLy8gTGVzcyB0aGFuLlxuICAgIGNvZGUgPT09IDYwXG4gIClcbn1cblxuZnVuY3Rpb24gZ2ZtQXRleHQoY29kZSkge1xuICByZXR1cm4gKFxuICAgIC8vIGArYFxuICAgIGNvZGUgPT09IDQzIHx8XG4gICAgLy8gYC1gXG4gICAgY29kZSA9PT0gNDUgfHxcbiAgICAvLyBgLmBcbiAgICBjb2RlID09PSA0NiB8fFxuICAgIC8vIGBfYFxuICAgIGNvZGUgPT09IDk1IHx8XG4gICAgYXNjaWlBbHBoYW51bWVyaWMoY29kZSlcbiAgKVxufVxuXG5mdW5jdGlvbiBwcmV2aW91cyhjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgLy8gRU9GLlxuICAgIGNvZGUgPT09IG51bGwgfHxcbiAgICAvLyBDUiwgTEYsIENSTEYsIEhULCBWUy5cbiAgICBjb2RlIDwgMCB8fFxuICAgIC8vIFNwYWNlLlxuICAgIGNvZGUgPT09IDMyIHx8XG4gICAgLy8gTGVmdCBwYXJlbi5cbiAgICBjb2RlID09PSA0MCB8fFxuICAgIC8vIEFzdGVyaXNrLlxuICAgIGNvZGUgPT09IDQyIHx8XG4gICAgLy8gVW5kZXJzY29yZS5cbiAgICBjb2RlID09PSA5NSB8fFxuICAgIC8vIFRpbGRlLlxuICAgIGNvZGUgPT09IDEyNlxuICApXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3ludGF4JylcbiIsIm1vZHVsZS5leHBvcnRzID0gY3JlYXRlXG5cbnZhciBjbGFzc2lmeUNoYXJhY3RlciA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3V0aWwvY2xhc3NpZnktY2hhcmFjdGVyJylcbnZhciBjaHVua2VkU3BsaWNlID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvdXRpbC9jaHVua2VkLXNwbGljZScpXG52YXIgcmVzb2x2ZUFsbCA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3V0aWwvcmVzb2x2ZS1hbGwnKVxudmFyIHNoYWxsb3cgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC91dGlsL3NoYWxsb3cnKVxuXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBzaW5nbGUgPSBzZXR0aW5ncy5zaW5nbGVUaWxkZVxuICB2YXIgdG9rZW5pemVyID0ge1xuICAgIHRva2VuaXplOiB0b2tlbml6ZVN0cmlrZXRocm91Z2gsXG4gICAgcmVzb2x2ZUFsbDogcmVzb2x2ZUFsbFN0cmlrZXRocm91Z2hcbiAgfVxuXG4gIGlmIChzaW5nbGUgPT09IG51bGwgfHwgc2luZ2xlID09PSB1bmRlZmluZWQpIHtcbiAgICBzaW5nbGUgPSB0cnVlXG4gIH1cblxuICByZXR1cm4ge3RleHQ6IHsxMjY6IHRva2VuaXplcn0sIGluc2lkZVNwYW46IHtudWxsOiB0b2tlbml6ZXJ9fVxuXG4gIC8vIFRha2UgZXZlbnRzIGFuZCByZXNvbHZlIHN0cmlrZXRocm91Z2guXG4gIGZ1bmN0aW9uIHJlc29sdmVBbGxTdHJpa2V0aHJvdWdoKGV2ZW50cywgY29udGV4dCkge1xuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIHN0cmlrZXRocm91Z2hcbiAgICB2YXIgdGV4dFxuICAgIHZhciBvcGVuXG4gICAgdmFyIG5leHRFdmVudHNcblxuICAgIC8vIFdhbGsgdGhyb3VnaCBhbGwgZXZlbnRzLlxuICAgIHdoaWxlICgrK2luZGV4IDwgZXZlbnRzLmxlbmd0aCkge1xuICAgICAgLy8gRmluZCBhIHRva2VuIHRoYXQgY2FuIGNsb3NlLlxuICAgICAgaWYgKFxuICAgICAgICBldmVudHNbaW5kZXhdWzBdID09PSAnZW50ZXInICYmXG4gICAgICAgIGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ3N0cmlrZXRocm91Z2hTZXF1ZW5jZVRlbXBvcmFyeScgJiZcbiAgICAgICAgZXZlbnRzW2luZGV4XVsxXS5fY2xvc2VcbiAgICAgICkge1xuICAgICAgICBvcGVuID0gaW5kZXhcblxuICAgICAgICAvLyBOb3cgd2FsayBiYWNrIHRvIGZpbmQgYW4gb3BlbmVyLlxuICAgICAgICB3aGlsZSAob3Blbi0tKSB7XG4gICAgICAgICAgLy8gRmluZCBhIHRva2VuIHRoYXQgY2FuIG9wZW4gdGhlIGNsb3Nlci5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBldmVudHNbb3Blbl1bMF0gPT09ICdleGl0JyAmJlxuICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLnR5cGUgPT09ICdzdHJpa2V0aHJvdWdoU2VxdWVuY2VUZW1wb3JhcnknICYmXG4gICAgICAgICAgICBldmVudHNbb3Blbl1bMV0uX29wZW4gJiZcbiAgICAgICAgICAgIC8vIElmIHRoZSBzaXplcyBhcmUgdGhlIHNhbWU6XG4gICAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbaW5kZXhdWzFdLnN0YXJ0Lm9mZnNldCA9PT1cbiAgICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLmVuZC5vZmZzZXQgLSBldmVudHNbb3Blbl1bMV0uc3RhcnQub2Zmc2V0XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBldmVudHNbaW5kZXhdWzFdLnR5cGUgPSAnc3RyaWtldGhyb3VnaFNlcXVlbmNlJ1xuICAgICAgICAgICAgZXZlbnRzW29wZW5dWzFdLnR5cGUgPSAnc3RyaWtldGhyb3VnaFNlcXVlbmNlJ1xuXG4gICAgICAgICAgICBzdHJpa2V0aHJvdWdoID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnc3RyaWtldGhyb3VnaCcsXG4gICAgICAgICAgICAgIHN0YXJ0OiBzaGFsbG93KGV2ZW50c1tvcGVuXVsxXS5zdGFydCksXG4gICAgICAgICAgICAgIGVuZDogc2hhbGxvdyhldmVudHNbaW5kZXhdWzFdLmVuZClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGV4dCA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmlrZXRocm91Z2hUZXh0JyxcbiAgICAgICAgICAgICAgc3RhcnQ6IHNoYWxsb3coZXZlbnRzW29wZW5dWzFdLmVuZCksXG4gICAgICAgICAgICAgIGVuZDogc2hhbGxvdyhldmVudHNbaW5kZXhdWzFdLnN0YXJ0KVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBPcGVuaW5nLlxuICAgICAgICAgICAgbmV4dEV2ZW50cyA9IFtcbiAgICAgICAgICAgICAgWydlbnRlcicsIHN0cmlrZXRocm91Z2gsIGNvbnRleHRdLFxuICAgICAgICAgICAgICBbJ2VudGVyJywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XSxcbiAgICAgICAgICAgICAgWydleGl0JywgZXZlbnRzW29wZW5dWzFdLCBjb250ZXh0XSxcbiAgICAgICAgICAgICAgWydlbnRlcicsIHRleHQsIGNvbnRleHRdXG4gICAgICAgICAgICBdXG5cbiAgICAgICAgICAgIC8vIEJldHdlZW4uXG4gICAgICAgICAgICBjaHVua2VkU3BsaWNlKFxuICAgICAgICAgICAgICBuZXh0RXZlbnRzLFxuICAgICAgICAgICAgICBuZXh0RXZlbnRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgcmVzb2x2ZUFsbChcbiAgICAgICAgICAgICAgICBjb250ZXh0LnBhcnNlci5jb25zdHJ1Y3RzLmluc2lkZVNwYW4ubnVsbCxcbiAgICAgICAgICAgICAgICBldmVudHMuc2xpY2Uob3BlbiArIDEsIGluZGV4KSxcbiAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcblxuICAgICAgICAgICAgLy8gQ2xvc2luZy5cbiAgICAgICAgICAgIGNodW5rZWRTcGxpY2UobmV4dEV2ZW50cywgbmV4dEV2ZW50cy5sZW5ndGgsIDAsIFtcbiAgICAgICAgICAgICAgWydleGl0JywgdGV4dCwgY29udGV4dF0sXG4gICAgICAgICAgICAgIFsnZW50ZXInLCBldmVudHNbaW5kZXhdWzFdLCBjb250ZXh0XSxcbiAgICAgICAgICAgICAgWydleGl0JywgZXZlbnRzW2luZGV4XVsxXSwgY29udGV4dF0sXG4gICAgICAgICAgICAgIFsnZXhpdCcsIHN0cmlrZXRocm91Z2gsIGNvbnRleHRdXG4gICAgICAgICAgICBdKVxuXG4gICAgICAgICAgICBjaHVua2VkU3BsaWNlKGV2ZW50cywgb3BlbiAtIDEsIGluZGV4IC0gb3BlbiArIDMsIG5leHRFdmVudHMpXG5cbiAgICAgICAgICAgIGluZGV4ID0gb3BlbiArIG5leHRFdmVudHMubGVuZ3RoIC0gMlxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVtb3ZlUmVtYWluaW5nU2VxdWVuY2VzKGV2ZW50cylcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVJlbWFpbmluZ1NlcXVlbmNlcyhldmVudHMpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBsZW5ndGggPSBldmVudHMubGVuZ3RoXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGV2ZW50c1tpbmRleF1bMV0udHlwZSA9PT0gJ3N0cmlrZXRocm91Z2hTZXF1ZW5jZVRlbXBvcmFyeScpIHtcbiAgICAgICAgZXZlbnRzW2luZGV4XVsxXS50eXBlID0gJ2RhdGEnXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50c1xuICB9XG5cbiAgZnVuY3Rpb24gdG9rZW5pemVTdHJpa2V0aHJvdWdoKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICB2YXIgcHJldmlvdXMgPSB0aGlzLnByZXZpb3VzXG4gICAgdmFyIGV2ZW50cyA9IHRoaXMuZXZlbnRzXG4gICAgdmFyIHNpemUgPSAwXG5cbiAgICByZXR1cm4gc3RhcnRcblxuICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgY29kZSAhPT0gMTI2IHx8XG4gICAgICAgIChwcmV2aW91cyA9PT0gMTI2ICYmXG4gICAgICAgICAgZXZlbnRzW2V2ZW50cy5sZW5ndGggLSAxXVsxXS50eXBlICE9PSAnY2hhcmFjdGVyRXNjYXBlJylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3N0cmlrZXRocm91Z2hTZXF1ZW5jZVRlbXBvcmFyeScpXG4gICAgICByZXR1cm4gbW9yZShjb2RlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vcmUoY29kZSkge1xuICAgICAgdmFyIGJlZm9yZSA9IGNsYXNzaWZ5Q2hhcmFjdGVyKHByZXZpb3VzKVxuICAgICAgdmFyIHRva2VuXG4gICAgICB2YXIgYWZ0ZXJcblxuICAgICAgaWYgKGNvZGUgPT09IDEyNikge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSB0aGlyZCBtYXJrZXIsIGV4aXQuXG4gICAgICAgIGlmIChzaXplID4gMSkgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgICAgc2l6ZSsrXG4gICAgICAgIHJldHVybiBtb3JlXG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplIDwgMiAmJiAhc2luZ2xlKSByZXR1cm4gbm9rKGNvZGUpXG4gICAgICB0b2tlbiA9IGVmZmVjdHMuZXhpdCgnc3RyaWtldGhyb3VnaFNlcXVlbmNlVGVtcG9yYXJ5JylcbiAgICAgIGFmdGVyID0gY2xhc3NpZnlDaGFyYWN0ZXIoY29kZSlcbiAgICAgIHRva2VuLl9vcGVuID0gIWFmdGVyIHx8IChhZnRlciA9PT0gMiAmJiBiZWZvcmUpXG4gICAgICB0b2tlbi5fY2xvc2UgPSAhYmVmb3JlIHx8IChiZWZvcmUgPT09IDIgJiYgYWZ0ZXIpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydHMuZmxvdyA9IHtcbiAgbnVsbDoge3Rva2VuaXplOiB0b2tlbml6ZVRhYmxlLCByZXNvbHZlOiByZXNvbHZlVGFibGUsIGludGVycnVwdGlibGU6IHRydWV9XG59XG5cbnZhciBjcmVhdGVTcGFjZSA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2ZhY3Rvcnktc3BhY2UnKVxuXG52YXIgc2V0ZXh0VW5kZXJsaW5lTWluaSA9IHt0b2tlbml6ZTogdG9rZW5pemVTZXRleHRVbmRlcmxpbmVNaW5pLCBwYXJ0aWFsOiB0cnVlfVxudmFyIG5leHRQcmVmaXhlZE9yQmxhbmsgPSB7dG9rZW5pemU6IHRva2VuaXplTmV4dFByZWZpeGVkT3JCbGFuaywgcGFydGlhbDogdHJ1ZX1cblxuZnVuY3Rpb24gcmVzb2x2ZVRhYmxlKGV2ZW50cywgY29udGV4dCkge1xuICB2YXIgbGVuZ3RoID0gZXZlbnRzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgdG9rZW5cbiAgdmFyIGluSGVhZFxuICB2YXIgaW5EZWxpbWl0ZXJSb3dcbiAgdmFyIGluUm93XG4gIHZhciBjZWxsXG4gIHZhciBjb250ZW50XG4gIHZhciB0ZXh0XG4gIHZhciBjb250ZW50U3RhcnRcbiAgdmFyIGNvbnRlbnRFbmRcbiAgdmFyIGNlbGxTdGFydFxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdG9rZW4gPSBldmVudHNbaW5kZXhdWzFdXG5cbiAgICBpZiAoaW5Sb3cpIHtcbiAgICAgIGlmICh0b2tlbi50eXBlID09PSAndGVtcG9yYXJ5VGFibGVDZWxsQ29udGVudCcpIHtcbiAgICAgICAgY29udGVudFN0YXJ0ID0gY29udGVudFN0YXJ0IHx8IGluZGV4XG4gICAgICAgIGNvbnRlbnRFbmQgPSBpbmRleFxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIC8vIENvbWJpbmUgc2VwYXJhdGUgY29udGVudCBwYXJ0cyBpbnRvIG9uZS5cbiAgICAgICAgKHRva2VuLnR5cGUgPT09ICd0YWJsZUNlbGxEaXZpZGVyJyB8fCB0b2tlbi50eXBlID09PSAndGFibGVSb3cnKSAmJlxuICAgICAgICBjb250ZW50RW5kXG4gICAgICApIHtcbiAgICAgICAgY29udGVudCA9IHtcbiAgICAgICAgICB0eXBlOiAndGFibGVDb250ZW50JyxcbiAgICAgICAgICBzdGFydDogZXZlbnRzW2NvbnRlbnRTdGFydF1bMV0uc3RhcnQsXG4gICAgICAgICAgZW5kOiBldmVudHNbY29udGVudEVuZF1bMV0uZW5kXG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IHtcbiAgICAgICAgICB0eXBlOiAnY2h1bmtUZXh0JyxcbiAgICAgICAgICBzdGFydDogY29udGVudC5zdGFydCxcbiAgICAgICAgICBlbmQ6IGNvbnRlbnQuZW5kLFxuICAgICAgICAgIGNvbnRlbnRUeXBlOiAndGV4dCdcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50cy5zcGxpY2UoXG4gICAgICAgICAgY29udGVudFN0YXJ0LFxuICAgICAgICAgIGNvbnRlbnRFbmQgLSBjb250ZW50U3RhcnQgKyAxLFxuICAgICAgICAgIFsnZW50ZXInLCBjb250ZW50LCBjb250ZXh0XSxcbiAgICAgICAgICBbJ2VudGVyJywgdGV4dCwgY29udGV4dF0sXG4gICAgICAgICAgWydleGl0JywgdGV4dCwgY29udGV4dF0sXG4gICAgICAgICAgWydleGl0JywgY29udGVudCwgY29udGV4dF1cbiAgICAgICAgKVxuICAgICAgICBpbmRleCAtPSBjb250ZW50RW5kIC0gY29udGVudFN0YXJ0IC0gM1xuICAgICAgICBsZW5ndGggPSBldmVudHMubGVuZ3RoXG4gICAgICAgIGNvbnRlbnRTdGFydCA9IHVuZGVmaW5lZFxuICAgICAgICBjb250ZW50RW5kID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgZXZlbnRzW2luZGV4XVswXSA9PT0gJ2V4aXQnICYmXG4gICAgICAodG9rZW4udHlwZSA9PT0gJ3RhYmxlQ2VsbERpdmlkZXInIHx8IHRva2VuLnR5cGUgPT09ICd0YWJsZVJvdycpICYmXG4gICAgICBjZWxsU3RhcnQgJiZcbiAgICAgIGNlbGxTdGFydCArIDEgPCBpbmRleFxuICAgICkge1xuICAgICAgY2VsbCA9IHtcbiAgICAgICAgdHlwZTogaW5EZWxpbWl0ZXJSb3dcbiAgICAgICAgICA/ICd0YWJsZURlbGltaXRlcidcbiAgICAgICAgICA6IGluSGVhZFxuICAgICAgICAgID8gJ3RhYmxlSGVhZGVyJ1xuICAgICAgICAgIDogJ3RhYmxlRGF0YScsXG4gICAgICAgIHN0YXJ0OiBldmVudHNbY2VsbFN0YXJ0XVsxXS5zdGFydCxcbiAgICAgICAgZW5kOiBldmVudHNbaW5kZXhdWzFdLmVuZFxuICAgICAgfVxuICAgICAgZXZlbnRzLnNwbGljZShpbmRleCArICh0b2tlbi50eXBlID09PSAndGFibGVDZWxsRGl2aWRlcicgPyAxIDogMCksIDAsIFtcbiAgICAgICAgJ2V4aXQnLFxuICAgICAgICBjZWxsLFxuICAgICAgICBjb250ZXh0XG4gICAgICBdKVxuICAgICAgZXZlbnRzLnNwbGljZShjZWxsU3RhcnQsIDAsIFsnZW50ZXInLCBjZWxsLCBjb250ZXh0XSlcbiAgICAgIGluZGV4ICs9IDJcbiAgICAgIGxlbmd0aCA9IGV2ZW50cy5sZW5ndGhcbiAgICAgIGNlbGxTdGFydCA9IGluZGV4ICsgMVxuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAndGFibGVSb3cnKSB7XG4gICAgICBpblJvdyA9IGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcidcblxuICAgICAgaWYgKGluUm93KSB7XG4gICAgICAgIGNlbGxTdGFydCA9IGluZGV4ICsgMVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAndGFibGVEZWxpbWl0ZXJSb3cnKSB7XG4gICAgICBpbkRlbGltaXRlclJvdyA9IGV2ZW50c1tpbmRleF1bMF0gPT09ICdlbnRlcidcblxuICAgICAgaWYgKGluRGVsaW1pdGVyUm93KSB7XG4gICAgICAgIGNlbGxTdGFydCA9IGluZGV4ICsgMVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0b2tlbi50eXBlID09PSAndGFibGVIZWFkJykge1xuICAgICAgaW5IZWFkID0gZXZlbnRzW2luZGV4XVswXSA9PT0gJ2VudGVyJ1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudHNcbn1cblxuZnVuY3Rpb24gdG9rZW5pemVUYWJsZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBhbGlnbiA9IFtdXG4gIHZhciB0YWJsZUhlYWRlckNvdW50ID0gMFxuICB2YXIgc2VlbkRlbGltaXRlclxuICB2YXIgaGFzRGFzaFxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSB1c2VkIHRvIGJlIHBhc3NlZCBpbiBiZXRhIG1pY3JvbWFyayB2ZXJzaW9ucy4gKi9cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ3RhYmxlJykuX2FsaWduID0gYWxpZ25cbiAgICBlZmZlY3RzLmVudGVyKCd0YWJsZUhlYWQnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ3RhYmxlUm93JylcblxuICAgIC8vIElmIHdlIHN0YXJ0IHdpdGggYSBwaXBlLCB3ZSBvcGVuIGEgY2VsbCBtYXJrZXIuXG4gICAgaWYgKGNvZGUgPT09IDEyNCkge1xuICAgICAgcmV0dXJuIGNlbGxEaXZpZGVySGVhZChjb2RlKVxuICAgIH1cblxuICAgIHRhYmxlSGVhZGVyQ291bnQrK1xuICAgIGVmZmVjdHMuZW50ZXIoJ3RlbXBvcmFyeVRhYmxlQ2VsbENvbnRlbnQnKVxuICAgIC8vIENhbuKAmXQgYmUgc3BhY2Ugb3IgZW9scyBhdCB0aGUgc3RhcnQgb2YgYSBjb25zdHJ1Y3QsIHNvIHdl4oCZcmUgaW4gYSBjZWxsLlxuICAgIHJldHVybiBpbkNlbGxDb250ZW50SGVhZChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY2VsbERpdmlkZXJIZWFkKGNvZGUpIHtcbiAgICAvLyBBbHdheXMgYSBwaXBlLlxuICAgIGVmZmVjdHMuZW50ZXIoJ3RhYmxlQ2VsbERpdmlkZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgndGFibGVDZWxsRGl2aWRlcicpXG4gICAgc2VlbkRlbGltaXRlciA9IHRydWVcbiAgICByZXR1cm4gY2VsbEJyZWFrSGVhZFxuICB9XG5cbiAgZnVuY3Rpb24gY2VsbEJyZWFrSGVhZChjb2RlKSB7XG4gICAgLy8gRU9GLCBDUiwgTEYsIENSTEYuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gLTUgfHwgY29kZSA9PT0gLTQgfHwgY29kZSA9PT0gLTMpIHtcbiAgICAgIHJldHVybiBhdFJvd0VuZEhlYWQoY29kZSlcbiAgICB9XG5cbiAgICAvLyBIVCwgVlMsIFNQLlxuICAgIGlmIChjb2RlID09PSAtMiB8fCBjb2RlID09PSAtMSB8fCBjb2RlID09PSAzMikge1xuICAgICAgZWZmZWN0cy5lbnRlcignd2hpdGVzcGFjZScpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbldoaXRlc3BhY2VIZWFkXG4gICAgfVxuXG4gICAgaWYgKHNlZW5EZWxpbWl0ZXIpIHtcbiAgICAgIHNlZW5EZWxpbWl0ZXIgPSB1bmRlZmluZWRcbiAgICAgIHRhYmxlSGVhZGVyQ291bnQrK1xuICAgIH1cblxuICAgIC8vIGB8YFxuICAgIGlmIChjb2RlID09PSAxMjQpIHtcbiAgICAgIHJldHVybiBjZWxsRGl2aWRlckhlYWQoY29kZSlcbiAgICB9XG5cbiAgICAvLyBBbnl0aGluZyBlbHNlIGlzIGNlbGwgY29udGVudC5cbiAgICBlZmZlY3RzLmVudGVyKCd0ZW1wb3JhcnlUYWJsZUNlbGxDb250ZW50JylcbiAgICByZXR1cm4gaW5DZWxsQ29udGVudEhlYWQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGluV2hpdGVzcGFjZUhlYWQoY29kZSkge1xuICAgIC8vIEhULCBWUywgU1AuXG4gICAgaWYgKGNvZGUgPT09IC0yIHx8IGNvZGUgPT09IC0xIHx8IGNvZGUgPT09IDMyKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbldoaXRlc3BhY2VIZWFkXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCd3aGl0ZXNwYWNlJylcbiAgICByZXR1cm4gY2VsbEJyZWFrSGVhZChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gaW5DZWxsQ29udGVudEhlYWQoY29kZSkge1xuICAgIC8vIEVPRiwgd2hpdGVzcGFjZSwgcGlwZVxuICAgIGlmIChjb2RlID09PSBudWxsIHx8IGNvZGUgPCAwIHx8IGNvZGUgPT09IDMyIHx8IGNvZGUgPT09IDEyNCkge1xuICAgICAgZWZmZWN0cy5leGl0KCd0ZW1wb3JhcnlUYWJsZUNlbGxDb250ZW50JylcbiAgICAgIHJldHVybiBjZWxsQnJlYWtIZWFkKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgLy8gYFxcYFxuICAgIHJldHVybiBjb2RlID09PSA5MiA/IGluQ2VsbENvbnRlbnRFc2NhcGVIZWFkIDogaW5DZWxsQ29udGVudEhlYWRcbiAgfVxuXG4gIGZ1bmN0aW9uIGluQ2VsbENvbnRlbnRFc2NhcGVIZWFkKGNvZGUpIHtcbiAgICAvLyBgXFxgIG9yIGB8YFxuICAgIGlmIChjb2RlID09PSA5MiB8fCBjb2RlID09PSAxMjQpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluQ2VsbENvbnRlbnRIZWFkXG4gICAgfVxuXG4gICAgLy8gQW55dGhpbmcgZWxzZS5cbiAgICByZXR1cm4gaW5DZWxsQ29udGVudEhlYWQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGF0Um93RW5kSGVhZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQoJ3RhYmxlUm93JylcbiAgICBlZmZlY3RzLmV4aXQoJ3RhYmxlSGVhZCcpXG5cbiAgICAvLyBBbHdheXMgYSBsaW5lIGVuZGluZy5cbiAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuXG4gICAgLy8gSWYgYSBzZXRleHQgaGVhZGluZywgZXhpdC5cbiAgICByZXR1cm4gZWZmZWN0cy5jaGVjayhcbiAgICAgIHNldGV4dFVuZGVybGluZU1pbmksXG4gICAgICBub2ssXG4gICAgICAvLyBTdXBwb3J0IGFuIGluZGVudCBiZWZvcmUgdGhlIGRlbGltaXRlciByb3cuXG4gICAgICBjcmVhdGVTcGFjZShlZmZlY3RzLCByb3dTdGFydERlbGltaXRlciwgJ2xpbmVQcmVmaXgnLCA0KVxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvd1N0YXJ0RGVsaW1pdGVyKGNvZGUpIHtcbiAgICAvLyBJZiB0aGVyZeKAmXMgYW5vdGhlciBzcGFjZSwgb3Igd2XigJlyZSBhdCB0aGUgRU9ML0VPRiwgZXhpdC5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlIDwgMCB8fCBjb2RlID09PSAzMikge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ3RhYmxlRGVsaW1pdGVyUm93JylcbiAgICByZXR1cm4gYXREZWxpbWl0ZXJSb3dCcmVhayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYXREZWxpbWl0ZXJSb3dCcmVhayhjb2RlKSB7XG4gICAgLy8gRU9GLCBDUiwgTEYsIENSTEYuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gLTUgfHwgY29kZSA9PT0gLTQgfHwgY29kZSA9PT0gLTMpIHtcbiAgICAgIHJldHVybiByb3dFbmREZWxpbWl0ZXIoY29kZSlcbiAgICB9XG5cbiAgICAvLyBIVCwgVlMsIFNQLlxuICAgIGlmIChjb2RlID09PSAtMiB8fCBjb2RlID09PSAtMSB8fCBjb2RlID09PSAzMikge1xuICAgICAgZWZmZWN0cy5lbnRlcignd2hpdGVzcGFjZScpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbldoaXRlc3BhY2VEZWxpbWl0ZXJcbiAgICB9XG5cbiAgICAvLyBgLWBcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3RhYmxlRGVsaW1pdGVyRmlsbGVyJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgaGFzRGFzaCA9IHRydWVcbiAgICAgIGFsaWduLnB1c2gobnVsbClcbiAgICAgIHJldHVybiBpbkZpbGxlckRlbGltaXRlclxuICAgIH1cblxuICAgIC8vIGA6YFxuICAgIGlmIChjb2RlID09PSA1OCkge1xuICAgICAgZWZmZWN0cy5lbnRlcigndGFibGVEZWxpbWl0ZXJBbGlnbm1lbnQnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3RhYmxlRGVsaW1pdGVyQWxpZ25tZW50JylcbiAgICAgIGFsaWduLnB1c2goJ2xlZnQnKVxuICAgICAgcmV0dXJuIGFmdGVyTGVmdEFsaWdubWVudFxuICAgIH1cblxuICAgIC8vIElmIHdlIHN0YXJ0IHdpdGggYSBwaXBlLCB3ZSBvcGVuIGEgY2VsbCBtYXJrZXIuXG4gICAgaWYgKGNvZGUgPT09IDEyNCkge1xuICAgICAgZWZmZWN0cy5lbnRlcigndGFibGVDZWxsRGl2aWRlcicpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgndGFibGVDZWxsRGl2aWRlcicpXG4gICAgICByZXR1cm4gYXREZWxpbWl0ZXJSb3dCcmVha1xuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGluV2hpdGVzcGFjZURlbGltaXRlcihjb2RlKSB7XG4gICAgLy8gSFQsIFZTLCBTUC5cbiAgICBpZiAoY29kZSA9PT0gLTIgfHwgY29kZSA9PT0gLTEgfHwgY29kZSA9PT0gMzIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluV2hpdGVzcGFjZURlbGltaXRlclxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCgnd2hpdGVzcGFjZScpXG4gICAgcmV0dXJuIGF0RGVsaW1pdGVyUm93QnJlYWsoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGluRmlsbGVyRGVsaW1pdGVyKGNvZGUpIHtcbiAgICAvLyBgLWBcbiAgICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluRmlsbGVyRGVsaW1pdGVyXG4gICAgfVxuXG4gICAgZWZmZWN0cy5leGl0KCd0YWJsZURlbGltaXRlckZpbGxlcicpXG5cbiAgICAvLyBgOmBcbiAgICBpZiAoY29kZSA9PT0gNTgpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3RhYmxlRGVsaW1pdGVyQWxpZ25tZW50JylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCd0YWJsZURlbGltaXRlckFsaWdubWVudCcpXG5cbiAgICAgIGFsaWduW2FsaWduLmxlbmd0aCAtIDFdID1cbiAgICAgICAgYWxpZ25bYWxpZ24ubGVuZ3RoIC0gMV0gPT09ICdsZWZ0JyA/ICdjZW50ZXInIDogJ3JpZ2h0J1xuXG4gICAgICByZXR1cm4gYWZ0ZXJSaWdodEFsaWdubWVudFxuICAgIH1cblxuICAgIHJldHVybiBhdERlbGltaXRlclJvd0JyZWFrKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlckxlZnRBbGlnbm1lbnQoY29kZSkge1xuICAgIC8vIGAtYFxuICAgIGlmIChjb2RlID09PSA0NSkge1xuICAgICAgZWZmZWN0cy5lbnRlcigndGFibGVEZWxpbWl0ZXJGaWxsZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBoYXNEYXNoID0gdHJ1ZVxuICAgICAgcmV0dXJuIGluRmlsbGVyRGVsaW1pdGVyXG4gICAgfVxuXG4gICAgLy8gQW55dGhpbmcgZWxzZSBpcyBub3Qgb2suXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJSaWdodEFsaWdubWVudChjb2RlKSB7XG4gICAgLy8gRU9GLCBDUiwgTEYsIENSTEYuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA9PT0gLTUgfHwgY29kZSA9PT0gLTQgfHwgY29kZSA9PT0gLTMpIHtcbiAgICAgIHJldHVybiByb3dFbmREZWxpbWl0ZXIoY29kZSlcbiAgICB9XG5cbiAgICAvLyBIVCwgVlMsIFNQLlxuICAgIGlmIChjb2RlID09PSAtMiB8fCBjb2RlID09PSAtMSB8fCBjb2RlID09PSAzMikge1xuICAgICAgZWZmZWN0cy5lbnRlcignd2hpdGVzcGFjZScpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbldoaXRlc3BhY2VEZWxpbWl0ZXJcbiAgICB9XG5cbiAgICAvLyBgfGBcbiAgICBpZiAoY29kZSA9PT0gMTI0KSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCd0YWJsZUNlbGxEaXZpZGVyJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCd0YWJsZUNlbGxEaXZpZGVyJylcbiAgICAgIHJldHVybiBhdERlbGltaXRlclJvd0JyZWFrXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gcm93RW5kRGVsaW1pdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ3RhYmxlRGVsaW1pdGVyUm93JylcblxuICAgIC8vIEV4aXQgaWYgdGhlcmUgd2FzIG5vIGRhc2ggYXQgYWxsLCBvciBpZiB0aGUgaGVhZGVyIGNlbGwgY291bnQgaXMgbm90IHRoZVxuICAgIC8vIGRlbGltaXRlciBjZWxsIGNvdW50LlxuICAgIGlmICghaGFzRGFzaCB8fCB0YWJsZUhlYWRlckNvdW50ICE9PSBhbGlnbi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRhYmxlQ2xvc2UoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gZWZmZWN0cy5jaGVjayhuZXh0UHJlZml4ZWRPckJsYW5rLCB0YWJsZUNsb3NlLCB0YWJsZUNvbnRpbnVlKShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gdGFibGVDbG9zZShjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCd0YWJsZScpXG4gICAgcmV0dXJuIG9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWJsZUNvbnRpbnVlKGNvZGUpIHtcbiAgICAvLyBBbHdheXMgYSBsaW5lIGVuZGluZy5cbiAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgIC8vIFdlIGNoZWNrZWQgdGhhdCBpdOKAmXMgbm90IGEgcHJlZml4ZWQgb3IgYmxhbmsgbGluZSwgc28gd2XigJlyZSBjZXJ0YWluIGFcbiAgICAvLyBib2R5IGlzIGNvbWluZywgdGhvdWdoIGl0IG1heSBiZSBpbmRlbnRlZC5cbiAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgYm9keVN0YXJ0LCAnbGluZVByZWZpeCcsIDQpXG4gIH1cblxuICBmdW5jdGlvbiBib2R5U3RhcnQoY29kZSkge1xuICAgIGVmZmVjdHMuZW50ZXIoJ3RhYmxlQm9keScpXG4gICAgcmV0dXJuIHJvd1N0YXJ0Qm9keShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gcm93U3RhcnRCb2R5KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKCd0YWJsZVJvdycpXG5cbiAgICAvLyBJZiB3ZSBzdGFydCB3aXRoIGEgcGlwZSwgd2Ugb3BlbiBhIGNlbGwgbWFya2VyLlxuICAgIGlmIChjb2RlID09PSAxMjQpIHtcbiAgICAgIHJldHVybiBjZWxsRGl2aWRlckJvZHkoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmVudGVyKCd0ZW1wb3JhcnlUYWJsZUNlbGxDb250ZW50JylcbiAgICAvLyBDYW7igJl0IGJlIHNwYWNlIG9yIGVvbHMgYXQgdGhlIHN0YXJ0IG9mIGEgY29uc3RydWN0LCBzbyB3ZeKAmXJlIGluIGEgY2VsbC5cbiAgICByZXR1cm4gaW5DZWxsQ29udGVudEJvZHkoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNlbGxEaXZpZGVyQm9keShjb2RlKSB7XG4gICAgLy8gQWx3YXlzIGEgcGlwZS5cbiAgICBlZmZlY3RzLmVudGVyKCd0YWJsZUNlbGxEaXZpZGVyJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoJ3RhYmxlQ2VsbERpdmlkZXInKVxuICAgIHJldHVybiBjZWxsQnJlYWtCb2R5XG4gIH1cblxuICBmdW5jdGlvbiBjZWxsQnJlYWtCb2R5KGNvZGUpIHtcbiAgICAvLyBFT0YsIENSLCBMRiwgQ1JMRi5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgcmV0dXJuIGF0Um93RW5kQm9keShjb2RlKVxuICAgIH1cblxuICAgIC8vIEhULCBWUywgU1AuXG4gICAgaWYgKGNvZGUgPT09IC0yIHx8IGNvZGUgPT09IC0xIHx8IGNvZGUgPT09IDMyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCd3aGl0ZXNwYWNlJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIGluV2hpdGVzcGFjZUJvZHlcbiAgICB9XG5cbiAgICAvLyBgfGBcbiAgICBpZiAoY29kZSA9PT0gMTI0KSB7XG4gICAgICByZXR1cm4gY2VsbERpdmlkZXJCb2R5KGNvZGUpXG4gICAgfVxuXG4gICAgLy8gQW55dGhpbmcgZWxzZSBpcyBjZWxsIGNvbnRlbnQuXG4gICAgZWZmZWN0cy5lbnRlcigndGVtcG9yYXJ5VGFibGVDZWxsQ29udGVudCcpXG4gICAgcmV0dXJuIGluQ2VsbENvbnRlbnRCb2R5KGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBpbldoaXRlc3BhY2VCb2R5KGNvZGUpIHtcbiAgICAvLyBIVCwgVlMsIFNQLlxuICAgIGlmIChjb2RlID09PSAtMiB8fCBjb2RlID09PSAtMSB8fCBjb2RlID09PSAzMikge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gaW5XaGl0ZXNwYWNlQm9keVxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdCgnd2hpdGVzcGFjZScpXG4gICAgcmV0dXJuIGNlbGxCcmVha0JvZHkoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGluQ2VsbENvbnRlbnRCb2R5KGNvZGUpIHtcbiAgICAvLyBFT0YsIHdoaXRlc3BhY2UsIHBpcGVcbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlIDwgMCB8fCBjb2RlID09PSAzMiB8fCBjb2RlID09PSAxMjQpIHtcbiAgICAgIGVmZmVjdHMuZXhpdCgndGVtcG9yYXJ5VGFibGVDZWxsQ29udGVudCcpXG4gICAgICByZXR1cm4gY2VsbEJyZWFrQm9keShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIC8vIGBcXGBcbiAgICByZXR1cm4gY29kZSA9PT0gOTIgPyBpbkNlbGxDb250ZW50RXNjYXBlQm9keSA6IGluQ2VsbENvbnRlbnRCb2R5XG4gIH1cblxuICBmdW5jdGlvbiBpbkNlbGxDb250ZW50RXNjYXBlQm9keShjb2RlKSB7XG4gICAgLy8gYFxcYCBvciBgfGBcbiAgICBpZiAoY29kZSA9PT0gOTIgfHwgY29kZSA9PT0gMTI0KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBpbkNlbGxDb250ZW50Qm9keVxuICAgIH1cblxuICAgIC8vIEFueXRoaW5nIGVsc2UuXG4gICAgcmV0dXJuIGluQ2VsbENvbnRlbnRCb2R5KGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhdFJvd0VuZEJvZHkoY29kZSkge1xuICAgIGVmZmVjdHMuZXhpdCgndGFibGVSb3cnKVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0YWJsZUJvZHlDbG9zZShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKFxuICAgICAgbmV4dFByZWZpeGVkT3JCbGFuayxcbiAgICAgIHRhYmxlQm9keUNsb3NlLFxuICAgICAgdGFibGVCb2R5Q29udGludWVcbiAgICApKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWJsZUJvZHlDbG9zZShjb2RlKSB7XG4gICAgZWZmZWN0cy5leGl0KCd0YWJsZUJvZHknKVxuICAgIHJldHVybiB0YWJsZUNsb3NlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB0YWJsZUJvZHlDb250aW51ZShjb2RlKSB7XG4gICAgLy8gQWx3YXlzIGEgbGluZSBlbmRpbmcuXG4gICAgZWZmZWN0cy5lbnRlcignbGluZUVuZGluZycpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICAvLyBTdXBwb3J0IGFuIG9wdGlvbmFsIHByZWZpeCwgdGhlbiBzdGFydCBhIGJvZHkgcm93LlxuICAgIHJldHVybiBjcmVhdGVTcGFjZShlZmZlY3RzLCByb3dTdGFydEJvZHksICdsaW5lUHJlZml4JywgNClcbiAgfVxufVxuXG4vLyBCYXNlZCBvbiBtaWNyb21hcmssIGJ1dCB0aGF0IHdvbuKAmXQgd29yayBhcyB3ZeKAmXJlIGluIGEgdGFibGUsIGFuZCB0aGF0IGV4cGVjdHNcbi8vIGNvbnRlbnQuXG4vLyA8aHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWFyay9taWNyb21hcmsvYmxvYi9tYWluL2xpYi90b2tlbml6ZS9zZXRleHQtdW5kZXJsaW5lLmpzPlxuZnVuY3Rpb24gdG9rZW5pemVTZXRleHRVbmRlcmxpbmVNaW5pKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8vIGAtYFxuICAgIGlmIChjb2RlICE9PSA0NSkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ3NldGV4dFVuZGVybGluZScpXG4gICAgcmV0dXJuIHNlcXVlbmNlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBzZXF1ZW5jZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBzZXF1ZW5jZVxuICAgIH1cblxuICAgIHJldHVybiB3aGl0ZXNwYWNlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB3aGl0ZXNwYWNlKGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gLTIgfHwgY29kZSA9PT0gLTEgfHwgY29kZSA9PT0gMzIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIHdoaXRlc3BhY2VcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBjb2RlID09PSAtNSB8fCBjb2RlID09PSAtNCB8fCBjb2RlID09PSAtMykge1xuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplTmV4dFByZWZpeGVkT3JCbGFuayhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzaXplID0gMFxuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvLyBUaGlzIGlzIGEgY2hlY2ssIHNvIHdlIGRvbuKAmXQgY2FyZSBhYm91dCB0b2tlbnMsIGJ1dCB3ZSBvcGVuIGEgYm9ndXMgb25lXG4gICAgLy8gc28gd2XigJlyZSB2YWxpZC5cbiAgICBlZmZlY3RzLmVudGVyKCdjaGVjaycpXG4gICAgLy8gRU9MLlxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiB3aGl0ZXNwYWNlXG4gIH1cblxuICBmdW5jdGlvbiB3aGl0ZXNwYWNlKGNvZGUpIHtcbiAgICAvLyBWUyBvciBTUC5cbiAgICBpZiAoY29kZSA9PT0gLTEgfHwgY29kZSA9PT0gMzIpIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZSsrXG4gICAgICByZXR1cm4gc2l6ZSA9PT0gNCA/IG9rIDogd2hpdGVzcGFjZVxuICAgIH1cblxuICAgIC8vIEVPRiBvciB3aGl0ZXNwYWNlXG4gICAgaWYgKGNvZGUgPT09IG51bGwgfHwgY29kZSA8IDApIHtcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIC8vIEFueXRoaW5nIGVsc2UuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3ludGF4JylcbiIsInZhciBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nLW9yLXNwYWNlJylcbnZhciBzcGFjZUZhY3RvcnkgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC90b2tlbml6ZS9mYWN0b3J5LXNwYWNlJylcbnZhciBwcmVmaXhTaXplID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvdXRpbC9wcmVmaXgtc2l6ZScpXG5cbnZhciB0YXNrbGlzdENoZWNrID0ge3Rva2VuaXplOiB0b2tlbml6ZVRhc2tsaXN0Q2hlY2t9XG5cbmV4cG9ydHMudGV4dCA9IHs5MTogdGFza2xpc3RDaGVja31cblxuZnVuY3Rpb24gdG9rZW5pemVUYXNrbGlzdENoZWNrKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIG9wZW5cblxuICBmdW5jdGlvbiBvcGVuKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICAvLyBFeGl0IGlmIG5vdCBgW2AuXG4gICAgICBjb2RlICE9PSA5MSB8fFxuICAgICAgLy8gRXhpdCBpZiB0aGVyZeKAmXMgc3R1ZmYgYmVmb3JlLlxuICAgICAgc2VsZi5wcmV2aW91cyAhPT0gbnVsbCB8fFxuICAgICAgLy8gRXhpdCBpZiBub3QgaW4gdGhlIGZpcnN0IGNvbnRlbnQgdGhhdCBpcyB0aGUgZmlyc3QgY2hpbGQgb2YgYSBsaXN0XG4gICAgICAvLyBpdGVtLlxuICAgICAgIXNlbGYuX2dmbVRhc2tsaXN0Rmlyc3RDb250ZW50T2ZMaXN0SXRlbVxuICAgICkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ3Rhc2tMaXN0Q2hlY2snKVxuICAgIGVmZmVjdHMuZW50ZXIoJ3Rhc2tMaXN0Q2hlY2tNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgndGFza0xpc3RDaGVja01hcmtlcicpXG4gICAgcmV0dXJuIGluc2lkZVxuICB9XG5cbiAgZnVuY3Rpb24gaW5zaWRlKGNvZGUpIHtcbiAgICAvLyBUYWIgb3Igc3BhY2UuXG4gICAgaWYgKGNvZGUgPT09IC0yIHx8IGNvZGUgPT09IDMyKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCd0YXNrTGlzdENoZWNrVmFsdWVVbmNoZWNrZWQnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3Rhc2tMaXN0Q2hlY2tWYWx1ZVVuY2hlY2tlZCcpXG4gICAgICByZXR1cm4gY2xvc2VcbiAgICB9XG5cbiAgICAvLyBVcHBlci0gYW5kIGxvd2VyIGB4YC5cbiAgICBpZiAoY29kZSA9PT0gODggfHwgY29kZSA9PT0gMTIwKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCd0YXNrTGlzdENoZWNrVmFsdWVDaGVja2VkJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCd0YXNrTGlzdENoZWNrVmFsdWVDaGVja2VkJylcbiAgICAgIHJldHVybiBjbG9zZVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlKGNvZGUpIHtcbiAgICAvLyBgXWBcbiAgICBpZiAoY29kZSA9PT0gOTMpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3Rhc2tMaXN0Q2hlY2tNYXJrZXInKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ3Rhc2tMaXN0Q2hlY2tNYXJrZXInKVxuICAgICAgZWZmZWN0cy5leGl0KCd0YXNrTGlzdENoZWNrJylcbiAgICAgIHJldHVybiBlZmZlY3RzLmNoZWNrKHt0b2tlbml6ZTogc3BhY2VUaGVuTm9uU3BhY2V9LCBvaywgbm9rKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBzcGFjZVRoZW5Ob25TcGFjZShlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHJldHVybiBzcGFjZUZhY3RvcnkoZWZmZWN0cywgYWZ0ZXIsICd3aGl0ZXNwYWNlJylcblxuICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgcmV0dXJuIHByZWZpeFNpemUoc2VsZi5ldmVudHMsICd3aGl0ZXNwYWNlJykgJiZcbiAgICAgIGNvZGUgIT09IG51bGwgJiZcbiAgICAgICFtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgICA/IG9rKGNvZGUpXG4gICAgICA6IG5vayhjb2RlKVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3ludGF4JylcbiIsInZhciBjb21iaW5lID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvdXRpbC9jb21iaW5lLWV4dGVuc2lvbnMnKVxudmFyIGF1dG9saW5rID0gcmVxdWlyZSgnbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tYXV0b2xpbmstbGl0ZXJhbCcpXG52YXIgc3RyaWtldGhyb3VnaCA9IHJlcXVpcmUoJ21pY3JvbWFyay1leHRlbnNpb24tZ2ZtLXN0cmlrZXRocm91Z2gnKVxudmFyIHRhYmxlID0gcmVxdWlyZSgnbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFibGUnKVxudmFyIHRhc2tsaXN0ID0gcmVxdWlyZSgnbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFzay1saXN0LWl0ZW0nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVxuXG5mdW5jdGlvbiBjcmVhdGUob3B0aW9ucykge1xuICByZXR1cm4gY29tYmluZShbYXV0b2xpbmssIHN0cmlrZXRocm91Z2gob3B0aW9ucyksIHRhYmxlLCB0YXNrbGlzdF0pXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3ludGF4JylcbiIsImV4cG9ydHMuZW50ZXIgPSB7XG4gIGxpdGVyYWxBdXRvbGluazogZW50ZXJMaXRlcmFsQXV0b2xpbmssXG4gIGxpdGVyYWxBdXRvbGlua0VtYWlsOiBlbnRlckxpdGVyYWxBdXRvbGlua1ZhbHVlLFxuICBsaXRlcmFsQXV0b2xpbmtIdHRwOiBlbnRlckxpdGVyYWxBdXRvbGlua1ZhbHVlLFxuICBsaXRlcmFsQXV0b2xpbmtXd3c6IGVudGVyTGl0ZXJhbEF1dG9saW5rVmFsdWVcbn1cbmV4cG9ydHMuZXhpdCA9IHtcbiAgbGl0ZXJhbEF1dG9saW5rOiBleGl0TGl0ZXJhbEF1dG9saW5rLFxuICBsaXRlcmFsQXV0b2xpbmtFbWFpbDogZXhpdExpdGVyYWxBdXRvbGlua0VtYWlsLFxuICBsaXRlcmFsQXV0b2xpbmtIdHRwOiBleGl0TGl0ZXJhbEF1dG9saW5rSHR0cCxcbiAgbGl0ZXJhbEF1dG9saW5rV3d3OiBleGl0TGl0ZXJhbEF1dG9saW5rV3d3XG59XG5cbmZ1bmN0aW9uIGVudGVyTGl0ZXJhbEF1dG9saW5rKHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoe3R5cGU6ICdsaW5rJywgdGl0bGU6IG51bGwsIHVybDogJycsIGNoaWxkcmVuOiBbXX0sIHRva2VuKVxufVxuXG5mdW5jdGlvbiBlbnRlckxpdGVyYWxBdXRvbGlua1ZhbHVlKHRva2VuKSB7XG4gIHRoaXMuY29uZmlnLmVudGVyLmF1dG9saW5rUHJvdG9jb2wuY2FsbCh0aGlzLCB0b2tlbilcbn1cblxuZnVuY3Rpb24gZXhpdExpdGVyYWxBdXRvbGlua0h0dHAodG9rZW4pIHtcbiAgdGhpcy5jb25maWcuZXhpdC5hdXRvbGlua1Byb3RvY29sLmNhbGwodGhpcywgdG9rZW4pXG59XG5cbmZ1bmN0aW9uIGV4aXRMaXRlcmFsQXV0b2xpbmtXd3codG9rZW4pIHtcbiAgdGhpcy5jb25maWcuZXhpdC5kYXRhLmNhbGwodGhpcywgdG9rZW4pXG4gIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS51cmwgPSAnaHR0cDovLycgKyB0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKVxufVxuXG5mdW5jdGlvbiBleGl0TGl0ZXJhbEF1dG9saW5rRW1haWwodG9rZW4pIHtcbiAgdGhpcy5jb25maWcuZXhpdC5hdXRvbGlua0VtYWlsLmNhbGwodGhpcywgdG9rZW4pXG59XG5cbmZ1bmN0aW9uIGV4aXRMaXRlcmFsQXV0b2xpbmsodG9rZW4pIHtcbiAgdGhpcy5leGl0KHRva2VuKVxufVxuIiwiZXhwb3J0cy5jYW5Db250YWluRW9scyA9IFsnZGVsZXRlJ11cbmV4cG9ydHMuZW50ZXIgPSB7c3RyaWtldGhyb3VnaDogZW50ZXJTdHJpa2V0aHJvdWdofVxuZXhwb3J0cy5leGl0ID0ge3N0cmlrZXRocm91Z2g6IGV4aXRTdHJpa2V0aHJvdWdofVxuXG5mdW5jdGlvbiBlbnRlclN0cmlrZXRocm91Z2godG9rZW4pIHtcbiAgdGhpcy5lbnRlcih7dHlwZTogJ2RlbGV0ZScsIGNoaWxkcmVuOiBbXX0sIHRva2VuKVxufVxuXG5mdW5jdGlvbiBleGl0U3RyaWtldGhyb3VnaCh0b2tlbikge1xuICB0aGlzLmV4aXQodG9rZW4pXG59XG4iLCJleHBvcnRzLmVudGVyID0ge1xuICB0YWJsZTogZW50ZXJUYWJsZSxcbiAgdGFibGVEYXRhOiBlbnRlckNlbGwsXG4gIHRhYmxlSGVhZGVyOiBlbnRlckNlbGwsXG4gIHRhYmxlUm93OiBlbnRlclJvd1xufVxuZXhwb3J0cy5leGl0ID0ge1xuICBjb2RlVGV4dDogZXhpdENvZGVUZXh0LFxuICB0YWJsZTogZXhpdFRhYmxlLFxuICB0YWJsZURhdGE6IGV4aXQsXG4gIHRhYmxlSGVhZGVyOiBleGl0LFxuICB0YWJsZVJvdzogZXhpdFxufVxuXG5mdW5jdGlvbiBlbnRlclRhYmxlKHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoe3R5cGU6ICd0YWJsZScsIGFsaWduOiB0b2tlbi5fYWxpZ24sIGNoaWxkcmVuOiBbXX0sIHRva2VuKVxuICB0aGlzLnNldERhdGEoJ2luVGFibGUnLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleGl0VGFibGUodG9rZW4pIHtcbiAgdGhpcy5leGl0KHRva2VuKVxuICB0aGlzLnNldERhdGEoJ2luVGFibGUnKVxufVxuXG5mdW5jdGlvbiBlbnRlclJvdyh0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAndGFibGVSb3cnLCBjaGlsZHJlbjogW119LCB0b2tlbilcbn1cblxuZnVuY3Rpb24gZXhpdCh0b2tlbikge1xuICB0aGlzLmV4aXQodG9rZW4pXG59XG5cbmZ1bmN0aW9uIGVudGVyQ2VsbCh0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiAndGFibGVDZWxsJywgY2hpbGRyZW46IFtdfSwgdG9rZW4pXG59XG5cbi8vIE92ZXJ3cml0ZSB0aGUgZGVmYXVsdCBjb2RlIHRleHQgZGF0YSBoYW5kbGVyIHRvIHVuZXNjYXBlIGVzY2FwZWQgcGlwZXMgd2hlblxuLy8gdGhleSBhcmUgaW4gdGFibGVzLlxuZnVuY3Rpb24gZXhpdENvZGVUZXh0KHRva2VuKSB7XG4gIHZhciB2YWx1ZSA9IHRoaXMucmVzdW1lKClcblxuICBpZiAodGhpcy5nZXREYXRhKCdpblRhYmxlJykpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcXFwoW1xcXFx8XSkvZywgcmVwbGFjZSlcbiAgfVxuXG4gIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS52YWx1ZSA9IHZhbHVlXG4gIHRoaXMuZXhpdCh0b2tlbilcbn1cblxuZnVuY3Rpb24gcmVwbGFjZSgkMCwgJDEpIHtcbiAgLy8gUGlwZXMgd29yaywgYmFja3NsYXNoZXMgZG9u4oCZdCAoYnV0IGNhbuKAmXQgZXNjYXBlIHBpcGVzKS5cbiAgcmV0dXJuICQxID09PSAnfCcgPyAkMSA6ICQwXG59XG4iLCJleHBvcnRzLmV4aXQgPSB7XG4gIHRhc2tMaXN0Q2hlY2tWYWx1ZUNoZWNrZWQ6IGV4aXRDaGVjayxcbiAgdGFza0xpc3RDaGVja1ZhbHVlVW5jaGVja2VkOiBleGl0Q2hlY2ssXG4gIHBhcmFncmFwaDogZXhpdFBhcmFncmFwaFdpdGhUYXNrTGlzdEl0ZW1cbn1cblxuZnVuY3Rpb24gZXhpdENoZWNrKHRva2VuKSB7XG4gIC8vIFdl4oCZcmUgYWx3YXlzIGluIGEgcGFyYWdyYXBoLCBpbiBhIGxpc3QgaXRlbS5cbiAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDJdLmNoZWNrZWQgPVxuICAgIHRva2VuLnR5cGUgPT09ICd0YXNrTGlzdENoZWNrVmFsdWVDaGVja2VkJ1xufVxuXG5mdW5jdGlvbiBleGl0UGFyYWdyYXBoV2l0aFRhc2tMaXN0SXRlbSh0b2tlbikge1xuICB2YXIgcGFyZW50ID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDJdXG4gIHZhciBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gIHZhciBzaWJsaW5ncyA9IHBhcmVudC5jaGlsZHJlblxuICB2YXIgaGVhZCA9IG5vZGUuY2hpbGRyZW5bMF1cbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGZpcnN0UGFyYWdocmFwaFxuXG4gIGlmIChcbiAgICBwYXJlbnQgJiZcbiAgICBwYXJlbnQudHlwZSA9PT0gJ2xpc3RJdGVtJyAmJlxuICAgIHR5cGVvZiBwYXJlbnQuY2hlY2tlZCA9PT0gJ2Jvb2xlYW4nICYmXG4gICAgaGVhZCAmJlxuICAgIGhlYWQudHlwZSA9PT0gJ3RleHQnXG4gICkge1xuICAgIHdoaWxlICgrK2luZGV4IDwgc2libGluZ3MubGVuZ3RoKSB7XG4gICAgICBpZiAoc2libGluZ3NbaW5kZXhdLnR5cGUgPT09ICdwYXJhZ3JhcGgnKSB7XG4gICAgICAgIGZpcnN0UGFyYWdocmFwaCA9IHNpYmxpbmdzW2luZGV4XVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmaXJzdFBhcmFnaHJhcGggPT09IG5vZGUpIHtcbiAgICAgIC8vIE11c3Qgc3RhcnQgd2l0aCBhIHNwYWNlIG9yIGEgdGFiLlxuICAgICAgaGVhZC52YWx1ZSA9IGhlYWQudmFsdWUuc2xpY2UoMSlcblxuICAgICAgaWYgKGhlYWQudmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIG5vZGUuY2hpbGRyZW4uc2hpZnQoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGVhZC5wb3NpdGlvbi5zdGFydC5jb2x1bW4rK1xuICAgICAgICBoZWFkLnBvc2l0aW9uLnN0YXJ0Lm9mZnNldCsrXG4gICAgICAgIG5vZGUucG9zaXRpb24uc3RhcnQgPSBPYmplY3QuYXNzaWduKHt9LCBoZWFkLnBvc2l0aW9uLnN0YXJ0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuZXhpdCh0b2tlbilcbn1cbiIsInZhciBhdXRvbGlua0xpdGVyYWwgPSByZXF1aXJlKCdtZGFzdC11dGlsLWdmbS1hdXRvbGluay1saXRlcmFsL2Zyb20tbWFya2Rvd24nKVxudmFyIHN0cmlrZXRocm91Z2ggPSByZXF1aXJlKCdtZGFzdC11dGlsLWdmbS1zdHJpa2V0aHJvdWdoL2Zyb20tbWFya2Rvd24nKVxudmFyIHRhYmxlID0gcmVxdWlyZSgnbWRhc3QtdXRpbC1nZm0tdGFibGUvZnJvbS1tYXJrZG93bicpXG52YXIgdGFza0xpc3RJdGVtID0gcmVxdWlyZSgnbWRhc3QtdXRpbC1nZm0tdGFzay1saXN0LWl0ZW0vZnJvbS1tYXJrZG93bicpXG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZ3VyZShbXG4gIGF1dG9saW5rTGl0ZXJhbCxcbiAgc3RyaWtldGhyb3VnaCxcbiAgdGFibGUsXG4gIHRhc2tMaXN0SXRlbVxuXSlcblxuZnVuY3Rpb24gY29uZmlndXJlKGV4dGVuc2lvbnMpIHtcbiAgdmFyIGNvbmZpZyA9IHtjYW5Db250YWluRW9sczogW119XG4gIHZhciBsZW5ndGggPSBleHRlbnNpb25zLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZXh0ZW5zaW9uKGNvbmZpZywgZXh0ZW5zaW9uc1tpbmRleF0pXG4gIH1cblxuICByZXR1cm4gY29uZmlnXG59XG5cbmZ1bmN0aW9uIGV4dGVuc2lvbihjb25maWcsIGV4dGVuc2lvbikge1xuICB2YXIga2V5XG4gIHZhciBsZWZ0XG4gIHZhciByaWdodFxuXG4gIGZvciAoa2V5IGluIGV4dGVuc2lvbikge1xuICAgIGxlZnQgPSBvd24uY2FsbChjb25maWcsIGtleSkgPyBjb25maWdba2V5XSA6IChjb25maWdba2V5XSA9IHt9KVxuICAgIHJpZ2h0ID0gZXh0ZW5zaW9uW2tleV1cblxuICAgIGlmIChrZXkgPT09ICdjYW5Db250YWluRW9scycpIHtcbiAgICAgIGNvbmZpZ1trZXldID0gW10uY29uY2F0KGxlZnQsIHJpZ2h0KVxuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKGxlZnQsIHJpZ2h0KVxuICAgIH1cbiAgfVxufVxuIiwidmFyIGluQ29uc3RydWN0ID0gJ3BocmFzaW5nJ1xudmFyIG5vdEluQ29uc3RydWN0ID0gWydhdXRvbGluaycsICdsaW5rJywgJ2ltYWdlJ11cblxuZXhwb3J0cy51bnNhZmUgPSBbXG4gIHtcbiAgICBjaGFyYWN0ZXI6ICdAJyxcbiAgICBiZWZvcmU6ICdbK1xcXFwtLlxcXFx3XScsXG4gICAgYWZ0ZXI6ICdbXFxcXC0uXFxcXHddJyxcbiAgICBpbkNvbnN0cnVjdDogaW5Db25zdHJ1Y3QsXG4gICAgbm90SW5Db25zdHJ1Y3Q6IG5vdEluQ29uc3RydWN0XG4gIH0sXG4gIHtcbiAgICBjaGFyYWN0ZXI6ICcuJyxcbiAgICBiZWZvcmU6ICdbV3ddJyxcbiAgICBhZnRlcjogJ1tcXFxcLS5cXFxcd10nLFxuICAgIGluQ29uc3RydWN0OiBpbkNvbnN0cnVjdCxcbiAgICBub3RJbkNvbnN0cnVjdDogbm90SW5Db25zdHJ1Y3RcbiAgfSxcbiAge1xuICAgIGNoYXJhY3RlcjogJzonLFxuICAgIGJlZm9yZTogJ1twc10nLFxuICAgIGFmdGVyOiAnXFxcXC8nLFxuICAgIGluQ29uc3RydWN0OiBpbkNvbnN0cnVjdCxcbiAgICBub3RJbkNvbnN0cnVjdDogbm90SW5Db25zdHJ1Y3RcbiAgfVxuXVxuIiwibW9kdWxlLmV4cG9ydHMgPSBwaHJhc2luZ1xuXG5mdW5jdGlvbiBwaHJhc2luZyhwYXJlbnQsIGNvbnRleHQsIHNhZmVPcHRpb25zKSB7XG4gIHZhciBjaGlsZHJlbiA9IHBhcmVudC5jaGlsZHJlbiB8fCBbXVxuICB2YXIgcmVzdWx0cyA9IFtdXG4gIHZhciBpbmRleCA9IC0xXG4gIHZhciBiZWZvcmUgPSBzYWZlT3B0aW9ucy5iZWZvcmVcbiAgdmFyIGFmdGVyXG4gIHZhciBoYW5kbGVcbiAgdmFyIGNoaWxkXG5cbiAgd2hpbGUgKCsraW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBjaGlsZCA9IGNoaWxkcmVuW2luZGV4XVxuXG4gICAgaWYgKGluZGV4ICsgMSA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgaGFuZGxlID0gY29udGV4dC5oYW5kbGUuaGFuZGxlcnNbY2hpbGRyZW5baW5kZXggKyAxXS50eXBlXVxuICAgICAgaWYgKGhhbmRsZSAmJiBoYW5kbGUucGVlaykgaGFuZGxlID0gaGFuZGxlLnBlZWtcbiAgICAgIGFmdGVyID0gaGFuZGxlXG4gICAgICAgID8gaGFuZGxlKGNoaWxkcmVuW2luZGV4ICsgMV0sIHBhcmVudCwgY29udGV4dCwge1xuICAgICAgICAgICAgYmVmb3JlOiAnJyxcbiAgICAgICAgICAgIGFmdGVyOiAnJ1xuICAgICAgICAgIH0pLmNoYXJBdCgwKVxuICAgICAgICA6ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyID0gc2FmZU9wdGlvbnMuYWZ0ZXJcbiAgICB9XG5cbiAgICByZXN1bHRzLnB1c2goXG4gICAgICBjb250ZXh0LmhhbmRsZShjaGlsZCwgcGFyZW50LCBjb250ZXh0LCB7XG4gICAgICAgIGJlZm9yZTogYmVmb3JlLFxuICAgICAgICBhZnRlcjogYWZ0ZXJcbiAgICAgIH0pXG4gICAgKVxuICAgIGJlZm9yZSA9IHJlc3VsdHNbcmVzdWx0cy5sZW5ndGggLSAxXS5zbGljZSgtMSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHRzLmpvaW4oJycpXG59XG4iLCJ2YXIgcGhyYXNpbmcgPSByZXF1aXJlKCdtZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2NvbnRhaW5lci1waHJhc2luZycpXG5cbmV4cG9ydHMudW5zYWZlID0gW3tjaGFyYWN0ZXI6ICd+JywgaW5Db25zdHJ1Y3Q6ICdwaHJhc2luZyd9XVxuZXhwb3J0cy5oYW5kbGVycyA9IHtkZWxldGU6IGhhbmRsZURlbGV0ZX1cblxuaGFuZGxlRGVsZXRlLnBlZWsgPSBwZWVrRGVsZXRlXG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZShub2RlLCBfLCBjb250ZXh0KSB7XG4gIHZhciBleGl0ID0gY29udGV4dC5lbnRlcignZW1waGFzaXMnKVxuICB2YXIgdmFsdWUgPSBwaHJhc2luZyhub2RlLCBjb250ZXh0LCB7YmVmb3JlOiAnficsIGFmdGVyOiAnfid9KVxuICBleGl0KClcbiAgcmV0dXJuICd+ficgKyB2YWx1ZSArICd+fidcbn1cblxuZnVuY3Rpb24gcGVla0RlbGV0ZSgpIHtcbiAgcmV0dXJuICd+J1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBpbmxpbmVDb2RlXG5pbmxpbmVDb2RlLnBlZWsgPSBpbmxpbmVDb2RlUGVla1xuXG5mdW5jdGlvbiBpbmxpbmVDb2RlKG5vZGUpIHtcbiAgdmFyIHZhbHVlID0gbm9kZS52YWx1ZSB8fCAnJ1xuICB2YXIgc2VxdWVuY2UgPSAnYCdcbiAgdmFyIHBhZCA9ICcnXG5cbiAgLy8gSWYgdGhlcmUgaXMgYSBzaW5nbGUgZ3JhdmUgYWNjZW50IG9uIGl0cyBvd24gaW4gdGhlIGNvZGUsIHVzZSBhIGZlbmNlIG9mXG4gIC8vIHR3by5cbiAgLy8gSWYgdGhlcmUgYXJlIHR3byBpbiBhIHJvdywgdXNlIG9uZS5cbiAgd2hpbGUgKG5ldyBSZWdFeHAoJyhefFteYF0pJyArIHNlcXVlbmNlICsgJyhbXmBdfCQpJykudGVzdCh2YWx1ZSkpIHtcbiAgICBzZXF1ZW5jZSArPSAnYCdcbiAgfVxuXG4gIC8vIElmIHRoaXMgaXMgbm90IGp1c3Qgc3BhY2VzIG9yIGVvbHMgKHRhYnMgZG9u4oCZdCBjb3VudCksIGFuZCBlaXRoZXIgdGhlXG4gIC8vIGZpcnN0IG9yIGxhc3QgY2hhcmFjdGVyIGFyZSBhIHNwYWNlLCBlb2wsIG9yIHRpY2ssIHRoZW4gcGFkIHdpdGggc3BhY2VzLlxuICBpZiAoXG4gICAgL1teIFxcclxcbl0vLnRlc3QodmFsdWUpICYmXG4gICAgKC9bIFxcclxcbmBdLy50ZXN0KHZhbHVlLmNoYXJBdCgwKSkgfHxcbiAgICAgIC9bIFxcclxcbmBdLy50ZXN0KHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSkpXG4gICkge1xuICAgIHBhZCA9ICcgJ1xuICB9XG5cbiAgcmV0dXJuIHNlcXVlbmNlICsgcGFkICsgdmFsdWUgKyBwYWQgKyBzZXF1ZW5jZVxufVxuXG5mdW5jdGlvbiBpbmxpbmVDb2RlUGVlaygpIHtcbiAgcmV0dXJuICdgJ1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJylcblxubW9kdWxlLmV4cG9ydHMgPSBtYXJrZG93blRhYmxlXG5cbnZhciB0cmFpbGluZ1doaXRlc3BhY2UgPSAvICskL1xuXG4vLyBDaGFyYWN0ZXJzLlxudmFyIHNwYWNlID0gJyAnXG52YXIgbGluZUZlZWQgPSAnXFxuJ1xudmFyIGRhc2ggPSAnLSdcbnZhciBjb2xvbiA9ICc6J1xudmFyIHZlcnRpY2FsQmFyID0gJ3wnXG5cbnZhciB4ID0gMFxudmFyIEMgPSA2N1xudmFyIEwgPSA3NlxudmFyIFIgPSA4MlxudmFyIGMgPSA5OVxudmFyIGwgPSAxMDhcbnZhciByID0gMTE0XG5cbi8vIENyZWF0ZSBhIHRhYmxlIGZyb20gYSBtYXRyaXggb2Ygc3RyaW5ncy5cbmZ1bmN0aW9uIG1hcmtkb3duVGFibGUodGFibGUsIG9wdGlvbnMpIHtcbiAgdmFyIHNldHRpbmdzID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgcGFkZGluZyA9IHNldHRpbmdzLnBhZGRpbmcgIT09IGZhbHNlXG4gIHZhciBzdGFydCA9IHNldHRpbmdzLmRlbGltaXRlclN0YXJ0ICE9PSBmYWxzZVxuICB2YXIgZW5kID0gc2V0dGluZ3MuZGVsaW1pdGVyRW5kICE9PSBmYWxzZVxuICB2YXIgYWxpZ24gPSAoc2V0dGluZ3MuYWxpZ24gfHwgW10pLmNvbmNhdCgpXG4gIHZhciBhbGlnbkRlbGltaXRlcnMgPSBzZXR0aW5ncy5hbGlnbkRlbGltaXRlcnMgIT09IGZhbHNlXG4gIHZhciBhbGlnbm1lbnRzID0gW11cbiAgdmFyIHN0cmluZ0xlbmd0aCA9IHNldHRpbmdzLnN0cmluZ0xlbmd0aCB8fCBkZWZhdWx0U3RyaW5nTGVuZ3RoXG4gIHZhciByb3dJbmRleCA9IC0xXG4gIHZhciByb3dMZW5ndGggPSB0YWJsZS5sZW5ndGhcbiAgdmFyIGNlbGxNYXRyaXggPSBbXVxuICB2YXIgc2l6ZU1hdHJpeCA9IFtdXG4gIHZhciByb3cgPSBbXVxuICB2YXIgc2l6ZXMgPSBbXVxuICB2YXIgbG9uZ2VzdENlbGxCeUNvbHVtbiA9IFtdXG4gIHZhciBtb3N0Q2VsbHNQZXJSb3cgPSAwXG4gIHZhciBjZWxsc1xuICB2YXIgY29sdW1uSW5kZXhcbiAgdmFyIGNvbHVtbkxlbmd0aFxuICB2YXIgbGFyZ2VzdFxuICB2YXIgc2l6ZVxuICB2YXIgY2VsbFxuICB2YXIgbGluZXNcbiAgdmFyIGxpbmVcbiAgdmFyIGJlZm9yZVxuICB2YXIgYWZ0ZXJcbiAgdmFyIGNvZGVcblxuICAvLyBUaGlzIGlzIGEgc3VwZXJmbHVvdXMgbG9vcCBpZiB3ZSBkb27igJl0IGFsaWduIGRlbGltaXRlcnMsIGJ1dCBvdGhlcndpc2Ugd2XigJlkXG4gIC8vIGRvIHN1cGVyZmx1b3VzIHdvcmsgd2hlbiBhbGlnbmluZywgc28gb3B0aW1pemUgZm9yIGFsaWduaW5nLlxuICB3aGlsZSAoKytyb3dJbmRleCA8IHJvd0xlbmd0aCkge1xuICAgIGNlbGxzID0gdGFibGVbcm93SW5kZXhdXG4gICAgY29sdW1uSW5kZXggPSAtMVxuICAgIGNvbHVtbkxlbmd0aCA9IGNlbGxzLmxlbmd0aFxuICAgIHJvdyA9IFtdXG4gICAgc2l6ZXMgPSBbXVxuXG4gICAgaWYgKGNvbHVtbkxlbmd0aCA+IG1vc3RDZWxsc1BlclJvdykge1xuICAgICAgbW9zdENlbGxzUGVyUm93ID0gY29sdW1uTGVuZ3RoXG4gICAgfVxuXG4gICAgd2hpbGUgKCsrY29sdW1uSW5kZXggPCBjb2x1bW5MZW5ndGgpIHtcbiAgICAgIGNlbGwgPSBzZXJpYWxpemUoY2VsbHNbY29sdW1uSW5kZXhdKVxuXG4gICAgICBpZiAoYWxpZ25EZWxpbWl0ZXJzID09PSB0cnVlKSB7XG4gICAgICAgIHNpemUgPSBzdHJpbmdMZW5ndGgoY2VsbClcbiAgICAgICAgc2l6ZXNbY29sdW1uSW5kZXhdID0gc2l6ZVxuXG4gICAgICAgIGxhcmdlc3QgPSBsb25nZXN0Q2VsbEJ5Q29sdW1uW2NvbHVtbkluZGV4XVxuXG4gICAgICAgIGlmIChsYXJnZXN0ID09PSB1bmRlZmluZWQgfHwgc2l6ZSA+IGxhcmdlc3QpIHtcbiAgICAgICAgICBsb25nZXN0Q2VsbEJ5Q29sdW1uW2NvbHVtbkluZGV4XSA9IHNpemVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByb3cucHVzaChjZWxsKVxuICAgIH1cblxuICAgIGNlbGxNYXRyaXhbcm93SW5kZXhdID0gcm93XG4gICAgc2l6ZU1hdHJpeFtyb3dJbmRleF0gPSBzaXplc1xuICB9XG5cbiAgLy8gRmlndXJlIG91dCB3aGljaCBhbGlnbm1lbnRzIHRvIHVzZS5cbiAgY29sdW1uSW5kZXggPSAtMVxuICBjb2x1bW5MZW5ndGggPSBtb3N0Q2VsbHNQZXJSb3dcblxuICBpZiAodHlwZW9mIGFsaWduID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhbGlnbikge1xuICAgIHdoaWxlICgrK2NvbHVtbkluZGV4IDwgY29sdW1uTGVuZ3RoKSB7XG4gICAgICBhbGlnbm1lbnRzW2NvbHVtbkluZGV4XSA9IHRvQWxpZ25tZW50KGFsaWduW2NvbHVtbkluZGV4XSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29kZSA9IHRvQWxpZ25tZW50KGFsaWduKVxuXG4gICAgd2hpbGUgKCsrY29sdW1uSW5kZXggPCBjb2x1bW5MZW5ndGgpIHtcbiAgICAgIGFsaWdubWVudHNbY29sdW1uSW5kZXhdID0gY29kZVxuICAgIH1cbiAgfVxuXG4gIC8vIEluamVjdCB0aGUgYWxpZ25tZW50IHJvdy5cbiAgY29sdW1uSW5kZXggPSAtMVxuICBjb2x1bW5MZW5ndGggPSBtb3N0Q2VsbHNQZXJSb3dcbiAgcm93ID0gW11cbiAgc2l6ZXMgPSBbXVxuXG4gIHdoaWxlICgrK2NvbHVtbkluZGV4IDwgY29sdW1uTGVuZ3RoKSB7XG4gICAgY29kZSA9IGFsaWdubWVudHNbY29sdW1uSW5kZXhdXG4gICAgYmVmb3JlID0gJydcbiAgICBhZnRlciA9ICcnXG5cbiAgICBpZiAoY29kZSA9PT0gbCkge1xuICAgICAgYmVmb3JlID0gY29sb25cbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IHIpIHtcbiAgICAgIGFmdGVyID0gY29sb25cbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IGMpIHtcbiAgICAgIGJlZm9yZSA9IGNvbG9uXG4gICAgICBhZnRlciA9IGNvbG9uXG4gICAgfVxuXG4gICAgLy8gVGhlcmUgKm11c3QqIGJlIGF0IGxlYXN0IG9uZSBoeXBoZW4tbWludXMgaW4gZWFjaCBhbGlnbm1lbnQgY2VsbC5cbiAgICBzaXplID0gYWxpZ25EZWxpbWl0ZXJzXG4gICAgICA/IE1hdGgubWF4KFxuICAgICAgICAgIDEsXG4gICAgICAgICAgbG9uZ2VzdENlbGxCeUNvbHVtbltjb2x1bW5JbmRleF0gLSBiZWZvcmUubGVuZ3RoIC0gYWZ0ZXIubGVuZ3RoXG4gICAgICAgIClcbiAgICAgIDogMVxuXG4gICAgY2VsbCA9IGJlZm9yZSArIHJlcGVhdChkYXNoLCBzaXplKSArIGFmdGVyXG5cbiAgICBpZiAoYWxpZ25EZWxpbWl0ZXJzID09PSB0cnVlKSB7XG4gICAgICBzaXplID0gYmVmb3JlLmxlbmd0aCArIHNpemUgKyBhZnRlci5sZW5ndGhcblxuICAgICAgaWYgKHNpemUgPiBsb25nZXN0Q2VsbEJ5Q29sdW1uW2NvbHVtbkluZGV4XSkge1xuICAgICAgICBsb25nZXN0Q2VsbEJ5Q29sdW1uW2NvbHVtbkluZGV4XSA9IHNpemVcbiAgICAgIH1cblxuICAgICAgc2l6ZXNbY29sdW1uSW5kZXhdID0gc2l6ZVxuICAgIH1cblxuICAgIHJvd1tjb2x1bW5JbmRleF0gPSBjZWxsXG4gIH1cblxuICAvLyBJbmplY3QgdGhlIGFsaWdubWVudCByb3cuXG4gIGNlbGxNYXRyaXguc3BsaWNlKDEsIDAsIHJvdylcbiAgc2l6ZU1hdHJpeC5zcGxpY2UoMSwgMCwgc2l6ZXMpXG5cbiAgcm93SW5kZXggPSAtMVxuICByb3dMZW5ndGggPSBjZWxsTWF0cml4Lmxlbmd0aFxuICBsaW5lcyA9IFtdXG5cbiAgd2hpbGUgKCsrcm93SW5kZXggPCByb3dMZW5ndGgpIHtcbiAgICByb3cgPSBjZWxsTWF0cml4W3Jvd0luZGV4XVxuICAgIHNpemVzID0gc2l6ZU1hdHJpeFtyb3dJbmRleF1cbiAgICBjb2x1bW5JbmRleCA9IC0xXG4gICAgY29sdW1uTGVuZ3RoID0gbW9zdENlbGxzUGVyUm93XG4gICAgbGluZSA9IFtdXG5cbiAgICB3aGlsZSAoKytjb2x1bW5JbmRleCA8IGNvbHVtbkxlbmd0aCkge1xuICAgICAgY2VsbCA9IHJvd1tjb2x1bW5JbmRleF0gfHwgJydcbiAgICAgIGJlZm9yZSA9ICcnXG4gICAgICBhZnRlciA9ICcnXG5cbiAgICAgIGlmIChhbGlnbkRlbGltaXRlcnMgPT09IHRydWUpIHtcbiAgICAgICAgc2l6ZSA9IGxvbmdlc3RDZWxsQnlDb2x1bW5bY29sdW1uSW5kZXhdIC0gKHNpemVzW2NvbHVtbkluZGV4XSB8fCAwKVxuICAgICAgICBjb2RlID0gYWxpZ25tZW50c1tjb2x1bW5JbmRleF1cblxuICAgICAgICBpZiAoY29kZSA9PT0gcikge1xuICAgICAgICAgIGJlZm9yZSA9IHJlcGVhdChzcGFjZSwgc2l6ZSlcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlID09PSBjKSB7XG4gICAgICAgICAgaWYgKHNpemUgJSAyID09PSAwKSB7XG4gICAgICAgICAgICBiZWZvcmUgPSByZXBlYXQoc3BhY2UsIHNpemUgLyAyKVxuICAgICAgICAgICAgYWZ0ZXIgPSBiZWZvcmVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmVmb3JlID0gcmVwZWF0KHNwYWNlLCBzaXplIC8gMiArIDAuNSlcbiAgICAgICAgICAgIGFmdGVyID0gcmVwZWF0KHNwYWNlLCBzaXplIC8gMiAtIDAuNSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWZ0ZXIgPSByZXBlYXQoc3BhY2UsIHNpemUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0ID09PSB0cnVlICYmIGNvbHVtbkluZGV4ID09PSAwKSB7XG4gICAgICAgIGxpbmUucHVzaCh2ZXJ0aWNhbEJhcilcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBwYWRkaW5nID09PSB0cnVlICYmXG4gICAgICAgIC8vIERvbuKAmXQgYWRkIHRoZSBvcGVuaW5nIHNwYWNlIGlmIHdl4oCZcmUgbm90IGFsaWduaW5nIGFuZCB0aGUgY2VsbCBpc1xuICAgICAgICAvLyBlbXB0eTogdGhlcmUgd2lsbCBiZSBhIGNsb3Npbmcgc3BhY2UuXG4gICAgICAgICEoYWxpZ25EZWxpbWl0ZXJzID09PSBmYWxzZSAmJiBjZWxsID09PSAnJykgJiZcbiAgICAgICAgKHN0YXJ0ID09PSB0cnVlIHx8IGNvbHVtbkluZGV4ICE9PSAwKVxuICAgICAgKSB7XG4gICAgICAgIGxpbmUucHVzaChzcGFjZSlcbiAgICAgIH1cblxuICAgICAgaWYgKGFsaWduRGVsaW1pdGVycyA9PT0gdHJ1ZSkge1xuICAgICAgICBsaW5lLnB1c2goYmVmb3JlKVxuICAgICAgfVxuXG4gICAgICBsaW5lLnB1c2goY2VsbClcblxuICAgICAgaWYgKGFsaWduRGVsaW1pdGVycyA9PT0gdHJ1ZSkge1xuICAgICAgICBsaW5lLnB1c2goYWZ0ZXIpXG4gICAgICB9XG5cbiAgICAgIGlmIChwYWRkaW5nID09PSB0cnVlKSB7XG4gICAgICAgIGxpbmUucHVzaChzcGFjZSlcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZCA9PT0gdHJ1ZSB8fCBjb2x1bW5JbmRleCAhPT0gY29sdW1uTGVuZ3RoIC0gMSkge1xuICAgICAgICBsaW5lLnB1c2godmVydGljYWxCYXIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGluZSA9IGxpbmUuam9pbignJylcblxuICAgIGlmIChlbmQgPT09IGZhbHNlKSB7XG4gICAgICBsaW5lID0gbGluZS5yZXBsYWNlKHRyYWlsaW5nV2hpdGVzcGFjZSwgJycpXG4gICAgfVxuXG4gICAgbGluZXMucHVzaChsaW5lKVxuICB9XG5cbiAgcmV0dXJuIGxpbmVzLmpvaW4obGluZUZlZWQpXG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCA/ICcnIDogU3RyaW5nKHZhbHVlKVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3RyaW5nTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuZnVuY3Rpb24gdG9BbGlnbm1lbnQodmFsdWUpIHtcbiAgdmFyIGNvZGUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUuY2hhckNvZGVBdCgwKSA6IHhcblxuICByZXR1cm4gY29kZSA9PT0gTCB8fCBjb2RlID09PSBsXG4gICAgPyBsXG4gICAgOiBjb2RlID09PSBSIHx8IGNvZGUgPT09IHJcbiAgICA/IHJcbiAgICA6IGNvZGUgPT09IEMgfHwgY29kZSA9PT0gY1xuICAgID8gY1xuICAgIDogeFxufVxuIiwidmFyIHBocmFzaW5nID0gcmVxdWlyZSgnbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jb250YWluZXItcGhyYXNpbmcnKVxudmFyIGRlZmF1bHRJbmxpbmVDb2RlID0gcmVxdWlyZSgnbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvaGFuZGxlL2lubGluZS1jb2RlJylcbnZhciBtYXJrZG93blRhYmxlID0gcmVxdWlyZSgnbWFya2Rvd24tdGFibGUnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvTWFya2Rvd25cblxuZnVuY3Rpb24gdG9NYXJrZG93bihvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIHBhZGRpbmcgPSBzZXR0aW5ncy50YWJsZUNlbGxQYWRkaW5nXG4gIHZhciBhbGlnbkRlbGltaXRlcnMgPSBzZXR0aW5ncy50YWJsZVBpcGVBbGlnblxuICB2YXIgc3RyaW5nTGVuZ3RoID0gc2V0dGluZ3Muc3RyaW5nTGVuZ3RoXG4gIHZhciBhcm91bmQgPSBwYWRkaW5nID8gJyAnIDogJ3wnXG5cbiAgcmV0dXJuIHtcbiAgICB1bnNhZmU6IFtcbiAgICAgIHtjaGFyYWN0ZXI6ICdcXHInLCBpbkNvbnN0cnVjdDogJ3RhYmxlQ2VsbCd9LFxuICAgICAge2NoYXJhY3RlcjogJ1xcbicsIGluQ29uc3RydWN0OiAndGFibGVDZWxsJ30sXG4gICAgICAvLyBBIHBpcGUsIHdoZW4gZm9sbG93ZWQgYnkgYSB0YWIgb3Igc3BhY2UgKHBhZGRpbmcpLCBvciBhIGRhc2ggb3IgY29sb25cbiAgICAgIC8vICh1bnBhZGRlZCBkZWxpbWl0ZXIgcm93KSwgY291bGQgcmVzdWx0IGluIGEgdGFibGUuXG4gICAgICB7YXRCcmVhazogdHJ1ZSwgY2hhcmFjdGVyOiAnfCcsIGFmdGVyOiAnW1xcdCA6LV0nfSxcbiAgICAgIC8vIEEgcGlwZSBpbiBhIGNlbGwgbXVzdCBiZSBlbmNvZGVkLlxuICAgICAge2NoYXJhY3RlcjogJ3wnLCBpbkNvbnN0cnVjdDogJ3RhYmxlQ2VsbCd9LFxuICAgICAgLy8gQSBjb2xvbiBtdXN0IGJlIGZvbGxvd2VkIGJ5IGEgZGFzaCwgaW4gd2hpY2ggY2FzZSBpdCBjb3VsZCBzdGFydCBhXG4gICAgICAvLyBkZWxpbWl0ZXIgcm93LlxuICAgICAge2F0QnJlYWs6IHRydWUsIGNoYXJhY3RlcjogJzonLCBhZnRlcjogJy0nfSxcbiAgICAgIC8vIEEgZGVsaW1pdGVyIHJvdyBjYW4gYWxzbyBzdGFydCB3aXRoIGEgZGFzaCwgd2hlbiBmb2xsb3dlZCBieSBtb3JlXG4gICAgICAvLyBkYXNoZXMsIGEgY29sb24sIG9yIGEgcGlwZS5cbiAgICAgIC8vIFRoaXMgaXMgYSBzdHJpY3RlciB2ZXJzaW9uIHRoYW4gdGhlIGJ1aWx0IGluIGNoZWNrIGZvciBsaXN0cywgdGhlbWF0aWNcbiAgICAgIC8vIGJyZWFrcywgYW5kIHNldGV4IGhlYWRpbmcgdW5kZXJsaW5lcyB0aG91Z2g6XG4gICAgICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL3N5bnRheC10cmVlL21kYXN0LXV0aWwtdG8tbWFya2Rvd24vYmxvYi81MWEyMDM4L2xpYi91bnNhZmUuanMjTDU3PlxuICAgICAge2F0QnJlYWs6IHRydWUsIGNoYXJhY3RlcjogJy0nLCBhZnRlcjogJ1s6fC1dJ31cbiAgICBdLFxuICAgIGhhbmRsZXJzOiB7XG4gICAgICB0YWJsZTogaGFuZGxlVGFibGUsXG4gICAgICB0YWJsZVJvdzogaGFuZGxlVGFibGVSb3csXG4gICAgICB0YWJsZUNlbGw6IGhhbmRsZVRhYmxlQ2VsbCxcbiAgICAgIGlubGluZUNvZGU6IGlubGluZUNvZGVXaXRoVGFibGVcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVUYWJsZShub2RlLCBfLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZURhdGEoaGFuZGxlVGFibGVBc0RhdGEobm9kZSwgY29udGV4dCksIG5vZGUuYWxpZ24pXG4gIH1cblxuICAvLyBUaGlzIGZ1bmN0aW9uIGlzbuKAmXQgcmVhbGx5IHVzZWQgbm9ybWFsbHksIGJlY2F1c2Ugd2UgaGFuZGxlIHJvd3MgYXQgdGhlXG4gIC8vIHRhYmxlIGxldmVsLlxuICAvLyBCdXQsIGlmIHNvbWVvbmUgcGFzc2VzIGluIGEgdGFibGUgcm93LCB0aGlzIGVuc3VyZXMgd2UgbWFrZSBzb21ld2hhdCBzZW5zZS5cbiAgZnVuY3Rpb24gaGFuZGxlVGFibGVSb3cobm9kZSwgXywgY29udGV4dCkge1xuICAgIHZhciByb3cgPSBoYW5kbGVUYWJsZVJvd0FzRGF0YShub2RlLCBjb250ZXh0KVxuICAgIC8vIGBtYXJrZG93bi10YWJsZWAgd2lsbCBhbHdheXMgYWRkIGFuIGFsaWduIHJvd1xuICAgIHZhciB2YWx1ZSA9IHNlcmlhbGl6ZURhdGEoW3Jvd10pXG4gICAgcmV0dXJuIHZhbHVlLnNsaWNlKDAsIHZhbHVlLmluZGV4T2YoJ1xcbicpKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVGFibGVDZWxsKG5vZGUsIF8sIGNvbnRleHQpIHtcbiAgICB2YXIgZXhpdCA9IGNvbnRleHQuZW50ZXIoJ3RhYmxlQ2VsbCcpXG4gICAgdmFyIHZhbHVlID0gcGhyYXNpbmcobm9kZSwgY29udGV4dCwge2JlZm9yZTogYXJvdW5kLCBhZnRlcjogYXJvdW5kfSlcbiAgICBleGl0KClcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZURhdGEobWF0cml4LCBhbGlnbikge1xuICAgIHJldHVybiBtYXJrZG93blRhYmxlKG1hdHJpeCwge1xuICAgICAgYWxpZ246IGFsaWduLFxuICAgICAgYWxpZ25EZWxpbWl0ZXJzOiBhbGlnbkRlbGltaXRlcnMsXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgc3RyaW5nTGVuZ3RoOiBzdHJpbmdMZW5ndGhcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVGFibGVBc0RhdGEobm9kZSwgY29udGV4dCkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW5cbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGhcbiAgICB2YXIgcmVzdWx0ID0gW11cbiAgICB2YXIgc3ViZXhpdCA9IGNvbnRleHQuZW50ZXIoJ3RhYmxlJylcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaGFuZGxlVGFibGVSb3dBc0RhdGEoY2hpbGRyZW5baW5kZXhdLCBjb250ZXh0KVxuICAgIH1cblxuICAgIHN1YmV4aXQoKVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlVGFibGVSb3dBc0RhdGEobm9kZSwgY29udGV4dCkge1xuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW5cbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGhcbiAgICB2YXIgcmVzdWx0ID0gW11cbiAgICB2YXIgc3ViZXhpdCA9IGNvbnRleHQuZW50ZXIoJ3RhYmxlUm93JylcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaGFuZGxlVGFibGVDZWxsKGNoaWxkcmVuW2luZGV4XSwgbm9kZSwgY29udGV4dClcbiAgICB9XG5cbiAgICBzdWJleGl0KClcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZ1bmN0aW9uIGlubGluZUNvZGVXaXRoVGFibGUobm9kZSwgcGFyZW50LCBjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlID0gZGVmYXVsdElubGluZUNvZGUobm9kZSwgcGFyZW50LCBjb250ZXh0KVxuXG4gICAgaWYgKGNvbnRleHQuc3RhY2suaW5kZXhPZigndGFibGVDZWxsJykgIT09IC0xKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcfC8sICdcXFxcJCYnKVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNoZWNrQnVsbGV0XG5cbmZ1bmN0aW9uIGNoZWNrQnVsbGV0KGNvbnRleHQpIHtcbiAgdmFyIG1hcmtlciA9IGNvbnRleHQub3B0aW9ucy5idWxsZXQgfHwgJyonXG5cbiAgaWYgKG1hcmtlciAhPT0gJyonICYmIG1hcmtlciAhPT0gJysnICYmIG1hcmtlciAhPT0gJy0nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0Nhbm5vdCBzZXJpYWxpemUgaXRlbXMgd2l0aCBgJyArXG4gICAgICAgIG1hcmtlciArXG4gICAgICAgICdgIGZvciBgb3B0aW9ucy5idWxsZXRgLCBleHBlY3RlZCBgKmAsIGArYCwgb3IgYC1gJ1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBtYXJrZXJcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gY2hlY2tMaXN0SXRlbUluZGVudFxuXG5mdW5jdGlvbiBjaGVja0xpc3RJdGVtSW5kZW50KGNvbnRleHQpIHtcbiAgdmFyIHN0eWxlID0gY29udGV4dC5vcHRpb25zLmxpc3RJdGVtSW5kZW50IHx8ICd0YWInXG5cbiAgaWYgKHN0eWxlID09PSAxIHx8IHN0eWxlID09PSAnMScpIHtcbiAgICByZXR1cm4gJ29uZSdcbiAgfVxuXG4gIGlmIChzdHlsZSAhPT0gJ3RhYicgJiYgc3R5bGUgIT09ICdvbmUnICYmIHN0eWxlICE9PSAnbWl4ZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0Nhbm5vdCBzZXJpYWxpemUgaXRlbXMgd2l0aCBgJyArXG4gICAgICAgIHN0eWxlICtcbiAgICAgICAgJ2AgZm9yIGBvcHRpb25zLmxpc3RJdGVtSW5kZW50YCwgZXhwZWN0ZWQgYHRhYmAsIGBvbmVgLCBvciBgbWl4ZWRgJ1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBzdHlsZVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmbG93XG5cbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJylcblxuZnVuY3Rpb24gZmxvdyhwYXJlbnQsIGNvbnRleHQpIHtcbiAgdmFyIGNoaWxkcmVuID0gcGFyZW50LmNoaWxkcmVuIHx8IFtdXG4gIHZhciByZXN1bHRzID0gW11cbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGNoaWxkXG5cbiAgd2hpbGUgKCsraW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBjaGlsZCA9IGNoaWxkcmVuW2luZGV4XVxuXG4gICAgcmVzdWx0cy5wdXNoKFxuICAgICAgY29udGV4dC5oYW5kbGUoY2hpbGQsIHBhcmVudCwgY29udGV4dCwge2JlZm9yZTogJ1xcbicsIGFmdGVyOiAnXFxuJ30pXG4gICAgKVxuXG4gICAgaWYgKGluZGV4ICsgMSA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmVzdWx0cy5wdXNoKGJldHdlZW4oY2hpbGQsIGNoaWxkcmVuW2luZGV4ICsgMV0pKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzLmpvaW4oJycpXG5cbiAgZnVuY3Rpb24gYmV0d2VlbihsZWZ0LCByaWdodCkge1xuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIHJlc3VsdFxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBjb250ZXh0LmpvaW4ubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgPSBjb250ZXh0LmpvaW5baW5kZXhdKGxlZnQsIHJpZ2h0LCBwYXJlbnQsIGNvbnRleHQpXG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUgfHwgcmVzdWx0ID09PSAxKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gcmVwZWF0KCdcXG4nLCAxICsgTnVtYmVyKHJlc3VsdCkpXG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAnXFxuXFxuPCEtLS0tPlxcblxcbidcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJ1xcblxcbidcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBpbmRlbnRMaW5lc1xuXG52YXIgZW9sID0gL1xccj9cXG58XFxyL2dcblxuZnVuY3Rpb24gaW5kZW50TGluZXModmFsdWUsIG1hcCkge1xuICB2YXIgcmVzdWx0ID0gW11cbiAgdmFyIHN0YXJ0ID0gMFxuICB2YXIgbGluZSA9IDBcbiAgdmFyIG1hdGNoXG5cbiAgd2hpbGUgKChtYXRjaCA9IGVvbC5leGVjKHZhbHVlKSkpIHtcbiAgICBvbmUodmFsdWUuc2xpY2Uoc3RhcnQsIG1hdGNoLmluZGV4KSlcbiAgICByZXN1bHQucHVzaChtYXRjaFswXSlcbiAgICBzdGFydCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoXG4gICAgbGluZSsrXG4gIH1cblxuICBvbmUodmFsdWUuc2xpY2Uoc3RhcnQpKVxuXG4gIHJldHVybiByZXN1bHQuam9pbignJylcblxuICBmdW5jdGlvbiBvbmUodmFsdWUpIHtcbiAgICByZXN1bHQucHVzaChtYXAodmFsdWUsIGxpbmUsICF2YWx1ZSkpXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gbGlzdEl0ZW1cblxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKVxudmFyIGNoZWNrQnVsbGV0ID0gcmVxdWlyZSgnLi4vdXRpbC9jaGVjay1idWxsZXQnKVxudmFyIGNoZWNrTGlzdEl0ZW1JbmRlbnQgPSByZXF1aXJlKCcuLi91dGlsL2NoZWNrLWxpc3QtaXRlbS1pbmRlbnQnKVxudmFyIGZsb3cgPSByZXF1aXJlKCcuLi91dGlsL2NvbnRhaW5lci1mbG93JylcbnZhciBpbmRlbnRMaW5lcyA9IHJlcXVpcmUoJy4uL3V0aWwvaW5kZW50LWxpbmVzJylcblxuZnVuY3Rpb24gbGlzdEl0ZW0obm9kZSwgcGFyZW50LCBjb250ZXh0KSB7XG4gIHZhciBidWxsZXQgPSBjaGVja0J1bGxldChjb250ZXh0KVxuICB2YXIgbGlzdEl0ZW1JbmRlbnQgPSBjaGVja0xpc3RJdGVtSW5kZW50KGNvbnRleHQpXG4gIHZhciBzaXplXG4gIHZhciB2YWx1ZVxuICB2YXIgZXhpdFxuXG4gIGlmIChwYXJlbnQgJiYgcGFyZW50Lm9yZGVyZWQpIHtcbiAgICBidWxsZXQgPVxuICAgICAgKHBhcmVudC5zdGFydCA+IC0xID8gcGFyZW50LnN0YXJ0IDogMSkgK1xuICAgICAgKGNvbnRleHQub3B0aW9ucy5pbmNyZW1lbnRMaXN0TWFya2VyID09PSBmYWxzZVxuICAgICAgICA/IDBcbiAgICAgICAgOiBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKSkgK1xuICAgICAgJy4nXG4gIH1cblxuICBzaXplID0gYnVsbGV0Lmxlbmd0aCArIDFcblxuICBpZiAoXG4gICAgbGlzdEl0ZW1JbmRlbnQgPT09ICd0YWInIHx8XG4gICAgKGxpc3RJdGVtSW5kZW50ID09PSAnbWl4ZWQnICYmICgocGFyZW50ICYmIHBhcmVudC5zcHJlYWQpIHx8IG5vZGUuc3ByZWFkKSlcbiAgKSB7XG4gICAgc2l6ZSA9IE1hdGguY2VpbChzaXplIC8gNCkgKiA0XG4gIH1cblxuICBleGl0ID0gY29udGV4dC5lbnRlcignbGlzdEl0ZW0nKVxuICB2YWx1ZSA9IGluZGVudExpbmVzKGZsb3cobm9kZSwgY29udGV4dCksIG1hcClcbiAgZXhpdCgpXG5cbiAgcmV0dXJuIHZhbHVlXG5cbiAgZnVuY3Rpb24gbWFwKGxpbmUsIGluZGV4LCBibGFuaykge1xuICAgIGlmIChpbmRleCkge1xuICAgICAgcmV0dXJuIChibGFuayA/ICcnIDogcmVwZWF0KCcgJywgc2l6ZSkpICsgbGluZVxuICAgIH1cblxuICAgIHJldHVybiAoYmxhbmsgPyBidWxsZXQgOiBidWxsZXQgKyByZXBlYXQoJyAnLCBzaXplIC0gYnVsbGV0Lmxlbmd0aCkpICsgbGluZVxuICB9XG59XG4iLCJ2YXIgZGVmYXVsdExpc3RJdGVtID0gcmVxdWlyZSgnbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvaGFuZGxlL2xpc3QtaXRlbScpXG5cbmV4cG9ydHMudW5zYWZlID0gW3thdEJyZWFrOiB0cnVlLCBjaGFyYWN0ZXI6ICctJywgYWZ0ZXI6ICdbOnwtXSd9XVxuXG5leHBvcnRzLmhhbmRsZXJzID0ge1xuICBsaXN0SXRlbTogbGlzdEl0ZW1XaXRoVGFza0xpc3RJdGVtXG59XG5cbmZ1bmN0aW9uIGxpc3RJdGVtV2l0aFRhc2tMaXN0SXRlbShub2RlLCBwYXJlbnQsIGNvbnRleHQpIHtcbiAgdmFyIHZhbHVlID0gZGVmYXVsdExpc3RJdGVtKG5vZGUsIHBhcmVudCwgY29udGV4dClcbiAgdmFyIGhlYWQgPSBub2RlLmNoaWxkcmVuWzBdXG5cbiAgaWYgKHR5cGVvZiBub2RlLmNoZWNrZWQgPT09ICdib29sZWFuJyAmJiBoZWFkICYmIGhlYWQudHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14oPzpbKistXXxcXGQrXFwuKShbXFxyXFxuXXwgezEsM30pLywgY2hlY2spXG4gIH1cblxuICByZXR1cm4gdmFsdWVcblxuICBmdW5jdGlvbiBjaGVjaygkMCkge1xuICAgIHJldHVybiAkMCArICdbJyArIChub2RlLmNoZWNrZWQgPyAneCcgOiAnICcpICsgJ10gJ1xuICB9XG59XG4iLCJ2YXIgYXV0b2xpbmtMaXRlcmFsID0gcmVxdWlyZSgnbWRhc3QtdXRpbC1nZm0tYXV0b2xpbmstbGl0ZXJhbC90by1tYXJrZG93bicpXG52YXIgc3RyaWtldGhyb3VnaCA9IHJlcXVpcmUoJ21kYXN0LXV0aWwtZ2ZtLXN0cmlrZXRocm91Z2gvdG8tbWFya2Rvd24nKVxudmFyIHRhYmxlID0gcmVxdWlyZSgnbWRhc3QtdXRpbC1nZm0tdGFibGUvdG8tbWFya2Rvd24nKVxudmFyIHRhc2tMaXN0SXRlbSA9IHJlcXVpcmUoJ21kYXN0LXV0aWwtZ2ZtLXRhc2stbGlzdC1pdGVtL3RvLW1hcmtkb3duJylcblxubW9kdWxlLmV4cG9ydHMgPSB0b01hcmtkb3duXG5cbmZ1bmN0aW9uIHRvTWFya2Rvd24ob3B0aW9ucykge1xuICB2YXIgZXh0ZW5zaW9ucyA9IFtcbiAgICBhdXRvbGlua0xpdGVyYWwsXG4gICAgc3RyaWtldGhyb3VnaCxcbiAgICB0YWJsZShvcHRpb25zKSxcbiAgICB0YXNrTGlzdEl0ZW1cbiAgXVxuICB2YXIgbGVuZ3RoID0gZXh0ZW5zaW9ucy5sZW5ndGhcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGV4dGVuc2lvblxuICB2YXIgdW5zYWZlID0gW11cbiAgdmFyIGhhbmRsZXJzID0ge31cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnNbaW5kZXhdXG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgLSB1bnNhZmUgYWx3YXlzIGV4aXN0cywgZm9yIG5vdy5cbiAgICB1bnNhZmUgPSB1bnNhZmUuY29uY2F0KGV4dGVuc2lvbi51bnNhZmUgfHwgW10pXG4gICAgaGFuZGxlcnMgPSBPYmplY3QuYXNzaWduKGhhbmRsZXJzLCBleHRlbnNpb24uaGFuZGxlcnMgfHwge30pXG4gIH1cblxuICByZXR1cm4ge3Vuc2FmZTogdW5zYWZlLCBoYW5kbGVyczogaGFuZGxlcnN9XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHN5bnRheCA9IHJlcXVpcmUoJ21pY3JvbWFyay1leHRlbnNpb24tZ2ZtJylcbnZhciBmcm9tTWFya2Rvd24gPSByZXF1aXJlKCdtZGFzdC11dGlsLWdmbS9mcm9tLW1hcmtkb3duJylcbnZhciB0b01hcmtkb3duID0gcmVxdWlyZSgnbWRhc3QtdXRpbC1nZm0vdG8tbWFya2Rvd24nKVxuXG52YXIgd2FybmluZ0lzc3VlZFxuXG5tb2R1bGUuZXhwb3J0cyA9IGdmbVxuXG5mdW5jdGlvbiBnZm0ob3B0aW9ucykge1xuICB2YXIgZGF0YSA9IHRoaXMuZGF0YSgpXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBvbGQgcmVtYXJrLiAqL1xuICBpZiAoXG4gICAgIXdhcm5pbmdJc3N1ZWQgJiZcbiAgICAoKHRoaXMuUGFyc2VyICYmXG4gICAgICB0aGlzLlBhcnNlci5wcm90b3R5cGUgJiZcbiAgICAgIHRoaXMuUGFyc2VyLnByb3RvdHlwZS5ibG9ja1Rva2VuaXplcnMpIHx8XG4gICAgICAodGhpcy5Db21waWxlciAmJlxuICAgICAgICB0aGlzLkNvbXBpbGVyLnByb3RvdHlwZSAmJlxuICAgICAgICB0aGlzLkNvbXBpbGVyLnByb3RvdHlwZS52aXNpdG9ycykpXG4gICkge1xuICAgIHdhcm5pbmdJc3N1ZWQgPSB0cnVlXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tyZW1hcmstZ2ZtXSBXYXJuaW5nOiBwbGVhc2UgdXBncmFkZSB0byByZW1hcmsgMTMgdG8gdXNlIHRoaXMgcGx1Z2luJ1xuICAgIClcbiAgfVxuXG4gIGFkZCgnbWljcm9tYXJrRXh0ZW5zaW9ucycsIHN5bnRheChvcHRpb25zKSlcbiAgYWRkKCdmcm9tTWFya2Rvd25FeHRlbnNpb25zJywgZnJvbU1hcmtkb3duKVxuICBhZGQoJ3RvTWFya2Rvd25FeHRlbnNpb25zJywgdG9NYXJrZG93bihvcHRpb25zKSlcblxuICBmdW5jdGlvbiBhZGQoZmllbGQsIHZhbHVlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gb3RoZXIgZXh0ZW5zaW9ucy4gKi9cbiAgICBpZiAoZGF0YVtmaWVsZF0pIGRhdGFbZmllbGRdLnB1c2godmFsdWUpXG4gICAgZWxzZSBkYXRhW2ZpZWxkXSA9IFt2YWx1ZV1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQXR0cmlidXRlc1xuXG4vLyBUbyBkbzogdXNlIGBkaXN0L2BcbnZhciBhc2NpaUFscGhhID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL2FzY2lpLWFscGhhJylcbnZhciBhc2NpaUFscGhhbnVtZXJpYyA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L2NoYXJhY3Rlci9hc2NpaS1hbHBoYW51bWVyaWMnKVxudmFyIG1hcmtkb3duTGluZUVuZGluZyA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZycpXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZSA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L2NoYXJhY3Rlci9tYXJrZG93bi1saW5lLWVuZGluZy1vci1zcGFjZScpXG52YXIgbWFya2Rvd25TcGFjZSA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L2NoYXJhY3Rlci9tYXJrZG93bi1zcGFjZScpXG52YXIgY3JlYXRlV2hpdGVzcGFjZSA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2ZhY3Rvcnktd2hpdGVzcGFjZScpXG52YXIgY3JlYXRlU3BhY2UgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC90b2tlbml6ZS9mYWN0b3J5LXNwYWNlJylcblxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMgKi9cbmZ1bmN0aW9uIGNyZWF0ZUF0dHJpYnV0ZXMoXG4gIGVmZmVjdHMsXG4gIG9rLFxuICBub2ssXG4gIGF0dHJpYnV0ZXNUeXBlLFxuICBhdHRyaWJ1dGVzTWFya2VyVHlwZSxcbiAgYXR0cmlidXRlVHlwZSxcbiAgYXR0cmlidXRlSWRUeXBlLFxuICBhdHRyaWJ1dGVDbGFzc1R5cGUsXG4gIGF0dHJpYnV0ZU5hbWVUeXBlLFxuICBhdHRyaWJ1dGVJbml0aWFsaXplclR5cGUsXG4gIGF0dHJpYnV0ZVZhbHVlTGl0ZXJhbFR5cGUsXG4gIGF0dHJpYnV0ZVZhbHVlVHlwZSxcbiAgYXR0cmlidXRlVmFsdWVNYXJrZXIsXG4gIGF0dHJpYnV0ZVZhbHVlRGF0YSxcbiAgZGlzYWxsb3dFb2xcbikge1xuICB2YXIgdHlwZVxuICB2YXIgbWFya2VyXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8vIEFsd2F5cyBhIGB7YFxuICAgIGVmZmVjdHMuZW50ZXIoYXR0cmlidXRlc1R5cGUpXG4gICAgZWZmZWN0cy5lbnRlcihhdHRyaWJ1dGVzTWFya2VyVHlwZSlcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBlZmZlY3RzLmV4aXQoYXR0cmlidXRlc01hcmtlclR5cGUpXG4gICAgcmV0dXJuIGJldHdlZW5cbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSAzNSAvKiBgI2AgKi8pIHtcbiAgICAgIHR5cGUgPSBhdHRyaWJ1dGVJZFR5cGVcbiAgICAgIHJldHVybiBzaG9ydGN1dFN0YXJ0KGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDQ2IC8qIGAuYCAqLykge1xuICAgICAgdHlwZSA9IGF0dHJpYnV0ZUNsYXNzVHlwZVxuICAgICAgcmV0dXJuIHNob3J0Y3V0U3RhcnQoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gNTggLyogYDpgICovIHx8IGNvZGUgPT09IDk1IC8qIGBfYCAqLyB8fCBhc2NpaUFscGhhKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKGF0dHJpYnV0ZVR5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKGF0dHJpYnV0ZU5hbWVUeXBlKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cblxuICAgIGlmIChkaXNhbGxvd0VvbCAmJiBtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgYmV0d2VlbiwgJ3doaXRlc3BhY2UnKShjb2RlKVxuICAgIH1cblxuICAgIGlmICghZGlzYWxsb3dFb2wgJiYgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdoaXRlc3BhY2UoZWZmZWN0cywgYmV0d2VlbikoY29kZSlcbiAgICB9XG5cbiAgICByZXR1cm4gZW5kKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBzaG9ydGN1dFN0YXJ0KGNvZGUpIHtcbiAgICBlZmZlY3RzLmVudGVyKGF0dHJpYnV0ZVR5cGUpXG4gICAgZWZmZWN0cy5lbnRlcih0eXBlKVxuICAgIGVmZmVjdHMuZW50ZXIodHlwZSArICdNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCh0eXBlICsgJ01hcmtlcicpXG4gICAgcmV0dXJuIHNob3J0Y3V0U3RhcnRBZnRlclxuICB9XG5cbiAgZnVuY3Rpb24gc2hvcnRjdXRTdGFydEFmdGVyKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIC8qIEVPRiAqLyB8fFxuICAgICAgY29kZSA9PT0gMzQgLyogYFwiYCAqLyB8fFxuICAgICAgY29kZSA9PT0gMzUgLyogYCNgICovIHx8XG4gICAgICBjb2RlID09PSAzOSAvKiBgJ2AgKi8gfHxcbiAgICAgIGNvZGUgPT09IDQ2IC8qIGAuYCAqLyB8fFxuICAgICAgY29kZSA9PT0gNjAgLyogYDxgICovIHx8XG4gICAgICBjb2RlID09PSA2MSAvKiBgPWAgKi8gfHxcbiAgICAgIGNvZGUgPT09IDYyIC8qIGA+YCAqLyB8fFxuICAgICAgY29kZSA9PT0gOTYgLyogYGAgYCBgYCAqLyB8fFxuICAgICAgY29kZSA9PT0gMTI1IC8qIGB9YCAqLyB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKVxuICAgICkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIodHlwZSArICdWYWx1ZScpXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIHNob3J0Y3V0XG4gIH1cblxuICBmdW5jdGlvbiBzaG9ydGN1dChjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCAvKiBFT0YgKi8gfHxcbiAgICAgIGNvZGUgPT09IDM0IC8qIGBcImAgKi8gfHxcbiAgICAgIGNvZGUgPT09IDM5IC8qIGAnYCAqLyB8fFxuICAgICAgY29kZSA9PT0gNjAgLyogYDxgICovIHx8XG4gICAgICBjb2RlID09PSA2MSAvKiBgPWAgKi8gfHxcbiAgICAgIGNvZGUgPT09IDYyIC8qIGA+YCAqLyB8fFxuICAgICAgY29kZSA9PT0gOTYgLyogYGAgYCBgYCAqL1xuICAgICkge1xuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IDM1IC8qIGAjYCAqLyB8fFxuICAgICAgY29kZSA9PT0gNDYgLyogYC5gICovIHx8XG4gICAgICBjb2RlID09PSAxMjUgLyogYH1gICovIHx8XG4gICAgICBtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlKGNvZGUpXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmV4aXQodHlwZSArICdWYWx1ZScpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVUeXBlKVxuICAgICAgcmV0dXJuIGJldHdlZW4oY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gc2hvcnRjdXRcbiAgfVxuXG4gIGZ1bmN0aW9uIG5hbWUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IDQ1IC8qIGAtYCAqLyB8fFxuICAgICAgY29kZSA9PT0gNDYgLyogYC5gICovIHx8XG4gICAgICBjb2RlID09PSA1OCAvKiBgOmAgKi8gfHxcbiAgICAgIGNvZGUgPT09IDk1IC8qIGBfYCAqLyB8fFxuICAgICAgYXNjaWlBbHBoYW51bWVyaWMoY29kZSlcbiAgICApIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQoYXR0cmlidXRlTmFtZVR5cGUpXG5cbiAgICBpZiAoZGlzYWxsb3dFb2wgJiYgbWFya2Rvd25TcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIG5hbWVBZnRlciwgJ3doaXRlc3BhY2UnKShjb2RlKVxuICAgIH1cblxuICAgIGlmICghZGlzYWxsb3dFb2wgJiYgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdoaXRlc3BhY2UoZWZmZWN0cywgbmFtZUFmdGVyKShjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBuYW1lQWZ0ZXIoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG5hbWVBZnRlcihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDYxIC8qIGA9YCAqLykge1xuICAgICAgZWZmZWN0cy5lbnRlcihhdHRyaWJ1dGVJbml0aWFsaXplclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVJbml0aWFsaXplclR5cGUpXG4gICAgICByZXR1cm4gdmFsdWVCZWZvcmVcbiAgICB9XG5cbiAgICAvLyBBdHRyaWJ1dGUgdy9vIHZhbHVlLlxuICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVUeXBlKVxuICAgIHJldHVybiBiZXR3ZWVuKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZUJlZm9yZShjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCAvKiBFT0YgKi8gfHxcbiAgICAgIGNvZGUgPT09IDYwIC8qIGA8YCAqLyB8fFxuICAgICAgY29kZSA9PT0gNjEgLyogYD1gICovIHx8XG4gICAgICBjb2RlID09PSA2MiAvKiBgPmAgKi8gfHxcbiAgICAgIGNvZGUgPT09IDk2IC8qIGBgIGAgYGAgKi8gfHxcbiAgICAgIGNvZGUgPT09IDEyNSAvKiBgfWAgKi8gfHxcbiAgICAgIChkaXNhbGxvd0VvbCAmJiBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDM0IC8qIGBcImAgKi8gfHwgY29kZSA9PT0gMzkgLyogYCdgICovKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKGF0dHJpYnV0ZVZhbHVlTGl0ZXJhbFR5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKGF0dHJpYnV0ZVZhbHVlTWFya2VyKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoYXR0cmlidXRlVmFsdWVNYXJrZXIpXG4gICAgICBtYXJrZXIgPSBjb2RlXG4gICAgICByZXR1cm4gdmFsdWVRdW90ZWRTdGFydFxuICAgIH1cblxuICAgIGlmIChkaXNhbGxvd0VvbCAmJiBtYXJrZG93blNwYWNlKGNvZGUpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgdmFsdWVCZWZvcmUsICd3aGl0ZXNwYWNlJykoY29kZSlcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FsbG93RW9sICYmIG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXaGl0ZXNwYWNlKGVmZmVjdHMsIHZhbHVlQmVmb3JlKShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoYXR0cmlidXRlVmFsdWVUeXBlKVxuICAgIGVmZmVjdHMuZW50ZXIoYXR0cmlidXRlVmFsdWVEYXRhKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIG1hcmtlciA9IHVuZGVmaW5lZFxuICAgIHJldHVybiB2YWx1ZVVucXVvdGVkXG4gIH1cblxuICBmdW5jdGlvbiB2YWx1ZVVucXVvdGVkKGNvZGUpIHtcbiAgICBpZiAoXG4gICAgICBjb2RlID09PSBudWxsIC8qIEVPRiAqLyB8fFxuICAgICAgY29kZSA9PT0gMzQgLyogYFwiYCAqLyB8fFxuICAgICAgY29kZSA9PT0gMzkgLyogYCdgICovIHx8XG4gICAgICBjb2RlID09PSA2MCAvKiBgPGAgKi8gfHxcbiAgICAgIGNvZGUgPT09IDYxIC8qIGA9YCAqLyB8fFxuICAgICAgY29kZSA9PT0gNjIgLyogYD5gICovIHx8XG4gICAgICBjb2RlID09PSA5NiAvKiBgYCBgIGBgICovXG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDEyNSAvKiBgfWAgKi8gfHwgbWFya2Rvd25MaW5lRW5kaW5nT3JTcGFjZShjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KGF0dHJpYnV0ZVZhbHVlRGF0YSlcbiAgICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVWYWx1ZVR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQoYXR0cmlidXRlVHlwZSlcbiAgICAgIHJldHVybiBiZXR3ZWVuKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgcmV0dXJuIHZhbHVlVW5xdW90ZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlUXVvdGVkU3RhcnQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBtYXJrZXIpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoYXR0cmlidXRlVmFsdWVNYXJrZXIpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVWYWx1ZU1hcmtlcilcbiAgICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVWYWx1ZUxpdGVyYWxUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KGF0dHJpYnV0ZVR5cGUpXG4gICAgICByZXR1cm4gdmFsdWVRdW90ZWRBZnRlclxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoYXR0cmlidXRlVmFsdWVUeXBlKVxuICAgIHJldHVybiB2YWx1ZVF1b3RlZEJldHdlZW4oY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlUXVvdGVkQmV0d2Vlbihjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IG1hcmtlcikge1xuICAgICAgZWZmZWN0cy5leGl0KGF0dHJpYnV0ZVZhbHVlVHlwZSlcbiAgICAgIHJldHVybiB2YWx1ZVF1b3RlZFN0YXJ0KGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IG51bGwgLyogRU9GICovKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgLy8gTm90ZTogYmxhbmsgbGluZXMgY2Fu4oCZdCBleGlzdCBpbiBjb250ZW50LlxuICAgIGlmIChtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgIHJldHVybiBkaXNhbGxvd0VvbFxuICAgICAgICA/IG5vayhjb2RlKVxuICAgICAgICA6IGNyZWF0ZVdoaXRlc3BhY2UoZWZmZWN0cywgdmFsdWVRdW90ZWRCZXR3ZWVuKShjb2RlKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoYXR0cmlidXRlVmFsdWVEYXRhKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiB2YWx1ZVF1b3RlZFxuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWVRdW90ZWQoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IG1hcmtlciB8fFxuICAgICAgY29kZSA9PT0gbnVsbCAvKiBFT0YgKi8gfHxcbiAgICAgIG1hcmtkb3duTGluZUVuZGluZyhjb2RlKVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KGF0dHJpYnV0ZVZhbHVlRGF0YSlcbiAgICAgIHJldHVybiB2YWx1ZVF1b3RlZEJldHdlZW4oY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gdmFsdWVRdW90ZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbHVlUXVvdGVkQWZ0ZXIoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSAxMjUgLyogYH1gICovIHx8IG1hcmtkb3duTGluZUVuZGluZ09yU3BhY2UoY29kZSlcbiAgICAgID8gYmV0d2Vlbihjb2RlKVxuICAgICAgOiBlbmQoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDEyNSAvKiBgfWAgKi8pIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIoYXR0cmlidXRlc01hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVzTWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuZXhpdChhdHRyaWJ1dGVzVHlwZSlcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVMYWJlbFxuXG4vLyBUbyBkbzogdXNlIGBkaXN0L2BcbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxudmFyIG1hcmtkb3duU3BhY2UgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvbWFya2Rvd24tc3BhY2UnKVxuXG4vLyBUaGlzIGlzIGEgZm9yayBvZjpcbi8vIDxodHRwczovL2dpdGh1Yi5jb20vbWljcm9tYXJrL21pY3JvbWFyay9ibG9iL2JmNTNiZjkvbGliL3Rva2VuaXplL2ZhY3RvcnktbGFiZWwuanM+XG4vLyB0byBhbGxvdyBlbXB0eSwgc3VwcG9ydCB0ZXh0IGluc3RlYWQgb2Ygc3RyaW5ncywgYW5kIG9wdGlvbmFsbHkgdy9vIEVPTHMsXG4vLyBsYWJlbHMuXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zXG5mdW5jdGlvbiBjcmVhdGVMYWJlbChcbiAgZWZmZWN0cyxcbiAgb2ssXG4gIG5vayxcbiAgdHlwZSxcbiAgbWFya2VyVHlwZSxcbiAgc3RyaW5nVHlwZSxcbiAgYWxsb3dFbXB0eSxcbiAgZGlzYWxsb3dFb2xcbikge1xuICB2YXIgc2l6ZSA9IDBcbiAgdmFyIGRhdGFcblxuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gYWx3YXlzIGBbYCAqL1xuICAgIGlmIChjb2RlICE9PSA5MSAvKiBgW2AgKi8pIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgYFtgJylcbiAgICBlZmZlY3RzLmVudGVyKHR5cGUpXG4gICAgZWZmZWN0cy5lbnRlcihtYXJrZXJUeXBlKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgIHJldHVybiBhZnRlclN0YXJ0XG4gIH1cblxuICBmdW5jdGlvbiBhZnRlclN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gOTMgLyogYF1gICovICYmIGFsbG93RW1wdHkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIobWFya2VyVHlwZSlcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KG1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmV4aXQodHlwZSlcbiAgICAgIHJldHVybiBva1xuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoc3RyaW5nVHlwZSlcbiAgICByZXR1cm4gYXRCcmVhayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYXRCcmVhayhjb2RlKSB7XG4gICAgaWYgKFxuICAgICAgY29kZSA9PT0gbnVsbCAvKiBFT0YgKi8gfHxcbiAgICAgIGNvZGUgPT09IDkxIC8qIGBbYCAqLyB8fFxuICAgICAgKGNvZGUgPT09IDkzIC8qIGBdYCAqLyAmJiAhZGF0YSAmJiAhYWxsb3dFbXB0eSkgfHxcbiAgICAgIC8qIDxodHRwczovL2dpdGh1Yi5jb20vbWljcm9tYXJrL21pY3JvbWFyay9ibG9iL2JmNTNiZjkvbGliL2NvbnN0YW50L2NvbnN0YW50cy5qcyNMMzQ+ICovXG4gICAgICBzaXplID4gOTk5XG4gICAgKSB7XG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDkzIC8qIGBdYCAqLykge1xuICAgICAgZWZmZWN0cy5leGl0KHN0cmluZ1R5cGUpXG4gICAgICBlZmZlY3RzLmVudGVyKG1hcmtlclR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdChtYXJrZXJUeXBlKVxuICAgICAgZWZmZWN0cy5leGl0KHR5cGUpXG4gICAgICByZXR1cm4gb2tcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBpZiAoZGlzYWxsb3dFb2wpIHtcbiAgICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICAgIHJldHVybiBhdEJyZWFrXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignY2h1bmtUZXh0Jywge2NvbnRlbnRUeXBlOiAndGV4dCd9KVxuICAgIHJldHVybiBsYWJlbChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gbGFiZWwoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IG51bGwgLyogRU9GICovIHx8XG4gICAgICBjb2RlID09PSA5MSAvKiBgW2AgKi8gfHxcbiAgICAgIGNvZGUgPT09IDkzIC8qIGBdYCAqLyB8fFxuICAgICAgbWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpIHx8XG4gICAgICAvKiA8aHR0cHM6Ly9naXRodWIuY29tL21pY3JvbWFyay9taWNyb21hcmsvYmxvYi9iZjUzYmY5L2xpYi9jb25zdGFudC9jb25zdGFudHMuanMjTDM0PiAqL1xuICAgICAgc2l6ZSA+IDk5OVxuICAgICkge1xuICAgICAgZWZmZWN0cy5leGl0KCdjaHVua1RleHQnKVxuICAgICAgcmV0dXJuIGF0QnJlYWsoY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICBkYXRhID0gZGF0YSB8fCAhbWFya2Rvd25TcGFjZShjb2RlKVxuICAgIHJldHVybiBjb2RlID09PSA5MiAvKiBgXFxgICovID8gbGFiZWxFc2NhcGUgOiBsYWJlbFxuICB9XG5cbiAgZnVuY3Rpb24gbGFiZWxFc2NhcGUoY29kZSkge1xuICAgIGlmIChcbiAgICAgIGNvZGUgPT09IDkxIC8qIGBbYCAqLyB8fFxuICAgICAgY29kZSA9PT0gOTIgLyogYFxcYCAqLyB8fFxuICAgICAgY29kZSA9PT0gOTMgLyogYF1gICovXG4gICAgKSB7XG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHNpemUrK1xuICAgICAgcmV0dXJuIGxhYmVsXG4gICAgfVxuXG4gICAgcmV0dXJuIGxhYmVsKGNvZGUpXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZU5hbWVcblxuLy8gVG8gZG86IHVzZSBgZGlzdC9gXG52YXIgYXNjaWlBbHBoYSA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L2NoYXJhY3Rlci9hc2NpaS1hbHBoYScpXG52YXIgYXNjaWlBbHBoYW51bWVyaWMgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvYXNjaWktYWxwaGFudW1lcmljJylcblxuZnVuY3Rpb24gY3JlYXRlTmFtZShlZmZlY3RzLCBvaywgbm9rLCBuYW1lVHlwZSkge1xuICByZXR1cm4gc3RhcnRcblxuICBmdW5jdGlvbiBzdGFydChjb2RlKSB7XG4gICAgaWYgKGFzY2lpQWxwaGEoY29kZSkpIHtcbiAgICAgIGVmZmVjdHMuZW50ZXIobmFtZVR5cGUpXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gbmFtZShjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDQ1IC8qIGAtYCAqLyB8fCBhc2NpaUFscGhhbnVtZXJpYyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICByZXR1cm4gbmFtZVxuICAgIH1cblxuICAgIGVmZmVjdHMuZXhpdChuYW1lVHlwZSlcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZURpcmVjdGl2ZVRleHRcbmV4cG9ydHMucHJldmlvdXMgPSBwcmV2aW91c1xuXG4vLyBUbyBkbzogdXNlIGBkaXN0L2BcbnZhciBjcmVhdGVBdHRyaWJ1dGVzID0gcmVxdWlyZSgnLi9mYWN0b3J5LWF0dHJpYnV0ZXMnKVxudmFyIGNyZWF0ZUxhYmVsID0gcmVxdWlyZSgnLi9mYWN0b3J5LWxhYmVsJylcbnZhciBjcmVhdGVOYW1lID0gcmVxdWlyZSgnLi9mYWN0b3J5LW5hbWUnKVxuXG52YXIgbGFiZWwgPSB7dG9rZW5pemU6IHRva2VuaXplTGFiZWx9XG52YXIgYXR0cmlidXRlcyA9IHt0b2tlbml6ZTogdG9rZW5pemVBdHRyaWJ1dGVzfVxuXG5mdW5jdGlvbiBwcmV2aW91cyhjb2RlKSB7XG4gIC8vIElmIHRoZXJlIGlzIGEgcHJldmlvdXMgY29kZSwgdGhlcmUgd2lsbCBhbHdheXMgYmUgYSB0YWlsLlxuICByZXR1cm4gKFxuICAgIGNvZGUgIT09IDU4IC8qIGA6YCAqLyB8fFxuICAgIHRoaXMuZXZlbnRzW3RoaXMuZXZlbnRzLmxlbmd0aCAtIDFdWzFdLnR5cGUgPT09ICdjaGFyYWN0ZXJFc2NhcGUnXG4gIClcbn1cblxuZnVuY3Rpb24gdG9rZW5pemVEaXJlY3RpdmVUZXh0KGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG5cbiAgcmV0dXJuIHN0YXJ0XG5cbiAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIGhhbmRsZWQgYnkgbW0gKi9cbiAgICBpZiAoY29kZSAhPT0gNTggLyogYDpgICovKSB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGA6YCcpXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBoYW5kbGVkIGJ5IG1tICovXG4gICAgaWYgKCFwcmV2aW91cy5jYWxsKHNlbGYsIHNlbGYucHJldmlvdXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGNvcnJlY3QgcHJldmlvdXMnKVxuICAgIH1cblxuICAgIGVmZmVjdHMuZW50ZXIoJ2RpcmVjdGl2ZVRleHQnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2RpcmVjdGl2ZVRleHRNYXJrZXInKVxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIGVmZmVjdHMuZXhpdCgnZGlyZWN0aXZlVGV4dE1hcmtlcicpXG4gICAgcmV0dXJuIGNyZWF0ZU5hbWUoZWZmZWN0cywgYWZ0ZXJOYW1lLCBub2ssICdkaXJlY3RpdmVUZXh0TmFtZScpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlck5hbWUoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSA5MSAvKiBgW2AgKi9cbiAgICAgID8gZWZmZWN0cy5hdHRlbXB0KGxhYmVsLCBhZnRlckxhYmVsLCBhZnRlckxhYmVsKShjb2RlKVxuICAgICAgOiBhZnRlckxhYmVsKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlckxhYmVsKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gMTIzIC8qIGB7YCAqL1xuICAgICAgPyBlZmZlY3RzLmF0dGVtcHQoYXR0cmlidXRlcywgYWZ0ZXJBdHRyaWJ1dGVzLCBhZnRlckF0dHJpYnV0ZXMpKGNvZGUpXG4gICAgICA6IGFmdGVyQXR0cmlidXRlcyhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJBdHRyaWJ1dGVzKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2RpcmVjdGl2ZVRleHQnKVxuICAgIHJldHVybiBvayhjb2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWwoZWZmZWN0cywgb2ssIG5vaykge1xuICAvLyBBbHdheXMgYSBgW2BcbiAgcmV0dXJuIGNyZWF0ZUxhYmVsKFxuICAgIGVmZmVjdHMsXG4gICAgb2ssXG4gICAgbm9rLFxuICAgICdkaXJlY3RpdmVUZXh0TGFiZWwnLFxuICAgICdkaXJlY3RpdmVUZXh0TGFiZWxNYXJrZXInLFxuICAgICdkaXJlY3RpdmVUZXh0TGFiZWxTdHJpbmcnLFxuICAgIHRydWVcbiAgKVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUF0dHJpYnV0ZXMoZWZmZWN0cywgb2ssIG5vaykge1xuICAvLyBBbHdheXMgYSBge2BcbiAgcmV0dXJuIGNyZWF0ZUF0dHJpYnV0ZXMoXG4gICAgZWZmZWN0cyxcbiAgICBvayxcbiAgICBub2ssXG4gICAgJ2RpcmVjdGl2ZVRleHRBdHRyaWJ1dGVzJyxcbiAgICAnZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZXNNYXJrZXInLFxuICAgICdkaXJlY3RpdmVUZXh0QXR0cmlidXRlJyxcbiAgICAnZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZUlkJyxcbiAgICAnZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZUNsYXNzJyxcbiAgICAnZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZU5hbWUnLFxuICAgICdkaXJlY3RpdmVUZXh0QXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXInLFxuICAgICdkaXJlY3RpdmVUZXh0QXR0cmlidXRlVmFsdWVMaXRlcmFsJyxcbiAgICAnZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZVZhbHVlJyxcbiAgICAnZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZVZhbHVlTWFya2VyJyxcbiAgICAnZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZVZhbHVlRGF0YSdcbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZURpcmVjdGl2ZUxlYWZcblxuLy8gVG8gZG86IHVzZSBgZGlzdC9gXG52YXIgbWFya2Rvd25MaW5lRW5kaW5nID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvY2hhcmFjdGVyL21hcmtkb3duLWxpbmUtZW5kaW5nJylcbnZhciBjcmVhdGVTcGFjZSA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3Rva2VuaXplL2ZhY3Rvcnktc3BhY2UnKVxudmFyIGNyZWF0ZUF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL2ZhY3RvcnktYXR0cmlidXRlcycpXG52YXIgY3JlYXRlTGFiZWwgPSByZXF1aXJlKCcuL2ZhY3RvcnktbGFiZWwnKVxudmFyIGNyZWF0ZU5hbWUgPSByZXF1aXJlKCcuL2ZhY3RvcnktbmFtZScpXG5cbnZhciBsYWJlbCA9IHt0b2tlbml6ZTogdG9rZW5pemVMYWJlbH1cbnZhciBhdHRyaWJ1dGVzID0ge3Rva2VuaXplOiB0b2tlbml6ZUF0dHJpYnV0ZXN9XG5cbmZ1bmN0aW9uIHRva2VuaXplRGlyZWN0aXZlTGVhZihlZmZlY3RzLCBvaywgbm9rKSB7XG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBoYW5kbGVkIGJ5IG1tICovXG4gICAgaWYgKGNvZGUgIT09IDU4IC8qIGA6YCAqLykgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBgOmAnKVxuXG4gICAgZWZmZWN0cy5lbnRlcignZGlyZWN0aXZlTGVhZicpXG4gICAgZWZmZWN0cy5lbnRlcignZGlyZWN0aXZlTGVhZlNlcXVlbmNlJylcbiAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICByZXR1cm4gaW5TdGFydFxuICB9XG5cbiAgZnVuY3Rpb24gaW5TdGFydChjb2RlKSB7XG4gICAgaWYgKGNvZGUgPT09IDU4IC8qIGA6YCAqLykge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2RpcmVjdGl2ZUxlYWZTZXF1ZW5jZScpXG4gICAgICByZXR1cm4gY3JlYXRlTmFtZShlZmZlY3RzLCBhZnRlck5hbWUsIG5vaywgJ2RpcmVjdGl2ZUxlYWZOYW1lJylcbiAgICB9XG5cbiAgICByZXR1cm4gbm9rKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlck5hbWUoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSA5MSAvKiBgW2AgKi9cbiAgICAgID8gZWZmZWN0cy5hdHRlbXB0KGxhYmVsLCBhZnRlckxhYmVsLCBhZnRlckxhYmVsKShjb2RlKVxuICAgICAgOiBhZnRlckxhYmVsKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBhZnRlckxhYmVsKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gMTIzIC8qIGB7YCAqL1xuICAgICAgPyBlZmZlY3RzLmF0dGVtcHQoYXR0cmlidXRlcywgYWZ0ZXJBdHRyaWJ1dGVzLCBhZnRlckF0dHJpYnV0ZXMpKGNvZGUpXG4gICAgICA6IGFmdGVyQXR0cmlidXRlcyhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJBdHRyaWJ1dGVzKGNvZGUpIHtcbiAgICByZXR1cm4gY3JlYXRlU3BhY2UoZWZmZWN0cywgZW5kLCAnd2hpdGVzcGFjZScpKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBlbmQoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsIHx8IG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5leGl0KCdkaXJlY3RpdmVMZWFmJylcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cblxuICAgIHJldHVybiBub2soY29kZSlcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUxhYmVsKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgLy8gQWx3YXlzIGEgYFtgXG4gIHJldHVybiBjcmVhdGVMYWJlbChcbiAgICBlZmZlY3RzLFxuICAgIG9rLFxuICAgIG5vayxcbiAgICAnZGlyZWN0aXZlTGVhZkxhYmVsJyxcbiAgICAnZGlyZWN0aXZlTGVhZkxhYmVsTWFya2VyJyxcbiAgICAnZGlyZWN0aXZlTGVhZkxhYmVsU3RyaW5nJyxcbiAgICB0cnVlLFxuICAgIHRydWVcbiAgKVxufVxuXG5mdW5jdGlvbiB0b2tlbml6ZUF0dHJpYnV0ZXMoZWZmZWN0cywgb2ssIG5vaykge1xuICAvLyBBbHdheXMgYSBge2BcbiAgcmV0dXJuIGNyZWF0ZUF0dHJpYnV0ZXMoXG4gICAgZWZmZWN0cyxcbiAgICBvayxcbiAgICBub2ssXG4gICAgJ2RpcmVjdGl2ZUxlYWZBdHRyaWJ1dGVzJyxcbiAgICAnZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZXNNYXJrZXInLFxuICAgICdkaXJlY3RpdmVMZWFmQXR0cmlidXRlJyxcbiAgICAnZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZUlkJyxcbiAgICAnZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZUNsYXNzJyxcbiAgICAnZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZU5hbWUnLFxuICAgICdkaXJlY3RpdmVMZWFmQXR0cmlidXRlSW5pdGlhbGl6ZXJNYXJrZXInLFxuICAgICdkaXJlY3RpdmVMZWFmQXR0cmlidXRlVmFsdWVMaXRlcmFsJyxcbiAgICAnZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZVZhbHVlJyxcbiAgICAnZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZVZhbHVlTWFya2VyJyxcbiAgICAnZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZVZhbHVlRGF0YScsXG4gICAgdHJ1ZVxuICApXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy50b2tlbml6ZSA9IHRva2VuaXplRGlyZWN0aXZlQ29udGFpbmVyXG5leHBvcnRzLmNvbmNyZXRlID0gdHJ1ZVxuXG4vLyBUbyBkbzogdXNlIGBkaXN0L2BcbnZhciBtYXJrZG93bkxpbmVFbmRpbmcgPSByZXF1aXJlKCdtaWNyb21hcmsvZGlzdC9jaGFyYWN0ZXIvbWFya2Rvd24tbGluZS1lbmRpbmcnKVxudmFyIGNyZWF0ZVNwYWNlID0gcmVxdWlyZSgnbWljcm9tYXJrL2Rpc3QvdG9rZW5pemUvZmFjdG9yeS1zcGFjZScpXG52YXIgcHJlZml4U2l6ZSA9IHJlcXVpcmUoJ21pY3JvbWFyay9kaXN0L3V0aWwvcHJlZml4LXNpemUnKVxudmFyIGNyZWF0ZUF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL2ZhY3RvcnktYXR0cmlidXRlcycpXG52YXIgY3JlYXRlTGFiZWwgPSByZXF1aXJlKCcuL2ZhY3RvcnktbGFiZWwnKVxudmFyIGNyZWF0ZU5hbWUgPSByZXF1aXJlKCcuL2ZhY3RvcnktbmFtZScpXG5cbnZhciBsYWJlbCA9IHt0b2tlbml6ZTogdG9rZW5pemVMYWJlbH1cbnZhciBhdHRyaWJ1dGVzID0ge3Rva2VuaXplOiB0b2tlbml6ZUF0dHJpYnV0ZXN9XG5cbmZ1bmN0aW9uIHRva2VuaXplRGlyZWN0aXZlQ29udGFpbmVyKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBpbml0aWFsUHJlZml4ID0gcHJlZml4U2l6ZSh0aGlzLmV2ZW50cywgJ2xpbmVQcmVmaXgnKVxuICB2YXIgc2l6ZU9wZW4gPSAwXG4gIHZhciBwcmV2aW91c1xuXG4gIHJldHVybiBzdGFydFxuXG4gIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBoYW5kbGVkIGJ5IG1tICovXG4gICAgaWYgKGNvZGUgIT09IDU4IC8qIGA6YCAqLykgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBgOmAnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2RpcmVjdGl2ZUNvbnRhaW5lcicpXG4gICAgZWZmZWN0cy5lbnRlcignZGlyZWN0aXZlQ29udGFpbmVyRmVuY2UnKVxuICAgIGVmZmVjdHMuZW50ZXIoJ2RpcmVjdGl2ZUNvbnRhaW5lclNlcXVlbmNlJylcbiAgICByZXR1cm4gc2VxdWVuY2VPcGVuKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBzZXF1ZW5jZU9wZW4oY29kZSkge1xuICAgIGlmIChjb2RlID09PSA1OCAvKiBgOmAgKi8pIHtcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgc2l6ZU9wZW4rK1xuICAgICAgcmV0dXJuIHNlcXVlbmNlT3BlblxuICAgIH1cblxuICAgIGlmIChzaXplT3BlbiA8IDMpIHtcbiAgICAgIHJldHVybiBub2soY29kZSlcbiAgICB9XG5cbiAgICBlZmZlY3RzLmV4aXQoJ2RpcmVjdGl2ZUNvbnRhaW5lclNlcXVlbmNlJylcbiAgICByZXR1cm4gY3JlYXRlTmFtZShlZmZlY3RzLCBhZnRlck5hbWUsIG5vaywgJ2RpcmVjdGl2ZUNvbnRhaW5lck5hbWUnKShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJOYW1lKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gOTEgLyogYFtgICovXG4gICAgICA/IGVmZmVjdHMuYXR0ZW1wdChsYWJlbCwgYWZ0ZXJMYWJlbCwgYWZ0ZXJMYWJlbCkoY29kZSlcbiAgICAgIDogYWZ0ZXJMYWJlbChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gYWZ0ZXJMYWJlbChjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPT09IDEyMyAvKiBge2AgKi9cbiAgICAgID8gZWZmZWN0cy5hdHRlbXB0KGF0dHJpYnV0ZXMsIGFmdGVyQXR0cmlidXRlcywgYWZ0ZXJBdHRyaWJ1dGVzKShjb2RlKVxuICAgICAgOiBhZnRlckF0dHJpYnV0ZXMoY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyQXR0cmlidXRlcyhjb2RlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIG9wZW5BZnRlciwgJ3doaXRlc3BhY2UnKShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gb3BlbkFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2RpcmVjdGl2ZUNvbnRhaW5lckZlbmNlJylcblxuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2RpcmVjdGl2ZUNvbnRhaW5lcicpXG4gICAgICByZXR1cm4gb2soY29kZSlcbiAgICB9XG5cbiAgICBpZiAobWFya2Rvd25MaW5lRW5kaW5nKGNvZGUpKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdsaW5lRW5kaW5nJylcbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgZWZmZWN0cy5leGl0KCdsaW5lRW5kaW5nJylcbiAgICAgIHJldHVybiBzZWxmLmludGVycnVwdCA/IG9rIDogY29udGVudFN0YXJ0XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vayhjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY29udGVudFN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgZWZmZWN0cy5leGl0KCdkaXJlY3RpdmVDb250YWluZXInKVxuICAgICAgcmV0dXJuIG9rKGNvZGUpXG4gICAgfVxuXG4gICAgZWZmZWN0cy5lbnRlcignZGlyZWN0aXZlQ29udGFpbmVyQ29udGVudCcpXG4gICAgcmV0dXJuIGxpbmVTdGFydChjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gbGluZVN0YXJ0KGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChcbiAgICAgIHt0b2tlbml6ZTogdG9rZW5pemVDbG9zaW5nRmVuY2UsIHBhcnRpYWw6IHRydWV9LFxuICAgICAgYWZ0ZXIsXG4gICAgICBpbml0aWFsUHJlZml4XG4gICAgICAgID8gY3JlYXRlU3BhY2UoZWZmZWN0cywgY2h1bmtTdGFydCwgJ2xpbmVQcmVmaXgnLCBpbml0aWFsUHJlZml4ICsgMSlcbiAgICAgICAgOiBjaHVua1N0YXJ0XG4gICAgKShjb2RlKVxuICB9XG5cbiAgZnVuY3Rpb24gY2h1bmtTdGFydChjb2RlKSB7XG4gICAgdmFyIHRva2VuID0gZWZmZWN0cy5lbnRlcignY2h1bmtEb2N1bWVudCcsIHtcbiAgICAgIGNvbnRlbnRUeXBlOiAnZG9jdW1lbnQnLFxuICAgICAgcHJldmlvdXM6IHByZXZpb3VzXG4gICAgfSlcbiAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSB0b2tlblxuICAgIHByZXZpb3VzID0gdG9rZW5cbiAgICByZXR1cm4gY29udGVudENvbnRpbnVlKGNvZGUpXG4gIH1cblxuICBmdW5jdGlvbiBjb250ZW50Q29udGludWUoY29kZSkge1xuICAgIGlmIChjb2RlID09PSBudWxsKSB7XG4gICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rRG9jdW1lbnQnKVxuICAgICAgcmV0dXJuIGFmdGVyKGNvZGUpXG4gICAgfVxuXG4gICAgaWYgKG1hcmtkb3duTGluZUVuZGluZyhjb2RlKSkge1xuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2NodW5rRG9jdW1lbnQnKVxuICAgICAgcmV0dXJuIGxpbmVTdGFydFxuICAgIH1cblxuICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgIHJldHVybiBjb250ZW50Q29udGludWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFmdGVyKGNvZGUpIHtcbiAgICBlZmZlY3RzLmV4aXQoJ2RpcmVjdGl2ZUNvbnRhaW5lckNvbnRlbnQnKVxuICAgIGVmZmVjdHMuZXhpdCgnZGlyZWN0aXZlQ29udGFpbmVyJylcbiAgICByZXR1cm4gb2soY29kZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHRva2VuaXplQ2xvc2luZ0ZlbmNlKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICB2YXIgc2l6ZSA9IDBcblxuICAgIHJldHVybiBjcmVhdGVTcGFjZShlZmZlY3RzLCBjbG9zaW5nUHJlZml4QWZ0ZXIsICdsaW5lUHJlZml4JywgNClcblxuICAgIGZ1bmN0aW9uIGNsb3NpbmdQcmVmaXhBZnRlcihjb2RlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCdkaXJlY3RpdmVDb250YWluZXJGZW5jZScpXG4gICAgICBlZmZlY3RzLmVudGVyKCdkaXJlY3RpdmVDb250YWluZXJTZXF1ZW5jZScpXG4gICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvc2luZ1NlcXVlbmNlKGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSA1OCAvKiBgOmAgKi8pIHtcbiAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICAgIHNpemUrK1xuICAgICAgICByZXR1cm4gY2xvc2luZ1NlcXVlbmNlXG4gICAgICB9XG5cbiAgICAgIGlmIChzaXplIDwgc2l6ZU9wZW4pIHJldHVybiBub2soY29kZSlcbiAgICAgIGVmZmVjdHMuZXhpdCgnZGlyZWN0aXZlQ29udGFpbmVyU2VxdWVuY2UnKVxuICAgICAgcmV0dXJuIGNyZWF0ZVNwYWNlKGVmZmVjdHMsIGNsb3NpbmdTZXF1ZW5jZUVuZCwgJ3doaXRlc3BhY2UnKShjb2RlKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NpbmdTZXF1ZW5jZUVuZChjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gbnVsbCB8fCBtYXJrZG93bkxpbmVFbmRpbmcoY29kZSkpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCdkaXJlY3RpdmVDb250YWluZXJGZW5jZScpXG4gICAgICAgIHJldHVybiBvayhjb2RlKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRva2VuaXplTGFiZWwoZWZmZWN0cywgb2ssIG5vaykge1xuICAvLyBBbHdheXMgYSBgW2BcbiAgcmV0dXJuIGNyZWF0ZUxhYmVsKFxuICAgIGVmZmVjdHMsXG4gICAgb2ssXG4gICAgbm9rLFxuICAgICdkaXJlY3RpdmVDb250YWluZXJMYWJlbCcsXG4gICAgJ2RpcmVjdGl2ZUNvbnRhaW5lckxhYmVsTWFya2VyJyxcbiAgICAnZGlyZWN0aXZlQ29udGFpbmVyTGFiZWxTdHJpbmcnLFxuICAgIHRydWUsXG4gICAgdHJ1ZVxuICApXG59XG5cbmZ1bmN0aW9uIHRva2VuaXplQXR0cmlidXRlcyhlZmZlY3RzLCBvaywgbm9rKSB7XG4gIC8vIEFsd2F5cyBhIGB7YFxuICByZXR1cm4gY3JlYXRlQXR0cmlidXRlcyhcbiAgICBlZmZlY3RzLFxuICAgIG9rLFxuICAgIG5vayxcbiAgICAnZGlyZWN0aXZlQ29udGFpbmVyQXR0cmlidXRlcycsXG4gICAgJ2RpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZXNNYXJrZXInLFxuICAgICdkaXJlY3RpdmVDb250YWluZXJBdHRyaWJ1dGUnLFxuICAgICdkaXJlY3RpdmVDb250YWluZXJBdHRyaWJ1dGVJZCcsXG4gICAgJ2RpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZUNsYXNzJyxcbiAgICAnZGlyZWN0aXZlQ29udGFpbmVyQXR0cmlidXRlTmFtZScsXG4gICAgJ2RpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZUluaXRpYWxpemVyTWFya2VyJyxcbiAgICAnZGlyZWN0aXZlQ29udGFpbmVyQXR0cmlidXRlVmFsdWVMaXRlcmFsJyxcbiAgICAnZGlyZWN0aXZlQ29udGFpbmVyQXR0cmlidXRlVmFsdWUnLFxuICAgICdkaXJlY3RpdmVDb250YWluZXJBdHRyaWJ1dGVWYWx1ZU1hcmtlcicsXG4gICAgJ2RpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZVZhbHVlRGF0YScsXG4gICAgdHJ1ZVxuICApXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBkaXJlY3RpdmVcblxudmFyIGRpcmVjdGl2ZVRleHQgPSByZXF1aXJlKCcuL3Rva2VuaXplLWRpcmVjdGl2ZS10ZXh0JylcbnZhciBkaXJlY3RpdmVMZWFmID0gcmVxdWlyZSgnLi90b2tlbml6ZS1kaXJlY3RpdmUtbGVhZicpXG52YXIgZGlyZWN0aXZlQ29udGFpbmVyID0gcmVxdWlyZSgnLi90b2tlbml6ZS1kaXJlY3RpdmUtY29udGFpbmVyJylcblxuZnVuY3Rpb24gZGlyZWN0aXZlKCkge1xuICByZXR1cm4ge1xuICAgIHRleHQ6IHs1ODogZGlyZWN0aXZlVGV4dH0sXG4gICAgZmxvdzogezU4OiBbZGlyZWN0aXZlQ29udGFpbmVyLCBkaXJlY3RpdmVMZWFmXX1cbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9zeW50YXgnKVxuIiwidmFyIGRlY29kZSA9IHJlcXVpcmUoJ3BhcnNlLWVudGl0aWVzL2RlY29kZS1lbnRpdHknKVxuXG5leHBvcnRzLmNhbkNvbnRhaW5Fb2xzID0gWyd0ZXh0RGlyZWN0aXZlJ11cbmV4cG9ydHMuZW50ZXIgPSB7XG4gIGRpcmVjdGl2ZUNvbnRhaW5lcjogZW50ZXJDb250YWluZXIsXG4gIGRpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZXM6IGVudGVyQXR0cmlidXRlcyxcbiAgZGlyZWN0aXZlQ29udGFpbmVyTGFiZWw6IGVudGVyQ29udGFpbmVyTGFiZWwsXG5cbiAgZGlyZWN0aXZlTGVhZjogZW50ZXJMZWFmLFxuICBkaXJlY3RpdmVMZWFmQXR0cmlidXRlczogZW50ZXJBdHRyaWJ1dGVzLFxuXG4gIGRpcmVjdGl2ZVRleHQ6IGVudGVyVGV4dCxcbiAgZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZXM6IGVudGVyQXR0cmlidXRlc1xufVxuZXhwb3J0cy5leGl0ID0ge1xuICBkaXJlY3RpdmVDb250YWluZXI6IGV4aXQsXG4gIGRpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZUNsYXNzVmFsdWU6IGV4aXRBdHRyaWJ1dGVDbGFzc1ZhbHVlLFxuICBkaXJlY3RpdmVDb250YWluZXJBdHRyaWJ1dGVJZFZhbHVlOiBleGl0QXR0cmlidXRlSWRWYWx1ZSxcbiAgZGlyZWN0aXZlQ29udGFpbmVyQXR0cmlidXRlTmFtZTogZXhpdEF0dHJpYnV0ZU5hbWUsXG4gIGRpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZVZhbHVlOiBleGl0QXR0cmlidXRlVmFsdWUsXG4gIGRpcmVjdGl2ZUNvbnRhaW5lckF0dHJpYnV0ZXM6IGV4aXRBdHRyaWJ1dGVzLFxuICBkaXJlY3RpdmVDb250YWluZXJMYWJlbDogZXhpdENvbnRhaW5lckxhYmVsLFxuICBkaXJlY3RpdmVDb250YWluZXJOYW1lOiBleGl0TmFtZSxcblxuICBkaXJlY3RpdmVMZWFmOiBleGl0LFxuICBkaXJlY3RpdmVMZWFmQXR0cmlidXRlQ2xhc3NWYWx1ZTogZXhpdEF0dHJpYnV0ZUNsYXNzVmFsdWUsXG4gIGRpcmVjdGl2ZUxlYWZBdHRyaWJ1dGVJZFZhbHVlOiBleGl0QXR0cmlidXRlSWRWYWx1ZSxcbiAgZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZU5hbWU6IGV4aXRBdHRyaWJ1dGVOYW1lLFxuICBkaXJlY3RpdmVMZWFmQXR0cmlidXRlVmFsdWU6IGV4aXRBdHRyaWJ1dGVWYWx1ZSxcbiAgZGlyZWN0aXZlTGVhZkF0dHJpYnV0ZXM6IGV4aXRBdHRyaWJ1dGVzLFxuICBkaXJlY3RpdmVMZWFmTmFtZTogZXhpdE5hbWUsXG5cbiAgZGlyZWN0aXZlVGV4dDogZXhpdCxcbiAgZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZUNsYXNzVmFsdWU6IGV4aXRBdHRyaWJ1dGVDbGFzc1ZhbHVlLFxuICBkaXJlY3RpdmVUZXh0QXR0cmlidXRlSWRWYWx1ZTogZXhpdEF0dHJpYnV0ZUlkVmFsdWUsXG4gIGRpcmVjdGl2ZVRleHRBdHRyaWJ1dGVOYW1lOiBleGl0QXR0cmlidXRlTmFtZSxcbiAgZGlyZWN0aXZlVGV4dEF0dHJpYnV0ZVZhbHVlOiBleGl0QXR0cmlidXRlVmFsdWUsXG4gIGRpcmVjdGl2ZVRleHRBdHRyaWJ1dGVzOiBleGl0QXR0cmlidXRlcyxcbiAgZGlyZWN0aXZlVGV4dE5hbWU6IGV4aXROYW1lXG59XG5cbmZ1bmN0aW9uIGVudGVyQ29udGFpbmVyKHRva2VuKSB7XG4gIGVudGVyLmNhbGwodGhpcywgJ2NvbnRhaW5lckRpcmVjdGl2ZScsIHRva2VuKVxufVxuXG5mdW5jdGlvbiBlbnRlckxlYWYodG9rZW4pIHtcbiAgZW50ZXIuY2FsbCh0aGlzLCAnbGVhZkRpcmVjdGl2ZScsIHRva2VuKVxufVxuXG5mdW5jdGlvbiBlbnRlclRleHQodG9rZW4pIHtcbiAgZW50ZXIuY2FsbCh0aGlzLCAndGV4dERpcmVjdGl2ZScsIHRva2VuKVxufVxuXG5mdW5jdGlvbiBlbnRlcih0eXBlLCB0b2tlbikge1xuICB0aGlzLmVudGVyKHt0eXBlOiB0eXBlLCBuYW1lOiAnJywgYXR0cmlidXRlczoge30sIGNoaWxkcmVuOiBbXX0sIHRva2VuKVxufVxuXG5mdW5jdGlvbiBleGl0TmFtZSh0b2tlbikge1xuICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0ubmFtZSA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pXG59XG5cbmZ1bmN0aW9uIGVudGVyQ29udGFpbmVyTGFiZWwodG9rZW4pIHtcbiAgdGhpcy5lbnRlcihcbiAgICB7dHlwZTogJ3BhcmFncmFwaCcsIGRhdGE6IHtkaXJlY3RpdmVMYWJlbDogdHJ1ZX0sIGNoaWxkcmVuOiBbXX0sXG4gICAgdG9rZW5cbiAgKVxufVxuXG5mdW5jdGlvbiBleGl0Q29udGFpbmVyTGFiZWwodG9rZW4pIHtcbiAgdGhpcy5leGl0KHRva2VuKVxufVxuXG5mdW5jdGlvbiBlbnRlckF0dHJpYnV0ZXMoKSB7XG4gIHRoaXMuc2V0RGF0YSgnZGlyZWN0aXZlQXR0cmlidXRlcycsIFtdKVxuICB0aGlzLmJ1ZmZlcigpIC8vIENhcHR1cmUgRU9Mc1xufVxuXG5mdW5jdGlvbiBleGl0QXR0cmlidXRlSWRWYWx1ZSh0b2tlbikge1xuICB0aGlzLmdldERhdGEoJ2RpcmVjdGl2ZUF0dHJpYnV0ZXMnKS5wdXNoKFtcbiAgICAnaWQnLFxuICAgIGRlY29kZUxpZ2h0KHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pKVxuICBdKVxufVxuXG5mdW5jdGlvbiBleGl0QXR0cmlidXRlQ2xhc3NWYWx1ZSh0b2tlbikge1xuICB0aGlzLmdldERhdGEoJ2RpcmVjdGl2ZUF0dHJpYnV0ZXMnKS5wdXNoKFtcbiAgICAnY2xhc3MnLFxuICAgIGRlY29kZUxpZ2h0KHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pKVxuICBdKVxufVxuXG5mdW5jdGlvbiBleGl0QXR0cmlidXRlVmFsdWUodG9rZW4pIHtcbiAgdmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmdldERhdGEoJ2RpcmVjdGl2ZUF0dHJpYnV0ZXMnKVxuICBhdHRyaWJ1dGVzW2F0dHJpYnV0ZXMubGVuZ3RoIC0gMV1bMV0gPSBkZWNvZGVMaWdodCh0aGlzLnNsaWNlU2VyaWFsaXplKHRva2VuKSlcbn1cblxuZnVuY3Rpb24gZXhpdEF0dHJpYnV0ZU5hbWUodG9rZW4pIHtcbiAgLy8gQXR0cmlidXRlIG5hbWVzIGluIENvbW1vbk1hcmsgYXJlIHNpZ25pZmljYW50bHkgbGltaXRlZCwgc28gY2hhcmFjdGVyXG4gIC8vIHJlZmVyZW5jZXMgY2Fu4oCZdCBleGlzdC5cbiAgdGhpcy5nZXREYXRhKCdkaXJlY3RpdmVBdHRyaWJ1dGVzJykucHVzaChbdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbiksICcnXSlcbn1cblxuZnVuY3Rpb24gZXhpdEF0dHJpYnV0ZXMoKSB7XG4gIHZhciBhdHRyaWJ1dGVzID0gdGhpcy5nZXREYXRhKCdkaXJlY3RpdmVBdHRyaWJ1dGVzJylcbiAgdmFyIGNsZWFuZWQgPSB7fVxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgYXR0cmlidXRlXG5cbiAgd2hpbGUgKCsraW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXhdXG5cbiAgICBpZiAoYXR0cmlidXRlWzBdID09PSAnY2xhc3MnICYmIGNsZWFuZWQuY2xhc3MpIHtcbiAgICAgIGNsZWFuZWQuY2xhc3MgKz0gJyAnICsgYXR0cmlidXRlWzFdXG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFuZWRbYXR0cmlidXRlWzBdXSA9IGF0dHJpYnV0ZVsxXVxuICAgIH1cbiAgfVxuXG4gIHRoaXMuc2V0RGF0YSgnZGlyZWN0aXZlQXR0cmlidXRlcycpXG4gIHRoaXMucmVzdW1lKCkgLy8gRHJvcCBFT0xzXG4gIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5hdHRyaWJ1dGVzID0gY2xlYW5lZFxufVxuXG5mdW5jdGlvbiBleGl0KHRva2VuKSB7XG4gIHRoaXMuZXhpdCh0b2tlbilcbn1cblxuZnVuY3Rpb24gZGVjb2RlTGlnaHQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoXG4gICAgLyYoIyhcXGR7MSw3fXx4W1xcZGEtZl17MSw2fSl8W1xcZGEtel17MSwzMX0pOy9naSxcbiAgICBkZWNvZGVJZlBvc3NpYmxlXG4gIClcbn1cblxuZnVuY3Rpb24gZGVjb2RlSWZQb3NzaWJsZSgkMCwgJDEpIHtcbiAgcmV0dXJuIGRlY29kZSgkMSkgfHwgJDBcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZVxuXG4vLyBFbmNvZGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIGB2YWx1ZWAuXG5mdW5jdGlvbiBlbmNvZGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKFxuICAgIG9wdGlvbnMuc3Vic2V0ID8gY2hhcmFjdGVyc1RvRXhwcmVzc2lvbihvcHRpb25zLnN1YnNldCkgOiAvW1wiJic8PmBdL2csXG4gICAgYmFzaWNcbiAgKVxuXG4gIGlmIChvcHRpb25zLnN1YnNldCB8fCBvcHRpb25zLmVzY2FwZU9ubHkpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgdmFsdWVcbiAgICAgIC8vIFN1cnJvZ2F0ZSBwYWlycy5cbiAgICAgIC5yZXBsYWNlKC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2csIHN1cnJvZ2F0ZSlcbiAgICAgIC8vIEJNUCBjb250cm9sIGNoYXJhY3RlcnMgKEMwIGV4Y2VwdCBmb3IgTEYsIENSLCBTUDsgREVMOyBhbmQgc29tZSBtb3JlXG4gICAgICAvLyBub24tQVNDSUkgb25lcykuXG4gICAgICAucmVwbGFjZShcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXgsIHVuaWNvcm4vbm8taGV4LWVzY2FwZVxuICAgICAgICAvW1xceDAxLVxcdFxcdlxcZlxceDBFLVxceDFGXFx4N0ZcXHg4MVxceDhEXFx4OEZcXHg5MFxceDlEXFx4QTAtXFx1RkZGRl0vZyxcbiAgICAgICAgYmFzaWNcbiAgICAgIClcbiAgKVxuXG4gIGZ1bmN0aW9uIHN1cnJvZ2F0ZShwYWlyLCBpbmRleCwgYWxsKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZm9ybWF0KFxuICAgICAgKHBhaXIuY2hhckNvZGVBdCgwKSAtIDB4ZDgwMCkgKiAweDQwMCArXG4gICAgICAgIHBhaXIuY2hhckNvZGVBdCgxKSAtXG4gICAgICAgIDB4ZGMwMCArXG4gICAgICAgIDB4MTAwMDAsXG4gICAgICBhbGwuY2hhckNvZGVBdChpbmRleCArIDIpLFxuICAgICAgb3B0aW9uc1xuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIGJhc2ljKGNoYXJhY3RlciwgaW5kZXgsIGFsbCkge1xuICAgIHJldHVybiBvcHRpb25zLmZvcm1hdChcbiAgICAgIGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApLFxuICAgICAgYWxsLmNoYXJDb2RlQXQoaW5kZXggKyAxKSxcbiAgICAgIG9wdGlvbnNcbiAgICApXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hhcmFjdGVyc1RvRXhwcmVzc2lvbihzdWJzZXQpIHtcbiAgdmFyIGdyb3VwcyA9IFtdXG4gIHZhciBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBzdWJzZXQubGVuZ3RoKSB7XG4gICAgZ3JvdXBzLnB1c2goc3Vic2V0W2luZGV4XS5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZywgJ1xcXFwkJicpKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAoJyg/OicgKyBncm91cHMuam9pbignfCcpICsgJyknLCAnZycpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ25cbiIsIm1vZHVsZS5leHBvcnRzID0gZm9ybWF0QmFzaWNcblxuZnVuY3Rpb24gZm9ybWF0QmFzaWMoY29kZSkge1xuICByZXR1cm4gJyYjeCcgKyBjb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpICsgJzsnXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIGNvcmUgPSByZXF1aXJlKCcuL2NvcmUnKVxudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4vY29uc3RhbnQvYXNzaWduJylcbnZhciBiYXNpYyA9IHJlcXVpcmUoJy4vdXRpbC9mb3JtYXQtYmFzaWMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZUhleGFkZWNpbWFsXG5cbi8vIEVuY29kZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gYHZhbHVlYCBhcyBoZXhhZGVjaW1hbHMuXG5mdW5jdGlvbiBlbmNvZGVIZXhhZGVjaW1hbCh2YWx1ZSwgb3B0aW9ucykge1xuICAvLyBOb3RlOiB0aGlzIGZpbGUgd2FzIGFkZGVkIGluIGEgbWlub3IgcmVsZWFzZSwgc28gaGVyZSB3ZSBjYW4gdXNlXG4gIC8vIGBPYmplY3QuYXNzaWduYC5cbiAgcmV0dXJuIGNvcmUodmFsdWUsIGFzc2lnbih7Zm9ybWF0OiBiYXNpY30sIG9wdGlvbnMpKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvZW5jb2RlLWhleGFkZWNpbWFsJylcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnRcblxuZnVuY3Rpb24gY29udmVydCh0ZXN0KSB7XG4gIGlmICh0ZXN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gb2tcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHlwZUZhY3RvcnkodGVzdClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gJ2xlbmd0aCcgaW4gdGVzdCA/IGFueUZhY3RvcnkodGVzdCkgOiBhbGxGYWN0b3J5KHRlc3QpXG4gIH1cblxuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGVzdFxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbiwgc3RyaW5nLCBvciBvYmplY3QgYXMgdGVzdCcpXG59XG5cbi8vIFV0aWxpdHkgYXNzZXJ0IGVhY2ggcHJvcGVydHkgaW4gYHRlc3RgIGlzIHJlcHJlc2VudGVkIGluIGBub2RlYCwgYW5kIGVhY2hcbi8vIHZhbHVlcyBhcmUgc3RyaWN0bHkgZXF1YWwuXG5mdW5jdGlvbiBhbGxGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIGFsbFxuXG4gIGZ1bmN0aW9uIGFsbChub2RlKSB7XG4gICAgdmFyIGtleVxuXG4gICAgZm9yIChrZXkgaW4gdGVzdCkge1xuICAgICAgaWYgKG5vZGVba2V5XSAhPT0gdGVzdFtrZXldKSByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIGFueUZhY3RvcnkodGVzdHMpIHtcbiAgdmFyIGNoZWNrcyA9IFtdXG4gIHZhciBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCB0ZXN0cy5sZW5ndGgpIHtcbiAgICBjaGVja3NbaW5kZXhdID0gY29udmVydCh0ZXN0c1tpbmRleF0pXG4gIH1cblxuICByZXR1cm4gYW55XG5cbiAgZnVuY3Rpb24gYW55KCkge1xuICAgIHZhciBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGNoZWNrcy5sZW5ndGgpIHtcbiAgICAgIGlmIChjaGVja3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIGNvbnZlcnQgYSBzdHJpbmcgaW50byBhIGZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBhIGdpdmVuIG5vZGXigJlzIHR5cGVcbi8vIGZvciBzYWlkIHN0cmluZy5cbmZ1bmN0aW9uIHR5cGVGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVcblxuICBmdW5jdGlvbiB0eXBlKG5vZGUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihub2RlICYmIG5vZGUudHlwZSA9PT0gdGVzdClcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIHJldHVybiB0cnVlLlxuZnVuY3Rpb24gb2soKSB7XG4gIHJldHVybiB0cnVlXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNvbG9yXG5mdW5jdGlvbiBjb2xvcihkKSB7XG4gIHJldHVybiAnXFx1MDAxQlszM20nICsgZCArICdcXHUwMDFCWzM5bSdcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZpc2l0UGFyZW50c1xuXG52YXIgY29udmVydCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtaXMvY29udmVydCcpXG52YXIgY29sb3IgPSByZXF1aXJlKCcuL2NvbG9yJylcblxudmFyIENPTlRJTlVFID0gdHJ1ZVxudmFyIFNLSVAgPSAnc2tpcCdcbnZhciBFWElUID0gZmFsc2VcblxudmlzaXRQYXJlbnRzLkNPTlRJTlVFID0gQ09OVElOVUVcbnZpc2l0UGFyZW50cy5TS0lQID0gU0tJUFxudmlzaXRQYXJlbnRzLkVYSVQgPSBFWElUXG5cbmZ1bmN0aW9uIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCB2aXNpdG9yLCByZXZlcnNlKSB7XG4gIHZhciBzdGVwXG4gIHZhciBpc1xuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmlzaXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldmVyc2UgPSB2aXNpdG9yXG4gICAgdmlzaXRvciA9IHRlc3RcbiAgICB0ZXN0ID0gbnVsbFxuICB9XG5cbiAgaXMgPSBjb252ZXJ0KHRlc3QpXG4gIHN0ZXAgPSByZXZlcnNlID8gLTEgOiAxXG5cbiAgZmFjdG9yeSh0cmVlLCBudWxsLCBbXSkoKVxuXG4gIGZ1bmN0aW9uIGZhY3Rvcnkobm9kZSwgaW5kZXgsIHBhcmVudHMpIHtcbiAgICB2YXIgdmFsdWUgPSB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZSAhPT0gbnVsbCA/IG5vZGUgOiB7fVxuICAgIHZhciBuYW1lXG5cbiAgICBpZiAodHlwZW9mIHZhbHVlLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID1cbiAgICAgICAgdHlwZW9mIHZhbHVlLnRhZ05hbWUgPT09ICdzdHJpbmcnXG4gICAgICAgICAgPyB2YWx1ZS50YWdOYW1lXG4gICAgICAgICAgOiB0eXBlb2YgdmFsdWUubmFtZSA9PT0gJ3N0cmluZydcbiAgICAgICAgICA/IHZhbHVlLm5hbWVcbiAgICAgICAgICA6IHVuZGVmaW5lZFxuXG4gICAgICB2aXNpdC5kaXNwbGF5TmFtZSA9XG4gICAgICAgICdub2RlICgnICsgY29sb3IodmFsdWUudHlwZSArIChuYW1lID8gJzwnICsgbmFtZSArICc+JyA6ICcnKSkgKyAnKSdcbiAgICB9XG5cbiAgICByZXR1cm4gdmlzaXRcblxuICAgIGZ1bmN0aW9uIHZpc2l0KCkge1xuICAgICAgdmFyIGdyYW5kcGFyZW50cyA9IHBhcmVudHMuY29uY2F0KG5vZGUpXG4gICAgICB2YXIgcmVzdWx0ID0gW11cbiAgICAgIHZhciBzdWJyZXN1bHRcbiAgICAgIHZhciBvZmZzZXRcblxuICAgICAgaWYgKCF0ZXN0IHx8IGlzKG5vZGUsIGluZGV4LCBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV0gfHwgbnVsbCkpIHtcbiAgICAgICAgcmVzdWx0ID0gdG9SZXN1bHQodmlzaXRvcihub2RlLCBwYXJlbnRzKSlcblxuICAgICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuICYmIHJlc3VsdFswXSAhPT0gU0tJUCkge1xuICAgICAgICBvZmZzZXQgPSAocmV2ZXJzZSA/IG5vZGUuY2hpbGRyZW4ubGVuZ3RoIDogLTEpICsgc3RlcFxuXG4gICAgICAgIHdoaWxlIChvZmZzZXQgPiAtMSAmJiBvZmZzZXQgPCBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHN1YnJlc3VsdCA9IGZhY3Rvcnkobm9kZS5jaGlsZHJlbltvZmZzZXRdLCBvZmZzZXQsIGdyYW5kcGFyZW50cykoKVxuXG4gICAgICAgICAgaWYgKHN1YnJlc3VsdFswXSA9PT0gRVhJVCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1YnJlc3VsdFxuICAgICAgICAgIH1cblxuICAgICAgICAgIG9mZnNldCA9XG4gICAgICAgICAgICB0eXBlb2Ygc3VicmVzdWx0WzFdID09PSAnbnVtYmVyJyA/IHN1YnJlc3VsdFsxXSA6IG9mZnNldCArIHN0ZXBcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHRvUmVzdWx0KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBbQ09OVElOVUUsIHZhbHVlXVxuICB9XG5cbiAgcmV0dXJuIFt2YWx1ZV1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gY2hlY2tRdW90ZVxuXG5mdW5jdGlvbiBjaGVja1F1b3RlKGNvbnRleHQpIHtcbiAgdmFyIG1hcmtlciA9IGNvbnRleHQub3B0aW9ucy5xdW90ZSB8fCAnXCInXG5cbiAgaWYgKG1hcmtlciAhPT0gJ1wiJyAmJiBtYXJrZXIgIT09IFwiJ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0Nhbm5vdCBzZXJpYWxpemUgdGl0bGUgd2l0aCBgJyArXG4gICAgICAgIG1hcmtlciArXG4gICAgICAgICdgIGZvciBgb3B0aW9ucy5xdW90ZWAsIGV4cGVjdGVkIGBcImAsIG9yIGBcXCdgJ1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBtYXJrZXJcbn1cbiIsImV4cG9ydHMudW5zYWZlID0gW1xuICB7XG4gICAgY2hhcmFjdGVyOiAnXFxyJyxcbiAgICBpbkNvbnN0cnVjdDogWydsZWFmRGlyZWN0aXZlTGFiZWwnLCAnY29udGFpbmVyRGlyZWN0aXZlTGFiZWwnXVxuICB9LFxuICB7XG4gICAgY2hhcmFjdGVyOiAnXFxuJyxcbiAgICBpbkNvbnN0cnVjdDogWydsZWFmRGlyZWN0aXZlTGFiZWwnLCAnY29udGFpbmVyRGlyZWN0aXZlTGFiZWwnXVxuICB9LFxuICB7XG4gICAgYmVmb3JlOiAnW146XScsXG4gICAgY2hhcmFjdGVyOiAnOicsXG4gICAgYWZ0ZXI6ICdbQS1aYS16XScsXG4gICAgaW5Db25zdHJ1Y3Q6IFsncGhyYXNpbmcnXVxuICB9LFxuICB7YXRCcmVhazogdHJ1ZSwgY2hhcmFjdGVyOiAnOicsIGFmdGVyOiAnOid9XG5dXG5cbmV4cG9ydHMuaGFuZGxlcnMgPSB7XG4gIGNvbnRhaW5lckRpcmVjdGl2ZTogaGFuZGxlRGlyZWN0aXZlLFxuICBsZWFmRGlyZWN0aXZlOiBoYW5kbGVEaXJlY3RpdmUsXG4gIHRleHREaXJlY3RpdmU6IGhhbmRsZURpcmVjdGl2ZVxufVxuXG5oYW5kbGVEaXJlY3RpdmUucGVlayA9IHBlZWtEaXJlY3RpdmVcblxudmFyIHJlcGVhdFN0cmluZyA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKVxudmFyIGVuY29kZSA9IHJlcXVpcmUoJ3N0cmluZ2lmeS1lbnRpdGllcy9saWdodCcpXG52YXIgdmlzaXQgPSByZXF1aXJlKCd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMnKVxudmFyIGZsb3cgPSByZXF1aXJlKCdtZGFzdC11dGlsLXRvLW1hcmtkb3duL2xpYi91dGlsL2NvbnRhaW5lci1mbG93JylcbnZhciBwaHJhc2luZyA9IHJlcXVpcmUoJ21kYXN0LXV0aWwtdG8tbWFya2Rvd24vbGliL3V0aWwvY29udGFpbmVyLXBocmFzaW5nJylcbnZhciBjaGVja1F1b3RlID0gcmVxdWlyZSgnbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9jaGVjay1xdW90ZScpXG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG52YXIgc2hvcnRjdXQgPSAvXlteXFx0XFxuXFxyIFwiIycuPD0+YH1dKyQvXG5cbmZ1bmN0aW9uIGhhbmRsZURpcmVjdGl2ZShub2RlLCBfLCBjb250ZXh0KSB7XG4gIHZhciBwcmVmaXggPSBmZW5jZShub2RlKVxuICB2YXIgZXhpdCA9IGNvbnRleHQuZW50ZXIobm9kZS50eXBlKVxuICB2YXIgdmFsdWUgPVxuICAgIHByZWZpeCArXG4gICAgKG5vZGUubmFtZSB8fCAnJykgK1xuICAgIGxhYmVsKG5vZGUsIGNvbnRleHQpICtcbiAgICBhdHRyaWJ1dGVzKG5vZGUsIGNvbnRleHQpXG4gIHZhciBzdWJ2YWx1ZVxuXG4gIGlmIChub2RlLnR5cGUgPT09ICdjb250YWluZXJEaXJlY3RpdmUnKSB7XG4gICAgc3VidmFsdWUgPSBjb250ZW50KG5vZGUsIGNvbnRleHQpXG4gICAgaWYgKHN1YnZhbHVlKSB2YWx1ZSArPSAnXFxuJyArIHN1YnZhbHVlXG4gICAgdmFsdWUgKz0gJ1xcbicgKyBwcmVmaXhcbiAgfVxuXG4gIGV4aXQoKVxuICByZXR1cm4gdmFsdWVcbn1cblxuZnVuY3Rpb24gcGVla0RpcmVjdGl2ZSgpIHtcbiAgcmV0dXJuICc6J1xufVxuXG5mdW5jdGlvbiBsYWJlbChub2RlLCBjb250ZXh0KSB7XG4gIHZhciBsYWJlbCA9IG5vZGVcbiAgdmFyIGV4aXRcbiAgdmFyIHN1YmV4aXRcbiAgdmFyIHZhbHVlXG5cbiAgaWYgKG5vZGUudHlwZSA9PT0gJ2NvbnRhaW5lckRpcmVjdGl2ZScpIHtcbiAgICBpZiAoIWlubGluZURpcmVjdGl2ZUxhYmVsKG5vZGUpKSByZXR1cm4gJydcbiAgICBsYWJlbCA9IG5vZGUuY2hpbGRyZW5bMF1cbiAgfVxuXG4gIGV4aXQgPSBjb250ZXh0LmVudGVyKCdsYWJlbCcpXG4gIHN1YmV4aXQgPSBjb250ZXh0LmVudGVyKG5vZGUudHlwZSArICdMYWJlbCcpXG4gIHZhbHVlID0gcGhyYXNpbmcobGFiZWwsIGNvbnRleHQsIHtiZWZvcmU6ICdbJywgYWZ0ZXI6ICddJ30pXG4gIHN1YmV4aXQoKVxuICBleGl0KClcbiAgcmV0dXJuIHZhbHVlID8gJ1snICsgdmFsdWUgKyAnXScgOiAnJ1xufVxuXG5mdW5jdGlvbiBhdHRyaWJ1dGVzKG5vZGUsIGNvbnRleHQpIHtcbiAgdmFyIHF1b3RlID0gY2hlY2tRdW90ZShjb250ZXh0KVxuICB2YXIgc3Vic2V0ID0gbm9kZS50eXBlID09PSAndGV4dERpcmVjdGl2ZScgPyBbcXVvdGVdIDogW3F1b3RlLCAnXFxuJywgJ1xcciddXG4gIHZhciBhdHRycyA9IG5vZGUuYXR0cmlidXRlcyB8fCB7fVxuICB2YXIgdmFsdWVzID0gW11cbiAgdmFyIGlkXG4gIHZhciBjbGFzc2VzRnVsbFxuICB2YXIgY2xhc3Nlc1xuICB2YXIgdmFsdWVcbiAgdmFyIGtleVxuICB2YXIgaW5kZXhcblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGlmIChvd24uY2FsbChhdHRycywga2V5KSAmJiBhdHRyc1trZXldICE9IG51bGwpIHtcbiAgICAgIHZhbHVlID0gU3RyaW5nKGF0dHJzW2tleV0pXG5cbiAgICAgIGlmIChrZXkgPT09ICdpZCcpIHtcbiAgICAgICAgaWQgPSBzaG9ydGN1dC50ZXN0KHZhbHVlKSA/ICcjJyArIHZhbHVlIDogcXVvdGVkKCdpZCcsIHZhbHVlKVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdjbGFzcycpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCgvW1xcdFxcblxcciBdKy9nKVxuICAgICAgICBjbGFzc2VzRnVsbCA9IFtdXG4gICAgICAgIGNsYXNzZXMgPSBbXVxuICAgICAgICBpbmRleCA9IC0xXG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICA7KHNob3J0Y3V0LnRlc3QodmFsdWVbaW5kZXhdKSA/IGNsYXNzZXMgOiBjbGFzc2VzRnVsbCkucHVzaChcbiAgICAgICAgICAgIHZhbHVlW2luZGV4XVxuICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIGNsYXNzZXNGdWxsID0gY2xhc3Nlc0Z1bGwubGVuZ3RoXG4gICAgICAgICAgPyBxdW90ZWQoJ2NsYXNzJywgY2xhc3Nlc0Z1bGwuam9pbignICcpKVxuICAgICAgICAgIDogJydcbiAgICAgICAgY2xhc3NlcyA9IGNsYXNzZXMubGVuZ3RoID8gJy4nICsgY2xhc3Nlcy5qb2luKCcuJykgOiAnJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzLnB1c2gocXVvdGVkKGtleSwgdmFsdWUpKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjbGFzc2VzRnVsbCkge1xuICAgIHZhbHVlcy51bnNoaWZ0KGNsYXNzZXNGdWxsKVxuICB9XG5cbiAgaWYgKGNsYXNzZXMpIHtcbiAgICB2YWx1ZXMudW5zaGlmdChjbGFzc2VzKVxuICB9XG5cbiAgaWYgKGlkKSB7XG4gICAgdmFsdWVzLnVuc2hpZnQoaWQpXG4gIH1cblxuICByZXR1cm4gdmFsdWVzLmxlbmd0aCA/ICd7JyArIHZhbHVlcy5qb2luKCcgJykgKyAnfScgOiAnJ1xuXG4gIGZ1bmN0aW9uIHF1b3RlZChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGtleSArICh2YWx1ZSA/ICc9JyArIHF1b3RlICsgZW5jb2RlKHZhbHVlLCB7c3Vic2V0OiBzdWJzZXR9KSArIHF1b3RlIDogJycpXG4gICAgKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRlbnQobm9kZSwgY29udGV4dCkge1xuICB2YXIgY29udGVudCA9IGlubGluZURpcmVjdGl2ZUxhYmVsKG5vZGUpXG4gICAgPyBPYmplY3QuYXNzaWduKHt9LCBub2RlLCB7Y2hpbGRyZW46IG5vZGUuY2hpbGRyZW4uc2xpY2UoMSl9KVxuICAgIDogbm9kZVxuXG4gIHJldHVybiBmbG93KGNvbnRlbnQsIGNvbnRleHQpXG59XG5cbmZ1bmN0aW9uIGlubGluZURpcmVjdGl2ZUxhYmVsKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmNoaWxkcmVuICYmXG4gICAgbm9kZS5jaGlsZHJlblswXSAmJlxuICAgIG5vZGUuY2hpbGRyZW5bMF0uZGF0YSAmJlxuICAgIG5vZGUuY2hpbGRyZW5bMF0uZGF0YS5kaXJlY3RpdmVMYWJlbFxuICApXG59XG5cbmZ1bmN0aW9uIGZlbmNlKG5vZGUpIHtcbiAgdmFyIHNpemUgPSAwXG5cbiAgaWYgKG5vZGUudHlwZSA9PT0gJ2NvbnRhaW5lckRpcmVjdGl2ZScpIHtcbiAgICB2aXNpdChub2RlLCAnY29udGFpbmVyRGlyZWN0aXZlJywgb252aXNpdClcbiAgICBzaXplICs9IDNcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09ICdsZWFmRGlyZWN0aXZlJykge1xuICAgIHNpemUgPSAyXG4gIH0gZWxzZSB7XG4gICAgc2l6ZSA9IDFcbiAgfVxuXG4gIHJldHVybiByZXBlYXRTdHJpbmcoJzonLCBzaXplKVxuXG4gIGZ1bmN0aW9uIG9udmlzaXQobm9kZSwgcGFyZW50cykge1xuICAgIHZhciBpbmRleCA9IHBhcmVudHMubGVuZ3RoXG4gICAgdmFyIG5lc3RpbmcgPSAwXG5cbiAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgaWYgKHBhcmVudHNbaW5kZXhdLnR5cGUgPT09ICdjb250YWluZXJEaXJlY3RpdmUnKSB7XG4gICAgICAgIG5lc3RpbmcrK1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXN0aW5nID4gc2l6ZSkgc2l6ZSA9IG5lc3RpbmdcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBzeW50YXggPSByZXF1aXJlKCdtaWNyb21hcmstZXh0ZW5zaW9uLWRpcmVjdGl2ZScpXG52YXIgZnJvbU1hcmtkb3duID0gcmVxdWlyZSgnbWRhc3QtdXRpbC1kaXJlY3RpdmUvZnJvbS1tYXJrZG93bicpXG52YXIgdG9NYXJrZG93biA9IHJlcXVpcmUoJ21kYXN0LXV0aWwtZGlyZWN0aXZlL3RvLW1hcmtkb3duJylcblxudmFyIHdhcm5pbmdJc3N1ZWRcblxubW9kdWxlLmV4cG9ydHMgPSBkaXJlY3RpdmVcblxuZnVuY3Rpb24gZGlyZWN0aXZlKCkge1xuICB2YXIgZGF0YSA9IHRoaXMuZGF0YSgpXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBvbGQgcmVtYXJrLiAqL1xuICBpZiAoXG4gICAgIXdhcm5pbmdJc3N1ZWQgJiZcbiAgICAoKHRoaXMuUGFyc2VyICYmXG4gICAgICB0aGlzLlBhcnNlci5wcm90b3R5cGUgJiZcbiAgICAgIHRoaXMuUGFyc2VyLnByb3RvdHlwZS5ibG9ja1Rva2VuaXplcnMpIHx8XG4gICAgICAodGhpcy5Db21waWxlciAmJlxuICAgICAgICB0aGlzLkNvbXBpbGVyLnByb3RvdHlwZSAmJlxuICAgICAgICB0aGlzLkNvbXBpbGVyLnByb3RvdHlwZS52aXNpdG9ycykpXG4gICkge1xuICAgIHdhcm5pbmdJc3N1ZWQgPSB0cnVlXG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1tyZW1hcmstZGlyZWN0aXZlXSBXYXJuaW5nOiBwbGVhc2UgdXBncmFkZSB0byByZW1hcmsgMTMgdG8gdXNlIHRoaXMgcGx1Z2luJ1xuICAgIClcbiAgfVxuXG4gIGFkZCgnbWljcm9tYXJrRXh0ZW5zaW9ucycsIHN5bnRheCgpKVxuICBhZGQoJ2Zyb21NYXJrZG93bkV4dGVuc2lvbnMnLCBmcm9tTWFya2Rvd24pXG4gIGFkZCgndG9NYXJrZG93bkV4dGVuc2lvbnMnLCB0b01hcmtkb3duKVxuXG4gIGZ1bmN0aW9uIGFkZChmaWVsZCwgdmFsdWUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBvdGhlciBleHRlbnNpb25zLiAqL1xuICAgIGlmIChkYXRhW2ZpZWxkXSkgZGF0YVtmaWVsZF0ucHVzaCh2YWx1ZSlcbiAgICBlbHNlIGRhdGFbZmllbGRdID0gW3ZhbHVlXVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIGh0bWwoKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIHBlcm1hbGlua3MgPSBvcHRzLnBlcm1hbGlua3MgfHwgW107XG5cbiAgdmFyIGRlZmF1bHRQYWdlUmVzb2x2ZXIgPSBmdW5jdGlvbiBkZWZhdWx0UGFnZVJlc29sdmVyKG5hbWUpIHtcbiAgICByZXR1cm4gW25hbWUucmVwbGFjZSgvIC9nLCAnXycpLnRvTG93ZXJDYXNlKCldO1xuICB9O1xuXG4gIHZhciBwYWdlUmVzb2x2ZXIgPSBvcHRzLnBhZ2VSZXNvbHZlciB8fCBkZWZhdWx0UGFnZVJlc29sdmVyO1xuICB2YXIgbmV3Q2xhc3NOYW1lID0gb3B0cy5uZXdDbGFzc05hbWUgfHwgJ25ldyc7XG4gIHZhciB3aWtpTGlua0NsYXNzTmFtZSA9IG9wdHMud2lraUxpbmtDbGFzc05hbWUgfHwgJ2ludGVybmFsJztcblxuICB2YXIgZGVmYXVsdEhyZWZUZW1wbGF0ZSA9IGZ1bmN0aW9uIGRlZmF1bHRIcmVmVGVtcGxhdGUocGVybWFsaW5rKSB7XG4gICAgcmV0dXJuIFwiIy9wYWdlL1wiLmNvbmNhdChwZXJtYWxpbmspO1xuICB9O1xuXG4gIHZhciBocmVmVGVtcGxhdGUgPSBvcHRzLmhyZWZUZW1wbGF0ZSB8fCBkZWZhdWx0SHJlZlRlbXBsYXRlO1xuXG4gIGZ1bmN0aW9uIGVudGVyV2lraUxpbmsoKSB7XG4gICAgdmFyIHN0YWNrID0gdGhpcy5nZXREYXRhKCd3aWtpTGlua1N0YWNrJyk7XG4gICAgaWYgKCFzdGFjaykgdGhpcy5zZXREYXRhKCd3aWtpTGlua1N0YWNrJywgc3RhY2sgPSBbXSk7XG4gICAgc3RhY2sucHVzaCh7fSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3Aoc3RhY2spIHtcbiAgICByZXR1cm4gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gIH1cblxuICBmdW5jdGlvbiBleGl0V2lraUxpbmtBbGlhcyh0b2tlbikge1xuICAgIHZhciBhbGlhcyA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pO1xuICAgIHZhciBjdXJyZW50ID0gdG9wKHRoaXMuZ2V0RGF0YSgnd2lraUxpbmtTdGFjaycpKTtcbiAgICBjdXJyZW50LmFsaWFzID0gYWxpYXM7XG4gIH1cblxuICBmdW5jdGlvbiBleGl0V2lraUxpbmtUYXJnZXQodG9rZW4pIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbik7XG4gICAgdmFyIGN1cnJlbnQgPSB0b3AodGhpcy5nZXREYXRhKCd3aWtpTGlua1N0YWNrJykpO1xuICAgIGN1cnJlbnQudGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gZXhpdFdpa2lMaW5rKCkge1xuICAgIHZhciB3aWtpTGluayA9IHRoaXMuZ2V0RGF0YSgnd2lraUxpbmtTdGFjaycpLnBvcCgpO1xuICAgIHZhciBwYWdlUGVybWFsaW5rcyA9IHBhZ2VSZXNvbHZlcih3aWtpTGluay50YXJnZXQpO1xuICAgIHZhciBwZXJtYWxpbmsgPSBwYWdlUGVybWFsaW5rcy5maW5kKGZ1bmN0aW9uIChwKSB7XG4gICAgICByZXR1cm4gcGVybWFsaW5rcy5pbmRleE9mKHApICE9PSAtMTtcbiAgICB9KTtcbiAgICB2YXIgZXhpc3RzID0gcGVybWFsaW5rICE9PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgcGVybWFsaW5rID0gcGFnZVBlcm1hbGlua3NbMF07XG4gICAgfVxuXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gd2lraUxpbmsudGFyZ2V0O1xuXG4gICAgaWYgKHdpa2lMaW5rLmFsaWFzKSB7XG4gICAgICBkaXNwbGF5TmFtZSA9IHdpa2lMaW5rLmFsaWFzO1xuICAgIH1cblxuICAgIHZhciBjbGFzc05hbWVzID0gd2lraUxpbmtDbGFzc05hbWU7XG5cbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgY2xhc3NOYW1lcyArPSAnICcgKyBuZXdDbGFzc05hbWU7XG4gICAgfVxuXG4gICAgdGhpcy50YWcoJzxhIGhyZWY9XCInICsgaHJlZlRlbXBsYXRlKHBlcm1hbGluaykgKyAnXCIgY2xhc3M9XCInICsgY2xhc3NOYW1lcyArICdcIj4nKTtcbiAgICB0aGlzLnJhdyhkaXNwbGF5TmFtZSk7XG4gICAgdGhpcy50YWcoJzwvYT4nKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZW50ZXI6IHtcbiAgICAgIHdpa2lMaW5rOiBlbnRlcldpa2lMaW5rXG4gICAgfSxcbiAgICBleGl0OiB7XG4gICAgICB3aWtpTGlua1RhcmdldDogZXhpdFdpa2lMaW5rVGFyZ2V0LFxuICAgICAgd2lraUxpbmtBbGlhczogZXhpdFdpa2lMaW5rQWxpYXMsXG4gICAgICB3aWtpTGluazogZXhpdFdpa2lMaW5rXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB3aWtpTGluaygpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYWxpYXNEaXZpZGVyID0gb3B0cy5hbGlhc0RpdmlkZXIgfHwgJzonO1xuICB2YXIgYWxpYXNNYXJrZXIgPSBhbGlhc0RpdmlkZXI7XG4gIHZhciBzdGFydE1hcmtlciA9ICdbWyc7XG4gIHZhciBlbmRNYXJrZXIgPSAnXV0nO1xuXG4gIGZ1bmN0aW9uIHRva2VuaXplKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgYWxpYXM7XG4gICAgdmFyIGFsaWFzQ3Vyc29yID0gMDtcbiAgICB2YXIgc3RhcnRNYXJrZXJDdXJzb3IgPSAwO1xuICAgIHZhciBlbmRNYXJrZXJDdXJzb3IgPSAwO1xuICAgIHJldHVybiBzdGFydDtcblxuICAgIGZ1bmN0aW9uIHN0YXJ0KGNvZGUpIHtcbiAgICAgIGlmIChjb2RlICE9PSBzdGFydE1hcmtlci5jaGFyQ29kZUF0KHN0YXJ0TWFya2VyQ3Vyc29yKSkgcmV0dXJuIG5vayhjb2RlKTtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3dpa2lMaW5rJyk7XG4gICAgICBlZmZlY3RzLmVudGVyKCd3aWtpTGlua01hcmtlcicpO1xuICAgICAgcmV0dXJuIGNvbnN1bWVTdGFydDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdW1lU3RhcnQoY29kZSkge1xuICAgICAgaWYgKHN0YXJ0TWFya2VyQ3Vyc29yID09PSBzdGFydE1hcmtlci5sZW5ndGgpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCd3aWtpTGlua01hcmtlcicpO1xuICAgICAgICByZXR1cm4gY29uc3VtZURhdGE7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb2RlICE9PSBzdGFydE1hcmtlci5jaGFyQ29kZUF0KHN0YXJ0TWFya2VyQ3Vyc29yKSkge1xuICAgICAgICByZXR1cm4gbm9rKGNvZGUpO1xuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSk7XG4gICAgICBzdGFydE1hcmtlckN1cnNvcisrO1xuICAgICAgcmV0dXJuIGNvbnN1bWVTdGFydDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdW1lRGF0YShjb2RlKSB7XG4gICAgICBlZmZlY3RzLmVudGVyKCd3aWtpTGlua0RhdGEnKTtcbiAgICAgIGVmZmVjdHMuZW50ZXIoJ3dpa2lMaW5rVGFyZ2V0Jyk7XG4gICAgICByZXR1cm4gY29uc3VtZVRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdW1lVGFyZ2V0KGNvZGUpIHtcbiAgICAgIGlmIChjb2RlID09PSBhbGlhc01hcmtlci5jaGFyQ29kZUF0KGFsaWFzQ3Vyc29yKSkge1xuICAgICAgICBpZiAoIWRhdGEpIHJldHVybiBub2soY29kZSk7XG4gICAgICAgIGVmZmVjdHMuZXhpdCgnd2lraUxpbmtUYXJnZXQnKTtcbiAgICAgICAgZWZmZWN0cy5lbnRlcignd2lraUxpbmtBbGlhc01hcmtlcicpO1xuICAgICAgICByZXR1cm4gY29uc3VtZUFsaWFzTWFya2VyO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29kZSA9PT0gZW5kTWFya2VyLmNoYXJDb2RlQXQoZW5kTWFya2VyQ3Vyc29yKSkge1xuICAgICAgICBpZiAoIWRhdGEpIHJldHVybiBub2soY29kZSk7XG4gICAgICAgIGVmZmVjdHMuZXhpdCgnd2lraUxpbmtUYXJnZXQnKTtcbiAgICAgICAgZWZmZWN0cy5leGl0KCd3aWtpTGlua0RhdGEnKTtcbiAgICAgICAgZWZmZWN0cy5lbnRlcignd2lraUxpbmtNYXJrZXInKTtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVFbmQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghKGNvZGUgPCAwIHx8IGNvZGUgPT09IDMyKSkge1xuICAgICAgICBkYXRhID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5jb25zdW1lKCk7XG4gICAgICByZXR1cm4gY29uc3VtZVRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdW1lQWxpYXNNYXJrZXIoY29kZSkge1xuICAgICAgaWYgKGFsaWFzQ3Vyc29yID09PSBhbGlhc01hcmtlci5sZW5ndGgpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCd3aWtpTGlua0FsaWFzTWFya2VyJyk7XG4gICAgICAgIGVmZmVjdHMuZW50ZXIoJ3dpa2lMaW5rQWxpYXMnKTtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVBbGlhcztcbiAgICAgIH1cblxuICAgICAgaWYgKGNvZGUgIT09IGFsaWFzTWFya2VyLmNoYXJDb2RlQXQoYWxpYXNDdXJzb3IpKSB7XG4gICAgICAgIHJldHVybiBub2soY29kZSk7XG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKTtcbiAgICAgIGFsaWFzQ3Vyc29yKys7XG4gICAgICByZXR1cm4gY29uc3VtZUFsaWFzTWFya2VyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN1bWVBbGlhcyhjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gZW5kTWFya2VyLmNoYXJDb2RlQXQoZW5kTWFya2VyQ3Vyc29yKSkge1xuICAgICAgICBpZiAoIWFsaWFzKSByZXR1cm4gbm9rKGNvZGUpO1xuICAgICAgICBlZmZlY3RzLmV4aXQoJ3dpa2lMaW5rQWxpYXMnKTtcbiAgICAgICAgZWZmZWN0cy5leGl0KCd3aWtpTGlua0RhdGEnKTtcbiAgICAgICAgZWZmZWN0cy5lbnRlcignd2lraUxpbmtNYXJrZXInKTtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVFbmQ7XG4gICAgICB9XG5cbiAgICAgIGlmICghKGNvZGUgPCAwIHx8IGNvZGUgPT09IDMyKSkge1xuICAgICAgICBhbGlhcyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuY29uc3VtZSgpO1xuICAgICAgcmV0dXJuIGNvbnN1bWVBbGlhcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdW1lRW5kKGNvZGUpIHtcbiAgICAgIGlmIChlbmRNYXJrZXJDdXJzb3IgPT09IGVuZE1hcmtlci5sZW5ndGgpIHtcbiAgICAgICAgZWZmZWN0cy5leGl0KCd3aWtpTGlua01hcmtlcicpO1xuICAgICAgICBlZmZlY3RzLmV4aXQoJ3dpa2lMaW5rJyk7XG4gICAgICAgIHJldHVybiBvaztcbiAgICAgIH1cblxuICAgICAgaWYgKGNvZGUgIT09IGVuZE1hcmtlci5jaGFyQ29kZUF0KGVuZE1hcmtlckN1cnNvcikpIHtcbiAgICAgICAgcmV0dXJuIG5vayhjb2RlKTtcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpO1xuICAgICAgZW5kTWFya2VyQ3Vyc29yKys7XG4gICAgICByZXR1cm4gY29uc3VtZUVuZDtcbiAgICB9XG4gIH1cblxuICB2YXIgY2FsbCA9IHtcbiAgICB0b2tlbml6ZTogdG9rZW5pemVcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB0ZXh0OiB7XG4gICAgICA5MTogY2FsbFxuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0cy5odG1sID0gaHRtbDtcbmV4cG9ydHMuc3ludGF4ID0gd2lraUxpbms7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBzYWZlID0gcmVxdWlyZSgnbWRhc3QtdXRpbC10by1tYXJrZG93bi9saWIvdXRpbC9zYWZlJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdExlZ2FjeSAoZSkgeyByZXR1cm4gZSAmJiB0eXBlb2YgZSA9PT0gJ29iamVjdCcgJiYgJ2RlZmF1bHQnIGluIGUgPyBlIDogeyAnZGVmYXVsdCc6IGUgfTsgfVxuXG52YXIgc2FmZV9fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9faW50ZXJvcERlZmF1bHRMZWdhY3koc2FmZSk7XG5cbmZ1bmN0aW9uIGZyb21NYXJrZG93bigpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgcGVybWFsaW5rcyA9IG9wdHMucGVybWFsaW5rcyB8fCBbXTtcblxuICB2YXIgZGVmYXVsdFBhZ2VSZXNvbHZlciA9IGZ1bmN0aW9uIGRlZmF1bHRQYWdlUmVzb2x2ZXIobmFtZSkge1xuICAgIHJldHVybiBbbmFtZS5yZXBsYWNlKC8gL2csICdfJykudG9Mb3dlckNhc2UoKV07XG4gIH07XG5cbiAgdmFyIHBhZ2VSZXNvbHZlciA9IG9wdHMucGFnZVJlc29sdmVyIHx8IGRlZmF1bHRQYWdlUmVzb2x2ZXI7XG4gIHZhciBuZXdDbGFzc05hbWUgPSBvcHRzLm5ld0NsYXNzTmFtZSB8fCAnbmV3JztcbiAgdmFyIHdpa2lMaW5rQ2xhc3NOYW1lID0gb3B0cy53aWtpTGlua0NsYXNzTmFtZSB8fCAnaW50ZXJuYWwnO1xuXG4gIHZhciBkZWZhdWx0SHJlZlRlbXBsYXRlID0gZnVuY3Rpb24gZGVmYXVsdEhyZWZUZW1wbGF0ZShwZXJtYWxpbmspIHtcbiAgICByZXR1cm4gXCIjL3BhZ2UvXCIuY29uY2F0KHBlcm1hbGluayk7XG4gIH07XG5cbiAgdmFyIGhyZWZUZW1wbGF0ZSA9IG9wdHMuaHJlZlRlbXBsYXRlIHx8IGRlZmF1bHRIcmVmVGVtcGxhdGU7XG5cbiAgZnVuY3Rpb24gZW50ZXJXaWtpTGluayh0b2tlbikge1xuICAgIHRoaXMuZW50ZXIoe1xuICAgICAgdHlwZTogJ3dpa2lMaW5rJyxcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgZGF0YToge1xuICAgICAgICBhbGlhczogbnVsbCxcbiAgICAgICAgcGVybWFsaW5rOiBudWxsLFxuICAgICAgICBleGlzdHM6IG51bGxcbiAgICAgIH1cbiAgICB9LCB0b2tlbik7XG4gIH1cblxuICBmdW5jdGlvbiB0b3Aoc3RhY2spIHtcbiAgICByZXR1cm4gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gIH1cblxuICBmdW5jdGlvbiBleGl0V2lraUxpbmtBbGlhcyh0b2tlbikge1xuICAgIHZhciBhbGlhcyA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pO1xuICAgIHZhciBjdXJyZW50ID0gdG9wKHRoaXMuc3RhY2spO1xuICAgIGN1cnJlbnQuZGF0YS5hbGlhcyA9IGFsaWFzO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhpdFdpa2lMaW5rVGFyZ2V0KHRva2VuKSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXMuc2xpY2VTZXJpYWxpemUodG9rZW4pO1xuICAgIHZhciBjdXJyZW50ID0gdG9wKHRoaXMuc3RhY2spO1xuICAgIGN1cnJlbnQudmFsdWUgPSB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBleGl0V2lraUxpbmsodG9rZW4pIHtcbiAgICB2YXIgd2lraUxpbmsgPSB0aGlzLmV4aXQodG9rZW4pO1xuICAgIHZhciBwYWdlUGVybWFsaW5rcyA9IHBhZ2VSZXNvbHZlcih3aWtpTGluay52YWx1ZSk7XG4gICAgdmFyIHBlcm1hbGluayA9IHBhZ2VQZXJtYWxpbmtzLmZpbmQoZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBwZXJtYWxpbmtzLmluZGV4T2YocCkgIT09IC0xO1xuICAgIH0pO1xuICAgIHZhciBleGlzdHMgPSBwZXJtYWxpbmsgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmICghZXhpc3RzKSB7XG4gICAgICBwZXJtYWxpbmsgPSBwYWdlUGVybWFsaW5rc1swXTtcbiAgICB9XG5cbiAgICB2YXIgZGlzcGxheU5hbWUgPSB3aWtpTGluay52YWx1ZTtcblxuICAgIGlmICh3aWtpTGluay5kYXRhLmFsaWFzKSB7XG4gICAgICBkaXNwbGF5TmFtZSA9IHdpa2lMaW5rLmRhdGEuYWxpYXM7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZXMgPSB3aWtpTGlua0NsYXNzTmFtZTtcblxuICAgIGlmICghZXhpc3RzKSB7XG4gICAgICBjbGFzc05hbWVzICs9ICcgJyArIG5ld0NsYXNzTmFtZTtcbiAgICB9XG5cbiAgICB3aWtpTGluay5kYXRhLmFsaWFzID0gZGlzcGxheU5hbWU7XG4gICAgd2lraUxpbmsuZGF0YS5wZXJtYWxpbmsgPSBwZXJtYWxpbms7XG4gICAgd2lraUxpbmsuZGF0YS5leGlzdHMgPSBleGlzdHM7XG4gICAgd2lraUxpbmsuZGF0YS5oTmFtZSA9ICdhJztcbiAgICB3aWtpTGluay5kYXRhLmhQcm9wZXJ0aWVzID0ge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzLFxuICAgICAgaHJlZjogaHJlZlRlbXBsYXRlKHBlcm1hbGluaylcbiAgICB9O1xuICAgIHdpa2lMaW5rLmRhdGEuaENoaWxkcmVuID0gW3tcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiBkaXNwbGF5TmFtZVxuICAgIH1dO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlbnRlcjoge1xuICAgICAgd2lraUxpbms6IGVudGVyV2lraUxpbmtcbiAgICB9LFxuICAgIGV4aXQ6IHtcbiAgICAgIHdpa2lMaW5rVGFyZ2V0OiBleGl0V2lraUxpbmtUYXJnZXQsXG4gICAgICB3aWtpTGlua0FsaWFzOiBleGl0V2lraUxpbmtBbGlhcyxcbiAgICAgIHdpa2lMaW5rOiBleGl0V2lraUxpbmtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvTWFya2Rvd24oKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGFsaWFzRGl2aWRlciA9IG9wdHMuYWxpYXNEaXZpZGVyIHx8ICc6JztcbiAgdmFyIHVuc2FmZSA9IFt7XG4gICAgY2hhcmFjdGVyOiAnWycsXG4gICAgaW5Db25zdHJ1Y3Q6IFsncGhyYXNpbmcnLCAnbGFiZWwnLCAncmVmZXJlbmNlJ11cbiAgfSwge1xuICAgIGNoYXJhY3RlcjogJ10nLFxuICAgIGluQ29uc3RydWN0OiBbJ2xhYmVsJywgJ3JlZmVyZW5jZSddXG4gIH1dO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZXIobm9kZSwgXywgY29udGV4dCkge1xuICAgIHZhciBleGl0ID0gY29udGV4dC5lbnRlcignd2lraUxpbmsnKTtcbiAgICB2YXIgbm9kZVZhbHVlID0gc2FmZV9fZGVmYXVsdFsnZGVmYXVsdCddKGNvbnRleHQsIG5vZGUudmFsdWUsIHtcbiAgICAgIGJlZm9yZTogJ1snLFxuICAgICAgYWZ0ZXI6ICddJ1xuICAgIH0pO1xuICAgIHZhciBub2RlQWxpYXMgPSBzYWZlX19kZWZhdWx0WydkZWZhdWx0J10oY29udGV4dCwgbm9kZS5kYXRhLmFsaWFzLCB7XG4gICAgICBiZWZvcmU6ICdbJyxcbiAgICAgIGFmdGVyOiAnXSdcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG5cbiAgICBpZiAobm9kZUFsaWFzICE9PSBub2RlVmFsdWUpIHtcbiAgICAgIHZhbHVlID0gXCJbW1wiLmNvbmNhdChub2RlVmFsdWUpLmNvbmNhdChhbGlhc0RpdmlkZXIpLmNvbmNhdChub2RlQWxpYXMsIFwiXV1cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gXCJbW1wiLmNvbmNhdChub2RlVmFsdWUsIFwiXV1cIik7XG4gICAgfVxuXG4gICAgZXhpdCgpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdW5zYWZlOiB1bnNhZmUsXG4gICAgaGFuZGxlcnM6IHtcbiAgICAgIHdpa2lMaW5rOiBoYW5kbGVyXG4gICAgfVxuICB9O1xufVxuXG5leHBvcnRzLmZyb21NYXJrZG93biA9IGZyb21NYXJrZG93bjtcbmV4cG9ydHMudG9NYXJrZG93biA9IHRvTWFya2Rvd247XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBtaWNyb21hcmtFeHRlbnNpb25XaWtpTGluayA9IHJlcXVpcmUoJ21pY3JvbWFyay1leHRlbnNpb24td2lraS1saW5rJyk7XG52YXIgbWRhc3RVdGlsV2lraUxpbmsgPSByZXF1aXJlKCdtZGFzdC11dGlsLXdpa2ktbGluaycpO1xuXG52YXIgd2FybmluZ0lzc3VlZDtcblxuZnVuY3Rpb24gd2lraUxpbmtQbHVnaW4oKSB7XG4gIHZhciBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGRhdGEgPSB0aGlzLmRhdGEoKTtcblxuICBmdW5jdGlvbiBhZGQoZmllbGQsIHZhbHVlKSB7XG4gICAgaWYgKGRhdGFbZmllbGRdKSBkYXRhW2ZpZWxkXS5wdXNoKHZhbHVlKTtlbHNlIGRhdGFbZmllbGRdID0gW3ZhbHVlXTtcbiAgfVxuXG4gIGlmICghd2FybmluZ0lzc3VlZCAmJiAodGhpcy5QYXJzZXIgJiYgdGhpcy5QYXJzZXIucHJvdG90eXBlICYmIHRoaXMuUGFyc2VyLnByb3RvdHlwZS5ibG9ja1Rva2VuaXplcnMgfHwgdGhpcy5Db21waWxlciAmJiB0aGlzLkNvbXBpbGVyLnByb3RvdHlwZSAmJiB0aGlzLkNvbXBpbGVyLnByb3RvdHlwZS52aXNpdG9ycykpIHtcbiAgICB3YXJuaW5nSXNzdWVkID0gdHJ1ZTtcbiAgICBjb25zb2xlLndhcm4oJ1tyZW1hcmstd2lraS1saW5rXSBXYXJuaW5nOiBwbGVhc2UgdXBncmFkZSB0byByZW1hcmsgMTMgdG8gdXNlIHRoaXMgcGx1Z2luJyk7XG4gIH1cblxuICBhZGQoJ21pY3JvbWFya0V4dGVuc2lvbnMnLCBtaWNyb21hcmtFeHRlbnNpb25XaWtpTGluay5zeW50YXgob3B0cykpO1xuICBhZGQoJ2Zyb21NYXJrZG93bkV4dGVuc2lvbnMnLCBtZGFzdFV0aWxXaWtpTGluay5mcm9tTWFya2Rvd24ob3B0cykpO1xuICBhZGQoJ3RvTWFya2Rvd25FeHRlbnNpb25zJywgbWRhc3RVdGlsV2lraUxpbmsudG9NYXJrZG93bihvcHRzKSk7XG59XG5cbmV4cG9ydHMud2lraUxpbmtQbHVnaW4gPSB3aWtpTGlua1BsdWdpbjtcbiIsIi8vXG4vLyBmb3JtYXQgLSBwcmludGYtbGlrZSBzdHJpbmcgZm9ybWF0dGluZyBmb3IgSmF2YVNjcmlwdFxuLy8gZ2l0aHViLmNvbS9zYW1zb25qcy9mb3JtYXRcbi8vIEBfc2pzXG4vL1xuLy8gQ29weXJpZ2h0IDIwMTAgLSAyMDEzIFNhbWkgU2FtaHVyaSA8c2FtaUBzYW1odXJpLm5ldD5cbi8vXG4vLyBNSVQgTGljZW5zZVxuLy8gaHR0cDovL3Nqcy5taXQtbGljZW5zZS5vcmdcbi8vXG5cbjsoZnVuY3Rpb24oKSB7XG5cbiAgLy8vLyBFeHBvcnQgdGhlIEFQSVxuICB2YXIgbmFtZXNwYWNlO1xuXG4gIC8vIENvbW1vbkpTIC8gTm9kZSBtb2R1bGVcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbmFtZXNwYWNlID0gbW9kdWxlLmV4cG9ydHMgPSBmb3JtYXQ7XG4gIH1cblxuICAvLyBCcm93c2VycyBhbmQgb3RoZXIgZW52aXJvbm1lbnRzXG4gIGVsc2Uge1xuICAgIC8vIEdldCB0aGUgZ2xvYmFsIG9iamVjdC4gV29ya3MgaW4gRVMzLCBFUzUsIGFuZCBFUzUgc3RyaWN0IG1vZGUuXG4gICAgbmFtZXNwYWNlID0gKGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzIHx8ICgxLGV2YWwpKCd0aGlzJykgfSgpKTtcbiAgfVxuXG4gIG5hbWVzcGFjZS5mb3JtYXQgPSBmb3JtYXQ7XG4gIG5hbWVzcGFjZS52c3ByaW50ZiA9IHZzcHJpbnRmO1xuXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUubG9nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbmFtZXNwYWNlLnByaW50ZiA9IHByaW50ZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByaW50ZigvKiAuLi4gKi8pIHtcbiAgICBjb25zb2xlLmxvZyhmb3JtYXQuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gIH1cblxuICBmdW5jdGlvbiB2c3ByaW50ZihmbXQsIHJlcGxhY2VtZW50cykge1xuICAgIHJldHVybiBmb3JtYXQuYXBwbHkobnVsbCwgW2ZtdF0uY29uY2F0KHJlcGxhY2VtZW50cykpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0KGZtdCkge1xuICAgIHZhciBhcmdJbmRleCA9IDEgLy8gc2tpcCBpbml0aWFsIGZvcm1hdCBhcmd1bWVudFxuICAgICAgLCBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAsIGkgPSAwXG4gICAgICAsIG4gPSBmbXQubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9ICcnXG4gICAgICAsIGNcbiAgICAgICwgZXNjYXBlZCA9IGZhbHNlXG4gICAgICAsIGFyZ1xuICAgICAgLCB0bXBcbiAgICAgICwgbGVhZGluZ1plcm8gPSBmYWxzZVxuICAgICAgLCBwcmVjaXNpb25cbiAgICAgICwgbmV4dEFyZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfVxuICAgICAgLCBzbHVycE51bWJlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBkaWdpdHMgPSAnJztcbiAgICAgICAgICB3aGlsZSAoL1xcZC8udGVzdChmbXRbaV0pKSB7XG4gICAgICAgICAgICBkaWdpdHMgKz0gZm10W2krK107XG4gICAgICAgICAgICBjID0gZm10W2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGlnaXRzLmxlbmd0aCA+IDAgPyBwYXJzZUludChkaWdpdHMpIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgO1xuICAgIGZvciAoOyBpIDwgbjsgKytpKSB7XG4gICAgICBjID0gZm10W2ldO1xuICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoYyA9PSAnLicpIHtcbiAgICAgICAgICBsZWFkaW5nWmVybyA9IGZhbHNlO1xuICAgICAgICAgIGMgPSBmbXRbKytpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09ICcwJyAmJiBmbXRbaSArIDFdID09ICcuJykge1xuICAgICAgICAgIGxlYWRpbmdaZXJvID0gdHJ1ZTtcbiAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgYyA9IGZtdFtpXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBsZWFkaW5nWmVybyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcHJlY2lzaW9uID0gc2x1cnBOdW1iZXIoKTtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgJ2InOiAvLyBudW1iZXIgaW4gYmluYXJ5XG4gICAgICAgICAgcmVzdWx0ICs9IHBhcnNlSW50KG5leHRBcmcoKSwgMTApLnRvU3RyaW5nKDIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjJzogLy8gY2hhcmFjdGVyXG4gICAgICAgICAgYXJnID0gbmV4dEFyZygpO1xuICAgICAgICAgIGlmICh0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fCBhcmcgaW5zdGFuY2VvZiBTdHJpbmcpXG4gICAgICAgICAgICByZXN1bHQgKz0gYXJnO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGFyZywgMTApKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZCc6IC8vIG51bWJlciBpbiBkZWNpbWFsXG4gICAgICAgICAgcmVzdWx0ICs9IHBhcnNlSW50KG5leHRBcmcoKSwgMTApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmJzogLy8gZmxvYXRpbmcgcG9pbnQgbnVtYmVyXG4gICAgICAgICAgdG1wID0gU3RyaW5nKHBhcnNlRmxvYXQobmV4dEFyZygpKS50b0ZpeGVkKHByZWNpc2lvbiB8fCA2KSk7XG4gICAgICAgICAgcmVzdWx0ICs9IGxlYWRpbmdaZXJvID8gdG1wIDogdG1wLnJlcGxhY2UoL14wLywgJycpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdqJzogLy8gSlNPTlxuICAgICAgICAgIHJlc3VsdCArPSBKU09OLnN0cmluZ2lmeShuZXh0QXJnKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdvJzogLy8gbnVtYmVyIGluIG9jdGFsXG4gICAgICAgICAgcmVzdWx0ICs9ICcwJyArIHBhcnNlSW50KG5leHRBcmcoKSwgMTApLnRvU3RyaW5nKDgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzJzogLy8gc3RyaW5nXG4gICAgICAgICAgcmVzdWx0ICs9IG5leHRBcmcoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAneCc6IC8vIGxvd2VyY2FzZSBoZXhhZGVjaW1hbFxuICAgICAgICAgIHJlc3VsdCArPSAnMHgnICsgcGFyc2VJbnQobmV4dEFyZygpLCAxMCkudG9TdHJpbmcoMTYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdYJzogLy8gdXBwZXJjYXNlIGhleGFkZWNpbWFsXG4gICAgICAgICAgcmVzdWx0ICs9ICcweCcgKyBwYXJzZUludChuZXh0QXJnKCksIDEwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXN1bHQgKz0gYztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjID09PSAnJScpIHtcbiAgICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG59KCkpO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBmb3JtYXR0ZXIgPSByZXF1aXJlKCdmb3JtYXQnKVxuXG52YXIgZmF1bHQgPSBjcmVhdGUoRXJyb3IpXG5cbm1vZHVsZS5leHBvcnRzID0gZmF1bHRcblxuZmF1bHQuZXZhbCA9IGNyZWF0ZShFdmFsRXJyb3IpXG5mYXVsdC5yYW5nZSA9IGNyZWF0ZShSYW5nZUVycm9yKVxuZmF1bHQucmVmZXJlbmNlID0gY3JlYXRlKFJlZmVyZW5jZUVycm9yKVxuZmF1bHQuc3ludGF4ID0gY3JlYXRlKFN5bnRheEVycm9yKVxuZmF1bHQudHlwZSA9IGNyZWF0ZShUeXBlRXJyb3IpXG5mYXVsdC51cmkgPSBjcmVhdGUoVVJJRXJyb3IpXG5cbmZhdWx0LmNyZWF0ZSA9IGNyZWF0ZVxuXG4vLyBDcmVhdGUgYSBuZXcgYEVDb25zdHJ1Y3RvcmAsIHdpdGggdGhlIGZvcm1hdHRlZCBgZm9ybWF0YCBhcyBhIGZpcnN0IGFyZ3VtZW50LlxuZnVuY3Rpb24gY3JlYXRlKEVDb25zdHJ1Y3Rvcikge1xuICBGb3JtYXR0ZWRFcnJvci5kaXNwbGF5TmFtZSA9IEVDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBFQ29uc3RydWN0b3IubmFtZVxuXG4gIHJldHVybiBGb3JtYXR0ZWRFcnJvclxuXG4gIGZ1bmN0aW9uIEZvcm1hdHRlZEVycm9yKGZvcm1hdCkge1xuICAgIGlmIChmb3JtYXQpIHtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdHRlci5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBFQ29uc3RydWN0b3IoZm9ybWF0KVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG1hdHRlcnNcblxudmFyIGZhdWx0ID0gcmVxdWlyZSgnZmF1bHQnKVxuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxudmFyIG1hcmtlcnMgPSB7eWFtbDogJy0nLCB0b21sOiAnKyd9XG5cbmZ1bmN0aW9uIG1hdHRlcnMob3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8ICd5YW1sJ1xuICB2YXIgcmVzdWx0cyA9IFtdXG4gIHZhciBpbmRleCA9IC0xXG4gIHZhciBsZW5ndGhcblxuICAvLyBPbmUgcHJlc2V0IG9yIG1hdHRlci5cbiAgaWYgKHR5cGVvZiBzZXR0aW5ncyA9PT0gJ3N0cmluZycgfHwgISgnbGVuZ3RoJyBpbiBzZXR0aW5ncykpIHtcbiAgICBzZXR0aW5ncyA9IFtzZXR0aW5nc11cbiAgfVxuXG4gIGxlbmd0aCA9IHNldHRpbmdzLmxlbmd0aFxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0c1tpbmRleF0gPSBtYXR0ZXIoc2V0dGluZ3NbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHNcbn1cblxuZnVuY3Rpb24gbWF0dGVyKG9wdGlvbikge1xuICB2YXIgcmVzdWx0ID0gb3B0aW9uXG5cbiAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFvd24uY2FsbChtYXJrZXJzLCByZXN1bHQpKSB7XG4gICAgICB0aHJvdyBmYXVsdCgnTWlzc2luZyBtYXR0ZXIgZGVmaW5pdGlvbiBmb3IgYCVzYCcsIHJlc3VsdClcbiAgICB9XG5cbiAgICByZXN1bHQgPSB7dHlwZTogcmVzdWx0LCBtYXJrZXI6IG1hcmtlcnNbcmVzdWx0XX1cbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IGZhdWx0KCdFeHBlY3RlZCBtYXR0ZXIgdG8gYmUgYW4gb2JqZWN0LCBub3QgYCVqYCcsIHJlc3VsdClcbiAgfVxuXG4gIGlmICghb3duLmNhbGwocmVzdWx0LCAndHlwZScpKSB7XG4gICAgdGhyb3cgZmF1bHQoJ01pc3NpbmcgYHR5cGVgIGluIG1hdHRlciBgJWpgJywgcmVzdWx0KVxuICB9XG5cbiAgaWYgKCFvd24uY2FsbChyZXN1bHQsICdmZW5jZScpICYmICFvd24uY2FsbChyZXN1bHQsICdtYXJrZXInKSkge1xuICAgIHRocm93IGZhdWx0KCdNaXNzaW5nIGBtYXJrZXJgIG9yIGBmZW5jZWAgaW4gbWF0dGVyIGAlamAnLCByZXN1bHQpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVxuXG52YXIgbWF0dGVycyA9IHJlcXVpcmUoJy4vbWF0dGVycycpXG5cbmZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IG1hdHRlcnMob3B0aW9ucylcbiAgdmFyIGxlbmd0aCA9IHNldHRpbmdzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgZmxvdyA9IHt9XG4gIHZhciBtYXR0ZXJcbiAgdmFyIGNvZGVcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIG1hdHRlciA9IHNldHRpbmdzW2luZGV4XVxuICAgIGNvZGUgPSBmZW5jZShtYXR0ZXIsICdvcGVuJykuY2hhckNvZGVBdCgwKVxuICAgIGlmIChjb2RlIGluIGZsb3cpIHtcbiAgICAgIGZsb3dbY29kZV0ucHVzaChwYXJzZShtYXR0ZXIpKVxuICAgIH0gZWxzZSB7XG4gICAgICBmbG93W2NvZGVdID0gW3BhcnNlKG1hdHRlcildXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtmbG93OiBmbG93fVxufVxuXG5mdW5jdGlvbiBwYXJzZShtYXR0ZXIpIHtcbiAgdmFyIG5hbWUgPSBtYXR0ZXIudHlwZVxuICB2YXIgYW55d2hlcmUgPSBtYXR0ZXIuYW55d2hlcmVcbiAgdmFyIHZhbHVlVHlwZSA9IG5hbWUgKyAnVmFsdWUnXG4gIHZhciBmZW5jZVR5cGUgPSBuYW1lICsgJ0ZlbmNlJ1xuICB2YXIgc2VxdWVuY2VUeXBlID0gZmVuY2VUeXBlICsgJ1NlcXVlbmNlJ1xuICB2YXIgZmVuY2VDb25zdHJ1Y3QgPSB7dG9rZW5pemU6IHRva2VuaXplRmVuY2UsIHBhcnRpYWw6IHRydWV9XG4gIHZhciBidWZmZXJcblxuICByZXR1cm4ge3Rva2VuaXplOiB0b2tlbml6ZUZyb250bWF0dGVyLCBjb25jcmV0ZTogdHJ1ZX1cblxuICBmdW5jdGlvbiB0b2tlbml6ZUZyb250bWF0dGVyKGVmZmVjdHMsIG9rLCBub2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgIHJldHVybiBzdGFydFxuXG4gICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgdmFyIHBvc2l0aW9uID0gc2VsZi5ub3coKVxuXG4gICAgICBpZiAocG9zaXRpb24uY29sdW1uICE9PSAxIHx8ICghYW55d2hlcmUgJiYgcG9zaXRpb24ubGluZSAhPT0gMSkpIHtcbiAgICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmVudGVyKG5hbWUpXG4gICAgICBidWZmZXIgPSBmZW5jZShtYXR0ZXIsICdvcGVuJylcbiAgICAgIHJldHVybiBlZmZlY3RzLmF0dGVtcHQoZmVuY2VDb25zdHJ1Y3QsIGFmdGVyT3BlbmluZ0ZlbmNlLCBub2spKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWZ0ZXJPcGVuaW5nRmVuY2UoY29kZSkge1xuICAgICAgYnVmZmVyID0gZmVuY2UobWF0dGVyLCAnY2xvc2UnKVxuICAgICAgcmV0dXJuIGxpbmVFbmQoY29kZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IC01IHx8IGNvZGUgPT09IC00IHx8IGNvZGUgPT09IC0zIHx8IGNvZGUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxpbmVFbmQoY29kZSlcbiAgICAgIH1cblxuICAgICAgZWZmZWN0cy5lbnRlcih2YWx1ZVR5cGUpXG4gICAgICByZXR1cm4gbGluZURhdGEoY29kZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRGF0YShjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gLTUgfHwgY29kZSA9PT0gLTQgfHwgY29kZSA9PT0gLTMgfHwgY29kZSA9PT0gbnVsbCkge1xuICAgICAgICBlZmZlY3RzLmV4aXQodmFsdWVUeXBlKVxuICAgICAgICByZXR1cm4gbGluZUVuZChjb2RlKVxuICAgICAgfVxuXG4gICAgICBlZmZlY3RzLmNvbnN1bWUoY29kZSlcbiAgICAgIHJldHVybiBsaW5lRGF0YVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoY29kZSkge1xuICAgICAgLy8gUmVxdWlyZSBhIGNsb3NpbmcgZmVuY2UuXG4gICAgICBpZiAoY29kZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgICB9XG5cbiAgICAgIC8vIENhbiBvbmx5IGJlIGFuIGVvbC5cbiAgICAgIGVmZmVjdHMuZW50ZXIoJ2xpbmVFbmRpbmcnKVxuICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICBlZmZlY3RzLmV4aXQoJ2xpbmVFbmRpbmcnKVxuICAgICAgcmV0dXJuIGVmZmVjdHMuYXR0ZW1wdChmZW5jZUNvbnN0cnVjdCwgYWZ0ZXIsIGxpbmVTdGFydClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZnRlcihjb2RlKSB7XG4gICAgICBlZmZlY3RzLmV4aXQobmFtZSlcbiAgICAgIHJldHVybiBvayhjb2RlKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRva2VuaXplRmVuY2UoZWZmZWN0cywgb2ssIG5vaykge1xuICAgIHZhciBidWZmZXJJbmRleCA9IDBcblxuICAgIHJldHVybiBzdGFydFxuXG4gICAgZnVuY3Rpb24gc3RhcnQoY29kZSkge1xuICAgICAgaWYgKGNvZGUgPT09IGJ1ZmZlci5jaGFyQ29kZUF0KGJ1ZmZlckluZGV4KSkge1xuICAgICAgICBlZmZlY3RzLmVudGVyKGZlbmNlVHlwZSlcbiAgICAgICAgZWZmZWN0cy5lbnRlcihzZXF1ZW5jZVR5cGUpXG4gICAgICAgIHJldHVybiBpbnNpZGVTZXF1ZW5jZShjb2RlKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zaWRlU2VxdWVuY2UoY29kZSkge1xuICAgICAgaWYgKGJ1ZmZlckluZGV4ID09PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGVmZmVjdHMuZXhpdChzZXF1ZW5jZVR5cGUpXG5cbiAgICAgICAgaWYgKGNvZGUgPT09IC0yIHx8IGNvZGUgPT09IC0xIHx8IGNvZGUgPT09IDMyKSB7XG4gICAgICAgICAgZWZmZWN0cy5lbnRlcignd2hpdGVzcGFjZScpXG4gICAgICAgICAgcmV0dXJuIGluc2lkZVdoaXRlc3BhY2UoY29kZSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmZW5jZUVuZChjb2RlKVxuICAgICAgfVxuXG4gICAgICBpZiAoY29kZSA9PT0gYnVmZmVyLmNoYXJDb2RlQXQoYnVmZmVySW5kZXgpKSB7XG4gICAgICAgIGVmZmVjdHMuY29uc3VtZShjb2RlKVxuICAgICAgICBidWZmZXJJbmRleCsrXG4gICAgICAgIHJldHVybiBpbnNpZGVTZXF1ZW5jZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9rKGNvZGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zaWRlV2hpdGVzcGFjZShjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gLTIgfHwgY29kZSA9PT0gLTEgfHwgY29kZSA9PT0gMzIpIHtcbiAgICAgICAgZWZmZWN0cy5jb25zdW1lKGNvZGUpXG4gICAgICAgIHJldHVybiBpbnNpZGVXaGl0ZXNwYWNlXG4gICAgICB9XG5cbiAgICAgIGVmZmVjdHMuZXhpdCgnd2hpdGVzcGFjZScpXG4gICAgICByZXR1cm4gZmVuY2VFbmQoY29kZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmZW5jZUVuZChjb2RlKSB7XG4gICAgICBpZiAoY29kZSA9PT0gLTUgfHwgY29kZSA9PT0gLTQgfHwgY29kZSA9PT0gLTMgfHwgY29kZSA9PT0gbnVsbCkge1xuICAgICAgICBlZmZlY3RzLmV4aXQoZmVuY2VUeXBlKVxuICAgICAgICByZXR1cm4gb2soY29kZSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5vayhjb2RlKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmZW5jZShtYXR0ZXIsIHByb3ApIHtcbiAgdmFyIG1hcmtlclxuXG4gIGlmIChtYXR0ZXIubWFya2VyKSB7XG4gICAgbWFya2VyID0gcGljayhtYXR0ZXIubWFya2VyLCBwcm9wKVxuICAgIHJldHVybiBtYXJrZXIgKyBtYXJrZXIgKyBtYXJrZXJcbiAgfVxuXG4gIHJldHVybiBwaWNrKG1hdHRlci5mZW5jZSwgcHJvcClcbn1cblxuZnVuY3Rpb24gcGljayhzY2hlbWEsIHByb3ApIHtcbiAgcmV0dXJuIHR5cGVvZiBzY2hlbWEgPT09ICdzdHJpbmcnID8gc2NoZW1hIDogc2NoZW1hW3Byb3BdXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL3N5bnRheCcpXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUZyb21NYXJrZG93blxuXG52YXIgbWF0dGVycyA9IHJlcXVpcmUoJ21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXIvbGliL21hdHRlcnMnKVxuXG5mdW5jdGlvbiBjcmVhdGVGcm9tTWFya2Rvd24ob3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBtYXR0ZXJzKG9wdGlvbnMpXG4gIHZhciBsZW5ndGggPSBzZXR0aW5ncy5sZW5ndGhcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGVudGVyID0ge31cbiAgdmFyIGV4aXQgPSB7fVxuICB2YXIgbWF0dGVyXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBtYXR0ZXIgPSBzZXR0aW5nc1tpbmRleF1cbiAgICBlbnRlclttYXR0ZXIudHlwZV0gPSBvcGVuZXIobWF0dGVyKVxuICAgIGV4aXRbbWF0dGVyLnR5cGVdID0gY2xvc2VcbiAgICBleGl0W21hdHRlci50eXBlICsgJ1ZhbHVlJ10gPSB2YWx1ZVxuICB9XG5cbiAgcmV0dXJuIHtlbnRlcjogZW50ZXIsIGV4aXQ6IGV4aXR9XG59XG5cbmZ1bmN0aW9uIG9wZW5lcihtYXR0ZXIpIHtcbiAgcmV0dXJuIG9wZW5cbiAgZnVuY3Rpb24gb3Blbih0b2tlbikge1xuICAgIHRoaXMuZW50ZXIoe3R5cGU6IG1hdHRlci50eXBlLCB2YWx1ZTogJyd9LCB0b2tlbilcbiAgICB0aGlzLmJ1ZmZlcigpXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvc2UodG9rZW4pIHtcbiAgdmFyIGRhdGEgPSB0aGlzLnJlc3VtZSgpXG4gIC8vIFJlbW92ZSB0aGUgaW5pdGlhbCBhbmQgZmluYWwgZW9sLlxuICB0aGlzLmV4aXQodG9rZW4pLnZhbHVlID0gZGF0YS5yZXBsYWNlKC9eKFxccj9cXG58XFxyKXwoXFxyP1xcbnxcXHIpJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdmFsdWUodG9rZW4pIHtcbiAgdGhpcy5jb25maWcuZW50ZXIuZGF0YS5jYWxsKHRoaXMsIHRva2VuKVxuICB0aGlzLmNvbmZpZy5leGl0LmRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gY3JlYXRlVG9NYXJrZG93blxuXG52YXIgbWF0dGVycyA9IHJlcXVpcmUoJ21pY3JvbWFyay1leHRlbnNpb24tZnJvbnRtYXR0ZXIvbGliL21hdHRlcnMnKVxuXG5mdW5jdGlvbiBjcmVhdGVUb01hcmtkb3duKG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IFtdXG4gIHZhciBoYW5kbGVycyA9IHt9XG4gIHZhciBzZXR0aW5ncyA9IG1hdHRlcnMob3B0aW9ucylcbiAgdmFyIGxlbmd0aCA9IHNldHRpbmdzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgbWF0dGVyXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBtYXR0ZXIgPSBzZXR0aW5nc1tpbmRleF1cbiAgICBoYW5kbGVyc1ttYXR0ZXIudHlwZV0gPSBoYW5kbGVyKG1hdHRlcilcbiAgICB1bnNhZmUucHVzaCh7YXRCcmVhazogdHJ1ZSwgY2hhcmFjdGVyOiBmZW5jZShtYXR0ZXIsICdvcGVuJykuY2hhckF0KDApfSlcbiAgfVxuXG4gIHJldHVybiB7dW5zYWZlOiB1bnNhZmUsIGhhbmRsZXJzOiBoYW5kbGVyc31cbn1cblxuZnVuY3Rpb24gaGFuZGxlcihtYXR0ZXIpIHtcbiAgdmFyIG9wZW4gPSBmZW5jZShtYXR0ZXIsICdvcGVuJylcbiAgdmFyIGNsb3NlID0gZmVuY2UobWF0dGVyLCAnY2xvc2UnKVxuXG4gIHJldHVybiBoYW5kbGVcblxuICBmdW5jdGlvbiBoYW5kbGUobm9kZSkge1xuICAgIHJldHVybiBvcGVuICsgKG5vZGUudmFsdWUgPyAnXFxuJyArIG5vZGUudmFsdWUgOiAnJykgKyAnXFxuJyArIGNsb3NlXG4gIH1cbn1cblxuZnVuY3Rpb24gZmVuY2UobWF0dGVyLCBwcm9wKSB7XG4gIHZhciBtYXJrZXJcblxuICBpZiAobWF0dGVyLm1hcmtlcikge1xuICAgIG1hcmtlciA9IHBpY2sobWF0dGVyLm1hcmtlciwgcHJvcClcbiAgICByZXR1cm4gbWFya2VyICsgbWFya2VyICsgbWFya2VyXG4gIH1cblxuICByZXR1cm4gcGljayhtYXR0ZXIuZmVuY2UsIHByb3ApXG59XG5cbmZ1bmN0aW9uIHBpY2soc2NoZW1hLCBwcm9wKSB7XG4gIHJldHVybiB0eXBlb2Ygc2NoZW1hID09PSAnc3RyaW5nJyA/IHNjaGVtYSA6IHNjaGVtYVtwcm9wXVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBzeW50YXggPSByZXF1aXJlKCdtaWNyb21hcmstZXh0ZW5zaW9uLWZyb250bWF0dGVyJylcbnZhciBmcm9tTWFya2Rvd24gPSByZXF1aXJlKCdtZGFzdC11dGlsLWZyb250bWF0dGVyL2Zyb20tbWFya2Rvd24nKVxudmFyIHRvTWFya2Rvd24gPSByZXF1aXJlKCdtZGFzdC11dGlsLWZyb250bWF0dGVyL3RvLW1hcmtkb3duJylcblxubW9kdWxlLmV4cG9ydHMgPSBmcm9udG1hdHRlclxuXG5mdW5jdGlvbiBmcm9udG1hdHRlcihvcHRpb25zKSB7XG4gIHZhciBkYXRhID0gdGhpcy5kYXRhKClcbiAgYWRkKCdtaWNyb21hcmtFeHRlbnNpb25zJywgc3ludGF4KG9wdGlvbnMpKVxuICBhZGQoJ2Zyb21NYXJrZG93bkV4dGVuc2lvbnMnLCBmcm9tTWFya2Rvd24ob3B0aW9ucykpXG4gIGFkZCgndG9NYXJrZG93bkV4dGVuc2lvbnMnLCB0b01hcmtkb3duKG9wdGlvbnMpKVxuICBmdW5jdGlvbiBhZGQoZmllbGQsIHZhbHVlKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gb3RoZXIgZXh0ZW5zaW9ucy4gKi9cbiAgICBpZiAoZGF0YVtmaWVsZF0pIGRhdGFbZmllbGRdLnB1c2godmFsdWUpXG4gICAgZWxzZSBkYXRhW2ZpZWxkXSA9IFt2YWx1ZV1cbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZpc2l0XG5cbnZhciB2aXNpdFBhcmVudHMgPSByZXF1aXJlKCd1bmlzdC11dGlsLXZpc2l0LXBhcmVudHMnKVxuXG52YXIgQ09OVElOVUUgPSB2aXNpdFBhcmVudHMuQ09OVElOVUVcbnZhciBTS0lQID0gdmlzaXRQYXJlbnRzLlNLSVBcbnZhciBFWElUID0gdmlzaXRQYXJlbnRzLkVYSVRcblxudmlzaXQuQ09OVElOVUUgPSBDT05USU5VRVxudmlzaXQuU0tJUCA9IFNLSVBcbnZpc2l0LkVYSVQgPSBFWElUXG5cbmZ1bmN0aW9uIHZpc2l0KHRyZWUsIHRlc3QsIHZpc2l0b3IsIHJldmVyc2UpIHtcbiAgaWYgKHR5cGVvZiB0ZXN0ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2aXNpdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV2ZXJzZSA9IHZpc2l0b3JcbiAgICB2aXNpdG9yID0gdGVzdFxuICAgIHRlc3QgPSBudWxsXG4gIH1cblxuICB2aXNpdFBhcmVudHModHJlZSwgdGVzdCwgb3ZlcmxvYWQsIHJldmVyc2UpXG5cbiAgZnVuY3Rpb24gb3ZlcmxvYWQobm9kZSwgcGFyZW50cykge1xuICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV1cbiAgICB2YXIgaW5kZXggPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihub2RlKSA6IG51bGxcbiAgICByZXR1cm4gdmlzaXRvcihub2RlLCBpbmRleCwgcGFyZW50KVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RGVmaW5pdGlvbkZhY3RvcnlcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5XG5cbi8vIEdldCBhIGRlZmluaXRpb24gaW4gYG5vZGVgIGJ5IGBpZGVudGlmaWVyYC5cbmZ1bmN0aW9uIGdldERlZmluaXRpb25GYWN0b3J5KG5vZGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGdldHRlckZhY3RvcnkoZ2F0aGVyKG5vZGUsIG9wdGlvbnMpKVxufVxuXG4vLyBHYXRoZXIgYWxsIGRlZmluaXRpb25zIGluIGBub2RlYFxuZnVuY3Rpb24gZ2F0aGVyKG5vZGUsIG9wdGlvbnMpIHtcbiAgdmFyIGNhY2hlID0ge31cblxuICBpZiAoIW5vZGUgfHwgIW5vZGUudHlwZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbWRhc3QtdXRpbC1kZWZpbml0aW9ucyBleHBlY3RlZCBub2RlJylcbiAgfVxuXG4gIHZpc2l0KG5vZGUsICdkZWZpbml0aW9uJywgb3B0aW9ucyAmJiBvcHRpb25zLmNvbW1vbm1hcmsgPyBjb21tb25tYXJrIDogbm9ybWFsKVxuXG4gIHJldHVybiBjYWNoZVxuXG4gIGZ1bmN0aW9uIGNvbW1vbm1hcmsoZGVmaW5pdGlvbikge1xuICAgIHZhciBpZCA9IG5vcm1hbGlzZShkZWZpbml0aW9uLmlkZW50aWZpZXIpXG4gICAgaWYgKCFvd24uY2FsbChjYWNoZSwgaWQpKSB7XG4gICAgICBjYWNoZVtpZF0gPSBkZWZpbml0aW9uXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsKGRlZmluaXRpb24pIHtcbiAgICBjYWNoZVtub3JtYWxpc2UoZGVmaW5pdGlvbi5pZGVudGlmaWVyKV0gPSBkZWZpbml0aW9uXG4gIH1cbn1cblxuLy8gRmFjdG9yeSB0byBnZXQgYSBub2RlIGZyb20gdGhlIGdpdmVuIGRlZmluaXRpb24tY2FjaGUuXG5mdW5jdGlvbiBnZXR0ZXJGYWN0b3J5KGNhY2hlKSB7XG4gIHJldHVybiBnZXR0ZXJcblxuICAvLyBHZXQgYSBub2RlIGZyb20gdGhlIGJvdW5kIGRlZmluaXRpb24tY2FjaGUuXG4gIGZ1bmN0aW9uIGdldHRlcihpZGVudGlmaWVyKSB7XG4gICAgdmFyIGlkID0gaWRlbnRpZmllciAmJiBub3JtYWxpc2UoaWRlbnRpZmllcilcbiAgICByZXR1cm4gaWQgJiYgb3duLmNhbGwoY2FjaGUsIGlkKSA/IGNhY2hlW2lkXSA6IG51bGxcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpc2UoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci50b1VwcGVyQ2FzZSgpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIERlcGVuZGVuY2llcy4gKi9cbnZhciBvbmUgPSByZXF1aXJlKCcuL29uZScpO1xuLyogRXhwb3NlLiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gYWxsO1xuLyogU3RyaW5naWZ5IGFsbCBjaGlsZHJlbiBvZiBgcGFyZW50YC4gKi9cblxuZnVuY3Rpb24gYWxsKGN0eCwgcGFyZW50KSB7XG4gIHZhciBjaGlsZHJlbiA9IHBhcmVudCAmJiBwYXJlbnQuY2hpbGRyZW47XG4gIGlmICghY2hpbGRyZW4pIHJldHVybiAnJztcbiAgcmV0dXJuIGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgcmV0dXJuIG9uZShjdHgsIGNoaWxkLCBpbmRleCwgcGFyZW50KTtcbiAgfSkuam9pbignJyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gYmxvY2txdW90ZTtcblxudmFyIGRlZmF1bHRNYWNybyA9IGZ1bmN0aW9uIGRlZmF1bHRNYWNybyhpbm5lclRleHQpIHtcbiAgcmV0dXJuIFwiXFxcXGJlZ2lue1F1b3RhdGlvbn1cXG5cIi5jb25jYXQoaW5uZXJUZXh0LCBcIlxcblxcXFxlbmR7UXVvdGF0aW9ufVxcblxcblwiKTtcbn07XG4vKiBTdHJpbmdpZnkgYSBCbG9ja3F1b3RlIGBub2RlYC4gKi9cblxuXG5mdW5jdGlvbiBibG9ja3F1b3RlKGN0eCwgbm9kZSkge1xuICB2YXIgbWFjcm8gPSBjdHguYmxvY2txdW90ZSB8fCBkZWZhdWx0TWFjcm87XG5cbiAgdmFyIGlubmVyVGV4dCA9IHJlcXVpcmUoJy4uL2FsbCcpKGN0eCwgbm9kZSk7XG5cbiAgcmV0dXJuIG1hY3JvKGlubmVyVGV4dC50cmltKCkpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBFeHBvc2UuICovXG5tb2R1bGUuZXhwb3J0cyA9IGJyO1xuXG52YXIgZGVmYXVsdE1hY3JvID0gZnVuY3Rpb24gZGVmYXVsdE1hY3JvKCkge1xuICByZXR1cm4gJyBcXFxcXFxcXFxcbic7XG59O1xuLyogU3RyaW5naWZ5IGEgYnJlYWsgYG5vZGVgLiAqL1xuXG5cbmZ1bmN0aW9uIGJyKGN0eCwgbm9kZSkge1xuICB2YXIgbWFjcm8gPSBjdHhbXCJicmVha1wiXSA/IGN0eFtcImJyZWFrXCJdIDogZGVmYXVsdE1hY3JvO1xuICByZXR1cm4gbWFjcm8obm9kZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gY29kZTtcbnZhciBjb2RlQmxvY2tQYXJhbXNNYXBwaW5nID0gW251bGwsICdobF9saW5lcz0nLCAnbGluZW5vc3RhcnQ9J107XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oY29udGVudCwgbGFuZywgYXR0cnMpIHtcbiAgLy8gRGVmYXVsdCBsYW5ndWFnZSBpcyBcInRleHRcIlxuICBpZiAoIWxhbmcpIGxhbmcgPSAndGV4dCc7IC8vIENyZWF0ZSBhIGxpc3Qgb2YgYXR0cmlidXRlcyB0byBiZSBzZXJpYWxpemVkXG5cbiAgdmFyIGxvY2FsQ29kZUJsb2NrUGFyYW1zID0gQXJyYXkoY29kZUJsb2NrUGFyYW1zTWFwcGluZy5sZW5ndGgpLmZpbGwoJycpOyAvLyBDaGVjayBmb3IgYXR0cmlidXRlcyBhbmQgZW51bWVyYXRlIHRoZW1cblxuICBpZiAoYXR0cnMgIT09IG51bGwpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVCbG9ja1BhcmFtc01hcHBpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBfcGFyYW0gPSBjb2RlQmxvY2tQYXJhbXNNYXBwaW5nW2ldOyAvLyBTa2lwIHVud2FudGVkIHBhcmFtZXRlcnNcblxuICAgICAgaWYgKF9wYXJhbSA9PT0gbnVsbCkgY29udGludWU7XG4gICAgICB2YXIgbG9jYXRpb24gPSBhdHRycy5pbmRleE9mKF9wYXJhbSk7IC8vIFBhcnNlIHRoZSBhdHRyaWJ1dGVzIHdlIGtub3dcblxuICAgICAgaWYgKGxvY2F0aW9uID4gLTEpIHtcbiAgICAgICAgdmFyIGJlZ2luID0gbG9jYXRpb24gKyBfcGFyYW0ubGVuZ3RoO1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gYXR0cnMuc2xpY2UoYmVnaW4pO1xuICAgICAgICB2YXIgbGVuZ3RoID0gcmVtYWluaW5nLmluZGV4T2YoJyAnKTtcbiAgICAgICAgdmFyIHZhbHVlID0gbGVuZ3RoID4gLTEgPyBhdHRycy5zbGljZShiZWdpbiwgYmVnaW4gKyBsZW5ndGgpIDogcmVtYWluaW5nOyAvLyBSZW1vdmUgc3RyaW5nLWRlbGltaXRlcnNcblxuICAgICAgICBpZiAodmFsdWUuc3RhcnRzV2l0aCgnXCInKSAmJiB2YWx1ZS5lbmRzV2l0aCgnXCInKSB8fCB2YWx1ZS5zdGFydHNXaXRoKFwiJ1wiKSAmJiB2YWx1ZS5lbmRzV2l0aChcIidcIikpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEsIC0xKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbENvZGVCbG9ja1BhcmFtc1tpXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBJZiB3ZSBtYXRjaGVkIHNvbWV0aGluZywgcmV0dXJuIG9wdGlvbmFsIGFyZ3VtZW50c1xuICAvLyBOb3RlIHRoYXQgd2UgZG8gc3RvcCBzZXJpYWxpemF0aW9uIG9uIGEgY2hhaW4gb2YgZW1wdHkgYXJndW1lbnRzXG5cblxuICB2YXIgbWF0Y2hlZCA9IGxvY2FsQ29kZUJsb2NrUGFyYW1zLnJlZHVjZShmdW5jdGlvbiAoYSwgdiwgaSkge1xuICAgIHJldHVybiB2ICE9PSAnJyA/IGkgOiBhO1xuICB9LCAtMSkgKyAxO1xuICB2YXIgcGFyYW0gPSBtYXRjaGVkID4gMCA/IFwiW1wiLmNvbmNhdChsb2NhbENvZGVCbG9ja1BhcmFtcy5zbGljZSgwLCBtYXRjaGVkKS5qb2luKCddWycpLCBcIl1cIikgOiAnJztcbiAgcmV0dXJuIFwiXFxcXGJlZ2lue0NvZGVCbG9ja31cIi5jb25jYXQocGFyYW0sIFwie1wiKS5jb25jYXQobGFuZywgXCJ9XFxuXCIpLmNvbmNhdChjb250ZW50LCBcIlxcblxcXFxlbmR7Q29kZUJsb2NrfVxcblxcblwiKTtcbn07XG4vKiBTdHJpbmdpZnkgYSBjb2RlIGBub2RlYC4gKi9cblxuXG5mdW5jdGlvbiBjb2RlKGN0eCwgbm9kZSkge1xuICB2YXIgbWFjcm8gPSBjdHguY29kZSB8fCBkZWZhdWx0TWFjcm87XG4gIHJldHVybiBcIlwiLmNvbmNhdChtYWNybyhub2RlLnZhbHVlLCBub2RlLmxhbmcsIG5vZGUubWV0YSwgbm9kZSkpO1xufVxuXG5jb2RlLm1hY3JvID0gZGVmYXVsdE1hY3JvOyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb247XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oY3R4LCBpZGVudGlmaWVyLCB1cmwsIHRpdGxlKSB7XG4gIHZhciBub2RlID0ge1xuICAgIGNoaWxkcmVuOiBbe1xuICAgICAgdHlwZTogJ2xpbmsnLFxuICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICB2YWx1ZTogdXJsXG4gICAgICB9XVxuICAgIH1dXG4gIH07XG5cbiAgdmFyIGxpbmsgPSByZXF1aXJlKCcuLi9hbGwnKShjdHgsIG5vZGUpO1xuXG4gIHJldHVybiBcIlxcXFxmb290bm90ZXtcXFxcbGFiZWx7XCIuY29uY2F0KGlkZW50aWZpZXIsIFwifVwiKS5jb25jYXQobGluaywgXCJ9XCIpO1xufTtcblxuZnVuY3Rpb24gZGVmaW5pdGlvbihjdHgsIG5vZGUpIHtcbiAgdmFyIG1hY3JvID0gY3R4LmRlZmluaXRpb24gPyBjdHguZGVmaW5pdGlvbiA6IGRlZmF1bHRNYWNybztcbiAgcmV0dXJuIG1hY3JvKGN0eCwgbm9kZS5pZGVudGlmaWVyLCBub2RlLnVybCwgbm9kZS50aXRsZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRPRE86IG1ha2UgaXQgY3VzdG9taXphYmxlXG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gZGVsZXRlTm9kZTtcbi8qIFN0cmluZ2lmeSBhIGRlbGV0ZSBgbm9kZWAuICovXG5cbmZ1bmN0aW9uIGRlbGV0ZU5vZGUoY3R4LCBub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gIHZhciBjb250ZW50cyA9IHJlcXVpcmUoJy4uL2FsbCcpKGN0eCwgbm9kZSk7XG5cbiAgcmV0dXJuIFwiXFxcXHNvdXR7XCIuY29uY2F0KGNvbnRlbnRzLCBcIn1cIik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIFRPRE86IG1ha2UgaXQgY3VzdG9taXphYmxlXG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gZW1waGFzaXM7XG4vKiBTdHJpbmdpZnkgYW4gZW1waGFzaXMgYG5vZGVgLiAqL1xuXG5mdW5jdGlvbiBlbXBoYXNpcyhjdHgsIG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgdmFyIGNvbnRlbnRzID0gcmVxdWlyZSgnLi4vYWxsJykoY3R4LCBub2RlKTtcblxuICByZXR1cm4gXCJcXFxcdGV4dGl0e1wiLmNvbmNhdChjb250ZW50cywgXCJ9XCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBFeHBvc2UuICovXG5tb2R1bGUuZXhwb3J0cyA9IG5vdGVzO1xuXG52YXIgZGVmYXVsdE1hY3JvID0gZnVuY3Rpb24gZGVmYXVsdE1hY3JvKGlkZW50aWZpZXIsIHRleHQsIHByb3RlY3QpIHtcbiAgdmFyIGZvb3Rub3RlID0gXCJcXFxcZm9vdG5vdGVbXCIuY29uY2F0KGlkZW50aWZpZXIsIFwiXXtcXFxcbGFiZWx7Zm9vdG5vdGU6XCIpLmNvbmNhdChpZGVudGlmaWVyLCBcIn0gXCIpLmNvbmNhdCh0ZXh0LCBcIn1cIik7XG5cbiAgaWYgKHByb3RlY3QpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoZm9vdG5vdGUsIFwiXFxcXHByb3RlY3RcIik7XG4gIH1cblxuICByZXR1cm4gZm9vdG5vdGU7XG59O1xuXG5mdW5jdGlvbiBhdXRvSWQobm9kZSkge1xuICB2YXIgX25vZGUkcG9zaXRpb24kc3RhcnQgPSBub2RlLnBvc2l0aW9uLnN0YXJ0LFxuICAgICAgbGluZSA9IF9ub2RlJHBvc2l0aW9uJHN0YXJ0LmxpbmUsXG4gICAgICBjb2x1bW4gPSBfbm9kZSRwb3NpdGlvbiRzdGFydC5jb2x1bW4sXG4gICAgICBvZmZzZXQgPSBfbm9kZSRwb3NpdGlvbiRzdGFydC5vZmZzZXQ7XG4gIHJldHVybiBcImxcIi5jb25jYXQobGluZSwgXCJjXCIpLmNvbmNhdChjb2x1bW4sIFwib1wiKS5jb25jYXQob2Zmc2V0KTtcbn1cbi8qIFN0cmluZ2lmeSBhIGZvb3Rub3RlIGBub2RlYC4gKi9cblxuXG5mdW5jdGlvbiBub3RlcyhjdHgsIG5vZGUsIF9pbmRleCwgcGFyZW50KSB7XG4gIHZhciBtYWNybyA9IGN0eC5mb290bm90ZSB8fCBkZWZhdWx0TWFjcm87XG4gIHZhciBwcm90ZWN0ID0gISFub2RlLmluSGVhZGluZztcbiAgdmFyIGlkZW50aWZpZXIgPSBhdXRvSWQobm9kZSk7XG4gIHJldHVybiBtYWNybyhpZGVudGlmaWVyLCByZXF1aXJlKCcuLi9hbGwnKShjdHgsIG5vZGUpLnRyaW0oKSwgcHJvdGVjdCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gbm90ZXM7XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oaWRlbnRpZmllciwgdGV4dCwgcHJvdGVjdCkge1xuICB2YXIgZm9vdG5vdGUgPSBcIlxcXFxmb290bm90ZXRleHRbXCIuY29uY2F0KGlkZW50aWZpZXIsIFwiXXtcXFxcbGFiZWx7Zm9vdG5vdGU6XCIpLmNvbmNhdChpZGVudGlmaWVyLCBcIn0gXCIpLmNvbmNhdCh0ZXh0LCBcIn1cIik7XG5cbiAgaWYgKHByb3RlY3QpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoZm9vdG5vdGUsIFwiXFxcXHByb3RlY3RcIik7XG4gIH1cblxuICByZXR1cm4gZm9vdG5vdGU7XG59O1xuXG5mdW5jdGlvbiBub3RlcyhjdHgsIG5vZGUpIHtcbiAgdmFyIG1hY3JvID0gY3R4LmZvb3Rub3RlRGVmaW5pdGlvbiB8fCBkZWZhdWx0TWFjcm87XG4gIHZhciBwcm90ZWN0ID0gISFub2RlLmluSGVhZGluZztcbiAgcmV0dXJuIG1hY3JvKG5vZGUuaWRlbnRpZmllciwgcmVxdWlyZSgnLi4vYWxsJykoY3R4LCBub2RlLCBwcm90ZWN0KS50cmltKCkpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vdGVzO1xuXG52YXIgZGVmYXVsdE1hY3JvID0gZnVuY3Rpb24gZGVmYXVsdE1hY3JvKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIFwiXFxcXHRleHRzdXBlcnNjcmlwdHtcXFxccmVme2Zvb3Rub3RlOlwiLmNvbmNhdChpZGVudGlmaWVyLCBcIn19XCIpO1xufTtcblxuZnVuY3Rpb24gbm90ZXMoY3R4LCBub2RlKSB7XG4gIHZhciBtYWNybyA9IGN0eC5mb290bm90ZVJlZmVyZW5jZSB8fCBkZWZhdWx0TWFjcm87XG4gIHJldHVybiBtYWNybyhub2RlLmlkZW50aWZpZXIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBFeHBvc2UuICovXG5tb2R1bGUuZXhwb3J0cyA9IGhlYWRpbmc7XG52YXIgZGVmYXVsdEhlYWRpbmdzID0gW2Z1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIFwiXFxcXHBhcnR7XCIuY29uY2F0KHZhbCwgXCJ9XFxuXCIpO1xufSwgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gXCJcXFxcY2hhcHRlcntcIi5jb25jYXQodmFsLCBcIn1cXG5cIik7XG59LCBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiBcIlxcXFxzZWN0aW9ue1wiLmNvbmNhdCh2YWwsIFwifVxcblwiKTtcbn0sIGZ1bmN0aW9uICh2YWwpIHtcbiAgcmV0dXJuIFwiXFxcXHN1YnNlY3Rpb257XCIuY29uY2F0KHZhbCwgXCJ9XFxuXCIpO1xufSwgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gXCJcXFxcc3Vic3Vic2VjdGlvbntcIi5jb25jYXQodmFsLCBcIn1cXG5cIik7XG59LCBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiBcIlxcXFxwYXJhZ3JhcGh7XCIuY29uY2F0KHZhbCwgXCJ9XFxuXCIpO1xufSwgZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gXCJcXFxcc3VicGFyYWdhcGh7XCIuY29uY2F0KHZhbCwgXCJ9XFxuXCIpO1xufV07XG4vKiBTdHJpbmdpZnkgYSBoZWFkaW5nIGBub2RlYC5cbiAqL1xuXG5mdW5jdGlvbiBoZWFkaW5nKGN0eCwgbm9kZSkge1xuICB2YXIgZGVwdGggPSBub2RlLmRlcHRoO1xuXG4gIHZhciBjb250ZW50ID0gcmVxdWlyZSgnLi4vYWxsJykoY3R4LCBub2RlKTtcblxuICB2YXIgaGVhZGluZ3MgPSBjdHguaGVhZGluZ3MgfHwgZGVmYXVsdEhlYWRpbmdzO1xuICB2YXIgZm4gPSBoZWFkaW5nc1tub2RlLmRlcHRoIC0gMV07XG5cbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21waWxlIGhlYWRpbmcgb2YgZGVwdGggXCIuY29uY2F0KGRlcHRoLCBcIjogbm90IGEgZnVuY3Rpb25cIikpO1xuICB9XG5cbiAgcmV0dXJuIGZuKGNvbnRlbnQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBUT0RPOiBtYWtlIGl0IGN1c3RvbWl6YWJsZVxuXG4vKiBFeHBvc2UuICovXG5tb2R1bGUuZXhwb3J0cyA9IGh0bWw7XG4vKiBTdHJpbmdpZnkgYSBodG1sIGBub2RlYC4gKi9cblxuZnVuY3Rpb24gaHRtbChjdHgsIG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgcmV0dXJuIG5vZGUudmFsdWU7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIEV4cG9zZS4gKi9cbm1vZHVsZS5leHBvcnRzID0gaW1hZ2U7XG5cbnZhciBkZWZhdWx0SW5saW5lTWF0Y2hlciA9IGZ1bmN0aW9uIGRlZmF1bHRJbmxpbmVNYXRjaGVyKG5vZGUsIHBhcmVudCkge1xuICByZXR1cm4gcGFyZW50LnR5cGUgPT09ICdwYXJhZ3JhcGgnICYmIHBhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxIHx8IHBhcmVudC50eXBlID09PSAnaGVhZGluZyc7XG59O1xuXG52YXIgZGVmYXVsdE1hY3JvID0gZnVuY3Rpb24gZGVmYXVsdE1hY3JvKG5vZGUpIHtcbiAgLypcbiAgTm90ZSB0aGF0IE1EQVNUIGBJbWFnZWAgbm9kZXMgZG9uJ3QgaGF2ZSBhIGB3aWR0aGAgcHJvcGVydHkuXG4gIFlvdSBtaWdodCBzdGlsbCB3YW50IHRvIHNwZWNpZnkgYSB3aWR0aCBzaW5jZSBcXGluY2x1ZGVncmFwaGljcyBoYW5kbGVzIGl0LlxuICAqL1xuICB2YXIgd2lkdGggPSBub2RlLndpZHRoID8gXCJbd2lkdGg9XCIuY29uY2F0KG5vZGUud2lkdGgsIFwiXVwiKSA6ICcnO1xuICByZXR1cm4gXCJcXFxcaW5jbHVkZWdyYXBoaWNzXCIuY29uY2F0KHdpZHRoLCBcIntcIikuY29uY2F0KG5vZGUudXJsLCBcIn1cIik7XG59O1xuXG52YXIgZGVmYXVsdElubGluZSA9IGRlZmF1bHRNYWNybztcblxuZnVuY3Rpb24gaW1hZ2UoY3R4LCBub2RlLCBfLCBwYXJlbnQpIHtcbiAgdmFyIG9wdGlvbnMgPSBjdHguaW1hZ2UgfHwge307XG4gIC8qXG4gIExhVGVYIGNhbm5vdCBoYW5kbGUgcmVtb3RlIGltYWdlcywgb25seSBsb2NhbCBvbmVzLlxuICBcXGluY2x1ZGVncmFwaGljcyBjcmFzaGVzIHdpdGggZmlsZW5hbWVzIHRoYXQgY29udGFpbiBtb3JlIHRoYW4gb25lIGAuYCxcbiAgdGhlIHdvcmthcm91bmQgaXMgXFxpbmNsdWRlZ3JhcGhpY3N7L3BhdGgvdG8ve2ltYWdlLmZvb30uanBnfVxuICAqL1xuXG4gIGlmIChub2RlLnVybCkge1xuICAgIHZhciBwYXRoUGFydHMgPSBub2RlLnVybC5zcGxpdCgnLycpO1xuICAgIHZhciBmaWxlbmFtZSA9IHBhdGhQYXJ0cy5wb3AoKTtcblxuICAgIGlmIChmaWxlbmFtZS5pbmNsdWRlcygnLicpKSB7XG4gICAgICB2YXIgZmlsZW5hbWVQYXJ0cyA9IGZpbGVuYW1lLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgZXh0ZW5zaW9uID0gZmlsZW5hbWVQYXJ0cy5wb3AoKTtcbiAgICAgIHZhciBiYXNlbmFtZSA9IGZpbGVuYW1lUGFydHMuam9pbignLicpO1xuICAgICAgdmFyIHNhZmVCYXNlbmFtZSA9IGJhc2VuYW1lLmluY2x1ZGVzKCcuJykgPyBcIntcIi5jb25jYXQoYmFzZW5hbWUsIFwifS5cIikuY29uY2F0KGV4dGVuc2lvbikgOiBcIlwiLmNvbmNhdChiYXNlbmFtZSwgXCIuXCIpLmNvbmNhdChleHRlbnNpb24pO1xuICAgICAgcGF0aFBhcnRzLnB1c2goc2FmZUJhc2VuYW1lKTtcbiAgICAgIG5vZGUudXJsID0gXCJcIi5jb25jYXQocGF0aFBhcnRzLmpvaW4oJy8nKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1hY3JvID0gb3B0aW9ucy5pbWFnZSA/IG9wdGlvbnMuaW1hZ2UgOiBkZWZhdWx0TWFjcm87XG4gIHZhciBpbmxpbmVNYXRjaGVyID0gb3B0aW9ucy5pbmxpbmVNYXRjaGVyID8gb3B0aW9ucy5pbmxpbmVNYXRjaGVyIDogZGVmYXVsdElubGluZU1hdGNoZXI7XG5cbiAgaWYgKGlubGluZU1hdGNoZXIobm9kZSwgcGFyZW50KSkge1xuICAgIG1hY3JvID0gb3B0aW9ucy5pbmxpbmVJbWFnZSA/IG9wdGlvbnMuaW5saW5lSW1hZ2UgOiBkZWZhdWx0SW5saW5lO1xuICB9XG5cbiAgcmV0dXJuIG1hY3JvKG5vZGUpO1xufSIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxhcHNlXG5cbi8vIGBjb2xsYXBzZSgnIFxcdFxcbmJhciBcXG5iYXpcXHQnKSAvLyAnIGJhciBiYXogJ2BcbmZ1bmN0aW9uIGNvbGxhcHNlKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1xccysvZywgJyAnKVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIERlcGVuZGVuY2llcy4gKi9cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcbi8qIEV4cG9zZS4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGVuY29kZTtcbmVuY29kZS5lc2NhcGUgPSBlc2NhcGU7XG4vKiBMaXN0IG9mIGVuZm9yY2VkIGVzY2FwZXMuICovXG5cbnZhciBkZWZhdWx0RXNjYXBlcyA9IHtcbiAgJyMnOiAnXFxcXCMnLFxuICAnJCc6ICdcXFxcJCcsXG4gICclJzogJ1xcXFwlJyxcbiAgJyYnOiAnXFxcXCYnLFxuICAnXFxcXCc6ICdcXFxcdGV4dGJhY2tzbGFzaHt9JyxcbiAgJ14nOiAnXFxcXHRleHRhc2NpaWNpcmN1bXt9JyxcbiAgJ18nOiAnXFxcXF8nLFxuICAneyc6ICdcXFxceycsXG4gICd9JzogJ1xcXFx9JyxcbiAgJ34nOiAnXFxcXHRleHRhc2NpaXRpbGRle30nXG59O1xuLyogRW5jb2RlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBgdmFsdWVgLiAqL1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsdWUpIHtcbiAgdmFyIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgZXNjYXBlcyA9IHh0ZW5kKGRlZmF1bHRFc2NhcGVzLCBvcHRzKTtcbiAgdmFyIHNldCA9IHRvRXhwcmVzc2lvbihPYmplY3Qua2V5cyhlc2NhcGVzKSk7XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShzZXQsIGZ1bmN0aW9uIChfY2hhciwgcG9zLCB2YWwpIHtcbiAgICByZXR1cm4gb25lKF9jaGFyLCB2YWwuY2hhckF0KHBvcyArIDEpLCBlc2NhcGVzKTtcbiAgfSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qIEVuY29kZSBgY2hhcmAgYWNjb3JkaW5nIHRvIGBvcHRpb25zYC4gKi9cblxuXG5mdW5jdGlvbiBvbmUoX2NoYXIyLCBuZXh0LCBlc2NhcGVzKSB7XG4gIGlmIChoYXMoZXNjYXBlcywgX2NoYXIyKSkge1xuICAgIHJldHVybiBlc2NhcGVzW19jaGFyMl07XG4gIH1cblxuICByZXR1cm4gX2NoYXIyO1xufVxuLyogQ3JlYXRlIGFuIGV4cHJlc3Npb24gZm9yIGBjaGFyYWN0ZXJzYC4gKi9cblxuXG5mdW5jdGlvbiB0b0V4cHJlc3Npb24oY2hhcmFjdGVycykge1xuICB2YXIgcGF0dGVybiA9IGNoYXJhY3RlcnMubWFwKGVzY2FwZVJlZ0V4cCkuam9pbignfCcpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIltcIi5jb25jYXQocGF0dGVybiwgXCJdXCIpLCAnZycpO1xufVxuXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvWy1bXFxdL3t9KCkqKz8uXFxcXF4kfF0vZywgJ1xcXFwkJicpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgY29sbGFwc2UgPSByZXF1aXJlKCdjb2xsYXBzZS13aGl0ZS1zcGFjZScpO1xuXG52YXIgZXNjYXBlID0gcmVxdWlyZSgnLi4vZXNjYXBlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlubGluZUNvZGUoY3R4LCBub2RlKSB7XG4gIHZhciBmaW5hbENvZGUgPSBlc2NhcGUoY29sbGFwc2Uobm9kZS52YWx1ZSkpO1xuICByZXR1cm4gXCJcXFxcdGV4dHR0e1wiLmNvbmNhdChmaW5hbENvZGUsIFwifVwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIERlcGVuZGVuY2llcy4gKi9cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIGVzY2FwZSA9IHJlcXVpcmUoJy4uL2VzY2FwZXInKTtcbi8qIEV4cG9zZS4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpbms7XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oZGlzcGxheVRleHQsIHVybCwgdGl0bGUpIHtcbiAgcmV0dXJuIFwiXFxcXGV4dGVybmFsTGlua3tcIi5jb25jYXQoZGlzcGxheVRleHQsIFwifXtcIikuY29uY2F0KHVybCwgXCJ9XCIpO1xufTtcbi8qIFN0cmluZ2lmeSBhIGxpbmsgYG5vZGVgLlxuKi9cblxuXG5mdW5jdGlvbiBsaW5rKGN0eCwgbm9kZSkge1xuICBpZiAoIW5vZGUudXJsKSByZXR1cm4gJyc7XG4gIHZhciBjb25maWcgPSBjdHgubGluayB8fCB7fTtcbiAgdmFyIG1hY3JvID0gaGFzKGNvbmZpZywgJ21hY3JvJykgPyBjb25maWcubWFjcm8gOiBkZWZhdWx0TWFjcm87XG4gIHZhciBwcmVmaXggPSBoYXMoY29uZmlnLCAncHJlZml4JykgPyBjb25maWcucHJlZml4IDogJyc7XG4gIHZhciB1cmwgPSBlc2NhcGUobm9kZS51cmwuc3RhcnRzV2l0aCgnLycpID8gcHJlZml4ICsgbm9kZS51cmwgOiBub2RlLnVybCk7XG4gIHJldHVybiBtYWNybyhyZXF1aXJlKCcuLi9hbGwnKShjdHgsIG5vZGUpLCB1cmwsIG5vZGUudGl0bGUpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxpbmtSZWZlcmVuY2U7XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8ocmVmZXJlbmNlLCBpbm5lcikge1xuICByZXR1cm4gXCJcXFxcaHlwZXJyZWZbXCIuY29uY2F0KHJlZmVyZW5jZSwgXCJde1wiKS5jb25jYXQoaW5uZXIsIFwifVwiKTtcbn07XG5cbmZ1bmN0aW9uIGxpbmtSZWZlcmVuY2UoY3R4LCBub2RlKSB7XG4gIHZhciBtYWNybyA9IGN0eC5saW5rUmVmZXJlbmNlID8gY3R4LmxpbmtSZWZlcmVuY2UgOiBkZWZhdWx0TWFjcm87XG5cbiAgdmFyIGlubmVyVGV4dCA9IHJlcXVpcmUoJy4uL2FsbCcpKGN0eCwgbm9kZSk7XG5cbiAgaWYgKCFjdHguZGVmaW5pdGlvbnMobm9kZS5pZGVudGlmaWVyKSkgcmV0dXJuIFwiW1wiLmNvbmNhdChpbm5lclRleHQsIFwiXVwiKTtcbiAgcmV0dXJuIG1hY3JvKG5vZGUuaWRlbnRpZmllciwgaW5uZXJUZXh0KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3Q7XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oaW5uZXJUZXh0LCBpc09yZGVyZWQpIHtcbiAgaWYgKGlzT3JkZXJlZCkge1xuICAgIHJldHVybiBcIlxcXFxiZWdpbntlbnVtZXJhdGV9XFxuXCIuY29uY2F0KGlubmVyVGV4dCwgXCJcXFxcZW5ke2VudW1lcmF0ZX1cXG5cIik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXFxcXGJlZ2lue2l0ZW1pemV9XFxuXCIuY29uY2F0KGlubmVyVGV4dCwgXCJcXFxcZW5ke2l0ZW1pemV9XFxuXCIpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBsaXN0KGN0eCwgbm9kZSkge1xuICB2YXIgcmViYmVyTGlzdCA9IGhhcyhjdHgsICdsaXN0JykgPyBjdHgubGlzdCA6IGRlZmF1bHRNYWNybztcblxuICB2YXIgaXRlbWl6ZWQgPSByZXF1aXJlKCcuLi9hbGwnKShjdHgsIG5vZGUpO1xuXG4gIHJldHVybiByZWJiZXJMaXN0KGl0ZW1pemVkLCBub2RlLm9yZGVyZWQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oaW5uZXJUZXh0KSB7XG4gIHJldHVybiBcIlxcXFxpdGVtXFxcXHJlbGF4IFwiLmNvbmNhdChpbm5lclRleHQsIFwiXFxuXCIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0SXRlbTtcblxuZnVuY3Rpb24gbGlzdEl0ZW0oY3R4LCBub2RlKSB7XG4gIHZhciByZWJiZXJMaXN0SXRlbSA9IGhhcyhjdHgsICdsaXN0SXRlbScpID8gY3R4Lmxpc3RJdGVtIDogZGVmYXVsdE1hY3JvO1xuICByZXR1cm4gcmViYmVyTGlzdEl0ZW0ocmVxdWlyZSgnLi4vYWxsJykoY3R4LCBub2RlKS50cmltKCkpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBFeHBvc2UuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhcmFncmFwaDtcbi8qIFN0cmluZ2lmeSBhIHBhcmFncmFwaCBgbm9kZWAuXG4gKi9cblxuZnVuY3Rpb24gcGFyYWdyYXBoKGN0eCwgbm9kZSkge1xuICB2YXIgY29udGVudHMgPSByZXF1aXJlKCcuLi9hbGwnKShjdHgsIG5vZGUpO1xuXG4gIHJldHVybiBcIlwiLmNvbmNhdChjb250ZW50cy50cmltKCksIFwiXFxuXFxuXCIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBEZXBlbmRlbmNpZXMuICovXG52YXIgb25lID0gcmVxdWlyZSgnLi4vb25lJyk7XG4vKiBFeHBvc2UuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuLyogU3RyaW5naWZ5IGEgdGV4dCBgbm9kZWAuICovXG5cbmZ1bmN0aW9uIHJvb3QoY3R4LCBub2RlLCBfLCBwYXJlbnQpIHtcbiAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgaWYgKCFjaGlsZHJlbikgcmV0dXJuICcnO1xuICB2YXIgcHJldmlvdXM7XG4gIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24gKG91dHB1dCwgY2hpbGQsIGluZGV4KSB7XG4gICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gcHJldmlvdXMudHlwZSAmJiBwcmV2aW91cy50eXBlID09PSAnbGlzdCcpIHtcbiAgICAgICAgb3V0cHV0ICs9IHByZXZpb3VzLm9yZGVyZWQgPT09IGNoaWxkLm9yZGVyZWQgPyAnXFxuXFxuXFxuJyA6ICdcXG5cXG4nO1xuICAgICAgfSBlbHNlIGlmIChwcmV2aW91cy50eXBlID09PSAnbGlzdCcgJiYgY2hpbGQudHlwZSA9PT0gJ2NvZGUnICYmICFjaGlsZC5sYW5nKSB7XG4gICAgICAgIG91dHB1dCArPSAnXFxuXFxuXFxuJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dCArPSAnXFxuXFxuJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBvdXRwdXQgKz0gb25lKGN0eCwgY2hpbGQsIGluZGV4LCBub2RlLCBub2RlKTtcbiAgICBwcmV2aW91cyA9IGNoaWxkO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sICcnKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gVE9ETzogbWFrZSBpdCBjdXN0b21pemFibGVcblxuLyogRXhwb3NlLiAqL1xubW9kdWxlLmV4cG9ydHMgPSBzdHJvbmc7XG4vKiBTdHJpbmdpZnkgYSBzdHJvbmcgYG5vZGVgLiAqL1xuXG5mdW5jdGlvbiBzdHJvbmcoY3R4LCBub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gIHZhciBjb250ZW50cyA9IHJlcXVpcmUoJy4uL2FsbCcpKGN0eCwgbm9kZSk7XG5cbiAgcmV0dXJuIFwiXFxcXHRleHRiZntcIi5jb25jYXQoY29udGVudHMsIFwifVwiKTtcbn0iLCJ2YXIgY2xvbmUgPSAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9pbnN0YW5jZW9mKG9iaiwgdHlwZSkge1xuICByZXR1cm4gdHlwZSAhPSBudWxsICYmIG9iaiBpbnN0YW5jZW9mIHR5cGU7XG59XG5cbnZhciBuYXRpdmVNYXA7XG50cnkge1xuICBuYXRpdmVNYXAgPSBNYXA7XG59IGNhdGNoKF8pIHtcbiAgLy8gbWF5YmUgYSByZWZlcmVuY2UgZXJyb3IgYmVjYXVzZSBubyBgTWFwYC4gR2l2ZSBpdCBhIGR1bW15IHZhbHVlIHRoYXQgbm9cbiAgLy8gdmFsdWUgd2lsbCBldmVyIGJlIGFuIGluc3RhbmNlb2YuXG4gIG5hdGl2ZU1hcCA9IGZ1bmN0aW9uKCkge307XG59XG5cbnZhciBuYXRpdmVTZXQ7XG50cnkge1xuICBuYXRpdmVTZXQgPSBTZXQ7XG59IGNhdGNoKF8pIHtcbiAgbmF0aXZlU2V0ID0gZnVuY3Rpb24oKSB7fTtcbn1cblxudmFyIG5hdGl2ZVByb21pc2U7XG50cnkge1xuICBuYXRpdmVQcm9taXNlID0gUHJvbWlzZTtcbn0gY2F0Y2goXykge1xuICBuYXRpdmVQcm9taXNlID0gZnVuY3Rpb24oKSB7fTtcbn1cblxuLyoqXG4gKiBDbG9uZXMgKGNvcGllcykgYW4gT2JqZWN0IHVzaW5nIGRlZXAgY29weWluZy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHN1cHBvcnRzIGNpcmN1bGFyIHJlZmVyZW5jZXMgYnkgZGVmYXVsdCwgYnV0IGlmIHlvdSBhcmUgY2VydGFpblxuICogdGhlcmUgYXJlIG5vIGNpcmN1bGFyIHJlZmVyZW5jZXMgaW4geW91ciBvYmplY3QsIHlvdSBjYW4gc2F2ZSBzb21lIENQVSB0aW1lXG4gKiBieSBjYWxsaW5nIGNsb25lKG9iaiwgZmFsc2UpLlxuICpcbiAqIENhdXRpb246IGlmIGBjaXJjdWxhcmAgaXMgZmFsc2UgYW5kIGBwYXJlbnRgIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXMsXG4gKiB5b3VyIHByb2dyYW0gbWF5IGVudGVyIGFuIGluZmluaXRlIGxvb3AgYW5kIGNyYXNoLlxuICpcbiAqIEBwYXJhbSBgcGFyZW50YCAtIHRoZSBvYmplY3QgdG8gYmUgY2xvbmVkXG4gKiBAcGFyYW0gYGNpcmN1bGFyYCAtIHNldCB0byB0cnVlIGlmIHRoZSBvYmplY3QgdG8gYmUgY2xvbmVkIG1heSBjb250YWluXG4gKiAgICBjaXJjdWxhciByZWZlcmVuY2VzLiAob3B0aW9uYWwgLSB0cnVlIGJ5IGRlZmF1bHQpXG4gKiBAcGFyYW0gYGRlcHRoYCAtIHNldCB0byBhIG51bWJlciBpZiB0aGUgb2JqZWN0IGlzIG9ubHkgdG8gYmUgY2xvbmVkIHRvXG4gKiAgICBhIHBhcnRpY3VsYXIgZGVwdGguIChvcHRpb25hbCAtIGRlZmF1bHRzIHRvIEluZmluaXR5KVxuICogQHBhcmFtIGBwcm90b3R5cGVgIC0gc2V0cyB0aGUgcHJvdG90eXBlIHRvIGJlIHVzZWQgd2hlbiBjbG9uaW5nIGFuIG9iamVjdC5cbiAqICAgIChvcHRpb25hbCAtIGRlZmF1bHRzIHRvIHBhcmVudCBwcm90b3R5cGUpLlxuICogQHBhcmFtIGBpbmNsdWRlTm9uRW51bWVyYWJsZWAgLSBzZXQgdG8gdHJ1ZSBpZiB0aGUgbm9uLWVudW1lcmFibGUgcHJvcGVydGllc1xuICogICAgc2hvdWxkIGJlIGNsb25lZCBhcyB3ZWxsLiBOb24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9uIHRoZSBwcm90b3R5cGVcbiAqICAgIGNoYWluIHdpbGwgYmUgaWdub3JlZC4gKG9wdGlvbmFsIC0gZmFsc2UgYnkgZGVmYXVsdClcbiovXG5mdW5jdGlvbiBjbG9uZShwYXJlbnQsIGNpcmN1bGFyLCBkZXB0aCwgcHJvdG90eXBlLCBpbmNsdWRlTm9uRW51bWVyYWJsZSkge1xuICBpZiAodHlwZW9mIGNpcmN1bGFyID09PSAnb2JqZWN0Jykge1xuICAgIGRlcHRoID0gY2lyY3VsYXIuZGVwdGg7XG4gICAgcHJvdG90eXBlID0gY2lyY3VsYXIucHJvdG90eXBlO1xuICAgIGluY2x1ZGVOb25FbnVtZXJhYmxlID0gY2lyY3VsYXIuaW5jbHVkZU5vbkVudW1lcmFibGU7XG4gICAgY2lyY3VsYXIgPSBjaXJjdWxhci5jaXJjdWxhcjtcbiAgfVxuICAvLyBtYWludGFpbiB0d28gYXJyYXlzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLCB3aGVyZSBjb3JyZXNwb25kaW5nIHBhcmVudHNcbiAgLy8gYW5kIGNoaWxkcmVuIGhhdmUgdGhlIHNhbWUgaW5kZXhcbiAgdmFyIGFsbFBhcmVudHMgPSBbXTtcbiAgdmFyIGFsbENoaWxkcmVuID0gW107XG5cbiAgdmFyIHVzZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgIT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKHR5cGVvZiBjaXJjdWxhciA9PSAndW5kZWZpbmVkJylcbiAgICBjaXJjdWxhciA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBkZXB0aCA9PSAndW5kZWZpbmVkJylcbiAgICBkZXB0aCA9IEluZmluaXR5O1xuXG4gIC8vIHJlY3Vyc2UgdGhpcyBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNldCBhbGxQYXJlbnRzIGFuZCBhbGxDaGlsZHJlblxuICBmdW5jdGlvbiBfY2xvbmUocGFyZW50LCBkZXB0aCkge1xuICAgIC8vIGNsb25pbmcgbnVsbCBhbHdheXMgcmV0dXJucyBudWxsXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGRlcHRoID09PSAwKVxuICAgICAgcmV0dXJuIHBhcmVudDtcblxuICAgIHZhciBjaGlsZDtcbiAgICB2YXIgcHJvdG87XG4gICAgaWYgKHR5cGVvZiBwYXJlbnQgIT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlTWFwKSkge1xuICAgICAgY2hpbGQgPSBuZXcgbmF0aXZlTWFwKCk7XG4gICAgfSBlbHNlIGlmIChfaW5zdGFuY2VvZihwYXJlbnQsIG5hdGl2ZVNldCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IG5hdGl2ZVNldCgpO1xuICAgIH0gZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVQcm9taXNlKSkge1xuICAgICAgY2hpbGQgPSBuZXcgbmF0aXZlUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHBhcmVudC50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmVzb2x2ZShfY2xvbmUodmFsdWUsIGRlcHRoIC0gMSkpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZWplY3QoX2Nsb25lKGVyciwgZGVwdGggLSAxKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzQXJyYXkocGFyZW50KSkge1xuICAgICAgY2hpbGQgPSBbXTtcbiAgICB9IGVsc2UgaWYgKGNsb25lLl9faXNSZWdFeHAocGFyZW50KSkge1xuICAgICAgY2hpbGQgPSBuZXcgUmVnRXhwKHBhcmVudC5zb3VyY2UsIF9fZ2V0UmVnRXhwRmxhZ3MocGFyZW50KSk7XG4gICAgICBpZiAocGFyZW50Lmxhc3RJbmRleCkgY2hpbGQubGFzdEluZGV4ID0gcGFyZW50Lmxhc3RJbmRleDtcbiAgICB9IGVsc2UgaWYgKGNsb25lLl9faXNEYXRlKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IERhdGUocGFyZW50LmdldFRpbWUoKSk7XG4gICAgfSBlbHNlIGlmICh1c2VCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKHBhcmVudCkpIHtcbiAgICAgIGlmIChCdWZmZXIuYWxsb2NVbnNhZmUpIHtcbiAgICAgICAgLy8gTm9kZS5qcyA+PSA0LjUuMFxuICAgICAgICBjaGlsZCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShwYXJlbnQubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9sZGVyIE5vZGUuanMgdmVyc2lvbnNcbiAgICAgICAgY2hpbGQgPSBuZXcgQnVmZmVyKHBhcmVudC5sZW5ndGgpO1xuICAgICAgfVxuICAgICAgcGFyZW50LmNvcHkoY2hpbGQpO1xuICAgICAgcmV0dXJuIGNoaWxkO1xuICAgIH0gZWxzZSBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBFcnJvcikpIHtcbiAgICAgIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHByb3RvdHlwZSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwYXJlbnQpO1xuICAgICAgICBjaGlsZCA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNoaWxkID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgICBwcm90byA9IHByb3RvdHlwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgIHZhciBpbmRleCA9IGFsbFBhcmVudHMuaW5kZXhPZihwYXJlbnQpO1xuXG4gICAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGFsbENoaWxkcmVuW2luZGV4XTtcbiAgICAgIH1cbiAgICAgIGFsbFBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgICAgYWxsQ2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgfVxuXG4gICAgaWYgKF9pbnN0YW5jZW9mKHBhcmVudCwgbmF0aXZlTWFwKSkge1xuICAgICAgcGFyZW50LmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICB2YXIga2V5Q2hpbGQgPSBfY2xvbmUoa2V5LCBkZXB0aCAtIDEpO1xuICAgICAgICB2YXIgdmFsdWVDaGlsZCA9IF9jbG9uZSh2YWx1ZSwgZGVwdGggLSAxKTtcbiAgICAgICAgY2hpbGQuc2V0KGtleUNoaWxkLCB2YWx1ZUNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoX2luc3RhbmNlb2YocGFyZW50LCBuYXRpdmVTZXQpKSB7XG4gICAgICBwYXJlbnQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgZW50cnlDaGlsZCA9IF9jbG9uZSh2YWx1ZSwgZGVwdGggLSAxKTtcbiAgICAgICAgY2hpbGQuYWRkKGVudHJ5Q2hpbGQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBwYXJlbnQpIHtcbiAgICAgIHZhciBhdHRycztcbiAgICAgIGlmIChwcm90bykge1xuICAgICAgICBhdHRycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIGkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXR0cnMgJiYgYXR0cnMuc2V0ID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjaGlsZFtpXSA9IF9jbG9uZShwYXJlbnRbaV0sIGRlcHRoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhwYXJlbnQpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIERvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgY2xvbmluZyBhIHN5bWJvbCBiZWNhdXNlIGl0IGlzIGEgcHJpbWl0aXZlLFxuICAgICAgICAvLyBsaWtlIGEgbnVtYmVyIG9yIHN0cmluZy5cbiAgICAgICAgdmFyIHN5bWJvbCA9IHN5bWJvbHNbaV07XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwYXJlbnQsIHN5bWJvbCk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmVudW1lcmFibGUgJiYgIWluY2x1ZGVOb25FbnVtZXJhYmxlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRbc3ltYm9sXSA9IF9jbG9uZShwYXJlbnRbc3ltYm9sXSwgZGVwdGggLSAxKTtcbiAgICAgICAgaWYgKCFkZXNjcmlwdG9yLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGQsIHN5bWJvbCwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbmNsdWRlTm9uRW51bWVyYWJsZSkge1xuICAgICAgdmFyIGFsbFByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwYXJlbnQpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxQcm9wZXJ0eU5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBhbGxQcm9wZXJ0eU5hbWVzW2ldO1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocGFyZW50LCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICBpZiAoZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjaGlsZFtwcm9wZXJ0eU5hbWVdID0gX2Nsb25lKHBhcmVudFtwcm9wZXJ0eU5hbWVdLCBkZXB0aCAtIDEpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hpbGQsIHByb3BlcnR5TmFtZSwge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIHJldHVybiBfY2xvbmUocGFyZW50LCBkZXB0aCk7XG59XG5cbi8qKlxuICogU2ltcGxlIGZsYXQgY2xvbmUgdXNpbmcgcHJvdG90eXBlLCBhY2NlcHRzIG9ubHkgb2JqZWN0cywgdXNlZnVsbCBmb3IgcHJvcGVydHlcbiAqIG92ZXJyaWRlIG9uIEZMQVQgY29uZmlndXJhdGlvbiBvYmplY3QgKG5vIG5lc3RlZCBwcm9wcykuXG4gKlxuICogVVNFIFdJVEggQ0FVVElPTiEgVGhpcyBtYXkgbm90IGJlaGF2ZSBhcyB5b3Ugd2lzaCBpZiB5b3UgZG8gbm90IGtub3cgaG93IHRoaXNcbiAqIHdvcmtzLlxuICovXG5jbG9uZS5jbG9uZVByb3RvdHlwZSA9IGZ1bmN0aW9uIGNsb25lUHJvdG90eXBlKHBhcmVudCkge1xuICBpZiAocGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciBjID0gZnVuY3Rpb24gKCkge307XG4gIGMucHJvdG90eXBlID0gcGFyZW50O1xuICByZXR1cm4gbmV3IGMoKTtcbn07XG5cbi8vIHByaXZhdGUgdXRpbGl0eSBmdW5jdGlvbnNcblxuZnVuY3Rpb24gX19vYmpUb1N0cihvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5jbG9uZS5fX29ialRvU3RyID0gX19vYmpUb1N0cjtcblxuZnVuY3Rpb24gX19pc0RhdGUobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIF9fb2JqVG9TdHIobykgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmNsb25lLl9faXNEYXRlID0gX19pc0RhdGU7XG5cbmZ1bmN0aW9uIF9faXNBcnJheShvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmNsb25lLl9faXNBcnJheSA9IF9faXNBcnJheTtcblxuZnVuY3Rpb24gX19pc1JlZ0V4cChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5jbG9uZS5fX2lzUmVnRXhwID0gX19pc1JlZ0V4cDtcblxuZnVuY3Rpb24gX19nZXRSZWdFeHBGbGFncyhyZSkge1xuICB2YXIgZmxhZ3MgPSAnJztcbiAgaWYgKHJlLmdsb2JhbCkgZmxhZ3MgKz0gJ2cnO1xuICBpZiAocmUuaWdub3JlQ2FzZSkgZmxhZ3MgKz0gJ2knO1xuICBpZiAocmUubXVsdGlsaW5lKSBmbGFncyArPSAnbSc7XG4gIHJldHVybiBmbGFncztcbn1cbmNsb25lLl9fZ2V0UmVnRXhwRmxhZ3MgPSBfX2dldFJlZ0V4cEZsYWdzO1xuXG5yZXR1cm4gY2xvbmU7XG59KSgpO1xuXG5pZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBjbG9uZTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7IGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gfVxuXG52YXIgY2xvbmUgPSByZXF1aXJlKCdjbG9uZScpO1xuXG52YXIgb25lID0gcmVxdWlyZSgnLi4vb25lJyk7XG4vKiBFeHBvc2UuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSB0YWJsZTtcblxudmFyIGRlZmF1bHRIZWFkZXJQYXJzZSA9IGZ1bmN0aW9uIGRlZmF1bHRIZWFkZXJQYXJzZShyb3dzKSB7XG4gIHZhciBjb2x1bW5zID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KHJvd3MubWFwKGZ1bmN0aW9uIChsKSB7XG4gICAgcmV0dXJuIGwuc3BsaXQoJyYnKS5sZW5ndGg7XG4gIH0pKSk7XG4gIHZhciBjb2xIZWFkZXIgPSBcInxcIi5jb25jYXQoJ1hbLTFdfCcucmVwZWF0KGNvbHVtbnMpKTtcbiAgcmV0dXJuIGNvbEhlYWRlcjtcbn07XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oY3R4LCBub2RlKSB7XG4gIHZhciBoZWFkZXJQYXJzZSA9IGN0eC5oZWFkZXJQYXJzZSA/IGN0eC5oZWFkZXJQYXJzZSA6IGRlZmF1bHRIZWFkZXJQYXJzZTtcbiAgdmFyIHBhcnNlZCA9IG5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChuLCBpbmRleCkge1xuICAgIHJldHVybiBvbmUoY3R4LCBuLCBpbmRleCwgbm9kZSk7XG4gIH0pO1xuICB2YXIgaW5uZXIgPSBwYXJzZWQuam9pbignJyk7XG4gIHZhciBjb2xIZWFkZXIgPSBoZWFkZXJQYXJzZShwYXJzZWQpO1xuICB2YXIgc3ByZWFkQ2VsbCA9IHR5cGVvZiBjdHguc3ByZWFkQ2VsbCA9PT0gJ3N0cmluZycgPyBjdHguc3ByZWFkQ2VsbCA6ICcgc3ByZWFkIDBwdCAnO1xuICB2YXIgY2FwdGlvbiA9IG5vZGUuY2FwdGlvbiA/IFwiXFxuXFxcXGNhcHRpb25vZnt0YWJsZX17XCIuY29uY2F0KG5vZGUuY2FwdGlvbiwgXCJ9XFxuXCIpIDogJyc7XG4gIHJldHVybiBcIlxcXFxiZWdpbntsb25ndGFidX1cIi5jb25jYXQoc3ByZWFkQ2VsbCwgXCJ7XCIpLmNvbmNhdChjb2xIZWFkZXIsIFwifSBcXFxcaGxpbmVcXG5cIikuY29uY2F0KGlubmVyLCBcIlxcXFxlbmR7bG9uZ3RhYnV9XCIpLmNvbmNhdChjYXB0aW9uLCBcIlxcblwiKTtcbn07XG4vKiBTdHJpbmdpZnkgYSB0YWJsZSBgbm9kZWAuICovXG5cblxuZnVuY3Rpb24gdGFibGUoY3R4LCBub2RlKSB7XG4gIHZhciBtYWNybyA9IGN0eC50YWJsZSB8fCBkZWZhdWx0TWFjcm87XG4gIHZhciBvdmVycmlkZGVuQ3R4ID0gY2xvbmUoY3R4KTtcbiAgb3ZlcnJpZGRlbkN0eC5pbWFnZSA9IG92ZXJyaWRkZW5DdHguaW1hZ2UgPyBvdmVycmlkZGVuQ3R4LmltYWdlIDoge307XG5cbiAgb3ZlcnJpZGRlbkN0eC5pbWFnZS5pbmxpbmVNYXRjaGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHJldHVybiBtYWNybyhvdmVycmlkZGVuQ3R4LCBub2RlKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogRXhwb3NlLiAqL1xubW9kdWxlLmV4cG9ydHMgPSB0YWJsZUNlbGw7XG5cbnZhciBkZWZhdWx0TWFjcm8gPSBmdW5jdGlvbiBkZWZhdWx0TWFjcm8oY3R4LCBub2RlKSB7XG4gIHJldHVybiByZXF1aXJlKCcuLi9hbGwnKShjdHgsIG5vZGUpO1xufTtcbi8qIFN0cmluZ2lmeSBhIHRhYmxlQ2VsbCBgbm9kZWAuICovXG5cblxuZnVuY3Rpb24gdGFibGVDZWxsKGN0eCwgbm9kZSkge1xuICB2YXIgbWFjcm8gPSBjdHgudGFibGVDZWxsIHx8IGRlZmF1bHRNYWNybztcbiAgcmV0dXJuIG1hY3JvKGN0eCwgbm9kZSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIEV4cG9zZS4gKi9cbnZhciBvbmUgPSByZXF1aXJlKCcuLi9vbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB0YWJsZVJvdztcblxudmFyIGRlZmF1bHRNYWNybyA9IGZ1bmN0aW9uIGRlZmF1bHRNYWNybyhjdHgsIG5vZGUpIHtcbiAgdmFyIHBhcnNlZCA9IFtdO1xuICBub2RlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAobiwgaW5kZXgpIHtcbiAgICByZXR1cm4gcGFyc2VkLnB1c2gob25lKGN0eCwgbiwgaW5kZXgsIG5vZGUpKTtcbiAgfSk7XG4gIHZhciBsaW5lID0gcGFyc2VkLmpvaW4oJyAmICcpO1xuICByZXR1cm4gXCJcIi5jb25jYXQobGluZSwgXCIgXFxcXFxcXFwgXFxcXGhsaW5lXFxuXCIpO1xufTtcblxudmFyIGRlZmF1bHRGaXJzdExpbmVSb3dGb250ID0gXCJcXFxccm93Zm9udFtjXXtcXFxcYmZzZXJpZXN9XCI7XG52YXIgZGVmYXVsdE90aGVyTGluZVJvd0ZvbnQgPSBcIlxcXFxyb3dmb250W2xde31cIjtcbi8qIFN0cmluZ2lmeSBhIHRhYmxlUm93IGBub2RlYC4gKi9cblxuZnVuY3Rpb24gdGFibGVSb3coY3R4LCBub2RlLCBpbmRleCkge1xuICB2YXIgbWFjcm8gPSBjdHgudGFibGVSb3cgfHwgZGVmYXVsdE1hY3JvO1xuICB2YXIgZmlyc3RMaW5lUm93Rm9udCA9IGN0eC5maXJzdExpbmVSb3dGb250IHx8IGRlZmF1bHRGaXJzdExpbmVSb3dGb250O1xuICB2YXIgb3RoZXJMaW5lUm93Rm9udCA9IGN0eC5vdGhlckxpbmVSb3dGb250IHx8IGRlZmF1bHRPdGhlckxpbmVSb3dGb250O1xuXG4gIGlmIChpbmRleCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChmaXJzdExpbmVSb3dGb250LCBcIlxcblwiKS5jb25jYXQobWFjcm8oY3R4LCBub2RlKSk7XG4gIH0gZWxzZSBpZiAoaW5kZXggPT09IDEpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQob3RoZXJMaW5lUm93Rm9udCwgXCJcXG5cIikuY29uY2F0KG1hY3JvKGN0eCwgbm9kZSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBtYWNybyhjdHgsIG5vZGUpO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdHJpbUxpbmVzXG5cbnZhciB3cyA9IC9bIFxcdF0qXFxuK1sgXFx0XSovZ1xudmFyIG5ld2xpbmUgPSAnXFxuJ1xuXG5mdW5jdGlvbiB0cmltTGluZXModmFsdWUpIHtcbiAgcmV0dXJuIFN0cmluZyh2YWx1ZSkucmVwbGFjZSh3cywgbmV3bGluZSlcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBEZXBlbmRlbmNpZXMuICovXG52YXIgdHJpbUxpbmVzID0gcmVxdWlyZSgndHJpbS1saW5lcycpO1xuXG52YXIgZXNjYXBlciA9IHJlcXVpcmUoJy4uL2VzY2FwZXInKTtcbi8qIFN0cmluZ2lmeSBhIHRleHQgYG5vZGVgLiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGV4dChjdHgsIG5vZGUsIGluZGV4LCBwYXJlbnQpIHtcbiAgdmFyIHZhbHVlID0gdHJpbUxpbmVzKG5vZGUudmFsdWUpO1xuICByZXR1cm4gaXNMaXRlcmFsKHBhcmVudCkgPyB2YWx1ZSA6IGVzY2FwZXIodmFsdWUsIGN0eC5lc2NhcGVzKTtcbn07IC8vIFRPRE86IGB0YWdOYW1lYCBpc24ndCBwYXJ0IG9mIE1EQVNUIVxuXG4vKiBDaGVjayBpZiBjb250ZW50IG9mIGBub2RlYCBzaG91bGQgbm90IGJlIGVzY2FwZWQuICovXG5cblxuZnVuY3Rpb24gaXNMaXRlcmFsKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgKG5vZGUudGFnTmFtZSA9PT0gJ3NjcmlwdCcgfHwgbm9kZS50YWdOYW1lID09PSAnc3R5bGUnKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogRXhwb3NlLiAqL1xubW9kdWxlLmV4cG9ydHMgPSB0aGVtYXRpY0JyZWFrO1xuXG52YXIgZGVmYXVsdE1hY3JvID0gZnVuY3Rpb24gZGVmYXVsdE1hY3JvKCkge1xuICByZXR1cm4gJ1xcXFxob3Jpem9udGFsTGluZVxcblxcbic7XG59O1xuLyogU3RyaW5naWZ5IGEgZGVsZXRlIGBub2RlYC4gKi9cblxuXG5mdW5jdGlvbiB0aGVtYXRpY0JyZWFrKGN0eCwgbm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICB2YXIgbWFjcm8gPSBjdHgudGhlbWF0aWNCcmVhayB8fCBkZWZhdWx0TWFjcm87XG4gIHJldHVybiBtYWNybyhub2RlKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogRGVwZW5kZW5jaWVzLiAqL1xudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xuLyogRXhwb3NlLiAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gb25lO1xuLyogSGFuZGxlcnMuICovXG5cbnZhciBoYW5kbGVycyA9IHt9O1xuaGFuZGxlcnMuYmxvY2txdW90ZSA9IHJlcXVpcmUoJy4vdHlwZXMvYmxvY2txdW90ZScpO1xuaGFuZGxlcnNbXCJicmVha1wiXSA9IHJlcXVpcmUoJy4vdHlwZXMvYnJlYWsnKTtcbmhhbmRsZXJzLmNvZGUgPSByZXF1aXJlKCcuL3R5cGVzL2NvZGUnKTtcbmhhbmRsZXJzLmRlZmluaXRpb24gPSByZXF1aXJlKCcuL3R5cGVzL2RlZmluaXRpb24nKTtcbmhhbmRsZXJzW1wiZGVsZXRlXCJdID0gcmVxdWlyZSgnLi90eXBlcy9kZWxldGUnKTtcbmhhbmRsZXJzLmVtcGhhc2lzID0gcmVxdWlyZSgnLi90eXBlcy9lbXBoYXNpcycpO1xuaGFuZGxlcnMuZm9vdG5vdGUgPSByZXF1aXJlKCcuL3R5cGVzL2Zvb3Rub3RlJyk7XG5oYW5kbGVycy5mb290bm90ZURlZmluaXRpb24gPSByZXF1aXJlKCcuL3R5cGVzL2Zvb3Rub3RlRGVmaW5pdGlvbicpO1xuaGFuZGxlcnMuZm9vdG5vdGVSZWZlcmVuY2UgPSByZXF1aXJlKCcuL3R5cGVzL2Zvb3Rub3RlUmVmZXJlbmNlJyk7XG5oYW5kbGVycy5oZWFkaW5nID0gcmVxdWlyZSgnLi90eXBlcy9oZWFkaW5nJyk7XG5oYW5kbGVycy5odG1sID0gcmVxdWlyZSgnLi90eXBlcy9odG1sJyk7XG5oYW5kbGVycy5pbWFnZSA9IHJlcXVpcmUoJy4vdHlwZXMvaW1hZ2UnKTtcbmhhbmRsZXJzLmlubGluZUNvZGUgPSByZXF1aXJlKCcuL3R5cGVzL2lubGluZWNvZGUnKTtcbmhhbmRsZXJzLmxpbmsgPSByZXF1aXJlKCcuL3R5cGVzL2xpbmsnKTtcbmhhbmRsZXJzLmxpbmtSZWZlcmVuY2UgPSByZXF1aXJlKCcuL3R5cGVzL2xpbmtSZWZlcmVuY2UnKTtcbmhhbmRsZXJzLmxpc3QgPSByZXF1aXJlKCcuL3R5cGVzL2xpc3QnKTtcbmhhbmRsZXJzLmxpc3RJdGVtID0gcmVxdWlyZSgnLi90eXBlcy9saXN0SXRlbScpO1xuaGFuZGxlcnMucGFyYWdyYXBoID0gcmVxdWlyZSgnLi90eXBlcy9wYXJhZ3JhcGgnKTtcbmhhbmRsZXJzLnJvb3QgPSByZXF1aXJlKCcuL3R5cGVzL3Jvb3QnKTtcbmhhbmRsZXJzLnN0cm9uZyA9IHJlcXVpcmUoJy4vdHlwZXMvc3Ryb25nJyk7XG5oYW5kbGVycy50YWJsZSA9IHJlcXVpcmUoJy4vdHlwZXMvdGFibGUnKTtcbmhhbmRsZXJzLnRhYmxlQ2VsbCA9IHJlcXVpcmUoJy4vdHlwZXMvdGFibGVDZWxsJyk7XG5oYW5kbGVycy50YWJsZVJvdyA9IHJlcXVpcmUoJy4vdHlwZXMvdGFibGVSb3cnKTtcbmhhbmRsZXJzLnRleHQgPSByZXF1aXJlKCcuL3R5cGVzL3RleHQnKTtcbmhhbmRsZXJzLnRoZW1hdGljQnJlYWsgPSByZXF1aXJlKCcuL3R5cGVzL3RoZW1hdGljLWJyZWFrJyk7XG4vKiBTdHJpbmdpZnkgYG5vZGVgLiAqL1xuXG5mdW5jdGlvbiBvbmUoY3R4LCBub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gIHZhciBoYW5kbGVyc092ZXJyaWRlcyA9IGhhcyhjdHgsICdvdmVycmlkZXMnKSA/IGN0eC5vdmVycmlkZXMgOiB7fTtcbiAgdmFyIGggPSB4dGVuZChoYW5kbGVycywgaGFuZGxlcnNPdmVycmlkZXMpO1xuICB2YXIgdHlwZSA9IG5vZGUgJiYgbm9kZS50eXBlO1xuXG4gIGlmICghdHlwZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlY2VpdmVkIG5vZGUgJ1wiLmNvbmNhdChub2RlLCBcIicgZG9lcyBub3QgaGF2ZSBhIHR5cGUuXCIpKTtcbiAgfVxuXG4gIGlmICghaGFzKGgsIHR5cGUpIHx8IHR5cGVvZiBoW3R5cGVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbXBpbGUgdW5rbm93biBub2RlIGBcIi5jb25jYXQodHlwZSwgXCJgXCIpKTtcbiAgfVxuXG4gIHJldHVybiBoW3R5cGVdKGN0eCwgbm9kZSwgaW5kZXgsIHBhcmVudCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gcGx1Z2luO1xuLypcbkxhVGVYIHJlcXVpcmVzIHNwZWNpYWwgaGFuZGxpbmdzIG9mIGZvb3Rub3RlcyBwbGFjZWQgaW4gaGVhZGluZ3Mgc3VjaCBhcyBcXHNlY3Rpb257fVxuV2UgdGhlcmVmb3JlIG1hcmsgZWFjaCBmb290bm90ZSBwbGFjZWQgaW4gaGVhZGluZyBmb3IgbGF0ZXIgaGFuZGxpbmcuXG4qL1xuXG52YXIgbm9kZVR5cGVzID0gWydmb290bm90ZScsICdmb290bm90ZURlZmluaXRpb24nXTtcblxuZnVuY3Rpb24gcGx1Z2luKCkge1xuICByZXR1cm4gZnVuY3Rpb24gaGVhZGluZ1Zpc2l0b3Iobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgIGlmIChub2RlVHlwZXMuaW5jbHVkZXMobm9kZS50eXBlKSAmJiBub2RlLmluSGVhZGluZyAhPT0gdHJ1ZSkge1xuICAgICAgbm9kZS5pbkhlYWRpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgICAgcmV0dXJuIGhlYWRpbmdWaXNpdG9yKG4sIGksIG5vZGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0ge307XG4gIHJldHVybiB7XG4gICAgZGVmaW5pdGlvblZpc2l0b3I6IGZ1bmN0aW9uIGRlZmluaXRpb25WaXNpdG9yKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICAgIHZhciBpZGVudGlmaWVyID0gbm9kZS5pZGVudGlmaWVyO1xuXG4gICAgICAgIHdoaWxlIChPYmplY3Qua2V5cyhzdGF0ZSkuaW5jbHVkZXMoaWRlbnRpZmllcikpIHtcbiAgICAgICAgICBpZGVudGlmaWVyICs9ICctMSc7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZVtpZGVudGlmaWVyXSA9IG5vZGUudXJsO1xuICAgICAgICBub2RlLmlkZW50aWZpZXIgPSBpZGVudGlmaWVyOyAvLyBmb3JjZSB0byByZW1vdmUgdHdpY2Ugc28gdGhhdCBsYXRleCBjb21waWxlc1xuXG4gICAgICAgIGlmIChub2RlLnJlZmVyZW5jZVR5cGUgPT09ICdzaG9ydGN1dCcpIHtcbiAgICAgICAgICAvLyByZW1hcmsgZm9yIGFiYnJcbiAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGltYWdlUmVmZXJlbmNlVmlzaXRvcjogZnVuY3Rpb24gaW1hZ2VSZWZlcmVuY2VWaXNpdG9yKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIG5vZGUudHlwZSA9ICdpbWFnZSc7XG4gICAgICAgIG5vZGUudGl0bGUgPSAnJztcbiAgICAgICAgbm9kZS51cmwgPSBzdGF0ZVtub2RlLmlkZW50aWZpZXJdO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGFkZElkZW50aWZpZXI6IGZ1bmN0aW9uIGFkZElkZW50aWZpZXIoaWRlbnRpZmllciwgY29udGVudCkge1xuICAgICAgc3RhdGVbaWRlbnRpZmllcl0gPSBjb250ZW50O1xuICAgIH1cbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciB2aXNpdCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQnKTtcblxudmFyIGhlYWRpbmdQbHVnaW4gPSByZXF1aXJlKCcuL2hlYWRpbmdWaXNpdG9yJyk7XG5cbnZhciByZWZlcmVuY2VWaXNpdG9ycyA9IHJlcXVpcmUoJy4vcmVmZXJlbmNlVmlzaXRvcnMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwcmVwcm9jZXNzO1xuXG5mdW5jdGlvbiBwcmVwcm9jZXNzKGN0eCwgdHJlZSkge1xuICB2YXIgX3JlZmVyZW5jZVZpc2l0b3JzID0gcmVmZXJlbmNlVmlzaXRvcnMoKSxcbiAgICAgIGRlZmluaXRpb25WaXNpdG9yID0gX3JlZmVyZW5jZVZpc2l0b3JzLmRlZmluaXRpb25WaXNpdG9yLFxuICAgICAgaW1hZ2VSZWZlcmVuY2VWaXNpdG9yID0gX3JlZmVyZW5jZVZpc2l0b3JzLmltYWdlUmVmZXJlbmNlVmlzaXRvcjtcblxuICB2YXIgZGVmYXVsdFZpc2l0b3JzID0ge1xuICAgIGRlZmluaXRpb246IFtkZWZpbml0aW9uVmlzaXRvcl0sXG4gICAgaW1hZ2VSZWZlcmVuY2U6IFtpbWFnZVJlZmVyZW5jZVZpc2l0b3JdLFxuICAgIGhlYWRpbmc6IFtoZWFkaW5nUGx1Z2luXVxuICB9O1xuICB2YXIgdmlzaXRvcnMgPSB4dGVuZChkZWZhdWx0VmlzaXRvcnMsIGN0eC5wcmVwcm9jZXNzb3JzIHx8IHt9KTtcbiAgT2JqZWN0LmtleXModmlzaXRvcnMpLmZvckVhY2goZnVuY3Rpb24gKG5vZGVUeXBlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmlzaXRvcnNbbm9kZVR5cGVdKSkge1xuICAgICAgdmlzaXRvcnNbbm9kZVR5cGVdLmZvckVhY2goZnVuY3Rpb24gKHZpc2l0b3IpIHtcbiAgICAgICAgcmV0dXJuIHZpc2l0KHRyZWUsIG5vZGVUeXBlLCB2aXNpdG9yKGN0eCwgdHJlZSkpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZpc2l0KHRyZWUsIG5vZGVUeXBlLCB2aXNpdG9yc1tub2RlVHlwZV0oY3R4LCB0cmVlKSk7XG4gICAgfVxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogRGVwZW5kZW5jaWVzLiAqL1xudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcblxudmFyIGRlZmluaXRpb25zID0gcmVxdWlyZSgnbWRhc3QtdXRpbC1kZWZpbml0aW9ucycpO1xuXG52YXIgb25lID0gcmVxdWlyZSgnLi9vbmUnKTtcblxudmFyIHByZXByb2Nlc3MgPSByZXF1aXJlKCcuL3ByZXByb2Nlc3NvcnMnKTtcbi8qIEV4cG9zZS4gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeTtcbm1vZHVsZS5leHBvcnRzLnRvTGFUZVggPSB0b0xhVGVYO1xuXG5mdW5jdGlvbiB0b0xhVGVYKHRyZWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIC8qIFN0cmluZ2lmeSB0aGUgZ2l2ZW4gTURBU1Qgbm9kZS4gKi9cbiAgcHJlcHJvY2VzcyhvcHRpb25zLCB0cmVlKTsgLy8gcmVzb2x2ZSBkZWZpbml0aW9uIGFmdGVyIHByZXByb2Nlc3MgYmVjYXVzZSB0aGlzIHN0ZXAgY2FuIGNyZWF0ZSBuZXcgaWRlbnRpZmllcnNcblxuICBvcHRpb25zLmRlZmluaXRpb25zID0gZGVmaW5pdGlvbnModHJlZSwgb3B0aW9ucyk7XG4gIHJldHVybiBvbmUob3B0aW9ucywgdHJlZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xufVxuLyogQ29tcGlsZSBNREFTVCB0cmVlIHVzaW5nIHRvTGFUZVggKi9cblxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoY29uZmlnKSB7XG4gIHZhciBzZXR0aW5ncyA9IHh0ZW5kKGNvbmZpZywgdGhpcy5kYXRhKCdzZXR0aW5ncycpKTtcbiAgdGhpcy5Db21waWxlciA9IGNvbXBpbGVyO1xuXG4gIGZ1bmN0aW9uIGNvbXBpbGVyKHRyZWUpIHtcbiAgICByZXR1cm4gdG9MYVRlWCh0cmVlLCBzZXR0aW5ncywgdHJlZSk7XG4gIH1cbn0iLCJpbXBvcnQgeyBOb2RlIH0gZnJvbSAndW5pc3QnO1xuaW1wb3J0IHsgSGVhZGluZywgUGFyZW50LCBCbG9ja3F1b3RlIH0gZnJvbSAnbWRhc3QnO1xuaW1wb3J0IHsgV2lraUxpbmsgfSBmcm9tICdyZW1hcmstd2lraS1saW5rJztcblxuZXhwb3J0IGludGVyZmFjZSBMYWJlbGVkSGVhZGluZyBleHRlbmRzIEhlYWRpbmcge1xuICBkYXRhOiB7XG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0hlYWRpbmcobm9kZTogTm9kZSk6IG5vZGUgaXMgTGFiZWxlZEhlYWRpbmcge1xuICByZXR1cm4gbm9kZS50eXBlID09PSAnaGVhZGluZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRIZWFkaW5nKG5vZGU6IE5vZGUpOiBhc3NlcnRzIG5vZGUgaXMgTGFiZWxlZEhlYWRpbmcge1xuICBpZiAoIWlzSGVhZGluZyhub2RlKSkgdGhyb3dXcm9uZ05vZGUoJ2hlYWRpbmcnLCBub2RlKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0RGlyZWN0aXZlIGV4dGVuZHMgUGFyZW50IHtcbiAgdHlwZTogJ3RleHREaXJlY3RpdmUnO1xuICBuYW1lOiBzdHJpbmc7XG4gIGF0dHJpYnV0ZXM/OiB1bmtub3duO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUZXh0RGlyZWN0aXZlKG5vZGU6IE5vZGUpOiBub2RlIGlzIFRleHREaXJlY3RpdmUge1xuICByZXR1cm4gbm9kZS50eXBlID09PSAndGV4dERpcmVjdGl2ZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUZXh0RGlyZWN0aXZlKG5vZGU6IE5vZGUpOiBhc3NlcnRzIG5vZGUgaXMgVGV4dERpcmVjdGl2ZSB7XG4gIGlmICghaXNUZXh0RGlyZWN0aXZlKG5vZGUpKSB0aHJvd1dyb25nTm9kZSgndGV4dERpcmVjdGl2ZScsIG5vZGUpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExhYmVsRGlyZWN0aXZlIGV4dGVuZHMgVGV4dERpcmVjdGl2ZSB7XG4gIG5hbWU6ICdsYWJlbCc7XG4gIGF0dHJpYnV0ZXM6IHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gIH07XG4gIGRhdGE6IHtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGFiZWxEaXJlY3RpdmUobm9kZTogTm9kZSk6IG5vZGUgaXMgTGFiZWxEaXJlY3RpdmUge1xuICByZXR1cm4gaXNUZXh0RGlyZWN0aXZlKG5vZGUpICYmIG5vZGUubmFtZSA9PT0gJ2xhYmVsJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydExhYmVsRGlyZWN0aXZlKFxuICBub2RlOiBOb2RlLFxuKTogYXNzZXJ0cyBub2RlIGlzIExhYmVsRGlyZWN0aXZlIHtcbiAgaWYgKCFpc0xhYmVsRGlyZWN0aXZlKG5vZGUpKSB0aHJvd1dyb25nTm9kZSgnbGFiZWwnLCBub2RlKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbWJlZERpcmVjdGl2ZSBleHRlbmRzIFRleHREaXJlY3RpdmUge1xuICBuYW1lOiAnZW1iZWQnO1xuICBhdHRyaWJ1dGVzOiB7XG4gICAgdGFyZ2V0OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtYmVkRGlyZWN0aXZlKG5vZGU6IE5vZGUpOiBub2RlIGlzIEVtYmVkRGlyZWN0aXZlIHtcbiAgcmV0dXJuIGlzVGV4dERpcmVjdGl2ZShub2RlKSAmJiBub2RlLm5hbWUgPT09ICdlbWJlZCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFbWJlZERpcmVjdGl2ZShcbiAgbm9kZTogTm9kZSxcbik6IGFzc2VydHMgbm9kZSBpcyBFbWJlZERpcmVjdGl2ZSB7XG4gIGlmICghaXNFbWJlZERpcmVjdGl2ZShub2RlKSkgdGhyb3dXcm9uZ05vZGUoJ2VtYmVkJywgbm9kZSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFiZWxlZExpbmsgZXh0ZW5kcyBXaWtpTGluayB7XG4gIGRhdGE6IHtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBhbGlhcz86IHN0cmluZztcbiAgICB0YXJnZXRUeXBlPzogJ2hlYWRpbmcnIHwgJ2Jsb2NrJztcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGFiZWxlZExpbmsobm9kZTogTm9kZSk6IG5vZGUgaXMgTGFiZWxlZExpbmsge1xuICByZXR1cm4gbm9kZS50eXBlID09PSAnd2lraUxpbmsnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TGFiZWxlZExpbmsobm9kZTogTm9kZSk6IGFzc2VydHMgbm9kZSBpcyBMYWJlbGVkTGluayB7XG4gIGlmICghaXNMYWJlbGVkTGluayhub2RlKSkgdGhyb3dXcm9uZ05vZGUoJ3dpa2lMaW5rJywgbm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Jsb2NrcXVvdGUobm9kZTogTm9kZSk6IG5vZGUgaXMgQmxvY2txdW90ZSB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09ICdibG9ja3F1b3RlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEJsb2NrcXVvdGUobm9kZTogTm9kZSk6IGFzc2VydHMgbm9kZSBpcyBCbG9ja3F1b3RlIHtcbiAgaWYgKCFpc0Jsb2NrcXVvdGUobm9kZSkpIHRocm93V3JvbmdOb2RlKCdibG9ja3F1b3RlJywgbm9kZSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5saW5lTWF0aCBleHRlbmRzIE5vZGUge1xuICB0eXBlOiAnaW5saW5lTWF0aCc7XG4gIHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lubGluZU1hdGgobm9kZTogTm9kZSk6IG5vZGUgaXMgSW5saW5lTWF0aCB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09ICdpbmxpbmVNYXRoJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydElubGluZU1hdGgobm9kZTogTm9kZSk6IGFzc2VydHMgbm9kZSBpcyBJbmxpbmVNYXRoIHtcbiAgaWYgKCFpc0lubGluZU1hdGgobm9kZSkpIHRocm93V3JvbmdOb2RlKCdpbmxpbmVNYXRoJywgbm9kZSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWF0aCBleHRlbmRzIE5vZGUge1xuICB0eXBlOiAnbWF0aCc7XG4gIHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hdGgobm9kZTogTm9kZSk6IG5vZGUgaXMgTWF0aCB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09ICdtYXRoJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE1hdGgobm9kZTogTm9kZSk6IGFzc2VydHMgbm9kZSBpcyBNYXRoIHtcbiAgaWYgKCFpc01hdGgobm9kZSkpIHRocm93V3JvbmdOb2RlKCdtYXRoJywgbm9kZSk7XG59XG5cbmZ1bmN0aW9uIHRocm93V3JvbmdOb2RlKGV4cGVjdGVkOiBzdHJpbmcsIG5vZGU6IE5vZGUpOiBuZXZlciB7XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICBgRXhwZWN0ZWQgbm9kZSBvZiB0eXBlICR7ZXhwZWN0ZWR9IGJ1dCByZWNlaXZlZCBub2RlICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICBub2RlLFxuICAgICl9YCxcbiAgKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBwcmVwcm9jZXNzKGRhdGE6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBkYXRhXG4gICAgLnJlcGxhY2VBbGwoL1xcJFxcJCguKykkL2dtLCAnJCQkJFxcbiQxJylcbiAgICAucmVwbGFjZUFsbCgvXiguKylcXCRcXCQvZ20sICckMVxcbiQkJCQnKVxuICAgIC5yZXBsYWNlQWxsKC8hXFxbXFxbKFteXFxdXSspXV0vZ20sICc6ZW1iZWR7dGFyZ2V0PVwiJDFcIn0nKVxuICAgIC5yZXBsYWNlQWxsKC9eXFxeKFteIFxcdF0rKVsgXFx0XFxuXSskL2dtLCAnOmxhYmVse3RleHQ9JDF9Jyk7XG59XG4iLCJpbXBvcnQgdmZpbGUsIHsgVkZpbGUsIFZGaWxlT3B0aW9ucyB9IGZyb20gJ3ZmaWxlJztcbmltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgcHJlcHJvY2VzcyB9IGZyb20gJy4vcHJlcHJvY2Vzc29yJztcblxuZXhwb3J0IGludGVyZmFjZSBPYnNpZGlhblZGaWxlIGV4dGVuZHMgVkZpbGUge1xuICBzdWJwYXRoPzogc3RyaW5nO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdG9WRmlsZShmaWxlOiBURmlsZSk6IFByb21pc2U8T2JzaWRpYW5WRmlsZT4ge1xuICBpZiAoIShhd2FpdCBmaWxlLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKGZpbGUucGF0aCkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2ZpbGUuYmFzZW5hbWV9IGRvZXMgbm90IGV4aXN0YCk7XG4gIH1cbiAgY29uc3QgZGF0YSA9IGF3YWl0IGZpbGUudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcbiAgcmV0dXJuIG1ha2VWRmlsZShkYXRhLCBmaWxlLnBhdGgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVZGaWxlKFxuICBjb250ZW50czogc3RyaW5nLFxuICBwYXRoOiBzdHJpbmcsXG4gIHN1YnBhdGg/OiBzdHJpbmcsXG4pOiBPYnNpZGlhblZGaWxlIHtcbiAgY29uc3Qgb3B0aW9uczogVkZpbGVPcHRpb25zID0ge1xuICAgIGNvbnRlbnRzOiBwcmVwcm9jZXNzKGNvbnRlbnRzKSxcbiAgICBwYXRoLFxuICAgIGRhdGE6IHsgZW1iZWRkZWQ6IG5ldyBBcnJheTxWRmlsZT4oKSB9LFxuICAgIHN1YnBhdGgsXG4gIH07XG4gIHJldHVybiB2ZmlsZShvcHRpb25zKTtcbn1cblxudHlwZSBOYW1lS2V5cyA9ICdwYXRoJyB8ICdiYXNlbmFtZScgfCAnZXh0JyB8ICdzdGVtJztcbnR5cGUgTmFtZWRWRmlsZSA9IHtcbiAgW1AgaW4ga2V5b2YgT2JzaWRpYW5WRmlsZV0tPzogUCBleHRlbmRzIE5hbWVLZXlzXG4gICAgPyBOb25OdWxsYWJsZTxPYnNpZGlhblZGaWxlW1BdPlxuICAgIDogT2JzaWRpYW5WRmlsZVtQXTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0b05hbWVkVkZpbGUodmZpbGU6IE9ic2lkaWFuVkZpbGUpOiBOYW1lZFZGaWxlIHtcbiAgaWYgKHZmaWxlLnBhdGggPT09IHVuZGVmaW5lZClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2Nlc3NlZCBmaWxlIG11c3QgaGF2ZSBhIG5hbWUnKTtcbiAgcmV0dXJuIHZmaWxlIGFzIE5hbWVkVkZpbGU7XG59XG4iLCJleHBvcnQgZW51bSBJbWFnZVBhdGhTZXR0aW5ncyB7XG4gIFJlbGF0aXZlVG9Sb290LFxuICBGdWxsUGF0aCxcbiAgQmFzZU5hbWUsXG4gIFJlbGF0aXZlVG9FeHBvcnQsXG59XG5cbmV4cG9ydCBjb25zdCBJbWFnZVBhdGhTZXR0aW5nRGVzY3JpcHRpb25zID0gW1xuICAnUmVsYXRpdmUgdG8gdmF1bHQgcm9vdCcsXG4gICdBYnNvbHV0ZSBwYXRoJyxcbiAgJ0ZpbGUgYmFzZSBuYW1lJyxcbiAgJ1JlbGF0aXZlIHRvIGV4cG9ydCBkaXJlY3RvcnknLFxuXTtcblxuZXhwb3J0IGNsYXNzIEV4cG9ydFRvVGV4U2V0dGluZ3Mge1xuICByZWZDb21tYW5kOiBzdHJpbmcgPSAnY3JlZic7XG4gIGRlZmF1bHRUb0VxdWF0aW9uOiBib29sZWFuID0gZmFsc2U7XG4gIGFkZGl0aW9uYWxNYXRoRW52aXJvbm1lbnRzOiBzdHJpbmdbXSA9IFtdO1xuICBnZW5lcmF0ZUxhYmVsczogYm9vbGVhbiA9IHRydWU7XG4gIGNvbXByZXNzTmV3bGluZXM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgaW1hZ2VQYXRoU2V0dGluZ3M6IEltYWdlUGF0aFNldHRpbmdzID0gSW1hZ2VQYXRoU2V0dGluZ3MuUmVsYXRpdmVUb1Jvb3Q7XG4gIGRlZmF1bHRFeHBvcnREaXJlY3Rvcnk6IHN0cmluZyA9ICcnO1xufVxuXG5leHBvcnQgdHlwZSBQYXJ0aWFsU2V0dGluZ3MgPSBQYXJ0aWFsPEV4cG9ydFRvVGV4U2V0dGluZ3M+ICYge1xuICAvLyBEZXByZWNhdGVkIG9wdGlvbnNcbiAgZnVsbEltYWdlUGF0aD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlU2V0dGluZ3MocGFydGlhbDogUGFydGlhbFNldHRpbmdzKTogRXhwb3J0VG9UZXhTZXR0aW5ncyB7XG4gIGNvbnN0IHNldHRpbmdzID0gbmV3IEV4cG9ydFRvVGV4U2V0dGluZ3MoKTtcblxuICBzZXR0aW5ncy5yZWZDb21tYW5kID0gcGFydGlhbC5yZWZDb21tYW5kID8/IHNldHRpbmdzLnJlZkNvbW1hbmQ7XG5cbiAgc2V0dGluZ3MuYWRkaXRpb25hbE1hdGhFbnZpcm9ubWVudHMgPVxuICAgIHBhcnRpYWwuYWRkaXRpb25hbE1hdGhFbnZpcm9ubWVudHMgPz8gc2V0dGluZ3MuYWRkaXRpb25hbE1hdGhFbnZpcm9ubWVudHM7XG5cbiAgc2V0dGluZ3MuZ2VuZXJhdGVMYWJlbHMgPSBwYXJ0aWFsLmdlbmVyYXRlTGFiZWxzID8/IHNldHRpbmdzLmdlbmVyYXRlTGFiZWxzO1xuXG4gIHNldHRpbmdzLmRlZmF1bHRUb0VxdWF0aW9uID1cbiAgICBwYXJ0aWFsLmRlZmF1bHRUb0VxdWF0aW9uID8/IHNldHRpbmdzLmRlZmF1bHRUb0VxdWF0aW9uO1xuXG4gIHNldHRpbmdzLmNvbXByZXNzTmV3bGluZXMgPVxuICAgIHBhcnRpYWwuY29tcHJlc3NOZXdsaW5lcyA/PyBzZXR0aW5ncy5jb21wcmVzc05ld2xpbmVzO1xuXG4gIGlmIChcbiAgICBwYXJ0aWFsLmltYWdlUGF0aFNldHRpbmdzID09PSB1bmRlZmluZWQgJiZcbiAgICBwYXJ0aWFsLmZ1bGxJbWFnZVBhdGggIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBzZXR0aW5ncy5pbWFnZVBhdGhTZXR0aW5ncyA9IHBhcnRpYWwuZnVsbEltYWdlUGF0aFxuICAgICAgPyBJbWFnZVBhdGhTZXR0aW5ncy5GdWxsUGF0aFxuICAgICAgOiBJbWFnZVBhdGhTZXR0aW5ncy5SZWxhdGl2ZVRvUm9vdDtcbiAgfSBlbHNlIHtcbiAgICBzZXR0aW5ncy5pbWFnZVBhdGhTZXR0aW5ncyA9XG4gICAgICBwYXJ0aWFsLmltYWdlUGF0aFNldHRpbmdzID8/IHNldHRpbmdzLmltYWdlUGF0aFNldHRpbmdzO1xuICB9XG5cbiAgc2V0dGluZ3MuZGVmYXVsdEV4cG9ydERpcmVjdG9yeSA9XG4gICAgcGFydGlhbC5kZWZhdWx0RXhwb3J0RGlyZWN0b3J5ID8/IHNldHRpbmdzLmRlZmF1bHRFeHBvcnREaXJlY3Rvcnk7XG5cbiAgcmV0dXJuIHNldHRpbmdzO1xufVxuIiwiLyohXG4gKiBub3JtYWxpemUtcGF0aCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvbm9ybWFsaXplLXBhdGg+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTgsIEpvbiBTY2hsaW5rZXJ0LlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocGF0aCwgc3RyaXBUcmFpbGluZykge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgcGF0aCB0byBiZSBhIHN0cmluZycpO1xuICB9XG5cbiAgaWYgKHBhdGggPT09ICdcXFxcJyB8fCBwYXRoID09PSAnLycpIHJldHVybiAnLyc7XG5cbiAgdmFyIGxlbiA9IHBhdGgubGVuZ3RoO1xuICBpZiAobGVuIDw9IDEpIHJldHVybiBwYXRoO1xuXG4gIC8vIGVuc3VyZSB0aGF0IHdpbjMyIG5hbWVzcGFjZXMgaGFzIHR3byBsZWFkaW5nIHNsYXNoZXMsIHNvIHRoYXQgdGhlIHBhdGggaXNcbiAgLy8gaGFuZGxlZCBwcm9wZXJseSBieSB0aGUgd2luMzIgdmVyc2lvbiBvZiBwYXRoLnBhcnNlKCkgYWZ0ZXIgYmVpbmcgbm9ybWFsaXplZFxuICAvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9hYTM2NTI0Nyh2PXZzLjg1KS5hc3B4I25hbWVzcGFjZXNcbiAgdmFyIHByZWZpeCA9ICcnO1xuICBpZiAobGVuID4gNCAmJiBwYXRoWzNdID09PSAnXFxcXCcpIHtcbiAgICB2YXIgY2ggPSBwYXRoWzJdO1xuICAgIGlmICgoY2ggPT09ICc/JyB8fCBjaCA9PT0gJy4nKSAmJiBwYXRoLnNsaWNlKDAsIDIpID09PSAnXFxcXFxcXFwnKSB7XG4gICAgICBwYXRoID0gcGF0aC5zbGljZSgyKTtcbiAgICAgIHByZWZpeCA9ICcvLyc7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNlZ3MgPSBwYXRoLnNwbGl0KC9bL1xcXFxdKy8pO1xuICBpZiAoc3RyaXBUcmFpbGluZyAhPT0gZmFsc2UgJiYgc2Vnc1tzZWdzLmxlbmd0aCAtIDFdID09PSAnJykge1xuICAgIHNlZ3MucG9wKCk7XG4gIH1cbiAgcmV0dXJuIHByZWZpeCArIHNlZ3Muam9pbignLycpO1xufTtcbiIsImltcG9ydCB7IE5vZGUgfSBmcm9tICd1bmlzdCc7XG5pbXBvcnQgeyBQcm9jZXNzb3IsIFRyYW5zZm9ybWVyIH0gZnJvbSAndW5pZmllZCc7XG5pbXBvcnQgeyBWRmlsZSB9IGZyb20gJ3ZmaWxlJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdmlzaXQgZnJvbSAndW5pc3QtdXRpbC12aXNpdCc7XG5pbXBvcnQge1xuICBCbG9ja1N1YnBhdGhSZXN1bHQsXG4gIEZpbGVTeXN0ZW1BZGFwdGVyLFxuICBIZWFkaW5nU3VicGF0aFJlc3VsdCxcbiAgTWV0YWRhdGFDYWNoZSxcbiAgcGFyc2VMaW5rdGV4dCxcbiAgcmVzb2x2ZVN1YnBhdGgsXG4gIFRGaWxlLFxufSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBhc3NlcnRFbWJlZERpcmVjdGl2ZSwgRW1iZWREaXJlY3RpdmUgfSBmcm9tICcuL21kYXN0SW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBtYWtlVkZpbGUgfSBmcm9tICcuL2ZpbGUnO1xuaW1wb3J0IHsgVGV4Q29udGV4dCB9IGZyb20gJy4vZGF0YSc7XG5pbXBvcnQgeyBJbWFnZVBhdGhTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IG5vcm1hbGl6ZVBhdGggZnJvbSAnbm9ybWFsaXplLXBhdGgnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW1iZWQodGhpczogUHJvY2Vzc29yKTogVHJhbnNmb3JtZXIge1xuICByZXR1cm4gYXN5bmMgKHRyZWU6IE5vZGUsIGZpbGU6IFZGaWxlKSA9PlxuICAgIGF3YWl0IGVtYmVkVHJhbnNmb3JtZXIodGhpcywgdHJlZSwgZmlsZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVtYmVkVHJhbnNmb3JtZXIoXG4gIHByb2Nlc3NvcjogUHJvY2Vzc29yLFxuICB0cmVlOiBOb2RlLFxuICBmaWxlOiBWRmlsZSxcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBwcm9taXNlczogQXJyYXk8UHJvbWlzZTx2b2lkPj4gPSBbXTtcblxuICB2aXNpdChcbiAgICB0cmVlLFxuICAgIHsgdHlwZTogJ3RleHREaXJlY3RpdmUnLCBuYW1lOiAnZW1iZWQnIH0sXG4gICAgKG5vZGUsIGluZGV4LCBwYXJlbnQpID0+IHtcbiAgICAgIGFzc2VydEVtYmVkRGlyZWN0aXZlKG5vZGUpO1xuXG4gICAgICBpZiAocGFyZW50ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZm91bmQgYW4gZW1iZWQgd2l0aG91dCBhIHBhcmVudCcpO1xuXG4gICAgICBjb25zdCByZXNvbHZlciA9IG5ldyBFbWJlZFJlc29sdmVyKHByb2Nlc3NvciwgZmlsZSwgbm9kZSk7XG4gICAgICBwcm9taXNlcy5wdXNoKFxuICAgICAgICByZXNvbHZlclxuICAgICAgICAgIC5yZXNvbHZlKClcbiAgICAgICAgICAudGhlbigobmV3Tm9kZSkgPT4ge1xuICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuW2luZGV4XSA9IG5ld05vZGU7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgZmlsZS5tZXNzYWdlKHJlYXNvbiwgbm9kZSwgJ2VtYmVkOmVycm9yJyk7XG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW5baW5kZXhdID0gcmVzb2x2ZXIuZmFpbGVkRW1iZWQoKTtcbiAgICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSxcbiAgKTtcblxuICByZXR1cm4gUHJvbWlzZS5hbGxTZXR0bGVkKHByb21pc2VzKS50aGVuKCgpID0+IHtcbiAgICBmaWxlLmluZm8oJ0FsbCBlbWJlZHMgcmVzb2x2ZWQnLCB0cmVlKTtcbiAgfSk7XG59XG5cbmNsYXNzIEVtYmVkUmVzb2x2ZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBwcm9jZXNzb3I6IFByb2Nlc3NvcixcbiAgICByZWFkb25seSBwYXJlbnRGaWxlOiBWRmlsZSxcbiAgICByZWFkb25seSBub2RlOiBFbWJlZERpcmVjdGl2ZSxcbiAgKSB7fVxuXG4gIGZhaWxlZEVtYmVkKCk6IE5vZGUge1xuICAgIGNvbnN0IGVtYmVkVGFyZ2V0ID0gdGhpcy5ub2RlLmF0dHJpYnV0ZXMudGFyZ2V0O1xuICAgIHRoaXMucGFyZW50RmlsZS5tZXNzYWdlKFxuICAgICAgYEZhaWxlZCB0byByZXNvbHZlIGVtYmVkICR7ZW1iZWRUYXJnZXR9YCxcbiAgICAgIHRoaXMubm9kZSxcbiAgICApO1xuICAgIHJldHVybiB7IHR5cGU6ICdpbmxpbmVDb2RlJywgdmFsdWU6IGBNaXNzaW5nICR7ZW1iZWRUYXJnZXR9YCB9O1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZSgpOiBQcm9taXNlPE5vZGU+IHtcbiAgICBjb25zdCBlbWJlZFRhcmdldCA9IHRoaXMubm9kZS5hdHRyaWJ1dGVzLnRhcmdldDtcbiAgICB0aGlzLnBhcmVudEZpbGUuaW5mbyhgUmVzb2x2aW5nIGVtYmVkIFwiJHtlbWJlZFRhcmdldH1cImAsIHRoaXMubm9kZSk7XG5cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMucHJvY2Vzc29yLmRhdGEoJ21ldGFkYXRhJyk7XG4gICAgaWYgKCEobWV0YWRhdGEgaW5zdGFuY2VvZiBNZXRhZGF0YUNhY2hlKSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICdtZXRhZGF0YSBtdXN0IGJlIHBhc3NlZCB0byB0aGUgcHJvY2Vzc29yIGluIHRoZSBmb3JtIG9mIGFuIG9ic2lkaWFuIE1ldGFkYXRhQ2FjaGUnLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGZpbGUsIHJlc3VsdCwgc3VicGF0aCB9ID0gdGhpcy5nZXRUYXJnZXQobWV0YWRhdGEpO1xuXG4gICAgaWYgKGZpbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmFpbGVkRW1iZWQoKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGZpbGUuZXh0ZW5zaW9uKSB7XG4gICAgICBjYXNlICdtZCc6XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsZWRFbWJlZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFyZW50RmlsZS5pbmZvKFxuICAgICAgICAgIGBSZWFkaW5nIGVtYmVkZGVkIGZpbGUgJHtmaWxlLmJhc2VuYW1lfWAsXG4gICAgICAgICAgdGhpcy5ub2RlLFxuICAgICAgICApO1xuICAgICAgICBpZiAoIShhd2FpdCBmaWxlLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKGZpbGUucGF0aCkpKSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnRGaWxlLm1lc3NhZ2UoXG4gICAgICAgICAgICBgJHtmaWxlLmJhc2VuYW1lfSBkb2VzIG5vdCBleGlzdHNgLFxuICAgICAgICAgICAgdGhpcy5ub2RlLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbGVkRW1iZWQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9jZXNzTWFya2Rvd25FbWJlZChcbiAgICAgICAgICBlbWJlZFRhcmdldCxcbiAgICAgICAgICBzdWJwYXRoLFxuICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc0ltYWdlRW1iZWQoZW1iZWRUYXJnZXQsIHN1YnBhdGgsIGZpbGUpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHByb2Nlc3NNYXJrZG93bkVtYmVkKFxuICAgIGVtYmVkVGFyZ2V0OiBzdHJpbmcsXG4gICAgc3VicGF0aDogc3RyaW5nLFxuICAgIGZpbGU6IFRGaWxlLFxuICAgIHJlc3VsdDogSGVhZGluZ1N1YnBhdGhSZXN1bHQgfCBCbG9ja1N1YnBhdGhSZXN1bHQsXG4gICk6IFByb21pc2U8Tm9kZT4ge1xuICAgIGNvbnN0IGZpbGVEYXRhID0gYXdhaXQgZmlsZS52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuXG4gICAgY29uc3QgZGF0YSA9IGZpbGVEYXRhLnNsaWNlKHJlc3VsdC5zdGFydC5vZmZzZXQsIHJlc3VsdC5lbmQ/Lm9mZnNldCk7XG5cbiAgICB0aGlzLnBhcmVudEZpbGUuaW5mbyhgUGFyc2luZyBcIiR7ZW1iZWRUYXJnZXR9XCJgLCB0aGlzLm5vZGUpO1xuXG4gICAgY29uc3QgZW1iZWRGaWxlID0gbWFrZVZGaWxlKGRhdGEsIGZpbGUucGF0aCwgc3VicGF0aCk7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMucHJvY2Vzc29yLnBhcnNlKGVtYmVkRmlsZSk7XG4gICAgY29uc3QgcHJvY2Vzc2VkID0gYXdhaXQgdGhpcy5wcm9jZXNzb3IucnVuKG5vZGUsIGVtYmVkRmlsZSk7XG4gICAgdGhpcy5wYXJlbnRGaWxlLm1lc3NhZ2VzLnB1c2goLi4uZW1iZWRGaWxlLm1lc3NhZ2VzKTtcblxuICAgIHJldHVybiBwcm9jZXNzZWQ7XG4gIH1cblxuICBwcm9jZXNzSW1hZ2VFbWJlZChlbWJlZFRhcmdldDogc3RyaW5nLCBzdWJwYXRoOiBzdHJpbmcsIGZpbGU6IFRGaWxlKTogTm9kZSB7XG4gICAgdGhpcy5wYXJlbnRGaWxlLmluZm8oYFByb2Nlc3NpbmcgaW1hZ2UgXCIke2VtYmVkVGFyZ2V0fVwiYCwgdGhpcy5ub2RlKTtcbiAgICBjb25zdCBzZXR0aW5ncyA9IHRoaXMucHJvY2Vzc29yLmRhdGEoJ3NldHRpbmdzJykgYXMgVGV4Q29udGV4dDtcbiAgICBjb25zdCBpbWFnZVBhdGggPSB0aGlzLmdldEltYWdlUGF0aChmaWxlLCBzZXR0aW5ncyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdpbWFnZScsXG4gICAgICB1cmw6IGltYWdlUGF0aCxcbiAgICB9O1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IEZBSUxFRF9UQVJHRVQgPSB7XG4gICAgc3VicGF0aDogJycsXG4gICAgcmVzdWx0OiBudWxsLFxuICB9O1xuXG4gIGdldFRhcmdldChcbiAgICBtZXRhZGF0YTogTWV0YWRhdGFDYWNoZSxcbiAgKToge1xuICAgIGZpbGU/OiBURmlsZTtcbiAgICByZXN1bHQ6IEhlYWRpbmdTdWJwYXRoUmVzdWx0IHwgQmxvY2tTdWJwYXRoUmVzdWx0IHwgbnVsbDtcbiAgICBzdWJwYXRoOiBzdHJpbmc7XG4gIH0ge1xuICAgIGNvbnN0IGVtYmVkVGFyZ2V0ID0gdGhpcy5ub2RlLmF0dHJpYnV0ZXMudGFyZ2V0O1xuICAgIGNvbnN0IHsgcGF0aCwgc3VicGF0aCB9ID0gcGFyc2VMaW5rdGV4dChlbWJlZFRhcmdldCk7XG5cbiAgICBpZiAodGhpcy5wYXJlbnRGaWxlLnBhdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5wYXJlbnRGaWxlLm1lc3NhZ2UoXG4gICAgICAgIGBjYW5ub3QgcmVzb2x2ZSB0YXJnZXQgb2YgbGluayAke2VtYmVkVGFyZ2V0fSBhcyB0aGUgcGF0aCBvZiB0aGUgZW1iZWRkaW5nIGZpbGUgaXMgbm90IGF2YWlsYWJsZWAsXG4gICAgICAgIHRoaXMubm9kZSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gRW1iZWRSZXNvbHZlci5GQUlMRURfVEFSR0VUO1xuICAgIH1cblxuICAgIGNvbnN0IHRhcmdldCA9IG1ldGFkYXRhLmdldEZpcnN0TGlua3BhdGhEZXN0KHBhdGgsIHRoaXMucGFyZW50RmlsZS5wYXRoKTtcbiAgICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICB0aGlzLnBhcmVudEZpbGUubWVzc2FnZShcbiAgICAgICAgYGNhbm5vdCByZXNvbHZlIHRhcmdldCBvZiBsaW5rICR7ZW1iZWRUYXJnZXR9YCxcbiAgICAgICAgdGhpcy5ub2RlLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBFbWJlZFJlc29sdmVyLkZBSUxFRF9UQVJHRVQ7XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0gbWV0YWRhdGEuZ2V0RmlsZUNhY2hlKHRhcmdldCk7XG4gICAgaWYgKGNhY2hlID09PSBudWxsKSB7XG4gICAgICB0aGlzLnBhcmVudEZpbGUubWVzc2FnZShcbiAgICAgICAgYGNhbm5vdCBhY2Nlc3MgZmlsZSBjYWNoZSBvZiAke2VtYmVkVGFyZ2V0fWAsXG4gICAgICAgIHRoaXMubm9kZSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gRW1iZWRSZXNvbHZlci5GQUlMRURfVEFSR0VUO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmaWxlOiB0YXJnZXQsXG4gICAgICBzdWJwYXRoLFxuICAgICAgcmVzdWx0OiByZXNvbHZlU3VicGF0aChjYWNoZSwgc3VicGF0aC50cmltRW5kKCkpLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGdldEltYWdlUGF0aChmaWxlOiBURmlsZSwgc2V0dGluZ3M6IFRleENvbnRleHQpOiBzdHJpbmcge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSBmaWxlLnZhdWx0LmFkYXB0ZXIgYXMgRmlsZVN5c3RlbUFkYXB0ZXI7XG4gICAgY29uc3QgYWJzb2x1dGVQYXRoID0gYWRhcHRlci5nZXRGdWxsUGF0aChmaWxlLnBhdGgpO1xuXG4gICAgc3dpdGNoIChzZXR0aW5ncy5leHBvcnRUb1RleC5pbWFnZVBhdGhTZXR0aW5ncykge1xuICAgICAgY2FzZSBJbWFnZVBhdGhTZXR0aW5ncy5SZWxhdGl2ZVRvUm9vdDpcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGgoZmlsZS5wYXRoKTtcbiAgICAgIGNhc2UgSW1hZ2VQYXRoU2V0dGluZ3MuRnVsbFBhdGg6XG4gICAgICAgIHJldHVybiBub3JtYWxpemVQYXRoKGFic29sdXRlUGF0aCk7XG4gICAgICBjYXNlIEltYWdlUGF0aFNldHRpbmdzLkJhc2VOYW1lOlxuICAgICAgICByZXR1cm4gZmlsZS5iYXNlbmFtZTtcbiAgICAgIGNhc2UgSW1hZ2VQYXRoU2V0dGluZ3MuUmVsYXRpdmVUb0V4cG9ydDoge1xuICAgICAgICBjb25zdCBleHBvcnRQYXRoID0gdGhpcy5wcm9jZXNzb3IuZGF0YSgnZXhwb3J0UGF0aCcpIGFzIHN0cmluZztcbiAgICAgICAgY29uc3QgZXhwb3J0Rm9sZGVyID1cbiAgICAgICAgICBleHBvcnRQYXRoID09PSBudWxsIHx8IGV4cG9ydFBhdGggPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBzZXR0aW5ncy5leHBvcnRUb1RleC5kZWZhdWx0RXhwb3J0RGlyZWN0b3J5XG4gICAgICAgICAgICA6IHBhdGguZGlybmFtZShleHBvcnRQYXRoKTtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGgocGF0aC5yZWxhdGl2ZShleHBvcnRGb2xkZXIsIGFic29sdXRlUGF0aCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0cmV0dXJuIC9bXFx4QTlcXHhBRVxcdTIwM0NcXHUyMDQ5XFx1MjEyMlxcdTIxMzlcXHUyMTk0LVxcdTIxOTlcXHUyMUE5XFx1MjFBQVxcdTIzMUFcXHUyMzFCXFx1MjMyOFxcdTIzQ0ZcXHUyM0U5LVxcdTIzRjNcXHUyM0Y4LVxcdTIzRkFcXHUyNEMyXFx1MjVBQVxcdTI1QUJcXHUyNUI2XFx1MjVDMFxcdTI1RkItXFx1MjVGRVxcdTI2MDAtXFx1MjYwNFxcdTI2MEVcXHUyNjExXFx1MjYxNFxcdTI2MTVcXHUyNjE4XFx1MjYxRFxcdTI2MjBcXHUyNjIyXFx1MjYyM1xcdTI2MjZcXHUyNjJBXFx1MjYyRVxcdTI2MkZcXHUyNjM4LVxcdTI2M0FcXHUyNjQ4LVxcdTI2NTNcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2OFxcdTI2N0JcXHUyNjdGXFx1MjY5Mi1cXHUyNjk0XFx1MjY5NlxcdTI2OTdcXHUyNjk5XFx1MjY5QlxcdTI2OUNcXHUyNkEwXFx1MjZBMVxcdTI2QUFcXHUyNkFCXFx1MjZCMFxcdTI2QjFcXHUyNkJEXFx1MjZCRVxcdTI2QzRcXHUyNkM1XFx1MjZDOFxcdTI2Q0VcXHUyNkNGXFx1MjZEMVxcdTI2RDNcXHUyNkQ0XFx1MjZFOVxcdTI2RUFcXHUyNkYwLVxcdTI2RjVcXHUyNkY3LVxcdTI2RkFcXHUyNkZEXFx1MjcwMlxcdTI3MDVcXHUyNzA4LVxcdTI3MERcXHUyNzBGXFx1MjcxMlxcdTI3MTRcXHUyNzE2XFx1MjcxRFxcdTI3MjFcXHUyNzI4XFx1MjczM1xcdTI3MzRcXHUyNzQ0XFx1Mjc0N1xcdTI3NENcXHUyNzRFXFx1Mjc1My1cXHUyNzU1XFx1Mjc1N1xcdTI3NjNcXHUyNzY0XFx1Mjc5NS1cXHUyNzk3XFx1MjdBMVxcdTI3QjBcXHUyN0JGXFx1MjkzNFxcdTI5MzVcXHUyQjA1LVxcdTJCMDdcXHUyQjFCXFx1MkIxQ1xcdTJCNTBcXHUyQjU1XFx1MzAzMFxcdTMwM0RcXHUzMjk3XFx1MzI5OV18XFx1RDgzQ1tcXHVEQzA0XFx1RENDRlxcdURENzBcXHVERDcxXFx1REQ3RVxcdUREN0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1REUwMVxcdURFMDJcXHVERTFBXFx1REUyRlxcdURFMzItXFx1REUzQVxcdURFNTBcXHVERTUxXFx1REYwMC1cXHVERjIxXFx1REYyNC1cXHVERjkzXFx1REY5NlxcdURGOTdcXHVERjk5LVxcdURGOUJcXHVERjlFLVxcdURGRjBcXHVERkYzLVxcdURGRjVcXHVERkY3LVxcdURGRkZdfFxcdUQ4M0RbXFx1REMwMC1cXHVEQ0ZEXFx1RENGRi1cXHVERDNEXFx1REQ0OS1cXHVERDRFXFx1REQ1MC1cXHVERDY3XFx1REQ2RlxcdURENzBcXHVERDczLVxcdURENzlcXHVERDg3XFx1REQ4QS1cXHVERDhEXFx1REQ5MFxcdUREOTVcXHVERDk2XFx1RERBNVxcdUREQThcXHVEREIxXFx1RERCMlxcdUREQkNcXHVEREMyLVxcdUREQzRcXHVEREQxLVxcdURERDNcXHVERERDLVxcdUREREVcXHVEREUxXFx1RERFM1xcdURERUZcXHVEREYzXFx1RERGQS1cXHVERTRGXFx1REU4MC1cXHVERUM1XFx1REVDQi1cXHVERUQwXFx1REVFMC1cXHVERUU1XFx1REVFOVxcdURFRUJcXHVERUVDXFx1REVGMFxcdURFRjNdfFxcdUQ4M0VbXFx1REQxMC1cXHVERDE4XFx1REQ4MC1cXHVERDg0XFx1RERDMF18XFx1RDgzQ1xcdURERkZcXHVEODNDW1xcdURERTZcXHVEREYyXFx1RERGQ118XFx1RDgzQ1xcdURERkVcXHVEODNDW1xcdURERUFcXHVEREY5XXxcXHVEODNDXFx1RERGRFxcdUQ4M0NcXHVEREYwfFxcdUQ4M0NcXHVEREZDXFx1RDgzQ1tcXHVEREVCXFx1RERGOF18XFx1RDgzQ1xcdURERkJcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVFXFx1RERGM1xcdURERkFdfFxcdUQ4M0NcXHVEREZBXFx1RDgzQ1tcXHVEREU2XFx1RERFQ1xcdURERjJcXHVEREY4XFx1RERGRVxcdURERkZdfFxcdUQ4M0NcXHVEREY5XFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERTlcXHVEREVCLVxcdURERURcXHVEREVGLVxcdURERjRcXHVEREY3XFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRl18XFx1RDgzQ1xcdURERjhcXHVEODNDW1xcdURERTYtXFx1RERFQVxcdURERUMtXFx1RERGNFxcdURERjctXFx1RERGOVxcdURERkJcXHVEREZELVxcdURERkZdfFxcdUQ4M0NcXHVEREY3XFx1RDgzQ1tcXHVEREVBXFx1RERGNFxcdURERjhcXHVEREZBXFx1RERGQ118XFx1RDgzQ1xcdURERjZcXHVEODNDXFx1RERFNnxcXHVEODNDXFx1RERGNVxcdUQ4M0NbXFx1RERFNlxcdURERUEtXFx1RERFRFxcdURERjAtXFx1RERGM1xcdURERjctXFx1RERGOVxcdURERkNcXHVEREZFXXxcXHVEODNDXFx1RERGNFxcdUQ4M0NcXHVEREYyfFxcdUQ4M0NcXHVEREYzXFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdfFxcdUQ4M0NcXHVEREYyXFx1RDgzQ1tcXHVEREU2XFx1RERFOC1cXHVEREVEXFx1RERGMC1cXHVEREZGXXxcXHVEODNDXFx1RERGMVxcdUQ4M0NbXFx1RERFNi1cXHVEREU4XFx1RERFRVxcdURERjBcXHVEREY3LVxcdURERkJcXHVEREZFXXxcXHVEODNDXFx1RERGMFxcdUQ4M0NbXFx1RERFQVxcdURERUMtXFx1RERFRVxcdURERjJcXHVEREYzXFx1RERGNVxcdURERjdcXHVEREZDXFx1RERGRVxcdURERkZdfFxcdUQ4M0NcXHVEREVGXFx1RDgzQ1tcXHVEREVBXFx1RERGMlxcdURERjRcXHVEREY1XXxcXHVEODNDXFx1RERFRVxcdUQ4M0NbXFx1RERFOC1cXHVEREVBXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XXxcXHVEODNDXFx1RERFRFxcdUQ4M0NbXFx1RERGMFxcdURERjJcXHVEREYzXFx1RERGN1xcdURERjlcXHVEREZBXXxcXHVEODNDXFx1RERFQ1xcdUQ4M0NbXFx1RERFNlxcdURERTdcXHVEREU5LVxcdURERUVcXHVEREYxLVxcdURERjNcXHVEREY1LVxcdURERkFcXHVEREZDXFx1RERGRV18XFx1RDgzQ1xcdURERUJcXHVEODNDW1xcdURERUUtXFx1RERGMFxcdURERjJcXHVEREY0XFx1RERGN118XFx1RDgzQ1xcdURERUFcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFQVxcdURERUNcXHVEREVEXFx1RERGNy1cXHVEREZBXXxcXHVEODNDXFx1RERFOVxcdUQ4M0NbXFx1RERFQVxcdURERUNcXHVEREVGXFx1RERGMFxcdURERjJcXHVEREY0XFx1RERGRl18XFx1RDgzQ1xcdURERThcXHVEODNDW1xcdURERTZcXHVEREU4XFx1RERFOVxcdURERUItXFx1RERFRVxcdURERjAtXFx1RERGNVxcdURERjdcXHVEREZBLVxcdURERkZdfFxcdUQ4M0NcXHVEREU3XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRlxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRVxcdURERkZdfFxcdUQ4M0NcXHVEREU2XFx1RDgzQ1tcXHVEREU4LVxcdURERUNcXHVEREVFXFx1RERGMVxcdURERjJcXHVEREY0XFx1RERGNi1cXHVEREZBXFx1RERGQ1xcdURERkRcXHVEREZGXXxbI1xcKjAtOV1cXHUyMEUzL2c7XG59O1xuIiwidmFyIGVtb2ppID0gcmVxdWlyZSgnZW1vamktcmVnZXgnKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBCYW5hbmFTbHVnXHJcblxyXG52YXIgb3duID0gT2JqZWN0Lmhhc093blByb3BlcnR5XHJcbnZhciB3aGl0ZXNwYWNlID0gL1xccy9nXHJcbnZhciBzcGVjaWFscyA9IC9bXFx1MjAwMC1cXHUyMDZGXFx1MkUwMC1cXHUyRTdGXFxcXCchXCIjJCUmKCkqKywuLzo7PD0+P0BbXFxdXmB7fH1+4oCZXS9nXHJcblxyXG5mdW5jdGlvbiBCYW5hbmFTbHVnICgpIHtcclxuICB2YXIgc2VsZiA9IHRoaXNcclxuXHJcbiAgaWYgKCEoc2VsZiBpbnN0YW5jZW9mIEJhbmFuYVNsdWcpKSByZXR1cm4gbmV3IEJhbmFuYVNsdWcoKVxyXG5cclxuICBzZWxmLnJlc2V0KClcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIGEgdW5pcXVlIHNsdWcuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWUgU3RyaW5nIG9mIHRleHQgdG8gc2x1Z2lmeVxyXG4gKiBAcGFyYW0gIHtib29sZWFufSBbZmFsc2VdIEtlZXAgdGhlIGN1cnJlbnQgY2FzZSwgb3RoZXJ3aXNlIG1ha2UgYWxsIGxvd2VyY2FzZVxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgIEEgdW5pcXVlIHNsdWcgc3RyaW5nXHJcbiAqL1xyXG5CYW5hbmFTbHVnLnByb3RvdHlwZS5zbHVnID0gZnVuY3Rpb24gKHZhbHVlLCBtYWludGFpbkNhc2UpIHtcclxuICB2YXIgc2VsZiA9IHRoaXNcclxuICB2YXIgc2x1ZyA9IHNsdWdnZXIodmFsdWUsIG1haW50YWluQ2FzZSA9PT0gdHJ1ZSlcclxuICB2YXIgb3JpZ2luYWxTbHVnID0gc2x1Z1xyXG5cclxuICB3aGlsZSAob3duLmNhbGwoc2VsZi5vY2N1cnJlbmNlcywgc2x1ZykpIHtcclxuICAgIHNlbGYub2NjdXJyZW5jZXNbb3JpZ2luYWxTbHVnXSsrXHJcbiAgICBzbHVnID0gb3JpZ2luYWxTbHVnICsgJy0nICsgc2VsZi5vY2N1cnJlbmNlc1tvcmlnaW5hbFNsdWddXHJcbiAgfVxyXG5cclxuICBzZWxmLm9jY3VycmVuY2VzW3NsdWddID0gMFxyXG5cclxuICByZXR1cm4gc2x1Z1xyXG59XHJcblxyXG4vKipcclxuICogUmVzZXQgLSBGb3JnZXQgYWxsIHByZXZpb3VzIHNsdWdzXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuQmFuYW5hU2x1Zy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdGhpcy5vY2N1cnJlbmNlcyA9IE9iamVjdC5jcmVhdGUobnVsbClcclxufVxyXG5cclxuZnVuY3Rpb24gc2x1Z2dlciAoc3RyaW5nLCBtYWludGFpbkNhc2UpIHtcclxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHJldHVybiAnJ1xyXG4gIGlmICghbWFpbnRhaW5DYXNlKSBzdHJpbmcgPSBzdHJpbmcudG9Mb3dlckNhc2UoKVxyXG5cclxuICByZXR1cm4gc3RyaW5nLnRyaW0oKVxyXG4gICAgLnJlcGxhY2Uoc3BlY2lhbHMsICcnKVxyXG4gICAgLnJlcGxhY2UoZW1vamkoKSwgJycpXHJcbiAgICAucmVwbGFjZSh3aGl0ZXNwYWNlLCAnLScpXHJcbn1cclxuXHJcbkJhbmFuYVNsdWcuc2x1ZyA9IHNsdWdnZXJcclxuIiwiaW1wb3J0IEdpdGh1YlNsdWdnZXIgZnJvbSAnZ2l0aHViLXNsdWdnZXInO1xuaW1wb3J0IHsgUHJvY2Vzc29yLCBUcmFuc2Zvcm1lciB9IGZyb20gJ3VuaWZpZWQnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ3VuaXN0JztcbmltcG9ydCB7IFZGaWxlIH0gZnJvbSAndmZpbGUnO1xuaW1wb3J0IHZpc2l0IGZyb20gJ3VuaXN0LXV0aWwtdmlzaXQnO1xuaW1wb3J0IHtcbiAgYXNzZXJ0TGFiZWxlZExpbmssXG4gIGlzSGVhZGluZyxcbiAgaXNMYWJlbERpcmVjdGl2ZSxcbn0gZnJvbSAnLi9tZGFzdEludGVyZmFjZXMnO1xuaW1wb3J0IHsgdG9OYW1lZFZGaWxlIH0gZnJvbSAnLi9maWxlJztcbmltcG9ydCB7IHBhcnNlTGlua3RleHQgfSBmcm9tICdvYnNpZGlhbic7XG5cbmludGVyZmFjZSBMaW5rVGFyZ2V0IHtcbiAgcGF0aDogc3RyaW5nO1xuICBzdWJwYXRoOiBzdHJpbmc7XG4gIHR5cGU6ICdibG9jaycgfCAnaGVhZGluZyc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYWJlbHModGhpczogUHJvY2Vzc29yKTogVHJhbnNmb3JtZXIge1xuICBjb25zdCBzbHVnZ2VyID0gbmV3IEdpdGh1YlNsdWdnZXIoKTtcbiAgY29uc3QgbGFiZWxzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgcmV0dXJuICh0cmVlOiBOb2RlLCBmaWxlOiBWRmlsZSkgPT4ge1xuICAgIGFkZExhYmVsKHNsdWdnZXIsIGxhYmVscywgdHJlZSwgZmlsZSk7XG4gICAgdGFyZ2V0TGFiZWxzKGxhYmVscywgdHJlZSwgZmlsZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExhYmVsKFxuICBzbHVnZ2VyOiBHaXRodWJTbHVnZ2VyLFxuICBsYWJlbHNNYXA6IE1hcDxzdHJpbmcsIHN0cmluZz4sXG4gIHRyZWU6IE5vZGUsXG4gIGZpbGU6IFZGaWxlLFxuKTogdm9pZCB7XG4gIHZpc2l0KHRyZWUsIFsnaGVhZGluZycsICd0ZXh0RGlyZWN0aXZlJ10sIChub2RlOiBOb2RlKSA9PiB7XG4gICAgaWYgKCFpc0hlYWRpbmcobm9kZSkgJiYgIWlzTGFiZWxEaXJlY3RpdmUobm9kZSkpIHtcbiAgICAgIGZpbGUubWVzc2FnZShgbm9kZSBvZiB0eXBlICR7bm9kZS50eXBlfSBjYW5ub3QgYmUgbGFiZWxlZGApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuYW1lZEZpbGUgPSB0b05hbWVkVkZpbGUoZmlsZSk7XG4gICAgY29uc3QgeyBzdWJwYXRoLCB0eXBlIH0gPSBnZXRMYWJlbChub2RlKTtcbiAgICBjb25zdCBrZXk6IExpbmtUYXJnZXQgPSB7XG4gICAgICBwYXRoOiBuYW1lZEZpbGUuc3RlbSxcbiAgICAgIHN1YnBhdGgsXG4gICAgICB0eXBlLFxuICAgIH07XG5cbiAgICBpZiAobm9kZS5kYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHt9O1xuICAgIH1cbiAgICBpZiAobm9kZS5kYXRhLmxhYmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vZGUuZGF0YS5sYWJlbCA9IHNsdWdnZXIuc2x1ZyhzdWJwYXRoKTtcbiAgICB9XG4gICAgbGFiZWxzTWFwLnNldChrZXlUb1N0cmluZyhrZXkpLCBub2RlLmRhdGEubGFiZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TGFiZWwobm9kZTogTm9kZSk6IHsgc3VicGF0aDogc3RyaW5nOyB0eXBlOiAnaGVhZGluZycgfCAnYmxvY2snIH0ge1xuICBpZiAoaXNIZWFkaW5nKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1YnBhdGg6IGAjJHtub2RlLmNoaWxkcmVuLm1hcCgoYykgPT4gYy52YWx1ZSkuam9pbignJyl9YCxcbiAgICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzTGFiZWxEaXJlY3RpdmUobm9kZSkpIHtcbiAgICByZXR1cm4geyBzdWJwYXRoOiBgI14ke25vZGUuYXR0cmlidXRlcy50ZXh0fWAsIHR5cGU6ICdibG9jaycgfTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ1RyaWVkIHRvIGdlbmVyYXRlIGxhYmVsIGZvciB1bmV4cGVjdGVkIHR5cGU6ICcgKyBub2RlLnR5cGUpO1xufVxuXG5mdW5jdGlvbiB0YXJnZXRMYWJlbHMoXG4gIGxhYmVsc01hcDogTWFwPHN0cmluZywgc3RyaW5nPixcbiAgdHJlZTogTm9kZSxcbiAgZmlsZTogVkZpbGUsXG4pOiB2b2lkIHtcbiAgdmlzaXQodHJlZSwgJ3dpa2lMaW5rJywgKG5vZGU6IE5vZGUpID0+IHtcbiAgICBhc3NlcnRMYWJlbGVkTGluayhub2RlKTtcbiAgICBpZiAobm9kZS5kYXRhLmxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIW5vZGUudmFsdWUuY29udGFpbnMoJyMnKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5hbWVkRmlsZSA9IHRvTmFtZWRWRmlsZShmaWxlKTtcbiAgICBjb25zdCB7IHBhdGgsIHN1YnBhdGggfSA9IHBhcnNlTGlua3RleHQobm9kZS52YWx1ZSk7XG4gICAgY29uc3Qga2V5OiBMaW5rVGFyZ2V0ID0ge1xuICAgICAgdHlwZTogbm9kZS52YWx1ZS5jb250YWlucygnXicpID8gJ2Jsb2NrJyA6ICdoZWFkaW5nJyxcbiAgICAgIHBhdGg6IHBhdGgubGVuZ3RoID4gMCA/IHBhdGggOiBuYW1lZEZpbGUuc3RlbSxcbiAgICAgIHN1YnBhdGgsXG4gICAgfTtcbiAgICBjb25zdCBsYWJlbCA9IGxhYmVsc01hcC5nZXQoa2V5VG9TdHJpbmcoa2V5KSk7XG4gICAgaWYgKGxhYmVsICE9PSBudWxsKSB7XG4gICAgICBub2RlLmRhdGEubGFiZWwgPSBsYWJlbDtcbiAgICAgIG5vZGUuZGF0YS50YXJnZXRUeXBlID0ga2V5LnR5cGU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24ga2V5VG9TdHJpbmcoa2V5OiBMaW5rVGFyZ2V0KTogc3RyaW5nIHtcbiAgcmV0dXJuIGAke2tleS50eXBlfToke2tleS5wYXRofToke2tleS5zdWJwYXRofWA7XG59XG4iLCJpbXBvcnQgeyBOb2RlIH0gZnJvbSAndW5pc3QnO1xuaW1wb3J0IHsgQXVnbWVudGVkQ29udGV4dCB9IGZyb20gJy4vZGF0YSc7XG5pbXBvcnQgeyBhc3NlcnRJbmxpbmVNYXRoLCBhc3NlcnRNYXRoIH0gZnJvbSAnLi9tZGFzdEludGVyZmFjZXMnO1xuXG5jb25zdCBtYXRoRW52aXJvbm1lbnRzID0gW1xuICAnZXF1YXRpb24nLFxuICAnbXVsdGxpbmUnLFxuICAnZ2F0aGVyJyxcbiAgJ2FsaWduJyxcbiAgJ2ZsYWxpZ24nLFxuICAnc3BsaXQnLFxuICAnYWxpZ25hdCcsXG5dO1xuY29uc3QgYmVnaW5SZWdleCA9IC9eXFxzKlxcXFxiZWdpbntcXHMqKFxcdyspXFwqP1xccyp9L207XG5cbmV4cG9ydCBmdW5jdGlvbiBpbmxpbmVNYXRoKF9jdHg6IEF1Z21lbnRlZENvbnRleHQsIG5vZGU6IE5vZGUpOiBzdHJpbmcge1xuICBhc3NlcnRJbmxpbmVNYXRoKG5vZGUpO1xuICByZXR1cm4gYCQke25vZGUudmFsdWV9JGA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5TWF0aChjdHg6IEF1Z21lbnRlZENvbnRleHQsIG5vZGU6IE5vZGUpOiBzdHJpbmcge1xuICBhc3NlcnRNYXRoKG5vZGUpO1xuICBjb25zdCB7IHZhbHVlIH0gPSBub2RlO1xuICBjb25zdCBtYXRjaCA9IGJlZ2luUmVnZXguZXhlYyh2YWx1ZSk7XG4gIGNvbnN0IHtcbiAgICBleHBvcnRUb1RleDogeyBhZGRpdGlvbmFsTWF0aEVudmlyb25tZW50cywgZGVmYXVsdFRvRXF1YXRpb24gfSxcbiAgfSA9IGN0eDtcbiAgaWYgKFxuICAgIG1hdGNoICE9PSBudWxsICYmXG4gICAgKG1hdGhFbnZpcm9ubWVudHMuY29udGFpbnMobWF0Y2hbMV0pIHx8XG4gICAgICBhZGRpdGlvbmFsTWF0aEVudmlyb25tZW50cy5jb250YWlucyhtYXRjaFsxXSkpXG4gICkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChkZWZhdWx0VG9FcXVhdGlvbikge1xuICAgIHJldHVybiBgXFxcXGJlZ2lue2VxdWF0aW9ufVxcbiR7dmFsdWV9XFxuXFxcXGVuZHtlcXVhdGlvbn1gO1xuICB9XG5cbiAgcmV0dXJuIGBcXFxcW1xcbiR7dmFsdWV9XFxuXFxcXF1gO1xufVxuIiwiaW1wb3J0IHsgUmViYmVyU2V0dGluZ3MgfSBmcm9tICdyZWJiZXInO1xuaW1wb3J0IHsgRXhwb3J0VG9UZXhTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRleENvbnRleHQge1xuICBleHBvcnRUb1RleDogRXhwb3J0VG9UZXhTZXR0aW5ncztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVGV4Q29udGV4dChjdHg6IGFueSk6IGN0eCBpcyBUZXhDb250ZXh0IHtcbiAgcmV0dXJuICdleHBvcnRUb1RleCcgaW4gY3R4ICYmIGN0eC5leHBvcnRUb1RleCBpbnN0YW5jZW9mIEV4cG9ydFRvVGV4U2V0dGluZ3M7XG59XG5cbmV4cG9ydCB0eXBlIEF1Z21lbnRlZENvbnRleHQgPSBSZWJiZXJTZXR0aW5ncyAmIFRleENvbnRleHQ7XG5leHBvcnQgdHlwZSBPcHRpb25hbENvbnRleHQgPSBSZWJiZXJTZXR0aW5ncyAmIFBhcnRpYWw8VGV4Q29udGV4dD47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250ZXh0KGN0eDogT3B0aW9uYWxDb250ZXh0KTogQXVnbWVudGVkQ29udGV4dCB7XG4gIGlmICghaXNUZXhDb250ZXh0KGN0eCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NldHRpbmdzIG1pc3NpbmcgZm9yIGV4cG9ydCB0byB0ZXgnKTtcbiAgfVxuICByZXR1cm4gY3R4O1xufVxuIiwiaW1wb3J0IHsgZGlzcGxheU1hdGgsIGlubGluZU1hdGggfSBmcm9tICcuL21hdGgnO1xuaW1wb3J0IHsgTm9kZSB9IGZyb20gJ3VuaXN0JztcbmltcG9ydCB7IEF1Z21lbnRlZENvbnRleHQsIGdldENvbnRleHQsIE9wdGlvbmFsQ29udGV4dCB9IGZyb20gJy4vZGF0YSc7XG5pbXBvcnQge1xuICBhc3NlcnRCbG9ja3F1b3RlLFxuICBhc3NlcnRIZWFkaW5nLFxuICBhc3NlcnRMYWJlbERpcmVjdGl2ZSxcbiAgYXNzZXJ0TGFiZWxlZExpbmssXG59IGZyb20gJy4vbWRhc3RJbnRlcmZhY2VzJztcbmltcG9ydCByZWJiZXIgZnJvbSAncmViYmVyJztcblxuY29uc3QgY29uc3VtZSA9IChfY3R4OiB1bmtub3duLCBfbm9kZTogTm9kZSk6IHN0cmluZyA9PiAnJztcbmNvbnN0IHlhbWwgPSBjb25zdW1lO1xuZXhwb3J0IGNvbnN0IHJlYmJlck92ZXJyaWRlcyA9IHtcbiAgd2lraUxpbms6IGVuc3VyZUNvbnRleHQod2lraUxpbmspLFxuICBpbmxpbmVNYXRoOiBlbnN1cmVDb250ZXh0KGlubGluZU1hdGgpLFxuICB0ZXh0RGlyZWN0aXZlOiBlbnN1cmVDb250ZXh0KHRleHREaXJlY3RpdmUpLFxuICB5YW1sLFxuICBtYXRoOiBlbnN1cmVDb250ZXh0KGRpc3BsYXlNYXRoKSxcbiAgaGVhZGluZzogZW5zdXJlQ29udGV4dChoZWFkaW5nKSxcbiAgYmxvY2txdW90ZTogZW5zdXJlQ29udGV4dChibG9ja3F1b3RlKSxcbn07XG5cbmZ1bmN0aW9uIGVuc3VyZUNvbnRleHQoXG4gIGZuOiAoY3R4OiBBdWdtZW50ZWRDb250ZXh0LCBub2RlOiBOb2RlKSA9PiBzdHJpbmcsXG4pOiAoY3R4OiBPcHRpb25hbENvbnRleHQsIG5vZGU6IE5vZGUpID0+IHN0cmluZyB7XG4gIHJldHVybiAoY3R4LCBub2RlKSA9PiB7XG4gICAgcmV0dXJuIGZuKGdldENvbnRleHQoY3R4KSwgbm9kZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHREaXJlY3RpdmUoY3R4OiBBdWdtZW50ZWRDb250ZXh0LCBub2RlOiBOb2RlKTogc3RyaW5nIHtcbiAgYXNzZXJ0TGFiZWxEaXJlY3RpdmUobm9kZSk7XG4gIHJldHVybiBnZXRMYWJlbChjdHgsICdibG9jaycsIG5vZGUuZGF0YT8ubGFiZWwgPz8gJycpO1xufVxuXG5jb25zdCBrZXlQcmVmaXhlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgaGVhZGluZzogJ3NlYycsXG4gIGJsb2NrOiAnYmxvY2snLFxufTtcblxuZnVuY3Rpb24gZ2V0UHJlZml4KHRhcmdldFR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XG4gIGlmICh0YXJnZXRUeXBlICE9PSB1bmRlZmluZWQgJiYgdGFyZ2V0VHlwZSBpbiBrZXlQcmVmaXhlcykge1xuICAgIHJldHVybiBrZXlQcmVmaXhlc1t0YXJnZXRUeXBlXSArICc6JztcbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGdldFJlZihcbiAgY3R4OiBBdWdtZW50ZWRDb250ZXh0LFxuICB0YXJnZXRUeXBlOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gIGxhYmVsOiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICBjb25zdCB7XG4gICAgZXhwb3J0VG9UZXg6IHsgcmVmQ29tbWFuZCwgZ2VuZXJhdGVMYWJlbHMgfSxcbiAgfSA9IGN0eDtcbiAgaWYgKCFnZW5lcmF0ZUxhYmVscykgcmV0dXJuICcnO1xuICByZXR1cm4gYFxcXFwke3JlZkNvbW1hbmR9eyR7Z2V0UHJlZml4KHRhcmdldFR5cGUpfSR7bGFiZWx9fWA7XG59XG5cbmZ1bmN0aW9uIGdldExhYmVsKFxuICBjdHg6IEF1Z21lbnRlZENvbnRleHQsXG4gIHRhcmdldFR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgbGFiZWw6IHN0cmluZyxcbik6IHN0cmluZyB7XG4gIGNvbnN0IHtcbiAgICBleHBvcnRUb1RleDogeyBnZW5lcmF0ZUxhYmVscyB9LFxuICB9ID0gY3R4O1xuICBpZiAoIWdlbmVyYXRlTGFiZWxzKSByZXR1cm4gJyc7XG4gIHJldHVybiBgXFxcXGxhYmVseyR7Z2V0UHJlZml4KHRhcmdldFR5cGUpfSR7bGFiZWx9fWA7XG59XG5cbmZ1bmN0aW9uIHdpa2lMaW5rKGN0eDogQXVnbWVudGVkQ29udGV4dCwgbm9kZTogTm9kZSk6IHN0cmluZyB7XG4gIGFzc2VydExhYmVsZWRMaW5rKG5vZGUpO1xuXG4gIGNvbnN0IHsgYWxpYXMsIGxhYmVsLCB0YXJnZXRUeXBlIH0gPSBub2RlLmRhdGE7XG4gIGlmICghbm9kZS52YWx1ZS5jb250YWlucygnIycpIHx8IGxhYmVsID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYWxpYXMgPz8gbm9kZS52YWx1ZTtcbiAgfVxuICByZXR1cm4gYCR7YWxpYXMgPz8gJyd9JHtnZXRSZWYoY3R4LCB0YXJnZXRUeXBlLCBsYWJlbCl9YDtcbn1cblxuY29uc3QgaGVhZGluZ05hbWVzID0gW1xuICAnc2VjdGlvbicsXG4gICdzdWJzZWN0aW9uJyxcbiAgJ3N1YnN1YnNlY3Rpb24nLFxuICAncGFyYWdyYXBoJyxcbiAgJ3N1YnBhcmFncmFwaCcsXG5dO1xuXG5mdW5jdGlvbiBoZWFkaW5nKGN0eDogQXVnbWVudGVkQ29udGV4dCwgbm9kZTogTm9kZSk6IHN0cmluZyB7XG4gIGFzc2VydEhlYWRpbmcobm9kZSk7XG5cbiAgaWYgKG5vZGUuZGVwdGggPiA1KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGNvbnN0IGNtZCA9IGhlYWRpbmdOYW1lc1tub2RlLmRlcHRoIC0gMV07XG4gIGNvbnN0IHRleHQgPSBub2RlLmNoaWxkcmVuXG4gICAgLm1hcCgoY29udGVudCkgPT4gcmViYmVyLnRvTGFUZVgoY29udGVudCwgY3R4KSlcbiAgICAuam9pbignJyk7XG4gIGNvbnN0IGxhYmVsID0gbm9kZS5kYXRhPy5sYWJlbCBhcyBzdHJpbmc7XG4gIHJldHVybiBgXFxcXCR7Y21kfXske3RleHR9fSR7Z2V0TGFiZWwoY3R4LCAnaGVhZGluZycsIGxhYmVsKX1gO1xufVxuXG5mdW5jdGlvbiBibG9ja3F1b3RlKGN0eDogQXVnbWVudGVkQ29udGV4dCwgbm9kZTogTm9kZSk6IHN0cmluZyB7XG4gIGFzc2VydEJsb2NrcXVvdGUobm9kZSk7XG4gIGNvbnN0IHRleHQgPSBub2RlLmNoaWxkcmVuXG4gICAgLm1hcCgoY29udGVudCkgPT4gcmViYmVyLnRvTGFUZVgoY29udGVudCwgY3R4KSlcbiAgICAuam9pbignJyk7XG4gIHJldHVybiBgXFxcXGJlZ2lue3F1b3RhdGlvbn1cXG4ke3RleHR9XFxcXGVuZHtxdW90YXRpb259XFxuXFxuYDtcbn1cbiIsImltcG9ydCB1bmlmaWVkIGZyb20gJ3VuaWZpZWQnO1xuaW1wb3J0IG1hcmtkb3duIGZyb20gJ3JlbWFyay1wYXJzZSc7XG5pbXBvcnQgbWF0aCBmcm9tICdyZW1hcmstbWF0aCc7XG5pbXBvcnQgZ2ZtIGZyb20gJ3JlbWFyay1nZm0nO1xuaW1wb3J0IGRpcmVjdGl2ZSBmcm9tICdyZW1hcmstZGlyZWN0aXZlJztcbmltcG9ydCB7IHdpa2lMaW5rUGx1Z2luIH0gZnJvbSAncmVtYXJrLXdpa2ktbGluayc7XG5pbXBvcnQgZnJvbnRtYXR0ZXIgZnJvbSAncmVtYXJrLWZyb250bWF0dGVyJztcbmltcG9ydCByZWJiZXIgZnJvbSAncmViYmVyJztcbmltcG9ydCB7IGVtYmVkIH0gZnJvbSAnLi9lbWJlZCc7XG5pbXBvcnQgeyBsYWJlbHMgfSBmcm9tICcuL2xhYmVscyc7XG5pbXBvcnQgeyByZWJiZXJPdmVycmlkZXMgfSBmcm9tICcuL3N0cmluZ2lmeSc7XG5cbmV4cG9ydCBjb25zdCBtYXJrZG93blRvVGV4ID0gdW5pZmllZCgpXG4gIC51c2UobWFya2Rvd24pXG4gIC51c2UoZ2ZtKVxuICAudXNlKG1hdGgpXG4gIC51c2UoZnJvbnRtYXR0ZXIpXG4gIC51c2UoZGlyZWN0aXZlKVxuICAudXNlKHdpa2lMaW5rUGx1Z2luLCB7XG4gICAgYWxpYXNEaXZpZGVyOiAnfCcsXG4gIH0pXG4gIC51c2UoZW1iZWQpXG4gIC51c2UobGFiZWxzKVxuICAudXNlKHJlYmJlciwge1xuICAgIG92ZXJyaWRlczogcmViYmVyT3ZlcnJpZGVzLFxuICB9KVxuICAuZnJlZXplKCk7XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IChmbGFnLCBhcmd2KSA9PiB7XG5cdGFyZ3YgPSBhcmd2IHx8IHByb2Nlc3MuYXJndjtcblx0Y29uc3QgcHJlZml4ID0gZmxhZy5zdGFydHNXaXRoKCctJykgPyAnJyA6IChmbGFnLmxlbmd0aCA9PT0gMSA/ICctJyA6ICctLScpO1xuXHRjb25zdCBwb3MgPSBhcmd2LmluZGV4T2YocHJlZml4ICsgZmxhZyk7XG5cdGNvbnN0IHRlcm1pbmF0b3JQb3MgPSBhcmd2LmluZGV4T2YoJy0tJyk7XG5cdHJldHVybiBwb3MgIT09IC0xICYmICh0ZXJtaW5hdG9yUG9zID09PSAtMSA/IHRydWUgOiBwb3MgPCB0ZXJtaW5hdG9yUG9zKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBoYXNGbGFnID0gcmVxdWlyZSgnaGFzLWZsYWcnKTtcblxuY29uc3Qge2Vudn0gPSBwcm9jZXNzO1xuXG5sZXQgZm9yY2VDb2xvcjtcbmlmIChoYXNGbGFnKCduby1jb2xvcicpIHx8XG5cdGhhc0ZsYWcoJ25vLWNvbG9ycycpIHx8XG5cdGhhc0ZsYWcoJ2NvbG9yPWZhbHNlJykgfHxcblx0aGFzRmxhZygnY29sb3I9bmV2ZXInKSkge1xuXHRmb3JjZUNvbG9yID0gMDtcbn0gZWxzZSBpZiAoaGFzRmxhZygnY29sb3InKSB8fFxuXHRoYXNGbGFnKCdjb2xvcnMnKSB8fFxuXHRoYXNGbGFnKCdjb2xvcj10cnVlJykgfHxcblx0aGFzRmxhZygnY29sb3I9YWx3YXlzJykpIHtcblx0Zm9yY2VDb2xvciA9IDE7XG59XG5pZiAoJ0ZPUkNFX0NPTE9SJyBpbiBlbnYpIHtcblx0aWYgKGVudi5GT1JDRV9DT0xPUiA9PT0gdHJ1ZSB8fCBlbnYuRk9SQ0VfQ09MT1IgPT09ICd0cnVlJykge1xuXHRcdGZvcmNlQ29sb3IgPSAxO1xuXHR9IGVsc2UgaWYgKGVudi5GT1JDRV9DT0xPUiA9PT0gZmFsc2UgfHwgZW52LkZPUkNFX0NPTE9SID09PSAnZmFsc2UnKSB7XG5cdFx0Zm9yY2VDb2xvciA9IDA7XG5cdH0gZWxzZSB7XG5cdFx0Zm9yY2VDb2xvciA9IGVudi5GT1JDRV9DT0xPUi5sZW5ndGggPT09IDAgPyAxIDogTWF0aC5taW4ocGFyc2VJbnQoZW52LkZPUkNFX0NPTE9SLCAxMCksIDMpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUxldmVsKGxldmVsKSB7XG5cdGlmIChsZXZlbCA9PT0gMCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bGV2ZWwsXG5cdFx0aGFzQmFzaWM6IHRydWUsXG5cdFx0aGFzMjU2OiBsZXZlbCA+PSAyLFxuXHRcdGhhczE2bTogbGV2ZWwgPj0gM1xuXHR9O1xufVxuXG5mdW5jdGlvbiBzdXBwb3J0c0NvbG9yKHN0cmVhbSkge1xuXHRpZiAoZm9yY2VDb2xvciA9PT0gMCkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0aWYgKGhhc0ZsYWcoJ2NvbG9yPTE2bScpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9ZnVsbCcpIHx8XG5cdFx0aGFzRmxhZygnY29sb3I9dHJ1ZWNvbG9yJykpIHtcblx0XHRyZXR1cm4gMztcblx0fVxuXG5cdGlmIChoYXNGbGFnKCdjb2xvcj0yNTYnKSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cblx0aWYgKHN0cmVhbSAmJiAhc3RyZWFtLmlzVFRZICYmIGZvcmNlQ29sb3IgPT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Y29uc3QgbWluID0gZm9yY2VDb2xvciB8fCAwO1xuXG5cdGlmIChlbnYuVEVSTSA9PT0gJ2R1bWInKSB7XG5cdFx0cmV0dXJuIG1pbjtcblx0fVxuXG5cdGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG5cdFx0Ly8gTm9kZS5qcyA3LjUuMCBpcyB0aGUgZmlyc3QgdmVyc2lvbiBvZiBOb2RlLmpzIHRvIGluY2x1ZGUgYSBwYXRjaCB0b1xuXHRcdC8vIGxpYnV2IHRoYXQgZW5hYmxlcyAyNTYgY29sb3Igb3V0cHV0IG9uIFdpbmRvd3MuIEFueXRoaW5nIGVhcmxpZXIgYW5kIGl0XG5cdFx0Ly8gd29uJ3Qgd29yay4gSG93ZXZlciwgaGVyZSB3ZSB0YXJnZXQgTm9kZS5qcyA4IGF0IG1pbmltdW0gYXMgaXQgaXMgYW4gTFRTXG5cdFx0Ly8gcmVsZWFzZSwgYW5kIE5vZGUuanMgNyBpcyBub3QuIFdpbmRvd3MgMTAgYnVpbGQgMTA1ODYgaXMgdGhlIGZpcnN0IFdpbmRvd3Ncblx0XHQvLyByZWxlYXNlIHRoYXQgc3VwcG9ydHMgMjU2IGNvbG9ycy4gV2luZG93cyAxMCBidWlsZCAxNDkzMSBpcyB0aGUgZmlyc3QgcmVsZWFzZVxuXHRcdC8vIHRoYXQgc3VwcG9ydHMgMTZtL1RydWVDb2xvci5cblx0XHRjb25zdCBvc1JlbGVhc2UgPSBvcy5yZWxlYXNlKCkuc3BsaXQoJy4nKTtcblx0XHRpZiAoXG5cdFx0XHROdW1iZXIocHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJylbMF0pID49IDggJiZcblx0XHRcdE51bWJlcihvc1JlbGVhc2VbMF0pID49IDEwICYmXG5cdFx0XHROdW1iZXIob3NSZWxlYXNlWzJdKSA+PSAxMDU4NlxuXHRcdCkge1xuXHRcdFx0cmV0dXJuIE51bWJlcihvc1JlbGVhc2VbMl0pID49IDE0OTMxID8gMyA6IDI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDE7XG5cdH1cblxuXHRpZiAoJ0NJJyBpbiBlbnYpIHtcblx0XHRpZiAoWydUUkFWSVMnLCAnQ0lSQ0xFQ0knLCAnQVBQVkVZT1InLCAnR0lUTEFCX0NJJ10uc29tZShzaWduID0+IHNpZ24gaW4gZW52KSB8fCBlbnYuQ0lfTkFNRSA9PT0gJ2NvZGVzaGlwJykge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1pbjtcblx0fVxuXG5cdGlmICgnVEVBTUNJVFlfVkVSU0lPTicgaW4gZW52KSB7XG5cdFx0cmV0dXJuIC9eKDlcXC4oMCpbMS05XVxcZCopXFwufFxcZHsyLH1cXC4pLy50ZXN0KGVudi5URUFNQ0lUWV9WRVJTSU9OKSA/IDEgOiAwO1xuXHR9XG5cblx0aWYgKGVudi5DT0xPUlRFUk0gPT09ICd0cnVlY29sb3InKSB7XG5cdFx0cmV0dXJuIDM7XG5cdH1cblxuXHRpZiAoJ1RFUk1fUFJPR1JBTScgaW4gZW52KSB7XG5cdFx0Y29uc3QgdmVyc2lvbiA9IHBhcnNlSW50KChlbnYuVEVSTV9QUk9HUkFNX1ZFUlNJT04gfHwgJycpLnNwbGl0KCcuJylbMF0sIDEwKTtcblxuXHRcdHN3aXRjaCAoZW52LlRFUk1fUFJPR1JBTSkge1xuXHRcdFx0Y2FzZSAnaVRlcm0uYXBwJzpcblx0XHRcdFx0cmV0dXJuIHZlcnNpb24gPj0gMyA/IDMgOiAyO1xuXHRcdFx0Y2FzZSAnQXBwbGVfVGVybWluYWwnOlxuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdC8vIE5vIGRlZmF1bHRcblx0XHR9XG5cdH1cblxuXHRpZiAoLy0yNTYoY29sb3IpPyQvaS50ZXN0KGVudi5URVJNKSkge1xuXHRcdHJldHVybiAyO1xuXHR9XG5cblx0aWYgKC9ec2NyZWVufF54dGVybXxednQxMDB8XnZ0MjIwfF5yeHZ0fGNvbG9yfGFuc2l8Y3lnd2lufGxpbnV4L2kudGVzdChlbnYuVEVSTSkpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmICgnQ09MT1JURVJNJyBpbiBlbnYpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdHJldHVybiBtaW47XG59XG5cbmZ1bmN0aW9uIGdldFN1cHBvcnRMZXZlbChzdHJlYW0pIHtcblx0Y29uc3QgbGV2ZWwgPSBzdXBwb3J0c0NvbG9yKHN0cmVhbSk7XG5cdHJldHVybiB0cmFuc2xhdGVMZXZlbChsZXZlbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzdXBwb3J0c0NvbG9yOiBnZXRTdXBwb3J0TGV2ZWwsXG5cdHN0ZG91dDogZ2V0U3VwcG9ydExldmVsKHByb2Nlc3Muc3Rkb3V0KSxcblx0c3RkZXJyOiBnZXRTdXBwb3J0TGV2ZWwocHJvY2Vzcy5zdGRlcnIpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh7b25seUZpcnN0ID0gZmFsc2V9ID0ge30pID0+IHtcblx0Y29uc3QgcGF0dGVybiA9IFtcblx0XHQnW1xcXFx1MDAxQlxcXFx1MDA5Ql1bW1xcXFxdKCkjOz9dKig/Oig/Oig/OlthLXpBLVpcXFxcZF0qKD86O1stYS16QS1aXFxcXGRcXFxcLyMmLjo9PyVAfl9dKikqKT9cXFxcdTAwMDcpJyxcblx0XHQnKD86KD86XFxcXGR7MSw0fSg/OjtcXFxcZHswLDR9KSopP1tcXFxcZEEtUFItVFpjZi1udHFyeT0+PH5dKSknXG5cdF0uam9pbignfCcpO1xuXG5cdHJldHVybiBuZXcgUmVnRXhwKHBhdHRlcm4sIG9ubHlGaXJzdCA/IHVuZGVmaW5lZCA6ICdnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3QgYW5zaVJlZ2V4ID0gcmVxdWlyZSgnYW5zaS1yZWdleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZyA9PiB0eXBlb2Ygc3RyaW5nID09PSAnc3RyaW5nJyA/IHN0cmluZy5yZXBsYWNlKGFuc2lSZWdleCgpLCAnJykgOiBzdHJpbmc7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSB5b2RhICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGlzRnVsbHdpZHRoQ29kZVBvaW50ID0gY29kZVBvaW50ID0+IHtcblx0aWYgKE51bWJlci5pc05hTihjb2RlUG9pbnQpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gQ29kZSBwb2ludHMgYXJlIGRlcml2ZWQgZnJvbTpcblx0Ly8gaHR0cDovL3d3dy51bml4Lm9yZy9QdWJsaWMvVU5JREFUQS9FYXN0QXNpYW5XaWR0aC50eHRcblx0aWYgKFxuXHRcdGNvZGVQb2ludCA+PSAweDExMDAgJiYgKFxuXHRcdFx0Y29kZVBvaW50IDw9IDB4MTE1RiB8fCAvLyBIYW5ndWwgSmFtb1xuXHRcdFx0Y29kZVBvaW50ID09PSAweDIzMjkgfHwgLy8gTEVGVC1QT0lOVElORyBBTkdMRSBCUkFDS0VUXG5cdFx0XHRjb2RlUG9pbnQgPT09IDB4MjMyQSB8fCAvLyBSSUdIVC1QT0lOVElORyBBTkdMRSBCUkFDS0VUXG5cdFx0XHQvLyBDSksgUmFkaWNhbHMgU3VwcGxlbWVudCAuLiBFbmNsb3NlZCBDSksgTGV0dGVycyBhbmQgTW9udGhzXG5cdFx0XHQoMHgyRTgwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHgzMjQ3ICYmIGNvZGVQb2ludCAhPT0gMHgzMDNGKSB8fFxuXHRcdFx0Ly8gRW5jbG9zZWQgQ0pLIExldHRlcnMgYW5kIE1vbnRocyAuLiBDSksgVW5pZmllZCBJZGVvZ3JhcGhzIEV4dGVuc2lvbiBBXG5cdFx0XHQoMHgzMjUwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHg0REJGKSB8fFxuXHRcdFx0Ly8gQ0pLIFVuaWZpZWQgSWRlb2dyYXBocyAuLiBZaSBSYWRpY2Fsc1xuXHRcdFx0KDB4NEUwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4QTRDNikgfHxcblx0XHRcdC8vIEhhbmd1bCBKYW1vIEV4dGVuZGVkLUFcblx0XHRcdCgweEE5NjAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweEE5N0MpIHx8XG5cdFx0XHQvLyBIYW5ndWwgU3lsbGFibGVzXG5cdFx0XHQoMHhBQzAwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhEN0EzKSB8fFxuXHRcdFx0Ly8gQ0pLIENvbXBhdGliaWxpdHkgSWRlb2dyYXBoc1xuXHRcdFx0KDB4RjkwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4RkFGRikgfHxcblx0XHRcdC8vIFZlcnRpY2FsIEZvcm1zXG5cdFx0XHQoMHhGRTEwIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGRTE5KSB8fFxuXHRcdFx0Ly8gQ0pLIENvbXBhdGliaWxpdHkgRm9ybXMgLi4gU21hbGwgRm9ybSBWYXJpYW50c1xuXHRcdFx0KDB4RkUzMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4RkU2QikgfHxcblx0XHRcdC8vIEhhbGZ3aWR0aCBhbmQgRnVsbHdpZHRoIEZvcm1zXG5cdFx0XHQoMHhGRjAxIDw9IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPD0gMHhGRjYwKSB8fFxuXHRcdFx0KDB4RkZFMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4RkZFNikgfHxcblx0XHRcdC8vIEthbmEgU3VwcGxlbWVudFxuXHRcdFx0KDB4MUIwMDAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweDFCMDAxKSB8fFxuXHRcdFx0Ly8gRW5jbG9zZWQgSWRlb2dyYXBoaWMgU3VwcGxlbWVudFxuXHRcdFx0KDB4MUYyMDAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweDFGMjUxKSB8fFxuXHRcdFx0Ly8gQ0pLIFVuaWZpZWQgSWRlb2dyYXBocyBFeHRlbnNpb24gQiAuLiBUZXJ0aWFyeSBJZGVvZ3JhcGhpYyBQbGFuZVxuXHRcdFx0KDB4MjAwMDAgPD0gY29kZVBvaW50ICYmIGNvZGVQb2ludCA8PSAweDNGRkZEKVxuXHRcdClcblx0KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVsbHdpZHRoQ29kZVBvaW50O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGlzRnVsbHdpZHRoQ29kZVBvaW50O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL210aHMuYmUvZW1vamlcbiAgcmV0dXJuIC9cXHVEODNDXFx1REZGNFxcdURCNDBcXHVEQzY3XFx1REI0MFxcdURDNjIoPzpcXHVEQjQwXFx1REM2NVxcdURCNDBcXHVEQzZFXFx1REI0MFxcdURDNjd8XFx1REI0MFxcdURDNzNcXHVEQjQwXFx1REM2M1xcdURCNDBcXHVEQzc0fFxcdURCNDBcXHVEQzc3XFx1REI0MFxcdURDNkNcXHVEQjQwXFx1REM3MylcXHVEQjQwXFx1REM3RnxcXHVEODNEXFx1REM2OCg/OlxcdUQ4M0NcXHVERkZDXFx1MjAwRCg/OlxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4XFx1RDgzQ1xcdURGRkJ8XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRVtcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF0pfFxcdUQ4M0NcXHVERkZGXFx1MjAwRCg/OlxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0RcXHVEQzY4KD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQ1xcdURGRkVcXHUyMDBEKD86XFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjgoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRF0pfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXxcXHVEODNDXFx1REZGRFxcdTIwMEQoPzpcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OCg/OlxcdUQ4M0NbXFx1REZGQlxcdURGRkNdKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1MjAwRCg/OlxcdTI3NjRcXHVGRTBGXFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzhCXFx1MjAwRCk/XFx1RDgzRFxcdURDNjh8KD86XFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pXFx1MjAwRCg/OlxcdUQ4M0RcXHVEQzY2XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fFxcdUQ4M0RcXHVEQzY3XFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2NlxcdURDNjddKSl8XFx1RDgzRFxcdURDNjZcXHUyMDBEXFx1RDgzRFxcdURDNjZ8XFx1RDgzRFxcdURDNjdcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY2XFx1REM2N10pfCg/OlxcdUQ4M0RbXFx1REM2OFxcdURDNjldKVxcdTIwMEQoPzpcXHVEODNEW1xcdURDNjZcXHVEQzY3XSl8W1xcdTI2OTVcXHUyNjk2XFx1MjcwOF1cXHVGRTBGfFxcdUQ4M0RbXFx1REM2NlxcdURDNjddfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXwoPzpcXHVEODNDXFx1REZGQlxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGRlxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGRVxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGRFxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGQ1xcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XSlcXHVGRTBGfFxcdUQ4M0NcXHVERkZCXFx1MjAwRCg/OlxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXxcXHVEODNDW1xcdURGRkItXFx1REZGRl0pfCg/OlxcdUQ4M0VcXHVEREQxXFx1RDgzQ1xcdURGRkJcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDF8XFx1RDgzRFxcdURDNjlcXHVEODNDXFx1REZGQ1xcdTIwMERcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OSlcXHVEODNDXFx1REZGQnxcXHVEODNFXFx1REREMSg/OlxcdUQ4M0NcXHVERkZGXFx1MjAwRFxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkZdKXxcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDEpfCg/OlxcdUQ4M0VcXHVEREQxXFx1RDgzQ1xcdURGRkVcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDF8XFx1RDgzRFxcdURDNjlcXHVEODNDXFx1REZGRlxcdTIwMERcXHVEODNFXFx1REQxRFxcdTIwMEQoPzpcXHVEODNEW1xcdURDNjhcXHVEQzY5XSkpKD86XFx1RDgzQ1tcXHVERkZCLVxcdURGRkVdKXwoPzpcXHVEODNFXFx1REREMVxcdUQ4M0NcXHVERkZDXFx1MjAwRFxcdUQ4M0VcXHVERDFEXFx1MjAwRFxcdUQ4M0VcXHVEREQxfFxcdUQ4M0RcXHVEQzY5XFx1RDgzQ1xcdURGRkRcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjkpKD86XFx1RDgzQ1tcXHVERkZCXFx1REZGQ10pfFxcdUQ4M0RcXHVEQzY5KD86XFx1RDgzQ1xcdURGRkVcXHUyMDBEKD86XFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjgoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRFxcdURGRkZdKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQ1xcdURGRkNcXHUyMDBEKD86XFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjgoPzpcXHVEODNDW1xcdURGRkJcXHVERkZELVxcdURGRkZdKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQ1xcdURGRkJcXHUyMDBEKD86XFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRFxcdURDNjgoPzpcXHVEODNDW1xcdURGRkMtXFx1REZGRl0pfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXxcXHVEODNDXFx1REZGRFxcdTIwMEQoPzpcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OCg/OlxcdUQ4M0NbXFx1REZGQlxcdURGRkNcXHVERkZFXFx1REZGRl0pfFxcdUQ4M0NbXFx1REYzRVxcdURGNzNcXHVERjkzXFx1REZBNFxcdURGQThcXHVERkVCXFx1REZFRF18XFx1RDgzRFtcXHVEQ0JCXFx1RENCQ1xcdUREMjdcXHVERDJDXFx1REU4MFxcdURFOTJdfFxcdUQ4M0VbXFx1RERBRi1cXHVEREIzXFx1RERCQ1xcdUREQkRdKXxcXHUyMDBEKD86XFx1Mjc2NFxcdUZFMEZcXHUyMDBEKD86XFx1RDgzRFxcdURDOEJcXHUyMDBEKD86XFx1RDgzRFtcXHVEQzY4XFx1REM2OV0pfFxcdUQ4M0RbXFx1REM2OFxcdURDNjldKXxcXHVEODNDW1xcdURGM0VcXHVERjczXFx1REY5M1xcdURGQTRcXHVERkE4XFx1REZFQlxcdURGRURdfFxcdUQ4M0RbXFx1RENCQlxcdURDQkNcXHVERDI3XFx1REQyQ1xcdURFODBcXHVERTkyXXxcXHVEODNFW1xcdUREQUYtXFx1RERCM1xcdUREQkNcXHVEREJEXSl8XFx1RDgzQ1xcdURGRkZcXHUyMDBEKD86XFx1RDgzQ1tcXHVERjNFXFx1REY3M1xcdURGOTNcXHVERkE0XFx1REZBOFxcdURGRUJcXHVERkVEXXxcXHVEODNEW1xcdURDQkJcXHVEQ0JDXFx1REQyN1xcdUREMkNcXHVERTgwXFx1REU5Ml18XFx1RDgzRVtcXHVEREFGLVxcdUREQjNcXHVEREJDXFx1RERCRF0pKXxcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNEXFx1REM2OVxcdTIwMEQoPzpcXHVEODNEXFx1REM2NlxcdTIwMERcXHVEODNEXFx1REM2NnxcXHVEODNEXFx1REM2N1xcdTIwMEQoPzpcXHVEODNEW1xcdURDNjZcXHVEQzY3XSkpfCg/OlxcdUQ4M0VcXHVEREQxXFx1RDgzQ1xcdURGRkRcXHUyMDBEXFx1RDgzRVxcdUREMURcXHUyMDBEXFx1RDgzRVxcdURERDF8XFx1RDgzRFxcdURDNjlcXHVEODNDXFx1REZGRVxcdTIwMERcXHVEODNFXFx1REQxRFxcdTIwMERcXHVEODNEXFx1REM2OSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRF0pfFxcdUQ4M0RcXHVEQzY5XFx1MjAwRFxcdUQ4M0RcXHVEQzY2XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fFxcdUQ4M0RcXHVEQzY5XFx1MjAwRFxcdUQ4M0RcXHVEQzY5XFx1MjAwRCg/OlxcdUQ4M0RbXFx1REM2NlxcdURDNjddKXwoPzpcXHVEODNEXFx1REM0MVxcdUZFMEZcXHUyMDBEXFx1RDgzRFxcdURERTh8XFx1RDgzRFxcdURDNjkoPzpcXHVEODNDXFx1REZGRlxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGRVxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGQ1xcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGQlxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHVEODNDXFx1REZGRFxcdTIwMERbXFx1MjY5NVxcdTI2OTZcXHUyNzA4XXxcXHUyMDBEW1xcdTI2OTVcXHUyNjk2XFx1MjcwOF0pfCg/Oig/OlxcdTI2Rjl8XFx1RDgzQ1tcXHVERkNCXFx1REZDQ118XFx1RDgzRFxcdURENzUpXFx1RkUwRnxcXHVEODNEXFx1REM2RnxcXHVEODNFW1xcdUREM0NcXHVERERFXFx1RERERl0pXFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml18KD86XFx1MjZGOXxcXHVEODNDW1xcdURGQ0JcXHVERkNDXXxcXHVEODNEXFx1REQ3NSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pXFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml18KD86XFx1RDgzQ1tcXHVERkMzXFx1REZDNFxcdURGQ0FdfFxcdUQ4M0RbXFx1REM2RVxcdURDNzFcXHVEQzczXFx1REM3N1xcdURDODFcXHVEQzgyXFx1REM4NlxcdURDODdcXHVERTQ1LVxcdURFNDdcXHVERTRCXFx1REU0RFxcdURFNEVcXHVERUEzXFx1REVCNC1cXHVERUI2XXxcXHVEODNFW1xcdUREMjZcXHVERDM3LVxcdUREMzlcXHVERDNEXFx1REQzRVxcdUREQjhcXHVEREI5XFx1RERDRC1cXHVERENGXFx1RERENi1cXHVEREREXSkoPzooPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pXFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml18XFx1MjAwRFtcXHUyNjQwXFx1MjY0Ml0pfFxcdUQ4M0NcXHVERkY0XFx1MjAwRFxcdTI2MjApXFx1RkUwRnxcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNEXFx1REM2N1xcdTIwMEQoPzpcXHVEODNEW1xcdURDNjZcXHVEQzY3XSl8XFx1RDgzQ1xcdURGRjNcXHVGRTBGXFx1MjAwRFxcdUQ4M0NcXHVERjA4fFxcdUQ4M0RcXHVEQzE1XFx1MjAwRFxcdUQ4M0VcXHVEREJBfFxcdUQ4M0RcXHVEQzY5XFx1MjAwRFxcdUQ4M0RcXHVEQzY2fFxcdUQ4M0RcXHVEQzY5XFx1MjAwRFxcdUQ4M0RcXHVEQzY3fFxcdUQ4M0NcXHVEREZEXFx1RDgzQ1xcdURERjB8XFx1RDgzQ1xcdURERjRcXHVEODNDXFx1RERGMnxcXHVEODNDXFx1RERGNlxcdUQ4M0NcXHVEREU2fFsjXFwqMC05XVxcdUZFMEZcXHUyMEUzfFxcdUQ4M0NcXHVEREU3KD86XFx1RDgzQ1tcXHVEREU2XFx1RERFN1xcdURERTktXFx1RERFRlxcdURERjEtXFx1RERGNFxcdURERjYtXFx1RERGOVxcdURERkJcXHVEREZDXFx1RERGRVxcdURERkZdKXxcXHVEODNDXFx1RERGOSg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVEXFx1RERFRi1cXHVEREY0XFx1RERGN1xcdURERjlcXHVEREZCXFx1RERGQ1xcdURERkZdKXxcXHVEODNDXFx1RERFQSg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERURcXHVEREY3LVxcdURERkFdKXxcXHVEODNFXFx1REREMSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8XFx1RDgzQ1xcdURERjcoPzpcXHVEODNDW1xcdURERUFcXHVEREY0XFx1RERGOFxcdURERkFcXHVEREZDXSl8XFx1RDgzRFxcdURDNjkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pfFxcdUQ4M0NcXHVEREYyKD86XFx1RDgzQ1tcXHVEREU2XFx1RERFOC1cXHVEREVEXFx1RERGMC1cXHVEREZGXSl8XFx1RDgzQ1xcdURERTYoPzpcXHVEODNDW1xcdURERTgtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGMlxcdURERjRcXHVEREY2LVxcdURERkFcXHVEREZDXFx1RERGRFxcdURERkZdKXxcXHVEODNDXFx1RERGMCg/OlxcdUQ4M0NbXFx1RERFQVxcdURERUMtXFx1RERFRVxcdURERjJcXHVEREYzXFx1RERGNVxcdURERjdcXHVEREZDXFx1RERGRVxcdURERkZdKXxcXHVEODNDXFx1RERFRCg/OlxcdUQ4M0NbXFx1RERGMFxcdURERjJcXHVEREYzXFx1RERGN1xcdURERjlcXHVEREZBXSl8XFx1RDgzQ1xcdURERTkoPzpcXHVEODNDW1xcdURERUFcXHVEREVDXFx1RERFRlxcdURERjBcXHVEREYyXFx1RERGNFxcdURERkZdKXxcXHVEODNDXFx1RERGRSg/OlxcdUQ4M0NbXFx1RERFQVxcdURERjldKXxcXHVEODNDXFx1RERFQyg/OlxcdUQ4M0NbXFx1RERFNlxcdURERTdcXHVEREU5LVxcdURERUVcXHVEREYxLVxcdURERjNcXHVEREY1LVxcdURERkFcXHVEREZDXFx1RERGRV0pfFxcdUQ4M0NcXHVEREY4KD86XFx1RDgzQ1tcXHVEREU2LVxcdURERUFcXHVEREVDLVxcdURERjRcXHVEREY3LVxcdURERjlcXHVEREZCXFx1RERGRC1cXHVEREZGXSl8XFx1RDgzQ1xcdURERUIoPzpcXHVEODNDW1xcdURERUUtXFx1RERGMFxcdURERjJcXHVEREY0XFx1RERGN10pfFxcdUQ4M0NcXHVEREY1KD86XFx1RDgzQ1tcXHVEREU2XFx1RERFQS1cXHVEREVEXFx1RERGMC1cXHVEREYzXFx1RERGNy1cXHVEREY5XFx1RERGQ1xcdURERkVdKXxcXHVEODNDXFx1RERGQig/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREVBXFx1RERFQ1xcdURERUVcXHVEREYzXFx1RERGQV0pfFxcdUQ4M0NcXHVEREYzKD86XFx1RDgzQ1tcXHVEREU2XFx1RERFOFxcdURERUEtXFx1RERFQ1xcdURERUVcXHVEREYxXFx1RERGNFxcdURERjVcXHVEREY3XFx1RERGQVxcdURERkZdKXxcXHVEODNDXFx1RERFOCg/OlxcdUQ4M0NbXFx1RERFNlxcdURERThcXHVEREU5XFx1RERFQi1cXHVEREVFXFx1RERGMC1cXHVEREY1XFx1RERGN1xcdURERkEtXFx1RERGRl0pfFxcdUQ4M0NcXHVEREYxKD86XFx1RDgzQ1tcXHVEREU2LVxcdURERThcXHVEREVFXFx1RERGMFxcdURERjctXFx1RERGQlxcdURERkVdKXxcXHVEODNDXFx1RERGRig/OlxcdUQ4M0NbXFx1RERFNlxcdURERjJcXHVEREZDXSl8XFx1RDgzQ1xcdURERkMoPzpcXHVEODNDW1xcdURERUJcXHVEREY4XSl8XFx1RDgzQ1xcdURERkEoPzpcXHVEODNDW1xcdURERTZcXHVEREVDXFx1RERGMlxcdURERjNcXHVEREY4XFx1RERGRVxcdURERkZdKXxcXHVEODNDXFx1RERFRSg/OlxcdUQ4M0NbXFx1RERFOC1cXHVEREVBXFx1RERGMS1cXHVEREY0XFx1RERGNi1cXHVEREY5XSl8XFx1RDgzQ1xcdURERUYoPzpcXHVEODNDW1xcdURERUFcXHVEREYyXFx1RERGNFxcdURERjVdKXwoPzpcXHVEODNDW1xcdURGQzNcXHVERkM0XFx1REZDQV18XFx1RDgzRFtcXHVEQzZFXFx1REM3MVxcdURDNzNcXHVEQzc3XFx1REM4MVxcdURDODJcXHVEQzg2XFx1REM4N1xcdURFNDUtXFx1REU0N1xcdURFNEJcXHVERTREXFx1REU0RVxcdURFQTNcXHVERUI0LVxcdURFQjZdfFxcdUQ4M0VbXFx1REQyNlxcdUREMzctXFx1REQzOVxcdUREM0RcXHVERDNFXFx1RERCOFxcdUREQjlcXHVERENELVxcdUREQ0ZcXHVEREQ2LVxcdURERERdKSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8KD86XFx1MjZGOXxcXHVEODNDW1xcdURGQ0JcXHVERkNDXXxcXHVEODNEXFx1REQ3NSkoPzpcXHVEODNDW1xcdURGRkItXFx1REZGRl0pfCg/OltcXHUyNjFEXFx1MjcwQS1cXHUyNzBEXXxcXHVEODNDW1xcdURGODVcXHVERkMyXFx1REZDN118XFx1RDgzRFtcXHVEQzQyXFx1REM0M1xcdURDNDYtXFx1REM1MFxcdURDNjZcXHVEQzY3XFx1REM2Qi1cXHVEQzZEXFx1REM3MFxcdURDNzJcXHVEQzc0LVxcdURDNzZcXHVEQzc4XFx1REM3Q1xcdURDODNcXHVEQzg1XFx1RENBQVxcdURENzRcXHVERDdBXFx1REQ5MFxcdUREOTVcXHVERDk2XFx1REU0Q1xcdURFNEZcXHVERUMwXFx1REVDQ118XFx1RDgzRVtcXHVERDBGXFx1REQxOC1cXHVERDFDXFx1REQxRVxcdUREMUZcXHVERDMwLVxcdUREMzZcXHVEREI1XFx1RERCNlxcdUREQkJcXHVEREQyLVxcdURERDVdKSg/OlxcdUQ4M0NbXFx1REZGQi1cXHVERkZGXSl8KD86W1xcdTIzMUFcXHUyMzFCXFx1MjNFOS1cXHUyM0VDXFx1MjNGMFxcdTIzRjNcXHUyNUZEXFx1MjVGRVxcdTI2MTRcXHUyNjE1XFx1MjY0OC1cXHUyNjUzXFx1MjY3RlxcdTI2OTNcXHUyNkExXFx1MjZBQVxcdTI2QUJcXHUyNkJEXFx1MjZCRVxcdTI2QzRcXHUyNkM1XFx1MjZDRVxcdTI2RDRcXHUyNkVBXFx1MjZGMlxcdTI2RjNcXHUyNkY1XFx1MjZGQVxcdTI2RkRcXHUyNzA1XFx1MjcwQVxcdTI3MEJcXHUyNzI4XFx1Mjc0Q1xcdTI3NEVcXHUyNzUzLVxcdTI3NTVcXHUyNzU3XFx1Mjc5NS1cXHUyNzk3XFx1MjdCMFxcdTI3QkZcXHUyQjFCXFx1MkIxQ1xcdTJCNTBcXHUyQjU1XXxcXHVEODNDW1xcdURDMDRcXHVEQ0NGXFx1REQ4RVxcdUREOTEtXFx1REQ5QVxcdURERTYtXFx1RERGRlxcdURFMDFcXHVERTFBXFx1REUyRlxcdURFMzItXFx1REUzNlxcdURFMzgtXFx1REUzQVxcdURFNTBcXHVERTUxXFx1REYwMC1cXHVERjIwXFx1REYyRC1cXHVERjM1XFx1REYzNy1cXHVERjdDXFx1REY3RS1cXHVERjkzXFx1REZBMC1cXHVERkNBXFx1REZDRi1cXHVERkQzXFx1REZFMC1cXHVERkYwXFx1REZGNFxcdURGRjgtXFx1REZGRl18XFx1RDgzRFtcXHVEQzAwLVxcdURDM0VcXHVEQzQwXFx1REM0Mi1cXHVEQ0ZDXFx1RENGRi1cXHVERDNEXFx1REQ0Qi1cXHVERDRFXFx1REQ1MC1cXHVERDY3XFx1REQ3QVxcdUREOTVcXHVERDk2XFx1RERBNFxcdURERkItXFx1REU0RlxcdURFODAtXFx1REVDNVxcdURFQ0NcXHVERUQwLVxcdURFRDJcXHVERUQ1XFx1REVFQlxcdURFRUNcXHVERUY0LVxcdURFRkFcXHVERkUwLVxcdURGRUJdfFxcdUQ4M0VbXFx1REQwRC1cXHVERDNBXFx1REQzQy1cXHVERDQ1XFx1REQ0Ny1cXHVERDcxXFx1REQ3My1cXHVERDc2XFx1REQ3QS1cXHVEREEyXFx1RERBNS1cXHVEREFBXFx1RERBRS1cXHVERENBXFx1RERDRC1cXHVEREZGXFx1REU3MC1cXHVERTczXFx1REU3OC1cXHVERTdBXFx1REU4MC1cXHVERTgyXFx1REU5MC1cXHVERTk1XSl8KD86WyNcXCowLTlcXHhBOVxceEFFXFx1MjAzQ1xcdTIwNDlcXHUyMTIyXFx1MjEzOVxcdTIxOTQtXFx1MjE5OVxcdTIxQTlcXHUyMUFBXFx1MjMxQVxcdTIzMUJcXHUyMzI4XFx1MjNDRlxcdTIzRTktXFx1MjNGM1xcdTIzRjgtXFx1MjNGQVxcdTI0QzJcXHUyNUFBXFx1MjVBQlxcdTI1QjZcXHUyNUMwXFx1MjVGQi1cXHUyNUZFXFx1MjYwMC1cXHUyNjA0XFx1MjYwRVxcdTI2MTFcXHUyNjE0XFx1MjYxNVxcdTI2MThcXHUyNjFEXFx1MjYyMFxcdTI2MjJcXHUyNjIzXFx1MjYyNlxcdTI2MkFcXHUyNjJFXFx1MjYyRlxcdTI2MzgtXFx1MjYzQVxcdTI2NDBcXHUyNjQyXFx1MjY0OC1cXHUyNjUzXFx1MjY1RlxcdTI2NjBcXHUyNjYzXFx1MjY2NVxcdTI2NjZcXHUyNjY4XFx1MjY3QlxcdTI2N0VcXHUyNjdGXFx1MjY5Mi1cXHUyNjk3XFx1MjY5OVxcdTI2OUJcXHUyNjlDXFx1MjZBMFxcdTI2QTFcXHUyNkFBXFx1MjZBQlxcdTI2QjBcXHUyNkIxXFx1MjZCRFxcdTI2QkVcXHUyNkM0XFx1MjZDNVxcdTI2QzhcXHUyNkNFXFx1MjZDRlxcdTI2RDFcXHUyNkQzXFx1MjZENFxcdTI2RTlcXHUyNkVBXFx1MjZGMC1cXHUyNkY1XFx1MjZGNy1cXHUyNkZBXFx1MjZGRFxcdTI3MDJcXHUyNzA1XFx1MjcwOC1cXHUyNzBEXFx1MjcwRlxcdTI3MTJcXHUyNzE0XFx1MjcxNlxcdTI3MURcXHUyNzIxXFx1MjcyOFxcdTI3MzNcXHUyNzM0XFx1Mjc0NFxcdTI3NDdcXHUyNzRDXFx1Mjc0RVxcdTI3NTMtXFx1Mjc1NVxcdTI3NTdcXHUyNzYzXFx1Mjc2NFxcdTI3OTUtXFx1Mjc5N1xcdTI3QTFcXHUyN0IwXFx1MjdCRlxcdTI5MzRcXHUyOTM1XFx1MkIwNS1cXHUyQjA3XFx1MkIxQlxcdTJCMUNcXHUyQjUwXFx1MkI1NVxcdTMwMzBcXHUzMDNEXFx1MzI5N1xcdTMyOTldfFxcdUQ4M0NbXFx1REMwNFxcdURDQ0ZcXHVERDcwXFx1REQ3MVxcdUREN0VcXHVERDdGXFx1REQ4RVxcdUREOTEtXFx1REQ5QVxcdURERTYtXFx1RERGRlxcdURFMDFcXHVERTAyXFx1REUxQVxcdURFMkZcXHVERTMyLVxcdURFM0FcXHVERTUwXFx1REU1MVxcdURGMDAtXFx1REYyMVxcdURGMjQtXFx1REY5M1xcdURGOTZcXHVERjk3XFx1REY5OS1cXHVERjlCXFx1REY5RS1cXHVERkYwXFx1REZGMy1cXHVERkY1XFx1REZGNy1cXHVERkZGXXxcXHVEODNEW1xcdURDMDAtXFx1RENGRFxcdURDRkYtXFx1REQzRFxcdURENDktXFx1REQ0RVxcdURENTAtXFx1REQ2N1xcdURENkZcXHVERDcwXFx1REQ3My1cXHVERDdBXFx1REQ4N1xcdUREOEEtXFx1REQ4RFxcdUREOTBcXHVERDk1XFx1REQ5NlxcdUREQTRcXHVEREE1XFx1RERBOFxcdUREQjFcXHVEREIyXFx1RERCQ1xcdUREQzItXFx1RERDNFxcdURERDEtXFx1REREM1xcdUREREMtXFx1RERERVxcdURERTFcXHVEREUzXFx1RERFOFxcdURERUZcXHVEREYzXFx1RERGQS1cXHVERTRGXFx1REU4MC1cXHVERUM1XFx1REVDQi1cXHVERUQyXFx1REVENVxcdURFRTAtXFx1REVFNVxcdURFRTlcXHVERUVCXFx1REVFQ1xcdURFRjBcXHVERUYzLVxcdURFRkFcXHVERkUwLVxcdURGRUJdfFxcdUQ4M0VbXFx1REQwRC1cXHVERDNBXFx1REQzQy1cXHVERDQ1XFx1REQ0Ny1cXHVERDcxXFx1REQ3My1cXHVERDc2XFx1REQ3QS1cXHVEREEyXFx1RERBNS1cXHVEREFBXFx1RERBRS1cXHVERENBXFx1RERDRC1cXHVEREZGXFx1REU3MC1cXHVERTczXFx1REU3OC1cXHVERTdBXFx1REU4MC1cXHVERTgyXFx1REU5MC1cXHVERTk1XSlcXHVGRTBGfCg/OltcXHUyNjFEXFx1MjZGOVxcdTI3MEEtXFx1MjcwRF18XFx1RDgzQ1tcXHVERjg1XFx1REZDMi1cXHVERkM0XFx1REZDN1xcdURGQ0EtXFx1REZDQ118XFx1RDgzRFtcXHVEQzQyXFx1REM0M1xcdURDNDYtXFx1REM1MFxcdURDNjYtXFx1REM3OFxcdURDN0NcXHVEQzgxLVxcdURDODNcXHVEQzg1LVxcdURDODdcXHVEQzhGXFx1REM5MVxcdURDQUFcXHVERDc0XFx1REQ3NVxcdUREN0FcXHVERDkwXFx1REQ5NVxcdUREOTZcXHVERTQ1LVxcdURFNDdcXHVERTRCLVxcdURFNEZcXHVERUEzXFx1REVCNC1cXHVERUI2XFx1REVDMFxcdURFQ0NdfFxcdUQ4M0VbXFx1REQwRlxcdUREMTgtXFx1REQxRlxcdUREMjZcXHVERDMwLVxcdUREMzlcXHVERDNDLVxcdUREM0VcXHVEREI1XFx1RERCNlxcdUREQjhcXHVEREI5XFx1RERCQlxcdUREQ0QtXFx1RERDRlxcdURERDEtXFx1RERERF0pL2c7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuY29uc3Qgc3RyaXBBbnNpID0gcmVxdWlyZSgnc3RyaXAtYW5zaScpO1xuY29uc3QgaXNGdWxsd2lkdGhDb2RlUG9pbnQgPSByZXF1aXJlKCdpcy1mdWxsd2lkdGgtY29kZS1wb2ludCcpO1xuY29uc3QgZW1vamlSZWdleCA9IHJlcXVpcmUoJ2Vtb2ppLXJlZ2V4Jyk7XG5cbmNvbnN0IHN0cmluZ1dpZHRoID0gc3RyaW5nID0+IHtcblx0c3RyaW5nID0gc3RyaW5nLnJlcGxhY2UoZW1vamlSZWdleCgpLCAnICAnKTtcblxuXHRpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycgfHwgc3RyaW5nLmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0c3RyaW5nID0gc3RyaXBBbnNpKHN0cmluZyk7XG5cblx0bGV0IHdpZHRoID0gMDtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xuXHRcdGNvbnN0IGNvZGUgPSBzdHJpbmcuY29kZVBvaW50QXQoaSk7XG5cblx0XHQvLyBJZ25vcmUgY29udHJvbCBjaGFyYWN0ZXJzXG5cdFx0aWYgKGNvZGUgPD0gMHgxRiB8fCAoY29kZSA+PSAweDdGICYmIGNvZGUgPD0gMHg5RikpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdC8vIElnbm9yZSBjb21iaW5pbmcgY2hhcmFjdGVyc1xuXHRcdGlmIChjb2RlID49IDB4MzAwICYmIGNvZGUgPD0gMHgzNkYpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdC8vIFN1cnJvZ2F0ZXNcblx0XHRpZiAoY29kZSA+IDB4RkZGRikge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHdpZHRoICs9IGlzRnVsbHdpZHRoQ29kZVBvaW50KGNvZGUpID8gMiA6IDE7XG5cdH1cblxuXHRyZXR1cm4gd2lkdGg7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1dpZHRoO1xuLy8gVE9ETzogcmVtb3ZlIHRoaXMgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvblxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IHN0cmluZ1dpZHRoO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gc3RhdGlzdGljc1xuXG4vLyBHZXQgc3RhdHMgZm9yIGEgZmlsZSwgbGlzdCBvZiBmaWxlcywgb3IgbGlzdCBvZiBtZXNzYWdlcy5cbmZ1bmN0aW9uIHN0YXRpc3RpY3MoZmlsZXMpIHtcbiAgdmFyIHJlc3VsdCA9IHt0cnVlOiAwLCBmYWxzZTogMCwgbnVsbDogMH1cblxuICBjb3VudChmaWxlcylcblxuICByZXR1cm4ge1xuICAgIGZhdGFsOiByZXN1bHQudHJ1ZSxcbiAgICBub25mYXRhbDogcmVzdWx0LmZhbHNlICsgcmVzdWx0Lm51bGwsXG4gICAgd2FybjogcmVzdWx0LmZhbHNlLFxuICAgIGluZm86IHJlc3VsdC5udWxsLFxuICAgIHRvdGFsOiByZXN1bHQudHJ1ZSArIHJlc3VsdC5mYWxzZSArIHJlc3VsdC5udWxsXG4gIH1cblxuICBmdW5jdGlvbiBjb3VudCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlWzBdICYmIHZhbHVlWzBdLm1lc3NhZ2VzKSB7XG4gICAgICAgIC8vIE11bHRpcGxlIHZmaWxlc1xuICAgICAgICBjb3VudEluQWxsKHZhbHVlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT25lIHZmaWxlIC8gbWVzc2FnZXNcbiAgICAgICAgY291bnRBbGwodmFsdWUubWVzc2FnZXMgfHwgdmFsdWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY291bnRJbkFsbChmaWxlcykge1xuICAgIHZhciBsZW5ndGggPSBmaWxlcy5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNvdW50KGZpbGVzW2luZGV4XS5tZXNzYWdlcylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjb3VudEFsbChtZXNzYWdlcykge1xuICAgIHZhciBsZW5ndGggPSBtZXNzYWdlcy5sZW5ndGhcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBmYXRhbFxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGZhdGFsID0gbWVzc2FnZXNbaW5kZXhdLmZhdGFsXG4gICAgICByZXN1bHRbZmF0YWwgPT09IG51bGwgfHwgZmF0YWwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBCb29sZWFuKGZhdGFsKV0rK1xuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gc29ydFxuXG52YXIgc2V2ZXJpdGllcyA9IHtcbiAgdHJ1ZTogMixcbiAgZmFsc2U6IDEsXG4gIG51bGw6IDAsXG4gIHVuZGVmaW5lZDogMFxufVxuXG5mdW5jdGlvbiBzb3J0KGZpbGUpIHtcbiAgZmlsZS5tZXNzYWdlcy5zb3J0KGNvbXBhcmF0b3IpXG4gIHJldHVybiBmaWxlXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmF0b3IoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGNoZWNrKGEsIGIsICdsaW5lJykgfHxcbiAgICBjaGVjayhhLCBiLCAnY29sdW1uJykgfHxcbiAgICBzZXZlcml0aWVzW2IuZmF0YWxdIC0gc2V2ZXJpdGllc1thLmZhdGFsXSB8fFxuICAgIGNvbXBhcmUoYSwgYiwgJ3NvdXJjZScpIHx8XG4gICAgY29tcGFyZShhLCBiLCAncnVsZUlkJykgfHxcbiAgICBjb21wYXJlKGEsIGIsICdyZWFzb24nKSB8fFxuICAgIDBcbiAgKVxufVxuXG5mdW5jdGlvbiBjaGVjayhhLCBiLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gKGFbcHJvcGVydHldIHx8IDApIC0gKGJbcHJvcGVydHldIHx8IDApXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYiwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIChhW3Byb3BlcnR5XSB8fCAnJykubG9jYWxlQ29tcGFyZShiW3Byb3BlcnR5XSB8fCAnJylcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc3VwcG9ydGVkID0gcmVxdWlyZSgnc3VwcG9ydHMtY29sb3InKS5zdGRlcnIuaGFzQmFzaWNcbnZhciB3aWR0aCA9IHJlcXVpcmUoJ3N0cmluZy13aWR0aCcpXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgndW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24nKVxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKVxudmFyIHN0YXRpc3RpY3MgPSByZXF1aXJlKCd2ZmlsZS1zdGF0aXN0aWNzJylcbnZhciBzb3J0ID0gcmVxdWlyZSgndmZpbGUtc29ydCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcmVwb3J0ZXJcblxudmFyIHB1c2ggPSBbXS5wdXNoXG5cbi8vIGBsb2ctc3ltYm9sc2Agd2l0aG91dCBjaGFsazpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IC0gV2luZG93cy4gKi9cbnZhciBjaGFycyA9XG4gIHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMidcbiAgICA/IHtlcnJvcjogJ8OXJywgd2FybmluZzogJ+KAvCd9XG4gICAgOiB7ZXJyb3I6ICfinJYnLCB3YXJuaW5nOiAn4pqgJ31cblxudmFyIGxhYmVscyA9IHtcbiAgdHJ1ZTogJ2Vycm9yJyxcbiAgZmFsc2U6ICd3YXJuaW5nJyxcbiAgbnVsbDogJ2luZm8nLFxuICB1bmRlZmluZWQ6ICdpbmZvJ1xufVxuXG4vLyBSZXBvcnQgYSBmaWxl4oCZcyBtZXNzYWdlcy5cbmZ1bmN0aW9uIHJlcG9ydGVyKGZpbGVzLCBvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIG9uZVxuXG4gIGlmICghZmlsZXMpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEVycm9yLlxuICBpZiAoJ25hbWUnIGluIGZpbGVzICYmICdtZXNzYWdlJyBpbiBmaWxlcykge1xuICAgIHJldHVybiBTdHJpbmcoZmlsZXMuc3RhY2sgfHwgZmlsZXMpXG4gIH1cblxuICAvLyBPbmUgZmlsZS5cbiAgaWYgKCEoJ2xlbmd0aCcgaW4gZmlsZXMpKSB7XG4gICAgb25lID0gdHJ1ZVxuICAgIGZpbGVzID0gW2ZpbGVzXVxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdCh0cmFuc2Zvcm0oZmlsZXMsIHNldHRpbmdzKSwgb25lLCBzZXR0aW5ncylcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKGZpbGVzLCBvcHRpb25zKSB7XG4gIHZhciBpbmRleCA9IC0xXG4gIHZhciByb3dzID0gW11cbiAgdmFyIGFsbCA9IFtdXG4gIHZhciBzaXplcyA9IHt9XG4gIHZhciBtZXNzYWdlc1xuICB2YXIgb2Zmc2V0XG4gIHZhciBtZXNzYWdlXG4gIHZhciBtZXNzYWdlUm93c1xuICB2YXIgcm93XG4gIHZhciBrZXlcblxuICB3aGlsZSAoKytpbmRleCA8IGZpbGVzLmxlbmd0aCkge1xuICAgIG1lc3NhZ2VzID0gc29ydCh7bWVzc2FnZXM6IGZpbGVzW2luZGV4XS5tZXNzYWdlcy5jb25jYXQoKX0pLm1lc3NhZ2VzXG4gICAgbWVzc2FnZVJvd3MgPSBbXVxuICAgIG9mZnNldCA9IC0xXG5cbiAgICB3aGlsZSAoKytvZmZzZXQgPCBtZXNzYWdlcy5sZW5ndGgpIHtcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1tvZmZzZXRdXG5cbiAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQgfHwgbWVzc2FnZS5mYXRhbCkge1xuICAgICAgICBhbGwucHVzaChtZXNzYWdlKVxuXG4gICAgICAgIHJvdyA9IHtcbiAgICAgICAgICBsb2NhdGlvbjogc3RyaW5naWZ5KFxuICAgICAgICAgICAgbWVzc2FnZS5sb2NhdGlvbi5lbmQubGluZSAmJiBtZXNzYWdlLmxvY2F0aW9uLmVuZC5jb2x1bW5cbiAgICAgICAgICAgICAgPyBtZXNzYWdlLmxvY2F0aW9uXG4gICAgICAgICAgICAgIDogbWVzc2FnZS5sb2NhdGlvbi5zdGFydFxuICAgICAgICAgICksXG4gICAgICAgICAgbGFiZWw6IGxhYmVsc1ttZXNzYWdlLmZhdGFsXSxcbiAgICAgICAgICByZWFzb246XG4gICAgICAgICAgICAobWVzc2FnZS5zdGFjayB8fCBtZXNzYWdlLm1lc3NhZ2UpICtcbiAgICAgICAgICAgIChvcHRpb25zLnZlcmJvc2UgJiYgbWVzc2FnZS5ub3RlID8gJ1xcbicgKyBtZXNzYWdlLm5vdGUgOiAnJyksXG4gICAgICAgICAgcnVsZUlkOiBtZXNzYWdlLnJ1bGVJZCB8fCAnJyxcbiAgICAgICAgICBzb3VyY2U6IG1lc3NhZ2Uuc291cmNlIHx8ICcnXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGtleSBpbiByb3cpIHtcbiAgICAgICAgICBzaXplc1trZXldID0gTWF0aC5tYXgoc2l6ZShyb3dba2V5XSksIHNpemVzW2tleV0gfHwgMClcbiAgICAgICAgfVxuXG4gICAgICAgIG1lc3NhZ2VSb3dzLnB1c2gocm93KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgoIW9wdGlvbnMucXVpZXQgJiYgIW9wdGlvbnMuc2lsZW50KSB8fCBtZXNzYWdlUm93cy5sZW5ndGgpIHtcbiAgICAgIHJvd3MucHVzaCh7dHlwZTogJ2ZpbGUnLCBmaWxlOiBmaWxlc1tpbmRleF0sIHN0YXRzOiBzdGF0aXN0aWNzKG1lc3NhZ2VzKX0pXG4gICAgICBwdXNoLmFwcGx5KHJvd3MsIG1lc3NhZ2VSb3dzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7cm93czogcm93cywgc3RhdHM6IHN0YXRpc3RpY3MoYWxsKSwgc2l6ZXM6IHNpemVzfVxufVxuXG5mdW5jdGlvbiBmb3JtYXQobWFwLCBvbmUsIG9wdGlvbnMpIHtcbiAgdmFyIGVuYWJsZWQgPSBvcHRpb25zLmNvbG9yID09IG51bGwgPyBzdXBwb3J0ZWQgOiBvcHRpb25zLmNvbG9yXG4gIHZhciBsaW5lcyA9IFtdXG4gIHZhciBpbmRleCA9IC0xXG4gIHZhciBzdGF0c1xuICB2YXIgcm93XG4gIHZhciBsaW5lXG4gIHZhciByZWFzb25cbiAgdmFyIHJlc3RcbiAgdmFyIG1hdGNoXG5cbiAgd2hpbGUgKCsraW5kZXggPCBtYXAucm93cy5sZW5ndGgpIHtcbiAgICByb3cgPSBtYXAucm93c1tpbmRleF1cblxuICAgIGlmIChyb3cudHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICBzdGF0cyA9IHJvdy5zdGF0c1xuICAgICAgbGluZSA9IHJvdy5maWxlLmhpc3RvcnlbMF0gfHwgb3B0aW9ucy5kZWZhdWx0TmFtZSB8fCAnPHN0ZGluPidcblxuICAgICAgbGluZSA9XG4gICAgICAgIG9uZSAmJiAhb3B0aW9ucy5kZWZhdWx0TmFtZSAmJiAhcm93LmZpbGUuaGlzdG9yeVswXVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6IChlbmFibGVkXG4gICAgICAgICAgICAgID8gJ1xceDFiWzRtJyAvKiBVbmRlcmxpbmUuICovICtcbiAgICAgICAgICAgICAgICAoc3RhdHMuZmF0YWxcbiAgICAgICAgICAgICAgICAgID8gJ1xceDFiWzMxbScgLyogUmVkLiAqL1xuICAgICAgICAgICAgICAgICAgOiBzdGF0cy50b3RhbFxuICAgICAgICAgICAgICAgICAgPyAnXFx4MWJbMzNtJyAvKiBZZWxsb3cuICovXG4gICAgICAgICAgICAgICAgICA6ICdcXHgxYlszMm0nKSAvKiBHcmVlbi4gKi8gK1xuICAgICAgICAgICAgICAgIGxpbmUgK1xuICAgICAgICAgICAgICAgICdcXHgxYlszOW1cXHgxYlsyNG0nXG4gICAgICAgICAgICAgIDogbGluZSkgK1xuICAgICAgICAgICAgKHJvdy5maWxlLnN0b3JlZCAmJiByb3cuZmlsZS5wYXRoICE9PSByb3cuZmlsZS5oaXN0b3J5WzBdXG4gICAgICAgICAgICAgID8gJyA+ICcgKyByb3cuZmlsZS5wYXRoXG4gICAgICAgICAgICAgIDogJycpXG5cbiAgICAgIGlmICghc3RhdHMudG90YWwpIHtcbiAgICAgICAgbGluZSA9XG4gICAgICAgICAgKGxpbmUgPyBsaW5lICsgJzogJyA6ICcnKSArXG4gICAgICAgICAgKHJvdy5maWxlLnN0b3JlZFxuICAgICAgICAgICAgPyBlbmFibGVkXG4gICAgICAgICAgICAgID8gJ1xceDFiWzMzbXdyaXR0ZW5cXHgxYlszOW0nIC8qIFllbGxvdy4gKi9cbiAgICAgICAgICAgICAgOiAnd3JpdHRlbidcbiAgICAgICAgICAgIDogJ25vIGlzc3VlcyBmb3VuZCcpXG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgIGlmIChpbmRleCAmJiBtYXAucm93c1tpbmRleCAtIDFdLnR5cGUgIT09ICdmaWxlJykge1xuICAgICAgICAgIGxpbmVzLnB1c2goJycpXG4gICAgICAgIH1cblxuICAgICAgICBsaW5lcy5wdXNoKGxpbmUpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYXNvbiA9IHJvdy5yZWFzb25cbiAgICAgIG1hdGNoID0gL1xccj9cXG58XFxyLy5leGVjKHJlYXNvbilcblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJlc3QgPSByZWFzb24uc2xpY2UobWF0Y2guaW5kZXgpXG4gICAgICAgIHJlYXNvbiA9IHJlYXNvbi5zbGljZSgwLCBtYXRjaC5pbmRleClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3QgPSAnJ1xuICAgICAgfVxuXG4gICAgICBsaW5lcy5wdXNoKFxuICAgICAgICAoXG4gICAgICAgICAgJyAgJyArXG4gICAgICAgICAgcmVwZWF0KCcgJywgbWFwLnNpemVzLmxvY2F0aW9uIC0gc2l6ZShyb3cubG9jYXRpb24pKSArXG4gICAgICAgICAgcm93LmxvY2F0aW9uICtcbiAgICAgICAgICAnICAnICtcbiAgICAgICAgICAoZW5hYmxlZFxuICAgICAgICAgICAgPyAocm93LmxhYmVsID09PSAnZXJyb3InXG4gICAgICAgICAgICAgICAgPyAnXFx4MWJbMzFtJyAvKiBSZWQuICovXG4gICAgICAgICAgICAgICAgOiAnXFx4MWJbMzNtJykgLyogWWVsbG93LiAqLyArXG4gICAgICAgICAgICAgIHJvdy5sYWJlbCArXG4gICAgICAgICAgICAgICdcXHgxYlszOW0nXG4gICAgICAgICAgICA6IHJvdy5sYWJlbCkgK1xuICAgICAgICAgIHJlcGVhdCgnICcsIG1hcC5zaXplcy5sYWJlbCAtIHNpemUocm93LmxhYmVsKSkgK1xuICAgICAgICAgICcgICcgK1xuICAgICAgICAgIHJlYXNvbiArXG4gICAgICAgICAgcmVwZWF0KCcgJywgbWFwLnNpemVzLnJlYXNvbiAtIHNpemUocmVhc29uKSkgK1xuICAgICAgICAgICcgICcgK1xuICAgICAgICAgIHJvdy5ydWxlSWQgK1xuICAgICAgICAgIHJlcGVhdCgnICcsIG1hcC5zaXplcy5ydWxlSWQgLSBzaXplKHJvdy5ydWxlSWQpKSArXG4gICAgICAgICAgJyAgJyArXG4gICAgICAgICAgKHJvdy5zb3VyY2UgfHwgJycpXG4gICAgICAgICkucmVwbGFjZSgvICskLywgJycpICsgcmVzdFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIHN0YXRzID0gbWFwLnN0YXRzXG5cbiAgaWYgKHN0YXRzLmZhdGFsIHx8IHN0YXRzLndhcm4pIHtcbiAgICBsaW5lID0gJydcblxuICAgIGlmIChzdGF0cy5mYXRhbCkge1xuICAgICAgbGluZSA9XG4gICAgICAgIChlbmFibGVkXG4gICAgICAgICAgPyAnXFx4MWJbMzFtJyAvKiBSZWQuICovICsgY2hhcnMuZXJyb3IgKyAnXFx4MWJbMzltJ1xuICAgICAgICAgIDogY2hhcnMuZXJyb3IpICtcbiAgICAgICAgJyAnICtcbiAgICAgICAgc3RhdHMuZmF0YWwgK1xuICAgICAgICAnICcgK1xuICAgICAgICAobGFiZWxzLnRydWUgKyAoc3RhdHMuZmF0YWwgPT09IDEgPyAnJyA6ICdzJykpXG4gICAgfVxuXG4gICAgaWYgKHN0YXRzLndhcm4pIHtcbiAgICAgIGxpbmUgPVxuICAgICAgICAobGluZSA/IGxpbmUgKyAnLCAnIDogJycpICtcbiAgICAgICAgKGVuYWJsZWRcbiAgICAgICAgICA/ICdcXHgxYlszM20nIC8qIFllbGxvdy4gKi8gKyBjaGFycy53YXJuaW5nICsgJ1xceDFiWzM5bSdcbiAgICAgICAgICA6IGNoYXJzLndhcm5pbmcpICtcbiAgICAgICAgJyAnICtcbiAgICAgICAgc3RhdHMud2FybiArXG4gICAgICAgICcgJyArXG4gICAgICAgIChsYWJlbHMuZmFsc2UgKyAoc3RhdHMud2FybiA9PT0gMSA/ICcnIDogJ3MnKSlcbiAgICB9XG5cbiAgICBpZiAoc3RhdHMudG90YWwgIT09IHN0YXRzLmZhdGFsICYmIHN0YXRzLnRvdGFsICE9PSBzdGF0cy53YXJuKSB7XG4gICAgICBsaW5lID0gc3RhdHMudG90YWwgKyAnIG1lc3NhZ2VzICgnICsgbGluZSArICcpJ1xuICAgIH1cblxuICAgIGxpbmVzLnB1c2goJycsIGxpbmUpXG4gIH1cblxuICByZXR1cm4gbGluZXMuam9pbignXFxuJylcbn1cblxuLy8gR2V0IHRoZSBsZW5ndGggb2YgYHZhbHVlYCwgaWdub3JpbmcgQU5TSSBzZXF1ZW5jZXMuXG5mdW5jdGlvbiBzaXplKHZhbHVlKSB7XG4gIHZhciBtYXRjaCA9IC9cXHI/XFxufFxcci8uZXhlYyh2YWx1ZSlcbiAgcmV0dXJuIHdpZHRoKG1hdGNoID8gdmFsdWUuc2xpY2UoMCwgbWF0Y2guaW5kZXgpIDogdmFsdWUpXG59XG4iLCJpbXBvcnQgeyBNZXRhZGF0YUNhY2hlLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IG1hcmtkb3duVG9UZXggfSBmcm9tICcuL3Byb2Nlc3Nvcic7XG5pbXBvcnQgeyB0b1ZGaWxlIH0gZnJvbSAnLi9maWxlJztcbmltcG9ydCB7IFZGaWxlIH0gZnJvbSAndmZpbGUnO1xuaW1wb3J0IHsgRXhwb3J0VG9UZXhTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHJlcG9ydGVyIGZyb20gJ3ZmaWxlLXJlcG9ydGVyJztcblxuZXhwb3J0IGNsYXNzIFRlWFByaW50ZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBtZXRhZGF0YTogTWV0YWRhdGFDYWNoZSxcbiAgICByZWFkb25seSBzZXR0aW5nczogRXhwb3J0VG9UZXhTZXR0aW5ncyxcbiAgICByZWFkb25seSBleHBvcnRQYXRoPzogc3RyaW5nLFxuICApIHt9XG5cbiAgYXN5bmMgcHJvY2Vzcyh2ZmlsZTogVkZpbGUpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IG1hcmtkb3duVG9UZXgoKVxuICAgICAgLmRhdGEoJ3NldHRpbmdzJywge1xuICAgICAgICBleHBvcnRUb1RleDogdGhpcy5zZXR0aW5ncyxcbiAgICAgIH0pXG4gICAgICAuZGF0YSgnbWV0YWRhdGEnLCB0aGlzLm1ldGFkYXRhKVxuICAgICAgLmRhdGEoJ2V4cG9ydFBhdGgnLCB0aGlzLmV4cG9ydFBhdGgpXG4gICAgICAucHJvY2Vzcyh2ZmlsZSk7XG4gICAgcmV0dXJuIG91dHB1dC50b1N0cmluZygpO1xuICB9XG5cbiAgYXN5bmMgdG9UZXgoZmlsZTogVEZpbGUpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGNvbnN0IHZmaWxlID0gYXdhaXQgdG9WRmlsZShmaWxlKTtcbiAgICBjb25zb2xlLmdyb3VwQ29sbGFwc2VkKCdleHBvcnQtdG8tdGV4Jyk7XG4gICAgbGV0IHRleCA9IGF3YWl0IHRoaXMucHJvY2Vzcyh2ZmlsZSk7XG4gICAgY29uc29sZS5sb2cocmVwb3J0ZXIodmZpbGUpKTtcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5jb21wcmVzc05ld2xpbmVzKSB7XG4gICAgICBjb25zb2xlLmxvZygnQ29tcHJlc3NpbmcgbmV3bGluZXMnKTtcbiAgICAgIHRleCA9IFRlWFByaW50ZXIuY29tcHJlc3NOZXdsaW5lcyh0ZXgpO1xuICAgIH1cbiAgICBjb25zb2xlLmdyb3VwRW5kKCk7XG4gICAgcmV0dXJuIHRleDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGNvbXByZXNzTmV3bGluZXModGV4OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxpbmVzID0gdGV4LnNwbGl0KCdcXG4nKTtcbiAgICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgICBsZXQgd2FzRW1wdHkgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgIGlmIChsaW5lID09PSAnJykge1xuICAgICAgICB3YXNFbXB0eSA9IHRydWU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAod2FzRW1wdHkpIHtcbiAgICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgICAgICB3YXNFbXB0eSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgb3V0cHV0LnB1c2gobGluZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dC5qb2luKCdcXG4nKTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcblxuZXhwb3J0IGNvbnN0IHdyaXRlRmlsZSA9IHV0aWwucHJvbWlzaWZ5KGZzLndyaXRlRmlsZSk7XG4iLCJpbXBvcnQge1xuICBBcHAsXG4gIEJ1dHRvbkNvbXBvbmVudCxcbiAgRmlsZVN5c3RlbUFkYXB0ZXIsXG4gIFBsdWdpblNldHRpbmdUYWIsXG4gIFNldHRpbmcsXG4gIFRleHRDb21wb25lbnQsXG59IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IHJlbW90ZSB9IGZyb20gJ2VsZWN0cm9uJztcbmltcG9ydCB7XG4gIEV4cG9ydFRvVGV4U2V0dGluZ3MsXG4gIEltYWdlUGF0aFNldHRpbmdEZXNjcmlwdGlvbnMsXG4gIEltYWdlUGF0aFNldHRpbmdzLFxufSBmcm9tICcuL3NldHRpbmdzJztcbmltcG9ydCBFeHBvcnRUb1RlWFBsdWdpbiBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgY2xhc3MgRXhwb3J0VG9UZVhTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCByZWFkb25seSBwbHVnaW46IEV4cG9ydFRvVGVYUGx1Z2luKSB7XG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xuICB9XG5cbiAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG4gICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1NldHRpbmdzIGZvciBleHBvcnRpbmcgdG8gVGVYJyB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0dlbmVyYXRlIGxhYmVscyBhbmQgcmVmcycpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgJ0F1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgVGVYIGxhYmVscyBhbmQgcmVmcyBmb3IgYmxvY2tzIGFuZCBoZWFkaW5ncz8nLFxuICAgICAgKVxuICAgICAgLmFkZFRvZ2dsZSgodG9nZ2xlKSA9PiB7XG4gICAgICAgIHRvZ2dsZVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW5lcmF0ZUxhYmVscylcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW5lcmF0ZUxhYmVscyA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZURhdGEodGhpcy5wbHVnaW4uc2V0dGluZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKCdSZWYgY29tbWFuZCcpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgJ0NvbW1hbmQgdG8gdXNlIHdoZW4gY29udmVydGluZyBsaW5rcyB0byBoZWFkaW5ncy9ibG9ja3MgdG8gcmVmcy4nLFxuICAgICAgKVxuICAgICAgLmFkZFRleHQoKHRleHQpID0+XG4gICAgICAgIHRleHRcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVmQ29tbWFuZClcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5yZWZDb21tYW5kID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG4gICAgICAgICAgfSksXG4gICAgICApO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZSgnQWRkaXRpb25hbCBtYXRoIGVudmlyb25tZW50cycpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgJ0FkZGl0aW9uYWwgZW52aXJvbm1lbnRzIHdoaWNoIHRyaWdnZXIgbWF0aCBjb250ZW50IHdpdGhvdXQgbmVlZGluZyBcXFxcWy4uLlxcXFxdJyArXG4gICAgICAgICAgJyAob25lIHBlciBsaW5lKScsXG4gICAgICApXG4gICAgICAuYWRkVGV4dEFyZWEoKHRleHQpID0+IHtcbiAgICAgICAgdGV4dFxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hZGRpdGlvbmFsTWF0aEVudmlyb25tZW50cy5qb2luKCdcXG4nKSlcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5hZGRpdGlvbmFsTWF0aEVudmlyb25tZW50cyA9IHZhbHVlXG4gICAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgICAgLm1hcCgoeCkgPT4geC50cmltKCkpXG4gICAgICAgICAgICAgIC5maWx0ZXIoKHgpID0+IHgubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0RlZmF1bHQgdG8gRXF1YXRpb24nKVxuICAgICAgLnNldERlc2MoJ0NvbnZlcnQgZGlzcGxheSBtYXRoIHRvIGVxdWF0aW9uIGVudmlyb25lbXRucycpXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgdG9nZ2xlXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRUb0VxdWF0aW9uKVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRUb0VxdWF0aW9uID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0NvbXByZXNzIG5ld2xpbmVzJylcbiAgICAgIC5zZXREZXNjKFxuICAgICAgICAnUmVkdWNlIGFueSBpbnN0YW5jZSBvZiAyIG9yIG1vcmUgYmxhbmsgbGluZXMgdG8gYSBzaW5nbGUgYmxhbmsgbGluZScsXG4gICAgICApXG4gICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgdG9nZ2xlXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNvbXByZXNzTmV3bGluZXMpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY29tcHJlc3NOZXdsaW5lcyA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZURhdGEodGhpcy5wbHVnaW4uc2V0dGluZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKCdJbWFnZSBwYXRoIGZvcm1hdCcpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgW1xuICAgICAgICAgICdTcGVjaWZpZXMgaG93IHRoZSBwYXRoIGZvciBpbWFnZXMgc2hvdWxkIGJlIHdyaXR0ZW4gaW4gZXhwb3J0ZWQgXFxcXGluY2x1ZGVncmFwaGljcyBjYWxscycsXG4gICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICApXG4gICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgSW1hZ2VQYXRoU2V0dGluZ0Rlc2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGRyb3Bkb3duLmFkZE9wdGlvbihpLnRvU3RyaW5nKCksIEltYWdlUGF0aFNldHRpbmdEZXNjcmlwdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGRyb3Bkb3duXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmltYWdlUGF0aFNldHRpbmdzLnRvU3RyaW5nKCkpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuaW1hZ2VQYXRoU2V0dGluZ3MgPSBOdW1iZXIucGFyc2VJbnQoXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgKSBhcyBJbWFnZVBhdGhTZXR0aW5ncztcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVEYXRhKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgbGV0IHRleHRFbDogVGV4dENvbXBvbmVudDtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0RlZmF1bHQgZXhwb3J0IGRpcmVjdG9yeScpXG4gICAgICAuc2V0RGVzYyhcbiAgICAgICAgJ0RlZmF1bHQgZGlyZWN0b3J5IHRvIHNhdmUgVGVYIGZpbGVzIHRvLiBJZiBibGFuayB3aWxsIGRlZmF1bHQgdG8gdmF1bHQgcm9vdC4nLFxuICAgICAgKVxuICAgICAgLmFkZFRleHQoKHRleHQpID0+IHtcbiAgICAgICAgdGV4dEVsID0gdGV4dFxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRGVmYXVsdCAoVmF1bHQgcm9vdCknKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0RXhwb3J0RGlyZWN0b3J5KTtcbiAgICAgICAgdGV4dEVsLmlucHV0RWwuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgfSlcbiAgICAgIC5hZGRCdXR0b24oKGJ1dHRvbikgPT4ge1xuICAgICAgICBidXR0b24uc2V0QnV0dG9uVGV4dCgnQ2hvb3NlJykub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBmaWxlUGF0aHMsIGNhbmNlbGVkIH0gPSBhd2FpdCByZW1vdGUuZGlhbG9nLnNob3dPcGVuRGlhbG9nKHtcbiAgICAgICAgICAgIGRlZmF1bHRQYXRoOiAodGhpcy5hcHAudmF1bHRcbiAgICAgICAgICAgICAgLmFkYXB0ZXIgYXMgRmlsZVN5c3RlbUFkYXB0ZXIpLmdldEJhc2VQYXRoKCksXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBbJ2NyZWF0ZURpcmVjdG9yeScsICdvcGVuRGlyZWN0b3J5J10sXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoY2FuY2VsZWQpIHJldHVybjtcblxuICAgICAgICAgIGNvbnN0IGV4cG9ydFBhdGggPSBmaWxlUGF0aHNbMF07XG4gICAgICAgICAgdGV4dEVsLnNldFZhbHVlKGV4cG9ydFBhdGgpO1xuICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRFeHBvcnREaXJlY3RvcnkgPSBleHBvcnRQYXRoO1xuICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVEYXRhKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIG5ldyBCdXR0b25Db21wb25lbnQoY29udGFpbmVyRWwpXG4gICAgICAuc2V0QnV0dG9uVGV4dCgnUmVzZXQgdG8gZGVmYXVsdCcpXG4gICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHJlbW90ZS5kaWFsb2dcbiAgICAgICAgICAuc2hvd01lc3NhZ2VCb3goe1xuICAgICAgICAgICAgdGl0bGU6ICdSZXNldCBzZXR0aW5ncyB0byBkZWZhdWx0PycsXG4gICAgICAgICAgICB0eXBlOiAncXVlc3Rpb24nLFxuICAgICAgICAgICAgbWVzc2FnZTogJ0FyZSB5b3Ugc3VyZT8nLFxuICAgICAgICAgICAgYnV0dG9uczogWydObycsICdZZXMnXSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnJlc3BvbnNlID09PSAwKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncyA9IG5ldyBFeHBvcnRUb1RleFNldHRpbmdzKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YSh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBGaWxlU3lzdGVtQWRhcHRlciwgTm90aWNlLCBQbHVnaW4sIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgVGVYUHJpbnRlciB9IGZyb20gJy4vdGV4UHJpbnRlcic7XG5pbXBvcnQgeyByZW1vdGUgfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQgeyB3cml0ZUZpbGUgfSBmcm9tICcuL3Byb21pc2VzJztcbmltcG9ydCB7IGVuc3VyZVNldHRpbmdzLCBFeHBvcnRUb1RleFNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBFeHBvcnRUb1RlWFNldHRpbmdUYWIgfSBmcm9tICcuL3NldHRpbmdzVGFicyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4cG9ydFRvVGVYUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3M6IEV4cG9ydFRvVGV4U2V0dGluZ3MgPSBuZXcgRXhwb3J0VG9UZXhTZXR0aW5ncygpO1xuXG4gIHB1YmxpYyBhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSBhd2FpdCB0aGlzLmxvYWREYXRhKCk7XG4gICAgaWYgKHNldHRpbmdzICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnNldHRpbmdzID0gZW5zdXJlU2V0dGluZ3Moc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogJ2V4cG9ydC10by10ZXgnLFxuICAgICAgbmFtZTogJ0V4cG9ydCBUbyBUZVgnLFxuICAgICAgY2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoZmlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICghY2hlY2tpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwb3J0VG9GaWxlKGZpbGUpLmNhdGNoKHRoaXMub25FeHBvcnRFcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6ICdleHBvcnQtdGV4LXRvLWNsaXBib2FyZCcsXG4gICAgICBuYW1lOiAnRXhwb3J0IFRvIENsaXBib2FyZCcsXG4gICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmc6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmIChmaWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKCFjaGVja2luZykge1xuICAgICAgICAgICAgdGhpcy5leHBvcnRUb0NsaXBib2FyZChmaWxlKS5jYXRjaCh0aGlzLm9uRXhwb3J0RXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBFeHBvcnRUb1RlWFNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcbiAgfVxuXG4gIGFzeW5jIGV4cG9ydFRvRmlsZShmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGRpcmVjdG9yeSA9XG4gICAgICB0aGlzLnNldHRpbmdzLmRlZmF1bHRFeHBvcnREaXJlY3RvcnkubGVuZ3RoID4gMFxuICAgICAgICA/IHRoaXMuc2V0dGluZ3MuZGVmYXVsdEV4cG9ydERpcmVjdG9yeVxuICAgICAgICA6IChmaWxlLnZhdWx0LmFkYXB0ZXIgYXMgRmlsZVN5c3RlbUFkYXB0ZXIpLmdldEJhc2VQYXRoKCk7XG4gICAgY29uc3QgeyBmaWxlUGF0aCwgY2FuY2VsZWQgfSA9IGF3YWl0IHJlbW90ZS5kaWFsb2cuc2hvd1NhdmVEaWFsb2coe1xuICAgICAgZGVmYXVsdFBhdGg6IGRpcmVjdG9yeSxcbiAgICAgIHByb3BlcnRpZXM6IFsnY3JlYXRlRGlyZWN0b3J5J10sXG4gICAgICBmaWx0ZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnVGVYJyxcbiAgICAgICAgICBleHRlbnNpb25zOiBbJ3RleCddLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGlmIChjYW5jZWxlZCB8fCBmaWxlUGF0aCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICBjb25zdCBwcmludGVyID0gbmV3IFRlWFByaW50ZXIoXG4gICAgICB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLFxuICAgICAgdGhpcy5zZXR0aW5ncyxcbiAgICAgIGZpbGVQYXRoLFxuICAgICk7XG4gICAgY29uc3QgY29udGVudHMgPSBhd2FpdCBwcmludGVyLnRvVGV4KGZpbGUpO1xuXG4gICAgYXdhaXQgd3JpdGVGaWxlKGZpbGVQYXRoLCBjb250ZW50cyk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3XG4gICAgbmV3IE5vdGljZShgVGV4IGV4cG9ydGVkIHRvICR7ZmlsZVBhdGh9YCk7XG4gIH1cblxuICBhc3luYyBleHBvcnRUb0NsaXBib2FyZChmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IHByaW50ZXIgPSBuZXcgVGVYUHJpbnRlcih0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLCB0aGlzLnNldHRpbmdzKTtcbiAgICBjb25zdCBjb250ZW50cyA9IGF3YWl0IHByaW50ZXIudG9UZXgoZmlsZSk7XG4gICAgcmVtb3RlLmNsaXBib2FyZC53cml0ZVRleHQoY29udGVudHMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXdcbiAgICBuZXcgTm90aWNlKGBUZXggZXhwb3J0ZWQgdG8gY2xpcGJvYXJkYCk7XG4gIH1cblxuICBvbkV4cG9ydEVycm9yKGU6IEVycm9yKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coZSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ld1xuICAgIG5ldyBOb3RpY2UoXG4gICAgICBgRXJyb3Igb2YgdHlwZSBcIiR7ZS5uYW1lfSBvY2N1cnJlZCBvbiBleHBvcnQuIFNlZSBjb25zb2xlIGZvciBkZXRhaWxzLlwiYCxcbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOlsid3JhcCIsInNsaWNlIiwic3RyaW5naWZ5IiwicmVxdWlyZSQkMCIsIm93biIsImJ1ZmZlciIsInByb2MiLCJwIiwiVkZpbGUiLCJWTWVzc2FnZSIsInRyb3VnaCIsInBsYWluIiwiYmFpbCIsInRvU3RyaW5nIiwibWFya2Rvd25TcGFjZSIsImNyZWF0ZVNwYWNlIiwibWFya2Rvd25MaW5lRW5kaW5nIiwiYmxhbmsiLCJzaGFsbG93IiwiY2h1bmtlZFNwbGljZSIsInNpemVDaHVua3MiLCJzdWJ0b2tlbml6ZSIsInByZWZpeFNpemUiLCJjb250ZW50IiwiY2hlY2siLCJ1bmljb2RlUHVuY3R1YXRpb24iLCJtYXJrZG93bkxpbmVFbmRpbmdPclNwYWNlIiwibW92ZVBvaW50IiwicmVzb2x2ZUFsbCIsImNsYXNzaWZ5Q2hhcmFjdGVyIiwiYXNjaWlDb250cm9sIiwiZGVjb2RlIiwiY3JlYXRlTGFiZWwiLCJub3JtYWxpemVJZGVudGlmaWVyIiwiY3JlYXRlV2hpdGVzcGFjZSIsImNyZWF0ZURlc3RpbmF0aW9uIiwiY3JlYXRlVGl0bGUiLCJyYXdzIiwiYmFzaWNzIiwidG9rZW5pemVIdG1sIiwibGFiZWxJbWFnZSIsImxhYmVsTGluayIsInNlcmlhbGl6ZUNodW5rcyIsInNsaWNlQ2h1bmtzIiwibWluaWZsYXQiLCJjb25zdHJ1Y3RzIiwiY29tYmluZUV4dGVuc2lvbnMiLCJpbml0aWFsaXplQ29udGVudCIsImluaXRpYWxpemVEb2N1bWVudCIsImluaXRpYWxpemVGbG93IiwiaW5pdGlhbGl6ZVRleHQiLCJjcmVhdGVUb2tlbml6ZXIiLCJwb3N0cHJvY2VzcyIsInBhcnNlciIsInByZXByb2Nlc3NvciIsInN0cmluZ2lmeVBvc2l0aW9uIiwic2FmZUZyb21JbnQiLCJleHRlbnNpb24iLCJwYXJzZSIsImZyb21NYXJrZG93biIsInByZXZpb3VzIiwicmVxdWlyZSQkMSIsInJlcGVhdCIsInN0cmVhayIsInNhZmUiLCJtYXRoIiwic3ludGF4IiwidGV4dCIsInNwYWNlRmFjdG9yeSIsImNyZWF0ZSIsImNvbWJpbmUiLCJhdXRvbGluayIsInN0cmlrZXRocm91Z2giLCJ0YWJsZSIsInRhc2tsaXN0IiwiZXhpdCIsImNvbmZpZ3VyZSIsImF1dG9saW5rTGl0ZXJhbCIsInRhc2tMaXN0SXRlbSIsInBocmFzaW5nIiwiZGFzaCIsImNvbG9uIiwiTCIsImwiLCJ0b01hcmtkb3duIiwibWFya2Rvd25UYWJsZSIsImRlZmF1bHRJbmxpbmVDb2RlIiwiZmxvdyIsImNoZWNrQnVsbGV0IiwiY2hlY2tMaXN0SXRlbUluZGVudCIsImluZGVudExpbmVzIiwiZGVmYXVsdExpc3RJdGVtIiwid2FybmluZ0lzc3VlZCIsImNyZWF0ZU5hbWUiLCJjcmVhdGVBdHRyaWJ1dGVzIiwibGFiZWwiLCJ0b2tlbml6ZUxhYmVsIiwiYXR0cmlidXRlcyIsInRva2VuaXplQXR0cmlidXRlcyIsImRpcmVjdGl2ZVRleHQiLCJkaXJlY3RpdmVDb250YWluZXIiLCJkaXJlY3RpdmVMZWFmIiwiZW50ZXIiLCJjb3JlIiwiYXNzaWduIiwiYmFzaWMiLCJjb252ZXJ0IiwiY29sb3IiLCJjaGVja1F1b3RlIiwiZW5jb2RlIiwidmlzaXQiLCJkaXJlY3RpdmUiLCJtaWNyb21hcmtFeHRlbnNpb25XaWtpTGluayIsIm1kYXN0VXRpbFdpa2lMaW5rIiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwiZmF1bHQiLCJtYXR0ZXJzIiwiZmVuY2UiLCJwaWNrIiwiZXh0ZW5kIiwiQ09OVElOVUUiLCJ2aXNpdFBhcmVudHMiLCJTS0lQIiwiRVhJVCIsInRvU3RyIiwiYmluZCIsImFsbCIsIm9uZSIsImRlZmF1bHRNYWNybyIsImNvZGUiLCJkZWZpbml0aW9uIiwibm90ZXMiLCJpbWFnZSIsInh0ZW5kIiwidG9FeHByZXNzaW9uIiwiaGFzIiwiZXNjYXBlIiwiY29sbGFwc2UiLCJsaXN0IiwibGlzdEl0ZW0iLCJjbG9uZSIsInRyaW1MaW5lcyIsInRoZW1hdGljQnJlYWsiLCJoYW5kbGVycyIsInJlcXVpcmUkJDIiLCJyZXF1aXJlJCQzIiwicmVxdWlyZSQkNCIsInJlcXVpcmUkJDUiLCJyZXF1aXJlJCQ2IiwicmVxdWlyZSQkNyIsInJlcXVpcmUkJDgiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsInJlcXVpcmUkJDIxIiwicmVxdWlyZSQkMjIiLCJyZXF1aXJlJCQyMyIsInJlcXVpcmUkJDI0IiwicHJlcHJvY2VzcyIsImhlYWRpbmdQbHVnaW4iLCJkZWZpbml0aW9ucyIsIk1ldGFkYXRhQ2FjaGUiLCJwYXJzZUxpbmt0ZXh0IiwicmVzb2x2ZVN1YnBhdGgiLCJwYXRoLmRpcm5hbWUiLCJwYXRoLnJlbGF0aXZlIiwiZW1vamkiLCJHaXRodWJTbHVnZ2VyIiwiaW5saW5lTWF0aCIsImhlYWRpbmciLCJibG9ja3F1b3RlIiwiZ2V0TGFiZWwiLCJyZWJiZXIiLCJ1bmlmaWVkIiwibWFya2Rvd24iLCJnZm0iLCJmcm9udG1hdHRlciIsIndpa2lMaW5rUGx1Z2luIiwib3MiLCJlbW9qaVJlZ2V4IiwiaXNGdWxsd2lkdGhDb2RlUG9pbnQiLCJsYWJlbHMiLCJzb3J0Iiwic3RhdGlzdGljcyIsIndpZHRoIiwicmVwb3J0ZXIiLCJ1dGlsLnByb21pc2lmeSIsImZzLndyaXRlRmlsZSIsIlNldHRpbmciLCJyZW1vdGUiLCJCdXR0b25Db21wb25lbnQiLCJQbHVnaW5TZXR0aW5nVGFiIiwiTm90aWNlIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxhQUFhLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ25DLElBQUksYUFBYSxHQUFHLE1BQU0sQ0FBQyxjQUFjO0FBQ3pDLFNBQVMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLFlBQVksS0FBSyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUNwRixRQUFRLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUMxRyxJQUFJLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUM7QUFDRjtBQUNPLFNBQVMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDaEMsSUFBSSxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLElBQUksU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFO0FBQzNDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUN6RixDQUFDO0FBdUNEO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtBQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RSxLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7QUFDRDtBQUNPLFNBQVMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7QUFDM0MsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JILElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sTUFBTSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0osSUFBSSxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN0RSxJQUFJLFNBQVMsSUFBSSxDQUFDLEVBQUUsRUFBRTtBQUN0QixRQUFRLElBQUksQ0FBQyxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUN0RSxRQUFRLE9BQU8sQ0FBQyxFQUFFLElBQUk7QUFDdEIsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMs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QUN0QixFQUFFLE9BQU8sT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsR0FBR0csT0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUztBQUN6RSxDQUFDO0FBQ0Q7QUFDQSxTQUFTLFVBQVUsQ0FBQyxPQUFPLEVBQUU7QUFDN0IsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUM7QUFDbEMsRUFBRSxJQUFJLENBQUMsSUFBSSxHQUFHQSxPQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBQztBQUNsRCxDQUFDO0FBQ0Q7QUFDQSxTQUFTLFdBQVcsR0FBRztBQUN2QixFQUFFLE9BQU8sT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsR0FBR0EsT0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUztBQUMxRSxDQUFDO0FBQ0Q7QUFDQSxTQUFTLFdBQVcsQ0FBQyxRQUFRLEVBQUU7QUFDL0IsRUFBRSxjQUFjLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBQztBQUN0QyxFQUFFLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFDO0FBQ2xDLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBR0EsT0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUM7QUFDbEQsQ0FBQztBQUNEO0FBQ0EsU0FBUyxVQUFVLEdBQUc7QUFDdEIsRUFBRSxPQUFPLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEdBQUdBLE9BQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVM7QUFDekUsQ0FBQztBQUNEO0FBQ0EsU0FBUyxVQUFVLENBQUMsT0FBTyxFQUFFO0FBQzdCLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUM7QUFDaEMsRUFBRSxVQUFVLENBQUMsSUFBSSxD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Q0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUM7QUFDckMsTUFBTSxPQUFPLEVBQUU7QUFDZixLQUFLO0FBQ0w7QUFDQSxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQztBQUNwQixHQUFHO0FBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QUUsUUFBUTtBQUNWLEVBQUUsS0FBSztBQUNQLEVBQUUsVUFBVTtBQUNaLEVBQUUsSUFBSTtBQUNOLEVBQUUsU0FBUztBQUNYLEVBQUUsUUFBUTtBQUNWLEVBQUUsS0FBSztBQUNQLEVBQUUsS0FBSztBQUNQLEVBQUUsSUFBSTtBQUNOLEVBQUUsSUFBSTtBQUNOLEVBQUUsVUFBVTtBQUNaLEVBQUUsWUFBWTtBQUNkLEVBQUUsUUFBUTtBQUNWLEVBQUUsUUFBUTtBQUNWLEVBQUUsTUFBTTtBQUNSLEVBQUUsT0FBTztBQUNULEVBQUUsVUFBVTtBQUNaLEVBQUUsSUFBSTtBQUNOLEVBQUUsSUFBSTtBQUNOLEVBQUUsSUFBSTtBQUNOLEVBQUUsSUFBSTtBQUNOLEVBQUUsSUFBSTtBQUNOLEVBQUUsSUFBSTtBQUNOLEVBQUUsTUFBTTtBQUNSLEVBQUUsUUFBUTtBQUNWLEVBQUUsSUFBSTtBQUNOLEVBQUUsTUFBTTtBQUNSLEVBQUUsUUFBUTtBQUNWLEVBQUUsUUFBUTtBQUNWLEVBQUUsSUFBSTtBQUNOLEVBQUUsTUFBTTtBQUNSLEVBQUUsTUFBTTtBQUNSLEVBQUUsTUFBTTtBQUNSLEVBQUUsVUFBVTtBQUNaLEVBQUUsS0FBSztBQUNQLEVBQUUsVUFBVTtBQUNaLEVBQUUsSUFBSTtBQUNOLEVBQUUsVUFBVTtBQUNaLEVBQUUsUUFBUTtBQUNWLEVBQUUsR0FBRztBQUNMLEVBQUUsT0FBTztBQUNULEVBQUUsU0FBUztBQUNYLEVBQUUsUUFBUTtBQUNWLEVBQUUsU0FBUztBQUNYLEVBQUUsT0FBTztBQUNULEVBQUUsT0FBTztBQUNULEVBQUUsSUFBSTtBQUNOLEVBQUUsT0FBTztBQUNULEVBQUUsSUFBSTtBQUNOLEVBQUUsT0FBTztBQUNULEVBQUUsT0FBTztBQUNULEVBQUUsSUFBSTtBQUNOLEVBQUUsT0FBTztBQUNULEVBQUUsSUFBSTtBQUNOOztBQ2hFQTtBQUNBLGdCQUFjLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE9BQU87O0FDRDFDLGNBQWdCLEdBQUcsYUFBWTtBQUMvQixhQUFpQixHQUFH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Q0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSztBQUMzQyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBQztBQUM3RCxHQUFHO0FBQ0g7QUFDQSxFQUFFLFNBQVMsbUJBQW1CLEdBQUc7QUFDakMsSUFBSSxPQUFPLENBQUMsOEJBQThCLEVBQUM7QUFDM0MsR0FBRztBQUNIO0FBQ0EsRUFBRSxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7QUFDOUIsSUFBSSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVE7QUFDN0QsSUFBSSxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7QUFDNUM7QUFDQSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7QUFDdkM7QUFDQSxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUU7QUFDbkIsTUFBTSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUM7QUFDakQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFDO0FBQzNELEtBQUs7QUFDTDtBQUNBLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFDO0FBQ3pCLEdBQUc7QUFDSDtBQUNBLEVBQUUsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFO0FBQzdCLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUU7QUFDL0IsSUFBSSxJQUFJLENB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UUFBUSxFQUFFQSxNQUFJO0FBQ2hCLEVBQUM7QUFDRDtBQUNBLFNBQVMsVUFBVSxDQUFDLEtBQUssRUFBRTtBQUMzQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUM7QUFDdkUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUM7QUFDL0IsQ0FBQztBQUNEO0FBQ0EsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFO0FBQzFCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUM7QUFDbEIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBQztBQUN6QixDQUFDO0FBQ0Q7QUFDQSxTQUFTLFFBQVEsQ0FBQyxLQUFLLEVBQUU7QUFDekIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFDO0FBQ3JELENBQUM7QUFDRDtBQUNBLFNBQVNBLE1BQUksQ0FBQyxLQUFLLEVBQUU7QUFDckIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBQztBQUNsQixDQUFDO0FBQ0Q7QUFDQSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFDMUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFDO0FBQ3RELENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxTQUFTLFlBQVksQ0FBQyxLQUFLLEVBQUU7QUFDN0IsRUFBRSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFFO0FBQzNCO0FBQ0EsRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDL0IsSUFBSSxLQUFLLEdB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Q0FBQyxJQUFJLEVBQUU7QUFDckMsTUFBTSxNQUFNLEdBQUdBLE9BQUssQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFDO0FBQ3JDLE1BQU0sT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQzFCLEtBQUs7QUFDTDtBQUNBLElBQUksU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFO0FBQzdCLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO0FBQ3RFLFFBQVEsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQzVCLE9BQU87QUFDUDtBQUNBLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUM7QUFDOUIsTUFBTSxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7QUFDM0IsS0FBSztBQUNMO0FBQ0EsSUFBSSxTQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUU7QUFDNUIsTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDdEUsUUFBUSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQztBQUMvQixRQUFRLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQztBQUM1QixPQUFPO0FBQ1A7QUFDQSxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDO0FBQzNCLE1BQU0sT0FBTyxRQUFRO0FBQ3JCLEtBQUs7QUFDTDtBQUNBLElBQUksU0FBUyxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQzNCO0FBQ0EsTUFBTSxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7QUFDekIsUUFBUSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDeEIsT0FBTztBQUNQO0FBQ0E7QUFDQSxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFDO0FB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
